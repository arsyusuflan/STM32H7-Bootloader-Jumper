
abinolurcalis_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec4  08006ec4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ecc  08006ecc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  08006ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  24000094  08006f68  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000220  08006f68  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023acb  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fc  00000000  00000000  00043b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00047090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  00048390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040881  00000000  00000000  00049598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017add  00000000  00000000  00089e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a83fc  00000000  00000000  000a18f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00249cf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054fc  00000000  00000000  00249d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006e38 	.word	0x08006e38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	08006e38 	.word	0x08006e38

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c8:	bf00      	nop
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <main+0xdc>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <main+0x24>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dcf4      	bgt.n	80007ca <main+0xe>
  if ( timeout < 0 )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da01      	bge.n	80007ea <main+0x2e>
  {
  Error_Handler();
 80007e6:	f000 fafb 	bl	8000de0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fce3 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f85d 	bl	80008ac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007f2:	f000 f8e7 	bl	80009c4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <main+0xdc>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a26      	ldr	r2, [pc, #152]	; (8000898 <main+0xdc>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <main+0xdc>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 f823 	bl	8001860 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 f839 	bl	8001894 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <main+0xdc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x84>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6e>
if ( timeout < 0 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8e>
{
Error_Handler();
 8000846:	f000 facb 	bl	8000de0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa59 	bl	8000d00 <MX_GPIO_Init>
  MX_UART8_Init();
 800084e:	f000 fa0b 	bl	8000c68 <MX_UART8_Init>
  MX_RTC_Init();
 8000852:	f000 f8e3 	bl	8000a1c <MX_RTC_Init>
  MX_TIM8_Init();
 8000856:	f000 f92f 	bl	8000ab8 <MX_TIM8_Init>
  MX_TIM13_Init();
 800085a:	f000 f9bd 	bl	8000bd8 <MX_TIM13_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  x++;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <main+0xe0>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <main+0xe0>)
 8000868:	801a      	strh	r2, [r3, #0]
	  sprintf(data,"\f %d \n\r", x);
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <main+0xe0>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	490b      	ldr	r1, [pc, #44]	; (80008a0 <main+0xe4>)
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <main+0xe8>)
 8000874:	f005 feb2 	bl	80065dc <siprintf>
	  HAL_UART_Transmit(&huart8, (uint8_t*)data, strlen(data),1000);
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <main+0xe8>)
 800087a:	f7ff fd31 	bl	80002e0 <strlen>
 800087e:	4603      	mov	r3, r0
 8000880:	b29a      	uxth	r2, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	4907      	ldr	r1, [pc, #28]	; (80008a4 <main+0xe8>)
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <main+0xec>)
 800088a:	f004 fdc7 	bl	800541c <HAL_UART_Transmit>
	  HAL_Delay (1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 fd21 	bl	80012d8 <HAL_Delay>
  {
 8000896:	e7e2      	b.n	800085e <main+0xa2>
 8000898:	58024400 	.word	0x58024400
 800089c:	240000b0 	.word	0x240000b0
 80008a0:	08006e50 	.word	0x08006e50
 80008a4:	24000008 	.word	0x24000008
 80008a8:	2400017c 	.word	0x2400017c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fe86 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 fe80 	bl	80065cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f000 fff5 	bl	80018bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <SystemClock_Config+0x10c>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	4a37      	ldr	r2, [pc, #220]	; (80009b8 <SystemClock_Config+0x10c>)
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <SystemClock_Config+0x10c>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <SystemClock_Config+0x110>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f4:	4a31      	ldr	r2, [pc, #196]	; (80009bc <SystemClock_Config+0x110>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <SystemClock_Config+0x110>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000908:	bf00      	nop
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <SystemClock_Config+0x110>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000916:	d1f8      	bne.n	800090a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <SystemClock_Config+0x114>)
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f023 0303 	bic.w	r3, r3, #3
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <SystemClock_Config+0x114>)
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000928:	230b      	movs	r3, #11
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000932:	2301      	movs	r3, #1
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800094a:	230c      	movs	r3, #12
 800094c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000952:	2303      	movs	r3, #3
 8000954:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800095a:	230c      	movs	r3, #12
 800095c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800095e:	2302      	movs	r3, #2
 8000960:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f800 	bl	8001970 <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000976:	f000 fa33 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	233f      	movs	r3, #63	; 0x3f
 800097c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2101      	movs	r1, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fc11 	bl	80021c8 <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80009ac:	f000 fa18 	bl	8000de0 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3770      	adds	r7, #112	; 0x70
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58000400 	.word	0x58000400
 80009bc:	58024800 	.word	0x58024800
 80009c0:	58024400 	.word	0x58024400

080009c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b0      	sub	sp, #192	; 0xc0
 80009c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	22c0      	movs	r2, #192	; 0xc0
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f005 fdfb 	bl	80065cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009e0:	230c      	movs	r3, #12
 80009e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009f0:	23c0      	movs	r3, #192	; 0xc0
 80009f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009f4:	2320      	movs	r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 ff6b 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000a10:	f000 f9e6 	bl	8000de0 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	37c0      	adds	r7, #192	; 0xc0
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2228      	movs	r2, #40	; 0x28
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 fdcf 	bl	80065cc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a30:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <MX_RTC_Init+0x98>)
 8000a32:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a3c:	227f      	movs	r2, #127	; 0x7f
 8000a3e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a5e:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a60:	f003 fad0 	bl	8004004 <HAL_RTC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f9b9 	bl	8000de0 <Error_Handler>
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_RTC_Init+0x94>)
 8000a98:	f003 fbc4 	bl	8004224 <HAL_RTCEx_SetTamper>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000aa2:	f000 f99d 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000158 	.word	0x24000158
 8000ab4:	58004000 	.word	0x58004000

08000ab8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	222c      	movs	r2, #44	; 0x2c
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 fd71 	bl	80065cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000aea:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000aec:	4a39      	ldr	r2, [pc, #228]	; (8000bd4 <MX_TIM8_Init+0x11c>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000b16:	482e      	ldr	r0, [pc, #184]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000b18:	f003 fcbb 	bl	8004492 <HAL_TIM_OC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 f95d 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b36:	4619      	mov	r1, r3
 8000b38:	4825      	ldr	r0, [pc, #148]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000b3a:	f004 fb13 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000b44:	f000 f94c 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000b6e:	f003 fd49 	bl	8004604 <HAL_TIM_OC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b78:	f000 f932 	bl	8000de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000bb2:	f004 fb65 	bl	8005280 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000bbc:	f000 f910 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM8_Init+0x118>)
 8000bc2:	f000 f9cd 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000bc6:	bf00      	nop
 8000bc8:	3758      	adds	r7, #88	; 0x58
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	240000c0 	.word	0x240000c0
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <MX_TIM13_Init+0x8c>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c02:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000c12:	f003 fbe7 	bl	80043e4 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8000c1c:	f000 f8e0 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000c22:	f003 fc8d 	bl	8004540 <HAL_TIM_IC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f8d8 	bl	8000de0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_TIM13_Init+0x88>)
 8000c48:	f003 fd56 	bl	80046f8 <HAL_TIM_IC_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f000 f8c5 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2400010c 	.word	0x2400010c
 8000c64:	40001c00 	.word	0x40001c00

08000c68 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <MX_UART8_Init+0x94>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c78:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000cb2:	f004 fb63 	bl	800537c <HAL_UART_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f000 f890 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000cc4:	f005 fb8e 	bl	80063e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f000 f887 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000cd6:	f005 fbc3 	bl	8006460 <HAL_UARTEx_SetRxFifoThreshold>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f000 f87e 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_UART8_Init+0x90>)
 8000ce6:	f005 fb44 	bl	8006372 <HAL_UARTEx_DisableFifoMode>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f000 f876 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2400017c 	.word	0x2400017c
 8000cfc:	40007c00 	.word	0x40007c00

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_GPIO_Init+0xdc>)
 8000dca:	f000 fb99 	bl	8001500 <HAL_GPIO_Init>

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020000 	.word	0x58020000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  __disable_irq();
 // while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_MspInit+0x30>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x30>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58024400 	.word	0x58024400

08000e28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b2      	sub	sp, #200	; 0xc8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 fbc7 	bl	80065cc <memset>
  if(hrtc->Instance==RTC)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_RTC_MspInit+0x58>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d116      	bne.n	8000e76 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e4c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fd40 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e66:	f7ff ffbb 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_RTC_MspInit+0x5c>)
 8000e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_RTC_MspInit+0x5c>)
 8000e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e74:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	37c8      	adds	r7, #200	; 0xc8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	58004000 	.word	0x58004000
 8000e84:	58024400 	.word	0x58024400

08000e88 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <HAL_TIM_OC_MspInit+0x3c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10e      	bne.n	8000eb8 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_TIM_OC_MspInit+0x40>)
 8000e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <HAL_TIM_OC_MspInit+0x40>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_TIM_OC_MspInit+0x40>)
 8000eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40010400 	.word	0x40010400
 8000ec8:	58024400 	.word	0x58024400

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <HAL_TIM_Base_MspInit+0x88>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12e      	bne.n	8000f4c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_TIM_Base_MspInit+0x8c>)
 8000ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_TIM_Base_MspInit+0x8c>)
 8000ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_Base_MspInit+0x8c>)
 8000f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_TIM_Base_MspInit+0x8c>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <HAL_TIM_Base_MspInit+0x8c>)
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_TIM_Base_MspInit+0x8c>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_TIM_Base_MspInit+0x90>)
 8000f48:	f000 fada 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40001c00 	.word	0x40001c00
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58021400 	.word	0x58021400

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_TIM_MspPostInit+0x68>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11e      	bne.n	8000fc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <HAL_TIM_MspPostInit+0x6c>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_TIM_MspPostInit+0x6c>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_TIM_MspPostInit+0x70>)
 8000fbc:	f000 faa0 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40010400 	.word	0x40010400
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58022400 	.word	0x58022400

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	; 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	22c0      	movs	r2, #192	; 0xc0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 fae9 	bl	80065cc <memset>
  if(huart->Instance==UART8)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_UART_MspInit+0xc0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d142      	bne.n	800108a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fc64 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff fedf 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_UART_MspInit+0xc4>)
 800102a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800102e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800105e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001078:	2308      	movs	r3, #8
 800107a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800107e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_UART_MspInit+0xc8>)
 8001086:	f000 fa3b 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	37e8      	adds	r7, #232	; 0xe8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40007c00 	.word	0x40007c00
 8001098:	58024400 	.word	0x58024400
 800109c:	58022400 	.word	0x58022400

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f8d4 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f005 fa28 	bl	8006578 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24080000 	.word	0x24080000
 8001154:	00000400 	.word	0x00000400
 8001158:	240000b4 	.word	0x240000b4
 800115c:	24000220 	.word	0x24000220

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff fa90 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f005 f9f9 	bl	8006584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb13 	bl	80007bc <main>
  bx  lr
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800119c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a0:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80011a4:	08006ed4 	.word	0x08006ed4
  ldr r2, =_sbss
 80011a8:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 80011ac:	24000220 	.word	0x24000220

080011b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC3_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f96e 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011c0:	f001 f9b8 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_Init+0x68>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	4913      	ldr	r1, [pc, #76]	; (8001220 <HAL_Init+0x6c>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_Init+0x68>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_Init+0x6c>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_Init+0x70>)
 80011f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_Init+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f814 	bl	800122c <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e002      	b.n	8001214 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800120e:	f7ff fdf1 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	08006e58 	.word	0x08006e58
 8001224:	24000004 	.word	0x24000004
 8001228:	24000000 	.word	0x24000000

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e021      	b.n	8001284 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_InitTick+0x64>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_InitTick+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f945 	bl	80014e6 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f91d 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x68>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2400002c 	.word	0x2400002c
 8001290:	24000000 	.word	0x24000000
 8001294:	24000028 	.word	0x24000028

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	2400002c 	.word	0x2400002c
 80012bc:	2400020c 	.word	0x2400020c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2400020c 	.word	0x2400020c

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2400002c 	.word	0x2400002c

08001320 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetREVID+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0c1b      	lsrs	r3, r3, #16
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	5c001000 	.word	0x5c001000

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <__NVIC_SetPriorityGrouping+0x40>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	4313      	orrs	r3, r2
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x40>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	05fa0000 	.word	0x05fa0000

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff47 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff5e 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff90 	bl	80013f0 <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5f 	bl	800139c <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffb2 	bl	8001458 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800150e:	4b89      	ldr	r3, [pc, #548]	; (8001734 <HAL_GPIO_Init+0x234>)
 8001510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001512:	e194      	b.n	800183e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2101      	movs	r1, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8186 	beq.w	8001838 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d005      	beq.n	8001544 <HAL_GPIO_Init+0x44>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d130      	bne.n	80015a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157a:	2201      	movs	r2, #1
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 0201 	and.w	r2, r3, #1
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d017      	beq.n	80015e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d123      	bne.n	8001636 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	69b9      	ldr	r1, [r7, #24]
 8001632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0203 	and.w	r2, r3, #3
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80e0 	beq.w	8001838 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_GPIO_Init+0x238>)
 800167a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800167e:	4a2e      	ldr	r2, [pc, #184]	; (8001738 <HAL_GPIO_Init+0x238>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_GPIO_Init+0x238>)
 800168a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <HAL_GPIO_Init+0x23c>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a20      	ldr	r2, [pc, #128]	; (8001740 <HAL_GPIO_Init+0x240>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d052      	beq.n	8001768 <HAL_GPIO_Init+0x268>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_GPIO_Init+0x244>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d031      	beq.n	800172e <HAL_GPIO_Init+0x22e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_GPIO_Init+0x248>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x22a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_GPIO_Init+0x24c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x226>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_GPIO_Init+0x250>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x222>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <HAL_GPIO_Init+0x254>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x21e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x258>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x21a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_GPIO_Init+0x25c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x216>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_GPIO_Init+0x260>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x212>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_GPIO_Init+0x264>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x20e>
 800170a:	2309      	movs	r3, #9
 800170c:	e02d      	b.n	800176a <HAL_GPIO_Init+0x26a>
 800170e:	230a      	movs	r3, #10
 8001710:	e02b      	b.n	800176a <HAL_GPIO_Init+0x26a>
 8001712:	2308      	movs	r3, #8
 8001714:	e029      	b.n	800176a <HAL_GPIO_Init+0x26a>
 8001716:	2307      	movs	r3, #7
 8001718:	e027      	b.n	800176a <HAL_GPIO_Init+0x26a>
 800171a:	2306      	movs	r3, #6
 800171c:	e025      	b.n	800176a <HAL_GPIO_Init+0x26a>
 800171e:	2305      	movs	r3, #5
 8001720:	e023      	b.n	800176a <HAL_GPIO_Init+0x26a>
 8001722:	2304      	movs	r3, #4
 8001724:	e021      	b.n	800176a <HAL_GPIO_Init+0x26a>
 8001726:	2303      	movs	r3, #3
 8001728:	e01f      	b.n	800176a <HAL_GPIO_Init+0x26a>
 800172a:	2302      	movs	r3, #2
 800172c:	e01d      	b.n	800176a <HAL_GPIO_Init+0x26a>
 800172e:	2301      	movs	r3, #1
 8001730:	e01b      	b.n	800176a <HAL_GPIO_Init+0x26a>
 8001732:	bf00      	nop
 8001734:	58000080 	.word	0x58000080
 8001738:	58024400 	.word	0x58024400
 800173c:	58000400 	.word	0x58000400
 8001740:	58020000 	.word	0x58020000
 8001744:	58020400 	.word	0x58020400
 8001748:	58020800 	.word	0x58020800
 800174c:	58020c00 	.word	0x58020c00
 8001750:	58021000 	.word	0x58021000
 8001754:	58021400 	.word	0x58021400
 8001758:	58021800 	.word	0x58021800
 800175c:	58021c00 	.word	0x58021c00
 8001760:	58022000 	.word	0x58022000
 8001764:	58022400 	.word	0x58022400
 8001768:	2300      	movs	r3, #0
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177a:	4938      	ldr	r1, [pc, #224]	; (800185c <HAL_GPIO_Init+0x35c>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	f47f ae63 	bne.w	8001514 <HAL_GPIO_Init+0x14>
  }
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3724      	adds	r7, #36	; 0x24
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	58000400 	.word	0x58000400

08001860 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_HSEM_FastTake+0x2c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3320      	adds	r3, #32
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_HSEM_FastTake+0x30>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	58026400 	.word	0x58026400
 8001890:	80000300 	.word	0x80000300

08001894 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800189e:	4906      	ldr	r1, [pc, #24]	; (80018b8 <HAL_HSEM_Release+0x24>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	58026400 	.word	0x58026400

080018bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	2b06      	cmp	r3, #6
 80018ce:	d00a      	beq.n	80018e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e040      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e03e      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018ee:	491f      	ldr	r1, [pc, #124]	; (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018f6:	f7ff fce3 	bl	80012c0 <HAL_GetTick>
 80018fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018fc:	e009      	b.n	8001912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018fe:	f7ff fcdf 	bl	80012c0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800190c:	d901      	bls.n	8001912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e028      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	d1ee      	bne.n	80018fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b1e      	cmp	r3, #30
 8001924:	d008      	beq.n	8001938 <HAL_PWREx_ConfigSupply+0x7c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b2e      	cmp	r3, #46	; 0x2e
 800192a:	d005      	beq.n	8001938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b1d      	cmp	r3, #29
 8001930:	d002      	beq.n	8001938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b2d      	cmp	r3, #45	; 0x2d
 8001936:	d114      	bne.n	8001962 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001938:	f7ff fcc2 	bl	80012c0 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800193e:	e009      	b.n	8001954 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001940:	f7ff fcbe 	bl	80012c0 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800194e:	d901      	bls.n	8001954 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e007      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d1ee      	bne.n	8001940 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58024800 	.word	0x58024800

08001970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	f000 bc1c 	b.w	80021bc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8087 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001992:	4b9e      	ldr	r3, [pc, #632]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800199c:	4b9b      	ldr	r3, [pc, #620]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	2b10      	cmp	r3, #16
 80019a6:	d007      	beq.n	80019b8 <HAL_RCC_OscConfig+0x48>
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	2b18      	cmp	r3, #24
 80019ac:	d110      	bne.n	80019d0 <HAL_RCC_OscConfig+0x60>
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b94      	ldr	r3, [pc, #592]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d06c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x12e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d168      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e3f5      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x78>
 80019da:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a8b      	ldr	r2, [pc, #556]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e02e      	b.n	8001a46 <HAL_RCC_OscConfig+0xd6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x9a>
 80019f0:	4b86      	ldr	r3, [pc, #536]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a85      	ldr	r2, [pc, #532]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a82      	ldr	r2, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e01d      	b.n	8001a46 <HAL_RCC_OscConfig+0xd6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0xbe>
 8001a14:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a7c      	ldr	r2, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a79      	ldr	r2, [pc, #484]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0xd6>
 8001a2e:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a76      	ldr	r2, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a73      	ldr	r2, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d013      	beq.n	8001a76 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc37 	bl	80012c0 <HAL_GetTick>
 8001a52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a56:	f7ff fc33 	bl	80012c0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e3a9      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0xe6>
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fc23 	bl	80012c0 <HAL_GetTick>
 8001a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fc1f 	bl	80012c0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e395      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a90:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x10e>
 8001a9c:	e000      	b.n	8001aa0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80ca 	beq.w	8001c42 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab8:	4b54      	ldr	r3, [pc, #336]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x164>
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2b18      	cmp	r3, #24
 8001ac8:	d156      	bne.n	8001b78 <HAL_RCC_OscConfig+0x208>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d151      	bne.n	8001b78 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_OscConfig+0x17c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e367      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aec:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 0219 	bic.w	r2, r3, #25
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4944      	ldr	r1, [pc, #272]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001afe:	f7ff fbdf 	bl	80012c0 <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fbdb 	bl	80012c0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e351      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	f7ff fbfc 	bl	8001320 <HAL_GetREVID>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d817      	bhi.n	8001b62 <HAL_RCC_OscConfig+0x1f2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1dc>
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4a:	e07a      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	031b      	lsls	r3, r3, #12
 8001b5a:	492c      	ldr	r1, [pc, #176]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b60:	e06f      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	4926      	ldr	r1, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b76:	e064      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d047      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 0219 	bic.w	r2, r3, #25
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	491f      	ldr	r1, [pc, #124]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fb95 	bl	80012c0 <HAL_GetTick>
 8001b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fb91 	bl	80012c0 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e307      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	f7ff fbb2 	bl	8001320 <HAL_GetREVID>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d817      	bhi.n	8001bf6 <HAL_RCC_OscConfig+0x286>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x270>
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6053      	str	r3, [r2, #4]
 8001bde:	e030      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	031b      	lsls	r3, r3, #12
 8001bee:	4907      	ldr	r1, [pc, #28]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e025      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	4901      	ldr	r1, [pc, #4]	; (8001c0c <HAL_RCC_OscConfig+0x29c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e01a      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
 8001c0c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c10:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a9d      	ldr	r2, [pc, #628]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb50 	bl	80012c0 <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff fb4c 	bl	80012c0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e2c2      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c36:	4b95      	ldr	r3, [pc, #596]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a9 	beq.w	8001da2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c50:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c58:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c5a:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d007      	beq.n	8001c76 <HAL_RCC_OscConfig+0x306>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b18      	cmp	r3, #24
 8001c6a:	d13a      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x372>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d135      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c76:	4b85      	ldr	r3, [pc, #532]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x31e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e296      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8e:	f7ff fb47 	bl	8001320 <HAL_GetREVID>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d817      	bhi.n	8001ccc <HAL_RCC_OscConfig+0x35c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d108      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x346>
 8001ca4:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cac:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cb2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cb4:	e075      	b.n	8001da2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb6:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	4971      	ldr	r1, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cca:	e06a      	b.n	8001da2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	496c      	ldr	r1, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ce0:	e05f      	b.n	8001da2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d042      	beq.n	8001d70 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cea:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fae3 	bl	80012c0 <HAL_GetTick>
 8001cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fadf 	bl	80012c0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e255      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d1c:	f7ff fb00 	bl	8001320 <HAL_GetREVID>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d817      	bhi.n	8001d5a <HAL_RCC_OscConfig+0x3ea>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d108      	bne.n	8001d44 <HAL_RCC_OscConfig+0x3d4>
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d3a:	4a54      	ldr	r2, [pc, #336]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d40:	6053      	str	r3, [r2, #4]
 8001d42:	e02e      	b.n	8001da2 <HAL_RCC_OscConfig+0x432>
 8001d44:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	069b      	lsls	r3, r3, #26
 8001d52:	494e      	ldr	r1, [pc, #312]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e023      	b.n	8001da2 <HAL_RCC_OscConfig+0x432>
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	061b      	lsls	r3, r3, #24
 8001d68:	4948      	ldr	r1, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60cb      	str	r3, [r1, #12]
 8001d6e:	e018      	b.n	8001da2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a45      	ldr	r2, [pc, #276]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff faa0 	bl	80012c0 <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d84:	f7ff fa9c 	bl	80012c0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e212      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d036      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d019      	beq.n	8001dea <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dba:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fa7d 	bl	80012c0 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa79 	bl	80012c0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1ef      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x45a>
 8001de8:	e018      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dee:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff fa63 	bl	80012c0 <HAL_GetTick>
 8001dfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fa5f 	bl	80012c0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e1d5      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d039      	beq.n	8001e9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d019      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fa40 	bl	80012c0 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e44:	f7ff fa3c 	bl	80012c0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1b2      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4d4>
 8001e62:	e01b      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x51c>)
 8001e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa26 	bl	80012c0 <HAL_GetTick>
 8001e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e78:	f7ff fa22 	bl	80012c0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d904      	bls.n	8001e90 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e198      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e90:	4ba3      	ldr	r3, [pc, #652]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ed      	bne.n	8001e78 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8081 	beq.w	8001fac <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001eaa:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCC_OscConfig+0x7b4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a9d      	ldr	r2, [pc, #628]	; (8002124 <HAL_RCC_OscConfig+0x7b4>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb6:	f7ff fa03 	bl	80012c0 <HAL_GetTick>
 8001eba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff f9ff 	bl	80012c0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e175      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed0:	4b94      	ldr	r3, [pc, #592]	; (8002124 <HAL_RCC_OscConfig+0x7b4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x582>
 8001ee4:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a8d      	ldr	r2, [pc, #564]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_OscConfig+0x5de>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5a4>
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a88      	ldr	r2, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b86      	ldr	r3, [pc, #536]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a85      	ldr	r2, [pc, #532]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x5de>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5c6>
 8001f1c:	4b80      	ldr	r3, [pc, #512]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a7f      	ldr	r2, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x5de>
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a79      	ldr	r2, [pc, #484]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	4b77      	ldr	r3, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a76      	ldr	r2, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f9b3 	bl	80012c0 <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f9af 	bl	80012c0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e123      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x5ee>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f99d 	bl	80012c0 <HAL_GetTick>
 8001f86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff f999 	bl	80012c0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e10d      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fa0:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8102 	beq.w	80021ba <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fbe:	2b18      	cmp	r3, #24
 8001fc0:	f000 80bd 	beq.w	800213e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	f040 8095 	bne.w	80020f8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b54      	ldr	r3, [pc, #336]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a53      	ldr	r2, [pc, #332]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f971 	bl	80012c0 <HAL_GetTick>
 8001fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff f96d 	bl	80012c0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0e3      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002004:	4b48      	ldr	r3, [pc, #288]	; (8002128 <HAL_RCC_OscConfig+0x7b8>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	430a      	orrs	r2, r1
 8002014:	4942      	ldr	r1, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002016:	4313      	orrs	r3, r2
 8002018:	628b      	str	r3, [r1, #40]	; 0x28
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	3b01      	subs	r3, #1
 8002020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	3b01      	subs	r3, #1
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	b29b      	uxth	r3, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	3b01      	subs	r3, #1
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	3b01      	subs	r3, #1
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800204a:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 800205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_RCC_OscConfig+0x7bc>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002068:	00d2      	lsls	r2, r2, #3
 800206a:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 800206c:	4313      	orrs	r3, r2
 800206e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	f023 020c 	bic.w	r2, r3, #12
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4928      	ldr	r1, [pc, #160]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 800207e:	4313      	orrs	r3, r2
 8002080:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f023 0202 	bic.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4924      	ldr	r1, [pc, #144]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	4a18      	ldr	r2, [pc, #96]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff f8f6 	bl	80012c0 <HAL_GetTick>
 80020d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f8f2 	bl	80012c0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e068      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x768>
 80020f6:	e060      	b.n	80021ba <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f8dc 	bl	80012c0 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800210a:	e011      	b.n	8002130 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f8d8 	bl	80012c0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d90a      	bls.n	8002130 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04e      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
 800211e:	bf00      	nop
 8002120:	58024400 	.word	0x58024400
 8002124:	58024800 	.word	0x58024800
 8002128:	fffffc0c 	.word	0xfffffc0c
 800212c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_OscConfig+0x854>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e7      	bne.n	800210c <HAL_RCC_OscConfig+0x79c>
 800213c:	e03d      	b.n	80021ba <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x854>)
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_RCC_OscConfig+0x854>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b01      	cmp	r3, #1
 8002150:	d031      	beq.n	80021b6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d12a      	bne.n	80021b6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d122      	bne.n	80021b6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d11a      	bne.n	80021b6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0a5b      	lsrs	r3, r3, #9
 8002184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d111      	bne.n	80021b6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d108      	bne.n	80021b6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	0e1b      	lsrs	r3, r3, #24
 80021a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	58024400 	.word	0x58024400

080021c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e19c      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b87      	ldr	r3, [pc, #540]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 020f 	bic.w	r2, r3, #15
 80021f2:	4985      	ldr	r1, [pc, #532]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e184      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d010      	beq.n	800223a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002224:	429a      	cmp	r2, r3
 8002226:	d908      	bls.n	800223a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002228:	4b78      	ldr	r3, [pc, #480]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	4975      	ldr	r1, [pc, #468]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002236:	4313      	orrs	r3, r2
 8002238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	4b70      	ldr	r3, [pc, #448]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002252:	429a      	cmp	r2, r3
 8002254:	d908      	bls.n	8002268 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002256:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	496a      	ldr	r1, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002264:	4313      	orrs	r3, r2
 8002266:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002280:	429a      	cmp	r2, r3
 8002282:	d908      	bls.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002284:	4b61      	ldr	r3, [pc, #388]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	495e      	ldr	r1, [pc, #376]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002292:	4313      	orrs	r3, r2
 8002294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d010      	beq.n	80022c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022b2:	4b56      	ldr	r3, [pc, #344]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4953      	ldr	r1, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	429a      	cmp	r2, r3
 80022de:	d908      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f023 020f 	bic.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4947      	ldr	r1, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d055      	beq.n	80023aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4940      	ldr	r1, [pc, #256]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d107      	bne.n	8002328 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d121      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0f6      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d115      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0ea      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0de      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d6      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f023 0207 	bic.w	r2, r3, #7
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4925      	ldr	r1, [pc, #148]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002376:	4313      	orrs	r3, r2
 8002378:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe ffa1 	bl	80012c0 <HAL_GetTick>
 800237e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002380:	e00a      	b.n	8002398 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002382:	f7fe ff9d 	bl	80012c0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0be      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d1eb      	bne.n	8002382 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d208      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d214      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	4906      	ldr	r1, [pc, #24]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e086      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
 8002408:	52002000 	.word	0x52002000
 800240c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002428:	429a      	cmp	r2, r3
 800242a:	d208      	bcs.n	800243e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4939      	ldr	r1, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800243a:	4313      	orrs	r3, r2
 800243c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002456:	429a      	cmp	r2, r3
 8002458:	d208      	bcs.n	800246c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	492e      	ldr	r1, [pc, #184]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002484:	429a      	cmp	r2, r3
 8002486:	d208      	bcs.n	800249a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4922      	ldr	r1, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002496:	4313      	orrs	r3, r2
 8002498:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d010      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d208      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4917      	ldr	r1, [pc, #92]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024c8:	f000 f834 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4912      	ldr	r1, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x35c>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_RCC_ClockConfig+0x35c>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x360>)
 80024fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x364>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x368>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fe8e 	bl	800122c <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
 8002524:	08006e58 	.word	0x08006e58
 8002528:	24000004 	.word	0x24000004
 800252c:	24000000 	.word	0x24000000
 8002530:	24000028 	.word	0x24000028

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4bb3      	ldr	r3, [pc, #716]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002542:	2b18      	cmp	r3, #24
 8002544:	f200 8155 	bhi.w	80027f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_RCC_GetSysClockFreq+0x1c>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	080025b5 	.word	0x080025b5
 8002554:	080027f3 	.word	0x080027f3
 8002558:	080027f3 	.word	0x080027f3
 800255c:	080027f3 	.word	0x080027f3
 8002560:	080027f3 	.word	0x080027f3
 8002564:	080027f3 	.word	0x080027f3
 8002568:	080027f3 	.word	0x080027f3
 800256c:	080027f3 	.word	0x080027f3
 8002570:	080025db 	.word	0x080025db
 8002574:	080027f3 	.word	0x080027f3
 8002578:	080027f3 	.word	0x080027f3
 800257c:	080027f3 	.word	0x080027f3
 8002580:	080027f3 	.word	0x080027f3
 8002584:	080027f3 	.word	0x080027f3
 8002588:	080027f3 	.word	0x080027f3
 800258c:	080027f3 	.word	0x080027f3
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080027f3 	.word	0x080027f3
 8002598:	080027f3 	.word	0x080027f3
 800259c:	080027f3 	.word	0x080027f3
 80025a0:	080027f3 	.word	0x080027f3
 80025a4:	080027f3 	.word	0x080027f3
 80025a8:	080027f3 	.word	0x080027f3
 80025ac:	080027f3 	.word	0x080027f3
 80025b0:	080025e7 	.word	0x080025e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025b4:	4b94      	ldr	r3, [pc, #592]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025c0:	4b91      	ldr	r3, [pc, #580]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	4a90      	ldr	r2, [pc, #576]	; (800280c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80025d2:	e111      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025d4:	4b8d      	ldr	r3, [pc, #564]	; (800280c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025d6:	61bb      	str	r3, [r7, #24]
    break;
 80025d8:	e10e      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025da:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025dc:	61bb      	str	r3, [r7, #24]
    break;
 80025de:	e10b      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025e2:	61bb      	str	r3, [r7, #24]
    break;
 80025e4:	e108      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025e6:	4b88      	ldr	r3, [pc, #544]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80025f0:	4b85      	ldr	r3, [pc, #532]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025fc:	4b82      	ldr	r3, [pc, #520]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002606:	4b80      	ldr	r3, [pc, #512]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	08db      	lsrs	r3, r3, #3
 800260c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80e1 	beq.w	80027ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b02      	cmp	r3, #2
 800262e:	f000 8083 	beq.w	8002738 <HAL_RCC_GetSysClockFreq+0x204>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b02      	cmp	r3, #2
 8002636:	f200 80a1 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x248>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x114>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d056      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002646:	e099      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002648:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02d      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002654:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800267e:	4b62      	ldr	r3, [pc, #392]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800268e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002692:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026ae:	e087      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800281c <HAL_RCC_GetSysClockFreq+0x2e8>
 80026be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026f2:	e065      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002820 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002716:	ed97 6a02 	vldr	s12, [r7, #8]
 800271a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 800271e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002736:	e043      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002742:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002824 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275a:	ed97 6a02 	vldr	s12, [r7, #8]
 800275e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800276e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800277a:	e021      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002820 <HAL_RCC_GetSysClockFreq+0x2ec>
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279e:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	0a5b      	lsrs	r3, r3, #9
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	3301      	adds	r3, #1
 80027cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80027dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e4:	ee17 3a90 	vmov	r3, s15
 80027e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80027ea:	e005      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027f4:	61bb      	str	r3, [r7, #24]
    break;
 80027f6:	bf00      	nop
  }

  return sysclockfreq;
 80027f8:	69bb      	ldr	r3, [r7, #24]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	58024400 	.word	0x58024400
 800280c:	03d09000 	.word	0x03d09000
 8002810:	003d0900 	.word	0x003d0900
 8002814:	017d7840 	.word	0x017d7840
 8002818:	46000000 	.word	0x46000000
 800281c:	4c742400 	.word	0x4c742400
 8002820:	4a742400 	.word	0x4a742400
 8002824:	4bbebc20 	.word	0x4bbebc20

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800282e:	f7ff fe81 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_GetHCLKFreq+0x50>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490f      	ldr	r1, [pc, #60]	; (800287c <HAL_RCC_GetHCLKFreq+0x54>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_GetHCLKFreq+0x50>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_GetHCLKFreq+0x54>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_RCC_GetHCLKFreq+0x58>)
 8002864:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_GetHCLKFreq+0x58>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	58024400 	.word	0x58024400
 800287c:	08006e58 	.word	0x08006e58
 8002880:	24000004 	.word	0x24000004
 8002884:	24000000 	.word	0x24000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800288c:	f7ff ffcc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4904      	ldr	r1, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	58024400 	.word	0x58024400
 80028b0:	08006e58 	.word	0x08006e58

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028b8:	f7ff ffb6 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4904      	ldr	r1, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	08006e58 	.word	0x08006e58

080028e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03f      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002904:	d02a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800290a:	d824      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800290c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002910:	d018      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002916:	d81e      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800291c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002920:	d007      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002922:	e018      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002924:	4bab      	ldr	r3, [pc, #684]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	4aaa      	ldr	r2, [pc, #680]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800292a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002930:	e015      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f9ff 	bl	8003d3c <RCCEx_PLL2_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002942:	e00c      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3324      	adds	r3, #36	; 0x24
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f001 faa8 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002954:	e003      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
      break;
 800295a:	e000      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800295c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002964:	4b9b      	ldr	r3, [pc, #620]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002970:	4998      	ldr	r1, [pc, #608]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	650b      	str	r3, [r1, #80]	; 0x50
 8002976:	e001      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	2b04      	cmp	r3, #4
 800298e:	d826      	bhi.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029ad 	.word	0x080029ad
 800299c:	080029bb 	.word	0x080029bb
 80029a0:	080029cd 	.word	0x080029cd
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	080029e5 	.word	0x080029e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ac:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4a88      	ldr	r2, [pc, #544]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b8:	e015      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 f9bb 	bl	8003d3c <RCCEx_PLL2_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029ca:	e00c      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3324      	adds	r3, #36	; 0x24
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fa64 	bl	8003ea0 <RCCEx_PLL3_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029dc:	e003      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
      break;
 80029e2:	e000      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ec:	4b79      	ldr	r3, [pc, #484]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	f023 0207 	bic.w	r2, r3, #7
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	4976      	ldr	r1, [pc, #472]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	650b      	str	r3, [r1, #80]	; 0x50
 80029fe:	e001      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d042      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d02b      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d825      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a20:	2bc0      	cmp	r3, #192	; 0xc0
 8002a22:	d028      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a24:	2bc0      	cmp	r3, #192	; 0xc0
 8002a26:	d821      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d016      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d81d      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d007      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a38:	e018      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3a:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a46:	e017      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f974 	bl	8003d3c <RCCEx_PLL2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a58:	e00e      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3324      	adds	r3, #36	; 0x24
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fa1d 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a6a:	e005      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a70:	e002      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a7e:	4b55      	ldr	r3, [pc, #340]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	4952      	ldr	r1, [pc, #328]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	650b      	str	r3, [r1, #80]	; 0x50
 8002a90:	e001      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d049      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aac:	d030      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab2:	d82a      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ab4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ab8:	d02c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002aba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002abe:	d824      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac4:	d018      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aca:	d81e      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ad6:	e018      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4a3d      	ldr	r2, [pc, #244]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ae4:	e017      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f925 	bl	8003d3c <RCCEx_PLL2_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002af6:	e00e      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3324      	adds	r3, #36	; 0x24
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 f9ce 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b08:	e005      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b2a:	492a      	ldr	r1, [pc, #168]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	658b      	str	r3, [r1, #88]	; 0x58
 8002b30:	e001      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04c      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4c:	d030      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b52:	d82a      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b58:	d02c      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002b5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b5e:	d824      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b64:	d018      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6a:	d81e      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b74:	d007      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b76:	e018      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b84:	e017      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 f8d5 	bl	8003d3c <RCCEx_PLL2_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b96:	e00e      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f97e 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba8:	e005      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bca:	4902      	ldr	r1, [pc, #8]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	658b      	str	r3, [r1, #88]	; 0x58
 8002bd0:	e004      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002bd2:	bf00      	nop
 8002bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d032      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d01c      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d817      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d813      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d10f      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c04:	4bb1      	ldr	r3, [pc, #708]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	4ab0      	ldr	r2, [pc, #704]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c10:	e00e      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f88f 	bl	8003d3c <RCCEx_PLL2_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      break;
 8002c28:	e002      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c36:	4ba5      	ldr	r3, [pc, #660]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	49a2      	ldr	r1, [pc, #648]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c48:	e001      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d047      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c62:	d030      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c68:	d82a      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c6e:	d02c      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002c70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c74:	d824      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7a:	d018      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c80:	d81e      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8a:	d007      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002c8c:	e018      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8e:	4b8f      	ldr	r3, [pc, #572]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	4a8e      	ldr	r2, [pc, #568]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c9a:	e017      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f84a 	bl	8003d3c <RCCEx_PLL2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cac:	e00e      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3324      	adds	r3, #36	; 0x24
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f8f3 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cbe:	e005      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cd2:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	497b      	ldr	r1, [pc, #492]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	650b      	str	r3, [r1, #80]	; 0x50
 8002ce4:	e001      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d049      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfe:	d02e      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d828      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0a:	d02a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d10:	d822      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d16:	d026      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d1c:	d81c      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d22:	d010      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d28:	d816      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01d      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d111      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fffe 	bl	8003d3c <RCCEx_PLL2_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d44:	e012      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3324      	adds	r3, #36	; 0x24
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 f8a7 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002d52:	4603      	mov	r3, r0
 8002d54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d56:	e009      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5c:	e006      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7e:	4953      	ldr	r1, [pc, #332]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	650b      	str	r3, [r1, #80]	; 0x50
 8002d84:	e001      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04b      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da0:	d02e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da6:	d828      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d02a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d822      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002db8:	d026      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002dba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dbe:	d81c      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dca:	d816      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01d      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd4:	d111      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 ffad 	bl	8003d3c <RCCEx_PLL2_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002de6:	e012      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3324      	adds	r3, #36	; 0x24
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f856 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002df8:	e009      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfe:	e006      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e00:	bf00      	nop
 8002e02:	e004      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e04:	bf00      	nop
 8002e06:	e002      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e22:	492a      	ldr	r1, [pc, #168]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	658b      	str	r3, [r1, #88]	; 0x58
 8002e28:	e001      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d022      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00e      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d108      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ff74 	bl	8003d3c <RCCEx_PLL2_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002e58:	e003      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e74:	4915      	ldr	r1, [pc, #84]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e7a:	e001      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d031      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e94:	d00e      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9a:	d814      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d017      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002eb2:	e00e      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff3e 	bl	8003d3c <RCCEx_PLL2_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eca:	e002      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002ecc:	58024400 	.word	0x58024400
      break;
 8002ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ed8:	4bbc      	ldr	r3, [pc, #752]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	49b9      	ldr	r1, [pc, #740]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	650b      	str	r3, [r1, #80]	; 0x50
 8002eea:	e001      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d032      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d81b      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002f04:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f43 	.word	0x08002f43
 8002f10:	08002f1d 	.word	0x08002f1d
 8002f14:	08002f2b 	.word	0x08002f2b
 8002f18:	08002f43 	.word	0x08002f43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1c:	4bab      	ldr	r3, [pc, #684]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4aaa      	ldr	r2, [pc, #680]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f28:	e00c      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 ff03 	bl	8003d3c <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f3a:	e003      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f4a:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	499d      	ldr	r1, [pc, #628]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f5c:	e001      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8086 	beq.w	800307c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f70:	4b97      	ldr	r3, [pc, #604]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a96      	ldr	r2, [pc, #600]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f9a0 	bl	80012c0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f82:	e009      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f84:	f7fe f99c 	bl	80012c0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d902      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	75fb      	strb	r3, [r7, #23]
        break;
 8002f96:	e005      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f98:	4b8d      	ldr	r3, [pc, #564]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ef      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d166      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fb4:	4053      	eors	r3, r2
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d013      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fbe:	4b83      	ldr	r3, [pc, #524]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc8:	4b80      	ldr	r3, [pc, #512]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a7f      	ldr	r2, [pc, #508]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd4:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fe0:	4a7a      	ldr	r2, [pc, #488]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff0:	d115      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f965 	bl	80012c0 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff8:	e00b      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe f961 	bl	80012c0 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d902      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	75fb      	strb	r3, [r7, #23]
            break;
 8003010:	e005      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003012:	4b6e      	ldr	r3, [pc, #440]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ed      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d126      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d10d      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003034:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003042:	0919      	lsrs	r1, r3, #4
 8003044:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003046:	400b      	ands	r3, r1
 8003048:	4960      	ldr	r1, [pc, #384]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800304a:	4313      	orrs	r3, r2
 800304c:	610b      	str	r3, [r1, #16]
 800304e:	e005      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003050:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	4a5d      	ldr	r2, [pc, #372]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800305a:	6113      	str	r3, [r2, #16]
 800305c:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800305e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	4958      	ldr	r1, [pc, #352]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800306c:	4313      	orrs	r3, r2
 800306e:	670b      	str	r3, [r1, #112]	; 0x70
 8003070:	e004      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	75bb      	strb	r3, [r7, #22]
 8003076:	e001      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d07e      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308c:	2b28      	cmp	r3, #40	; 0x28
 800308e:	d867      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	08003167 	.word	0x08003167
 800309c:	08003161 	.word	0x08003161
 80030a0:	08003161 	.word	0x08003161
 80030a4:	08003161 	.word	0x08003161
 80030a8:	08003161 	.word	0x08003161
 80030ac:	08003161 	.word	0x08003161
 80030b0:	08003161 	.word	0x08003161
 80030b4:	08003161 	.word	0x08003161
 80030b8:	0800313d 	.word	0x0800313d
 80030bc:	08003161 	.word	0x08003161
 80030c0:	08003161 	.word	0x08003161
 80030c4:	08003161 	.word	0x08003161
 80030c8:	08003161 	.word	0x08003161
 80030cc:	08003161 	.word	0x08003161
 80030d0:	08003161 	.word	0x08003161
 80030d4:	08003161 	.word	0x08003161
 80030d8:	0800314f 	.word	0x0800314f
 80030dc:	08003161 	.word	0x08003161
 80030e0:	08003161 	.word	0x08003161
 80030e4:	08003161 	.word	0x08003161
 80030e8:	08003161 	.word	0x08003161
 80030ec:	08003161 	.word	0x08003161
 80030f0:	08003161 	.word	0x08003161
 80030f4:	08003161 	.word	0x08003161
 80030f8:	08003167 	.word	0x08003167
 80030fc:	08003161 	.word	0x08003161
 8003100:	08003161 	.word	0x08003161
 8003104:	08003161 	.word	0x08003161
 8003108:	08003161 	.word	0x08003161
 800310c:	08003161 	.word	0x08003161
 8003110:	08003161 	.word	0x08003161
 8003114:	08003161 	.word	0x08003161
 8003118:	08003167 	.word	0x08003167
 800311c:	08003161 	.word	0x08003161
 8003120:	08003161 	.word	0x08003161
 8003124:	08003161 	.word	0x08003161
 8003128:	08003161 	.word	0x08003161
 800312c:	08003161 	.word	0x08003161
 8003130:	08003161 	.word	0x08003161
 8003134:	08003161 	.word	0x08003161
 8003138:	08003167 	.word	0x08003167
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	2101      	movs	r1, #1
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fdfa 	bl	8003d3c <RCCEx_PLL2_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800314c:	e00c      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3324      	adds	r3, #36	; 0x24
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fea3 	bl	8003ea0 <RCCEx_PLL3_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800315e:	e003      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
      break;
 8003164:	e000      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8003166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	4914      	ldr	r1, [pc, #80]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800317c:	4313      	orrs	r3, r2
 800317e:	654b      	str	r3, [r1, #84]	; 0x54
 8003180:	e001      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d03e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003196:	2b05      	cmp	r3, #5
 8003198:	d827      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031f1 	.word	0x080031f1
 80031a4:	080031b9 	.word	0x080031b9
 80031a8:	080031d9 	.word	0x080031d9
 80031ac:	080031f1 	.word	0x080031f1
 80031b0:	080031f1 	.word	0x080031f1
 80031b4:	080031f1 	.word	0x080031f1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fdbc 	bl	8003d3c <RCCEx_PLL2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031c8:	e013      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80031ca:	bf00      	nop
 80031cc:	58024400 	.word	0x58024400
 80031d0:	58024800 	.word	0x58024800
 80031d4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3324      	adds	r3, #36	; 0x24
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fe5e 	bl	8003ea0 <RCCEx_PLL3_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031f8:	4b9f      	ldr	r3, [pc, #636]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f023 0207 	bic.w	r2, r3, #7
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003204:	499c      	ldr	r1, [pc, #624]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003206:	4313      	orrs	r3, r2
 8003208:	654b      	str	r3, [r1, #84]	; 0x54
 800320a:	e001      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d039      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	2b05      	cmp	r3, #5
 8003224:	d820      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	0800326f 	.word	0x0800326f
 8003230:	08003245 	.word	0x08003245
 8003234:	08003257 	.word	0x08003257
 8003238:	0800326f 	.word	0x0800326f
 800323c:	0800326f 	.word	0x0800326f
 8003240:	0800326f 	.word	0x0800326f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fd76 	bl	8003d3c <RCCEx_PLL2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003254:	e00c      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3324      	adds	r3, #36	; 0x24
 800325a:	2101      	movs	r1, #1
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fe1f 	bl	8003ea0 <RCCEx_PLL3_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003266:	e003      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
      break;
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 800326e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003276:	4b80      	ldr	r3, [pc, #512]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003284:	497c      	ldr	r1, [pc, #496]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003286:	4313      	orrs	r3, r2
 8003288:	658b      	str	r3, [r1, #88]	; 0x58
 800328a:	e001      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a6:	d02e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80032a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ac:	d828      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d02a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d822      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80032ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032be:	d026      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80032c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032c4:	d81c      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80032c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ca:	d010      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d0:	d816      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01d      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80032d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032da:	d111      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fd2a 	bl	8003d3c <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032ec:	e012      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3324      	adds	r3, #36	; 0x24
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fdd3 	bl	8003ea0 <RCCEx_PLL3_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032fe:	e009      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
      break;
 8003304:	e006      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003306:	bf00      	nop
 8003308:	e004      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800331a:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	4953      	ldr	r1, [pc, #332]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800332a:	4313      	orrs	r3, r2
 800332c:	654b      	str	r3, [r1, #84]	; 0x54
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d04b      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800334a:	d02e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800334c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003350:	d828      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d02a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d822      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800335e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003362:	d026      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003368:	d81c      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d010      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	d816      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01d      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d111      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fcd8 	bl	8003d3c <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003390:	e012      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3324      	adds	r3, #36	; 0x24
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fd81 	bl	8003ea0 <RCCEx_PLL3_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033a2:	e009      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
      break;
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033aa:	bf00      	nop
 80033ac:	e004      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033be:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033cc:	492a      	ldr	r1, [pc, #168]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	658b      	str	r3, [r1, #88]	; 0x58
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d04d      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033ee:	d02e      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80033f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f4:	d828      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d02a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	d822      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003402:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003406:	d026      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003408:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800340c:	d81c      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800340e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003412:	d010      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003418:	d816      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01d      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800341e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003422:	d111      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fc86 	bl	8003d3c <RCCEx_PLL2_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003434:	e012      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3324      	adds	r3, #36	; 0x24
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fd2f 	bl	8003ea0 <RCCEx_PLL3_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003446:	e009      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	75fb      	strb	r3, [r7, #23]
      break;
 800344c:	e006      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800345a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003470:	4901      	ldr	r1, [pc, #4]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003472:	4313      	orrs	r3, r2
 8003474:	658b      	str	r3, [r1, #88]	; 0x58
 8003476:	e003      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d10a      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3324      	adds	r3, #36	; 0x24
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fcfe 	bl	8003ea0 <RCCEx_PLL3_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034ae:	4b8c      	ldr	r3, [pc, #560]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034bc:	4988      	ldr	r1, [pc, #544]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d8:	d10a      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3324      	adds	r3, #36	; 0x24
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fcdd 	bl	8003ea0 <RCCEx_PLL3_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034f0:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fe:	4978      	ldr	r1, [pc, #480]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003500:	4313      	orrs	r3, r2
 8003502:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d034      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800351a:	d01d      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800351c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003520:	d817      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d009      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 800352c:	e011      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fc01 	bl	8003d3c <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800353e:	e00c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fcaa 	bl	8003ea0 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003550:	e003      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
      break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003560:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800356e:	495c      	ldr	r1, [pc, #368]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003570:	4313      	orrs	r3, r2
 8003572:	658b      	str	r3, [r1, #88]	; 0x58
 8003574:	e001      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d033      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003590:	d01c      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003596:	d816      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359c:	d003      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800359e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a2:	d007      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80035a4:	e00f      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a6:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fc70 	bl	8003ea0 <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	493f      	ldr	r1, [pc, #252]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	654b      	str	r3, [r1, #84]	; 0x54
 80035e8:	e001      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d029      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d007      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003616:	e00b      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2102      	movs	r1, #2
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fb8c 	bl	8003d3c <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
      break;
 800362e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003644:	4313      	orrs	r3, r2
 8003646:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003648:	e001      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3324      	adds	r3, #36	; 0x24
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fc1d 	bl	8003ea0 <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d035      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003686:	d017      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368c:	d811      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800368e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003692:	d013      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d80b      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d106      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036b0:	e007      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
      break;
 80036b6:	e004      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80036c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d6:	4902      	ldr	r1, [pc, #8]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	654b      	str	r3, [r1, #84]	; 0x54
 80036dc:	e004      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80036de:	bf00      	nop
 80036e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	492e      	ldr	r1, [pc, #184]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003720:	4926      	ldr	r1, [pc, #152]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373e:	491f      	ldr	r1, [pc, #124]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800375a:	6113      	str	r3, [r2, #16]
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003766:	4915      	ldr	r1, [pc, #84]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	da08      	bge.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	490e      	ldr	r1, [pc, #56]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80037a6:	7dbb      	ldrb	r3, [r7, #22]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	58024400 	.word	0x58024400

080037c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037c4:	f7ff f830 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4904      	ldr	r1, [pc, #16]	; (80037e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	58024400 	.word	0x58024400
 80037e8:	08006e58 	.word	0x08006e58

080037ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037f4:	4ba1      	ldr	r3, [pc, #644]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037fe:	4b9f      	ldr	r3, [pc, #636]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	0b1b      	lsrs	r3, r3, #12
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800380a:	4b9c      	ldr	r3, [pc, #624]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003816:	4b99      	ldr	r3, [pc, #612]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	08db      	lsrs	r3, r3, #3
 800381c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8111 	beq.w	8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b02      	cmp	r3, #2
 800383e:	f000 8083 	beq.w	8003948 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b02      	cmp	r3, #2
 8003846:	f200 80a1 	bhi.w	800398c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d056      	beq.n	8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003856:	e099      	b.n	800398c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003858:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02d      	beq.n	80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003864:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	4a84      	ldr	r2, [pc, #528]	; (8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389e:	ed97 6a03 	vldr	s12, [r7, #12]
 80038a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038be:	e087      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d2:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003902:	e065      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003926:	ed97 6a03 	vldr	s12, [r7, #12]
 800392a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800392e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003946:	e043      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395a:	4b48      	ldr	r3, [pc, #288]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396a:	ed97 6a03 	vldr	s12, [r7, #12]
 800396e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800397e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800398a:	e021      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800399a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80039b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	0a5b      	lsrs	r3, r3, #9
 80039d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f6:	ee17 2a90 	vmov	r2, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a24:	ee17 2a90 	vmov	r2, s15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a52:	ee17 2a90 	vmov	r2, s15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a5a:	e008      	b.n	8003a6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	bf00      	nop
 8003a70:	3724      	adds	r7, #36	; 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	03d09000 	.word	0x03d09000
 8003a84:	46000000 	.word	0x46000000
 8003a88:	4c742400 	.word	0x4c742400
 8003a8c:	4a742400 	.word	0x4a742400
 8003a90:	4bbebc20 	.word	0x4bbebc20

08003a94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a9c:	4ba1      	ldr	r3, [pc, #644]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003aa6:	4b9f      	ldr	r3, [pc, #636]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	0d1b      	lsrs	r3, r3, #20
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ab2:	4b9c      	ldr	r3, [pc, #624]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003abe:	4b99      	ldr	r3, [pc, #612]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	08db      	lsrs	r3, r3, #3
 8003ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8111 	beq.w	8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	f000 8083 	beq.w	8003bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	f200 80a1 	bhi.w	8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d056      	beq.n	8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003afe:	e099      	b.n	8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b00:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02d      	beq.n	8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b0c:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	4a84      	ldr	r2, [pc, #528]	; (8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b66:	e087      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003baa:	e065      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bee:	e043      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c32:	e021      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	0a5b      	lsrs	r3, r3, #9
 8003c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9e:	ee17 2a90 	vmov	r2, s15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ccc:	ee17 2a90 	vmov	r2, s15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	0e1b      	lsrs	r3, r3, #24
 8003cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfa:	ee17 2a90 	vmov	r2, s15
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d02:	e008      	b.n	8003d16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	bf00      	nop
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	03d09000 	.word	0x03d09000
 8003d2c:	46000000 	.word	0x46000000
 8003d30:	4c742400 	.word	0x4c742400
 8003d34:	4a742400 	.word	0x4a742400
 8003d38:	4bbebc20 	.word	0x4bbebc20

08003d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d101      	bne.n	8003d5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e099      	b.n	8003e8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d5a:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4e      	ldr	r2, [pc, #312]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d66:	f7fd faab 	bl	80012c0 <HAL_GetTick>
 8003d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d6e:	f7fd faa7 	bl	80012c0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e086      	b.n	8003e8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d80:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d8c:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	493f      	ldr	r1, [pc, #252]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	025b      	lsls	r3, r3, #9
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dd0:	4931      	ldr	r1, [pc, #196]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	492d      	ldr	r1, [pc, #180]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	f023 0220 	bic.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	4928      	ldr	r1, [pc, #160]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e06:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <RCCEx_PLL2_Config+0x160>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	69d2      	ldr	r2, [r2, #28]
 8003e12:	00d2      	lsls	r2, r2, #3
 8003e14:	4920      	ldr	r1, [pc, #128]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e1a:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	f043 0310 	orr.w	r3, r3, #16
 8003e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e38:	e00f      	b.n	8003e5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e40:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e4c:	e005      	b.n	8003e5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e66:	f7fd fa2b 	bl	80012c0 <HAL_GetTick>
 8003e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e6e:	f7fd fa27 	bl	80012c0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	ffff0007 	.word	0xffff0007

08003ea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eae:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d101      	bne.n	8003ebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e099      	b.n	8003ff2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4e      	ldr	r2, [pc, #312]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eca:	f7fd f9f9 	bl	80012c0 <HAL_GetTick>
 8003ece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ed2:	f7fd f9f5 	bl	80012c0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e086      	b.n	8003ff2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ee4:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	051b      	lsls	r3, r3, #20
 8003efe:	493f      	ldr	r1, [pc, #252]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	628b      	str	r3, [r1, #40]	; 0x28
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	025b      	lsls	r3, r3, #9
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f34:	4931      	ldr	r1, [pc, #196]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	492d      	ldr	r1, [pc, #180]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4928      	ldr	r1, [pc, #160]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f5e:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	4b24      	ldr	r3, [pc, #144]	; (8004000 <RCCEx_PLL3_Config+0x160>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	69d2      	ldr	r2, [r2, #28]
 8003f76:	00d2      	lsls	r2, r2, #3
 8003f78:	4920      	ldr	r1, [pc, #128]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f7e:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f9c:	e00f      	b.n	8003fbe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fb0:	e005      	b.n	8003fbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fd f979 	bl	80012c0 <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fd2:	f7fd f975 	bl	80012c0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e006      	b.n	8003ff2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	58024400 	.word	0x58024400
 8004000:	ffff0007 	.word	0xffff0007

08004004 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d067      	beq.n	80040e6 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fc fefc 	bl	8000e28 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	22ca      	movs	r2, #202	; 0xca
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2253      	movs	r2, #83	; 0x53
 8004046:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f879 	bl	8004140 <RTC_EnterInitMode>
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13b      	bne.n	80040d0 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_RTC_Init+0xec>)
 8004064:	400b      	ands	r3, r1
 8004066:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0419      	lsls	r1, r3, #16
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f885 	bl	80041a8 <RTC_ExitInitMode>
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0203 	bic.w	r2, r2, #3
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	ff8fffbf 	.word	0xff8fffbf

080040f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800410a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800410c:	f7fd f8d8 	bl	80012c0 <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004112:	e009      	b.n	8004128 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004114:	f7fd f8d4 	bl	80012c0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004122:	d901      	bls.n	8004128 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e007      	b.n	8004138 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ee      	beq.n	8004114 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d120      	bne.n	800419c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004164:	f7fd f8ac 	bl	80012c0 <HAL_GetTick>
 8004168:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800416a:	e00d      	b.n	8004188 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800416c:	f7fd f8a8 	bl	80012c0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417a:	d905      	bls.n	8004188 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2203      	movs	r2, #3
 8004184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <RTC_EnterInitMode+0x5c>
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d1e7      	bne.n	800416c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <RTC_ExitInitMode+0x78>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a19      	ldr	r2, [pc, #100]	; (8004220 <RTC_ExitInitMode+0x78>)
 80041ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041be:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <RTC_ExitInitMode+0x78>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10c      	bne.n	80041e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff91 	bl	80040f4 <HAL_RTC_WaitForSynchro>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01e      	beq.n	8004216 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2203      	movs	r2, #3
 80041dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	e017      	b.n	8004216 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <RTC_ExitInitMode+0x78>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <RTC_ExitInitMode+0x78>)
 80041ec:	f023 0320 	bic.w	r3, r3, #32
 80041f0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff7e 	bl	80040f4 <HAL_RTC_WaitForSynchro>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2203      	movs	r2, #3
 8004202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <RTC_ExitInitMode+0x78>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <RTC_ExitInitMode+0x78>)
 8004210:	f043 0320 	orr.w	r3, r3, #32
 8004214:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	58004000 	.word	0x58004000

08004224 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_RTCEx_SetTamper+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e0ca      	b.n	80043d2 <HAL_RTCEx_SetTamper+0x1ae>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d003      	beq.n	800426e <HAL_RTCEx_SetTamper+0x4a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d106      	bne.n	800427c <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e006      	b.n	800428a <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	43db      	mvns	r3, r3
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01e      	beq.n	80042d0 <HAL_RTCEx_SetTamper+0xac>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a4:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b8:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d022      	beq.n	800430c <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e01d      	b.n	800430c <HAL_RTCEx_SetTamper+0xe8>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042e2:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042f6:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800430a:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01e      	beq.n	8004352 <HAL_RTCEx_SetTamper+0x12e>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004326:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800433a:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d022      	beq.n	800438e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e01d      	b.n	800438e <HAL_RTCEx_SetTamper+0x16a>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004364:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004378:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_RTCEx_SetTamper+0x1bc>)
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 800439e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 80043a4:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 80043aa:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 80043b0:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	ffff007f 	.word	0xffff007f

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e049      	b.n	800448a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fd5e 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fa04 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e049      	b.n	8004538 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fce5 	bl	8000e88 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f000 f9ad 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e049      	b.n	80045e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f841 	bl	80045ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 f956 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_TIM_OC_ConfigChannel+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e066      	b.n	80046f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b14      	cmp	r3, #20
 800462e:	d857      	bhi.n	80046e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800468d 	.word	0x0800468d
 800463c:	080046e1 	.word	0x080046e1
 8004640:	080046e1 	.word	0x080046e1
 8004644:	080046e1 	.word	0x080046e1
 8004648:	0800469b 	.word	0x0800469b
 800464c:	080046e1 	.word	0x080046e1
 8004650:	080046e1 	.word	0x080046e1
 8004654:	080046e1 	.word	0x080046e1
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080046e1 	.word	0x080046e1
 8004660:	080046e1 	.word	0x080046e1
 8004664:	080046e1 	.word	0x080046e1
 8004668:	080046b7 	.word	0x080046b7
 800466c:	080046e1 	.word	0x080046e1
 8004670:	080046e1 	.word	0x080046e1
 8004674:	080046e1 	.word	0x080046e1
 8004678:	080046c5 	.word	0x080046c5
 800467c:	080046e1 	.word	0x080046e1
 8004680:	080046e1 	.word	0x080046e1
 8004684:	080046e1 	.word	0x080046e1
 8004688:	080046d3 	.word	0x080046d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f966 	bl	8004964 <TIM_OC1_SetConfig>
      break;
 8004698:	e025      	b.n	80046e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f9ef 	bl	8004a84 <TIM_OC2_SetConfig>
      break;
 80046a6:	e01e      	b.n	80046e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fa72 	bl	8004b98 <TIM_OC3_SetConfig>
      break;
 80046b4:	e017      	b.n	80046e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 faf3 	bl	8004ca8 <TIM_OC4_SetConfig>
      break;
 80046c2:	e010      	b.n	80046e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fb56 	bl	8004d7c <TIM_OC5_SetConfig>
      break;
 80046d0:	e009      	b.n	80046e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fbb3 	bl	8004e44 <TIM_OC6_SetConfig>
      break;
 80046de:	e002      	b.n	80046e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
      break;
 80046e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e088      	b.n	8004828 <HAL_TIM_IC_ConfigChannel+0x130>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f000 fbec 	bl	8004f10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 020c 	bic.w	r2, r2, #12
 8004746:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	619a      	str	r2, [r3, #24]
 800475a:	e060      	b.n	800481e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d11c      	bne.n	800479c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6819      	ldr	r1, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f000 fc41 	bl	8004ff8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004784:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6999      	ldr	r1, [r3, #24]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	021a      	lsls	r2, r3, #8
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
 800479a:	e040      	b.n	800481e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d11b      	bne.n	80047da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6819      	ldr	r1, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f000 fc5e 	bl	8005072 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 020c 	bic.w	r2, r2, #12
 80047c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	61da      	str	r2, [r3, #28]
 80047d8:	e021      	b.n	800481e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d11c      	bne.n	800481a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6819      	ldr	r1, [r3, #0]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f000 fc7b 	bl	80050ea <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004802:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69d9      	ldr	r1, [r3, #28]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]
 8004818:	e001      	b.n	800481e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a40      	ldr	r2, [pc, #256]	; (8004944 <TIM_Base_SetConfig+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3d      	ldr	r2, [pc, #244]	; (8004948 <TIM_Base_SetConfig+0x118>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3c      	ldr	r2, [pc, #240]	; (800494c <TIM_Base_SetConfig+0x11c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <TIM_Base_SetConfig+0x120>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3a      	ldr	r2, [pc, #232]	; (8004954 <TIM_Base_SetConfig+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <TIM_Base_SetConfig+0x114>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01f      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d01b      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <TIM_Base_SetConfig+0x118>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d017      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2b      	ldr	r2, [pc, #172]	; (800494c <TIM_Base_SetConfig+0x11c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <TIM_Base_SetConfig+0x120>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00f      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a29      	ldr	r2, [pc, #164]	; (8004954 <TIM_Base_SetConfig+0x124>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a28      	ldr	r2, [pc, #160]	; (8004958 <TIM_Base_SetConfig+0x128>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a27      	ldr	r2, [pc, #156]	; (800495c <TIM_Base_SetConfig+0x12c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_Base_SetConfig+0x9a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <TIM_Base_SetConfig+0x130>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d108      	bne.n	80048dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <TIM_Base_SetConfig+0x114>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <TIM_Base_SetConfig+0x124>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0xf8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a11      	ldr	r2, [pc, #68]	; (8004958 <TIM_Base_SetConfig+0x128>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0xf8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a10      	ldr	r2, [pc, #64]	; (800495c <TIM_Base_SetConfig+0x12c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0xf8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <TIM_Base_SetConfig+0x130>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	615a      	str	r2, [r3, #20]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40010400 	.word	0x40010400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <TIM_OC1_SetConfig+0x108>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0302 	bic.w	r3, r3, #2
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <TIM_OC1_SetConfig+0x10c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_OC1_SetConfig+0x7c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <TIM_OC1_SetConfig+0x110>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_OC1_SetConfig+0x7c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <TIM_OC1_SetConfig+0x114>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_OC1_SetConfig+0x7c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <TIM_OC1_SetConfig+0x118>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC1_SetConfig+0x7c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10c      	bne.n	80049fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0308 	bic.w	r3, r3, #8
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <TIM_OC1_SetConfig+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_OC1_SetConfig+0xbe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <TIM_OC1_SetConfig+0x110>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_OC1_SetConfig+0xbe>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <TIM_OC1_SetConfig+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_OC1_SetConfig+0xbe>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <TIM_OC1_SetConfig+0x118>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_OC1_SetConfig+0xbe>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d111      	bne.n	8004a46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	fffeff8f 	.word	0xfffeff8f
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800

08004a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0210 	bic.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <TIM_OC2_SetConfig+0xfc>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0320 	bic.w	r3, r3, #32
 8004ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <TIM_OC2_SetConfig+0x100>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC2_SetConfig+0x68>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <TIM_OC2_SetConfig+0x104>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10d      	bne.n	8004b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <TIM_OC2_SetConfig+0x100>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00f      	beq.n	8004b30 <TIM_OC2_SetConfig+0xac>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <TIM_OC2_SetConfig+0x104>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_OC2_SetConfig+0xac>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <TIM_OC2_SetConfig+0x108>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_OC2_SetConfig+0xac>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <TIM_OC2_SetConfig+0x10c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC2_SetConfig+0xac>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <TIM_OC2_SetConfig+0x110>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d113      	bne.n	8004b58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	feff8fff 	.word	0xfeff8fff
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40010400 	.word	0x40010400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <TIM_OC3_SetConfig+0xf8>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <TIM_OC3_SetConfig+0xfc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC3_SetConfig+0x66>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <TIM_OC3_SetConfig+0x100>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <TIM_OC3_SetConfig+0xfc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00f      	beq.n	8004c42 <TIM_OC3_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <TIM_OC3_SetConfig+0x100>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_OC3_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <TIM_OC3_SetConfig+0x104>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_OC3_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <TIM_OC3_SetConfig+0x108>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC3_SetConfig+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <TIM_OC3_SetConfig+0x10c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d113      	bne.n	8004c6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	fffeff8f 	.word	0xfffeff8f
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <TIM_OC4_SetConfig+0xbc>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <TIM_OC4_SetConfig+0xc0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_OC4_SetConfig+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <TIM_OC4_SetConfig+0xc4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_OC4_SetConfig+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <TIM_OC4_SetConfig+0xc8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_OC4_SetConfig+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC4_SetConfig+0xcc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_OC4_SetConfig+0x80>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC4_SetConfig+0xd0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d109      	bne.n	8004d3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	feff8fff 	.word	0xfeff8fff
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800

08004d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <TIM_OC5_SetConfig+0xb0>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <TIM_OC5_SetConfig+0xb4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_OC5_SetConfig+0x76>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <TIM_OC5_SetConfig+0xb8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_OC5_SetConfig+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <TIM_OC5_SetConfig+0xbc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_OC5_SetConfig+0x76>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <TIM_OC5_SetConfig+0xc0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_OC5_SetConfig+0x76>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <TIM_OC5_SetConfig+0xc4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d109      	bne.n	8004e06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	fffeff8f 	.word	0xfffeff8f
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <TIM_OC6_SetConfig+0xb4>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	051b      	lsls	r3, r3, #20
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a19      	ldr	r2, [pc, #100]	; (8004efc <TIM_OC6_SetConfig+0xb8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <TIM_OC6_SetConfig+0xbc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <TIM_OC6_SetConfig+0xc0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <TIM_OC6_SetConfig+0xc4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <TIM_OC6_SetConfig+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	feff8fff 	.word	0xfeff8fff
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40010400 	.word	0x40010400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0201 	bic.w	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <TIM_TI1_SetConfig+0xcc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01b      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d017      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <TIM_TI1_SetConfig+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <TIM_TI1_SetConfig+0xd4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <TIM_TI1_SetConfig+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a22      	ldr	r2, [pc, #136]	; (8004fec <TIM_TI1_SetConfig+0xdc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <TIM_TI1_SetConfig+0xe0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <TIM_TI1_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <TIM_TI1_SetConfig+0x6a>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <TIM_TI1_SetConfig+0x6c>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e003      	b.n	8004f9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
 8004fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f003 030a 	and.w	r3, r3, #10
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40001800 	.word	0x40001800
 8004ff4:	40014000 	.word	0x40014000

08004ff8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	031b      	lsls	r3, r3, #12
 800503c:	b29b      	uxth	r3, r3
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005072:	b480      	push	{r7}
 8005074:	b087      	sub	sp, #28
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b087      	sub	sp, #28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	031b      	lsls	r3, r3, #12
 800512e:	b29b      	uxth	r3, r3
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800513c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e06d      	b.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a30      	ldr	r2, [pc, #192]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d108      	bne.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a20      	ldr	r2, [pc, #128]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d022      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d01d      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d018      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a16      	ldr	r2, [pc, #88]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	4313      	orrs	r3, r2
 800523c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40010000 	.word	0x40010000
 8005268:	40010400 	.word	0x40010400
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40001800 	.word	0x40001800
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005298:	2302      	movs	r3, #2
 800529a:	e065      	b.n	8005368 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a14      	ldr	r2, [pc, #80]	; (8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d115      	bne.n	8005356 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	051b      	lsls	r3, r3, #20
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40010000 	.word	0x40010000
 8005378:	40010400 	.word	0x40010400

0800537c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e042      	b.n	8005414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fb fe17 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2224      	movs	r2, #36	; 0x24
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8c2 	bl	8005548 <UART_SetConfig>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e022      	b.n	8005414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fe16 	bl	8006008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fe9d 	bl	800614c <UART_CheckIdleState>
 8005412:	4603      	mov	r3, r0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005432:	2b20      	cmp	r3, #32
 8005434:	f040 8083 	bne.w	800553e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Transmit+0x28>
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e07b      	b.n	8005540 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_UART_Transmit+0x3a>
 8005452:	2302      	movs	r3, #2
 8005454:	e074      	b.n	8005540 <HAL_UART_Transmit+0x124>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2221      	movs	r2, #33	; 0x21
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800546e:	f7fb ff27 	bl	80012c0 <HAL_GetTick>
 8005472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548c:	d108      	bne.n	80054a0 <HAL_UART_Transmit+0x84>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e003      	b.n	80054a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80054b0:	e02c      	b.n	800550c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fe90 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e039      	b.n	8005540 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	3302      	adds	r3, #2
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e007      	b.n	80054fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1cc      	bne.n	80054b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	2140      	movs	r1, #64	; 0x40
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fe5d 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	b5b0      	push	{r4, r5, r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4313      	orrs	r3, r2
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4bbf      	ldr	r3, [pc, #764]	; (8005874 <UART_SetConfig+0x32c>)
 8005576:	4013      	ands	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800557e:	430b      	orrs	r3, r1
 8005580:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4ab5      	ldr	r2, [pc, #724]	; (8005878 <UART_SetConfig+0x330>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ae:	4313      	orrs	r3, r2
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	4bb0      	ldr	r3, [pc, #704]	; (800587c <UART_SetConfig+0x334>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f023 010f 	bic.w	r1, r3, #15
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4aa7      	ldr	r2, [pc, #668]	; (8005880 <UART_SetConfig+0x338>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d176      	bne.n	80056d4 <UART_SetConfig+0x18c>
 80055e6:	4ba7      	ldr	r3, [pc, #668]	; (8005884 <UART_SetConfig+0x33c>)
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ee:	2b28      	cmp	r3, #40	; 0x28
 80055f0:	d86c      	bhi.n	80056cc <UART_SetConfig+0x184>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <UART_SetConfig+0xb0>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800569d 	.word	0x0800569d
 80055fc:	080056cd 	.word	0x080056cd
 8005600:	080056cd 	.word	0x080056cd
 8005604:	080056cd 	.word	0x080056cd
 8005608:	080056cd 	.word	0x080056cd
 800560c:	080056cd 	.word	0x080056cd
 8005610:	080056cd 	.word	0x080056cd
 8005614:	080056cd 	.word	0x080056cd
 8005618:	080056a5 	.word	0x080056a5
 800561c:	080056cd 	.word	0x080056cd
 8005620:	080056cd 	.word	0x080056cd
 8005624:	080056cd 	.word	0x080056cd
 8005628:	080056cd 	.word	0x080056cd
 800562c:	080056cd 	.word	0x080056cd
 8005630:	080056cd 	.word	0x080056cd
 8005634:	080056cd 	.word	0x080056cd
 8005638:	080056ad 	.word	0x080056ad
 800563c:	080056cd 	.word	0x080056cd
 8005640:	080056cd 	.word	0x080056cd
 8005644:	080056cd 	.word	0x080056cd
 8005648:	080056cd 	.word	0x080056cd
 800564c:	080056cd 	.word	0x080056cd
 8005650:	080056cd 	.word	0x080056cd
 8005654:	080056cd 	.word	0x080056cd
 8005658:	080056b5 	.word	0x080056b5
 800565c:	080056cd 	.word	0x080056cd
 8005660:	080056cd 	.word	0x080056cd
 8005664:	080056cd 	.word	0x080056cd
 8005668:	080056cd 	.word	0x080056cd
 800566c:	080056cd 	.word	0x080056cd
 8005670:	080056cd 	.word	0x080056cd
 8005674:	080056cd 	.word	0x080056cd
 8005678:	080056bd 	.word	0x080056bd
 800567c:	080056cd 	.word	0x080056cd
 8005680:	080056cd 	.word	0x080056cd
 8005684:	080056cd 	.word	0x080056cd
 8005688:	080056cd 	.word	0x080056cd
 800568c:	080056cd 	.word	0x080056cd
 8005690:	080056cd 	.word	0x080056cd
 8005694:	080056cd 	.word	0x080056cd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	2301      	movs	r3, #1
 800569e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a2:	e222      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056aa:	e21e      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b2:	e21a      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ba:	e216      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056bc:	2320      	movs	r3, #32
 80056be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c2:	e212      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056c4:	2340      	movs	r3, #64	; 0x40
 80056c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ca:	e20e      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e20a      	b.n	8005aea <UART_SetConfig+0x5a2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a6b      	ldr	r2, [pc, #428]	; (8005888 <UART_SetConfig+0x340>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d130      	bne.n	8005740 <UART_SetConfig+0x1f8>
 80056de:	4b69      	ldr	r3, [pc, #420]	; (8005884 <UART_SetConfig+0x33c>)
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d826      	bhi.n	8005738 <UART_SetConfig+0x1f0>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x1a8>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005719 	.word	0x08005719
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570e:	e1ec      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005716:	e1e8      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e1e4      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005726:	e1e0      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005728:	2320      	movs	r3, #32
 800572a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572e:	e1dc      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005736:	e1d8      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e1d4      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a51      	ldr	r2, [pc, #324]	; (800588c <UART_SetConfig+0x344>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d130      	bne.n	80057ac <UART_SetConfig+0x264>
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <UART_SetConfig+0x33c>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b05      	cmp	r3, #5
 8005754:	d826      	bhi.n	80057a4 <UART_SetConfig+0x25c>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x214>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005775 	.word	0x08005775
 8005760:	0800577d 	.word	0x0800577d
 8005764:	08005785 	.word	0x08005785
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	2300      	movs	r3, #0
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577a:	e1b6      	b.n	8005aea <UART_SetConfig+0x5a2>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005782:	e1b2      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578a:	e1ae      	b.n	8005aea <UART_SetConfig+0x5a2>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005792:	e1aa      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e1a6      	b.n	8005aea <UART_SetConfig+0x5a2>
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e1a2      	b.n	8005aea <UART_SetConfig+0x5a2>
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057aa:	e19e      	b.n	8005aea <UART_SetConfig+0x5a2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a37      	ldr	r2, [pc, #220]	; (8005890 <UART_SetConfig+0x348>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d130      	bne.n	8005818 <UART_SetConfig+0x2d0>
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <UART_SetConfig+0x33c>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d826      	bhi.n	8005810 <UART_SetConfig+0x2c8>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <UART_SetConfig+0x280>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057e1 	.word	0x080057e1
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	080057f1 	.word	0x080057f1
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005809 	.word	0x08005809
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e6:	e180      	b.n	8005aea <UART_SetConfig+0x5a2>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e17c      	b.n	8005aea <UART_SetConfig+0x5a2>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e178      	b.n	8005aea <UART_SetConfig+0x5a2>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fe:	e174      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005800:	2320      	movs	r3, #32
 8005802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005806:	e170      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580e:	e16c      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005816:	e168      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <UART_SetConfig+0x34c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d142      	bne.n	80058a8 <UART_SetConfig+0x360>
 8005822:	4b18      	ldr	r3, [pc, #96]	; (8005884 <UART_SetConfig+0x33c>)
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b05      	cmp	r3, #5
 800582c:	d838      	bhi.n	80058a0 <UART_SetConfig+0x358>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x2ec>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	0800584d 	.word	0x0800584d
 8005838:	08005855 	.word	0x08005855
 800583c:	0800585d 	.word	0x0800585d
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005899 	.word	0x08005899
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005852:	e14a      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585a:	e146      	b.n	8005aea <UART_SetConfig+0x5a2>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005862:	e142      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586a:	e13e      	b.n	8005aea <UART_SetConfig+0x5a2>
 800586c:	2320      	movs	r3, #32
 800586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005872:	e13a      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005874:	cfff69f3 	.word	0xcfff69f3
 8005878:	58000c00 	.word	0x58000c00
 800587c:	11fff4ff 	.word	0x11fff4ff
 8005880:	40011000 	.word	0x40011000
 8005884:	58024400 	.word	0x58024400
 8005888:	40004400 	.word	0x40004400
 800588c:	40004800 	.word	0x40004800
 8005890:	40004c00 	.word	0x40004c00
 8005894:	40005000 	.word	0x40005000
 8005898:	2340      	movs	r3, #64	; 0x40
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e124      	b.n	8005aea <UART_SetConfig+0x5a2>
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e120      	b.n	8005aea <UART_SetConfig+0x5a2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4acc      	ldr	r2, [pc, #816]	; (8005be0 <UART_SetConfig+0x698>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d176      	bne.n	80059a0 <UART_SetConfig+0x458>
 80058b2:	4bcc      	ldr	r3, [pc, #816]	; (8005be4 <UART_SetConfig+0x69c>)
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ba:	2b28      	cmp	r3, #40	; 0x28
 80058bc:	d86c      	bhi.n	8005998 <UART_SetConfig+0x450>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x37c>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	08005969 	.word	0x08005969
 80058c8:	08005999 	.word	0x08005999
 80058cc:	08005999 	.word	0x08005999
 80058d0:	08005999 	.word	0x08005999
 80058d4:	08005999 	.word	0x08005999
 80058d8:	08005999 	.word	0x08005999
 80058dc:	08005999 	.word	0x08005999
 80058e0:	08005999 	.word	0x08005999
 80058e4:	08005971 	.word	0x08005971
 80058e8:	08005999 	.word	0x08005999
 80058ec:	08005999 	.word	0x08005999
 80058f0:	08005999 	.word	0x08005999
 80058f4:	08005999 	.word	0x08005999
 80058f8:	08005999 	.word	0x08005999
 80058fc:	08005999 	.word	0x08005999
 8005900:	08005999 	.word	0x08005999
 8005904:	08005979 	.word	0x08005979
 8005908:	08005999 	.word	0x08005999
 800590c:	08005999 	.word	0x08005999
 8005910:	08005999 	.word	0x08005999
 8005914:	08005999 	.word	0x08005999
 8005918:	08005999 	.word	0x08005999
 800591c:	08005999 	.word	0x08005999
 8005920:	08005999 	.word	0x08005999
 8005924:	08005981 	.word	0x08005981
 8005928:	08005999 	.word	0x08005999
 800592c:	08005999 	.word	0x08005999
 8005930:	08005999 	.word	0x08005999
 8005934:	08005999 	.word	0x08005999
 8005938:	08005999 	.word	0x08005999
 800593c:	08005999 	.word	0x08005999
 8005940:	08005999 	.word	0x08005999
 8005944:	08005989 	.word	0x08005989
 8005948:	08005999 	.word	0x08005999
 800594c:	08005999 	.word	0x08005999
 8005950:	08005999 	.word	0x08005999
 8005954:	08005999 	.word	0x08005999
 8005958:	08005999 	.word	0x08005999
 800595c:	08005999 	.word	0x08005999
 8005960:	08005999 	.word	0x08005999
 8005964:	08005991 	.word	0x08005991
 8005968:	2301      	movs	r3, #1
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e0bc      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e0b8      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e0b4      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005986:	e0b0      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005988:	2320      	movs	r3, #32
 800598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598e:	e0ac      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005996:	e0a8      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599e:	e0a4      	b.n	8005aea <UART_SetConfig+0x5a2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a90      	ldr	r2, [pc, #576]	; (8005be8 <UART_SetConfig+0x6a0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d130      	bne.n	8005a0c <UART_SetConfig+0x4c4>
 80059aa:	4b8e      	ldr	r3, [pc, #568]	; (8005be4 <UART_SetConfig+0x69c>)
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d826      	bhi.n	8005a04 <UART_SetConfig+0x4bc>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x474>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	080059e5 	.word	0x080059e5
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	080059f5 	.word	0x080059f5
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059da:	e086      	b.n	8005aea <UART_SetConfig+0x5a2>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e2:	e082      	b.n	8005aea <UART_SetConfig+0x5a2>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e07e      	b.n	8005aea <UART_SetConfig+0x5a2>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e07a      	b.n	8005aea <UART_SetConfig+0x5a2>
 80059f4:	2320      	movs	r3, #32
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e076      	b.n	8005aea <UART_SetConfig+0x5a2>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e072      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e06e      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a76      	ldr	r2, [pc, #472]	; (8005bec <UART_SetConfig+0x6a4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d130      	bne.n	8005a78 <UART_SetConfig+0x530>
 8005a16:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <UART_SetConfig+0x69c>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d826      	bhi.n	8005a70 <UART_SetConfig+0x528>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <UART_SetConfig+0x4e0>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a41 	.word	0x08005a41
 8005a2c:	08005a49 	.word	0x08005a49
 8005a30:	08005a51 	.word	0x08005a51
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a46:	e050      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4e:	e04c      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a56:	e048      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5e:	e044      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a66:	e040      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e03c      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	e038      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a5c      	ldr	r2, [pc, #368]	; (8005bf0 <UART_SetConfig+0x6a8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d130      	bne.n	8005ae4 <UART_SetConfig+0x59c>
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <UART_SetConfig+0x69c>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d826      	bhi.n	8005adc <UART_SetConfig+0x594>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x54c>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005abd 	.word	0x08005abd
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab2:	e01a      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aba:	e016      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac2:	e012      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aca:	e00e      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005acc:	2320      	movs	r3, #32
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e00a      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e006      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e002      	b.n	8005aea <UART_SetConfig+0x5a2>
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <UART_SetConfig+0x6a8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	f040 80ef 	bne.w	8005cd4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	dc46      	bgt.n	8005b8c <UART_SetConfig+0x644>
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	f2c0 8081 	blt.w	8005c06 <UART_SetConfig+0x6be>
 8005b04:	3b02      	subs	r3, #2
 8005b06:	2b1e      	cmp	r3, #30
 8005b08:	d87d      	bhi.n	8005c06 <UART_SetConfig+0x6be>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x5c8>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b93 	.word	0x08005b93
 8005b14:	08005c07 	.word	0x08005c07
 8005b18:	08005b9b 	.word	0x08005b9b
 8005b1c:	08005c07 	.word	0x08005c07
 8005b20:	08005c07 	.word	0x08005c07
 8005b24:	08005c07 	.word	0x08005c07
 8005b28:	08005bab 	.word	0x08005bab
 8005b2c:	08005c07 	.word	0x08005c07
 8005b30:	08005c07 	.word	0x08005c07
 8005b34:	08005c07 	.word	0x08005c07
 8005b38:	08005c07 	.word	0x08005c07
 8005b3c:	08005c07 	.word	0x08005c07
 8005b40:	08005c07 	.word	0x08005c07
 8005b44:	08005c07 	.word	0x08005c07
 8005b48:	08005bbb 	.word	0x08005bbb
 8005b4c:	08005c07 	.word	0x08005c07
 8005b50:	08005c07 	.word	0x08005c07
 8005b54:	08005c07 	.word	0x08005c07
 8005b58:	08005c07 	.word	0x08005c07
 8005b5c:	08005c07 	.word	0x08005c07
 8005b60:	08005c07 	.word	0x08005c07
 8005b64:	08005c07 	.word	0x08005c07
 8005b68:	08005c07 	.word	0x08005c07
 8005b6c:	08005c07 	.word	0x08005c07
 8005b70:	08005c07 	.word	0x08005c07
 8005b74:	08005c07 	.word	0x08005c07
 8005b78:	08005c07 	.word	0x08005c07
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c07 	.word	0x08005c07
 8005b84:	08005c07 	.word	0x08005c07
 8005b88:	08005bf9 	.word	0x08005bf9
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d036      	beq.n	8005bfe <UART_SetConfig+0x6b6>
 8005b90:	e039      	b.n	8005c06 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b92:	f7fd fe15 	bl	80037c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b98:	e03b      	b.n	8005c12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9a:	f107 0314 	add.w	r3, r7, #20
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fd fe24 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ba8:	e033      	b.n	8005c12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005baa:	f107 0308 	add.w	r3, r7, #8
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fd ff70 	bl	8003a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bb8:	e02b      	b.n	8005c12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <UART_SetConfig+0x69c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <UART_SetConfig+0x69c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <UART_SetConfig+0x6ac>)
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd8:	e01b      	b.n	8005c12 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <UART_SetConfig+0x6ac>)
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bde:	e018      	b.n	8005c12 <UART_SetConfig+0x6ca>
 8005be0:	40011400 	.word	0x40011400
 8005be4:	58024400 	.word	0x58024400
 8005be8:	40007800 	.word	0x40007800
 8005bec:	40007c00 	.word	0x40007c00
 8005bf0:	58000c00 	.word	0x58000c00
 8005bf4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bf8:	4bc4      	ldr	r3, [pc, #784]	; (8005f0c <UART_SetConfig+0x9c4>)
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bfc:	e009      	b.n	8005c12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c04:	e005      	b.n	8005c12 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 81da 	beq.w	8005fce <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	4abc      	ldr	r2, [pc, #752]	; (8005f10 <UART_SetConfig+0x9c8>)
 8005c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c2c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d305      	bcc.n	8005c4a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c50:	e1bd      	b.n	8005fce <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	4618      	mov	r0, r3
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	4aac      	ldr	r2, [pc, #688]	; (8005f10 <UART_SetConfig+0x9c8>)
 8005c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	f7fa fb91 	bl	8000390 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	020b      	lsls	r3, r1, #8
 8005c80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c84:	0202      	lsls	r2, r0, #8
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	6849      	ldr	r1, [r1, #4]
 8005c8a:	0849      	lsrs	r1, r1, #1
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	f04f 0100 	mov.w	r1, #0
 8005c92:	1814      	adds	r4, r2, r0
 8005c94:	eb43 0501 	adc.w	r5, r3, r1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f7fa fb73 	bl	8000390 <__aeabi_uldivmod>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4613      	mov	r3, r2
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb8:	d308      	bcc.n	8005ccc <UART_SetConfig+0x784>
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc0:	d204      	bcs.n	8005ccc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	e180      	b.n	8005fce <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cd2:	e17c      	b.n	8005fce <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cdc:	f040 80be 	bne.w	8005e5c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8005ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	dc49      	bgt.n	8005d7c <UART_SetConfig+0x834>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db7c      	blt.n	8005de6 <UART_SetConfig+0x89e>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d87a      	bhi.n	8005de6 <UART_SetConfig+0x89e>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0x7b0>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005d8b 	.word	0x08005d8b
 8005d00:	08005de7 	.word	0x08005de7
 8005d04:	08005de7 	.word	0x08005de7
 8005d08:	08005d93 	.word	0x08005d93
 8005d0c:	08005de7 	.word	0x08005de7
 8005d10:	08005de7 	.word	0x08005de7
 8005d14:	08005de7 	.word	0x08005de7
 8005d18:	08005da3 	.word	0x08005da3
 8005d1c:	08005de7 	.word	0x08005de7
 8005d20:	08005de7 	.word	0x08005de7
 8005d24:	08005de7 	.word	0x08005de7
 8005d28:	08005de7 	.word	0x08005de7
 8005d2c:	08005de7 	.word	0x08005de7
 8005d30:	08005de7 	.word	0x08005de7
 8005d34:	08005de7 	.word	0x08005de7
 8005d38:	08005db3 	.word	0x08005db3
 8005d3c:	08005de7 	.word	0x08005de7
 8005d40:	08005de7 	.word	0x08005de7
 8005d44:	08005de7 	.word	0x08005de7
 8005d48:	08005de7 	.word	0x08005de7
 8005d4c:	08005de7 	.word	0x08005de7
 8005d50:	08005de7 	.word	0x08005de7
 8005d54:	08005de7 	.word	0x08005de7
 8005d58:	08005de7 	.word	0x08005de7
 8005d5c:	08005de7 	.word	0x08005de7
 8005d60:	08005de7 	.word	0x08005de7
 8005d64:	08005de7 	.word	0x08005de7
 8005d68:	08005de7 	.word	0x08005de7
 8005d6c:	08005de7 	.word	0x08005de7
 8005d70:	08005de7 	.word	0x08005de7
 8005d74:	08005de7 	.word	0x08005de7
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d02e      	beq.n	8005dde <UART_SetConfig+0x896>
 8005d80:	e031      	b.n	8005de6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d82:	f7fc fd81 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8005d86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d88:	e033      	b.n	8005df2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d8a:	f7fc fd93 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8005d8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d90:	e02f      	b.n	8005df2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d92:	f107 0314 	add.w	r3, r7, #20
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fd fd28 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005da0:	e027      	b.n	8005df2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005da2:	f107 0308 	add.w	r3, r7, #8
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fd fe74 	bl	8003a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005db0:	e01f      	b.n	8005df2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db2:	4b58      	ldr	r3, [pc, #352]	; (8005f14 <UART_SetConfig+0x9cc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dbe:	4b55      	ldr	r3, [pc, #340]	; (8005f14 <UART_SetConfig+0x9cc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	4a53      	ldr	r2, [pc, #332]	; (8005f18 <UART_SetConfig+0x9d0>)
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dd0:	e00f      	b.n	8005df2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005dd2:	4b51      	ldr	r3, [pc, #324]	; (8005f18 <UART_SetConfig+0x9d0>)
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dd6:	e00c      	b.n	8005df2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dd8:	4b4c      	ldr	r3, [pc, #304]	; (8005f0c <UART_SetConfig+0x9c4>)
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ddc:	e009      	b.n	8005df2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005de4:	e005      	b.n	8005df2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80ea 	beq.w	8005fce <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	4a44      	ldr	r2, [pc, #272]	; (8005f10 <UART_SetConfig+0x9c8>)
 8005e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e04:	461a      	mov	r2, r3
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e0c:	005a      	lsls	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b0f      	cmp	r3, #15
 8005e24:	d916      	bls.n	8005e54 <UART_SetConfig+0x90c>
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2c:	d212      	bcs.n	8005e54 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f023 030f 	bic.w	r3, r3, #15
 8005e36:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e46:	4313      	orrs	r3, r2
 8005e48:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	e0bc      	b.n	8005fce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005e5a:	e0b8      	b.n	8005fce <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	dc4b      	bgt.n	8005efc <UART_SetConfig+0x9b4>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f2c0 8087 	blt.w	8005f78 <UART_SetConfig+0xa30>
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	f200 8084 	bhi.w	8005f78 <UART_SetConfig+0xa30>
 8005e70:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0x930>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005f03 	.word	0x08005f03
 8005e7c:	08005f1d 	.word	0x08005f1d
 8005e80:	08005f79 	.word	0x08005f79
 8005e84:	08005f79 	.word	0x08005f79
 8005e88:	08005f25 	.word	0x08005f25
 8005e8c:	08005f79 	.word	0x08005f79
 8005e90:	08005f79 	.word	0x08005f79
 8005e94:	08005f79 	.word	0x08005f79
 8005e98:	08005f35 	.word	0x08005f35
 8005e9c:	08005f79 	.word	0x08005f79
 8005ea0:	08005f79 	.word	0x08005f79
 8005ea4:	08005f79 	.word	0x08005f79
 8005ea8:	08005f79 	.word	0x08005f79
 8005eac:	08005f79 	.word	0x08005f79
 8005eb0:	08005f79 	.word	0x08005f79
 8005eb4:	08005f79 	.word	0x08005f79
 8005eb8:	08005f45 	.word	0x08005f45
 8005ebc:	08005f79 	.word	0x08005f79
 8005ec0:	08005f79 	.word	0x08005f79
 8005ec4:	08005f79 	.word	0x08005f79
 8005ec8:	08005f79 	.word	0x08005f79
 8005ecc:	08005f79 	.word	0x08005f79
 8005ed0:	08005f79 	.word	0x08005f79
 8005ed4:	08005f79 	.word	0x08005f79
 8005ed8:	08005f79 	.word	0x08005f79
 8005edc:	08005f79 	.word	0x08005f79
 8005ee0:	08005f79 	.word	0x08005f79
 8005ee4:	08005f79 	.word	0x08005f79
 8005ee8:	08005f79 	.word	0x08005f79
 8005eec:	08005f79 	.word	0x08005f79
 8005ef0:	08005f79 	.word	0x08005f79
 8005ef4:	08005f79 	.word	0x08005f79
 8005ef8:	08005f6b 	.word	0x08005f6b
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d037      	beq.n	8005f70 <UART_SetConfig+0xa28>
 8005f00:	e03a      	b.n	8005f78 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f02:	f7fc fcc1 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8005f06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f08:	e03c      	b.n	8005f84 <UART_SetConfig+0xa3c>
 8005f0a:	bf00      	nop
 8005f0c:	003d0900 	.word	0x003d0900
 8005f10:	08006e68 	.word	0x08006e68
 8005f14:	58024400 	.word	0x58024400
 8005f18:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fc fcca 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8005f20:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f22:	e02f      	b.n	8005f84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fd fc5f 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f32:	e027      	b.n	8005f84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f34:	f107 0308 	add.w	r3, r7, #8
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fdab 	bl	8003a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f42:	e01f      	b.n	8005f84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f44:	4b2c      	ldr	r3, [pc, #176]	; (8005ff8 <UART_SetConfig+0xab0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f50:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <UART_SetConfig+0xab0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	4a28      	ldr	r2, [pc, #160]	; (8005ffc <UART_SetConfig+0xab4>)
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f62:	e00f      	b.n	8005f84 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <UART_SetConfig+0xab4>)
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f68:	e00c      	b.n	8005f84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f6a:	4b25      	ldr	r3, [pc, #148]	; (8006000 <UART_SetConfig+0xab8>)
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f6e:	e009      	b.n	8005f84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f76:	e005      	b.n	8005f84 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f82:	bf00      	nop
    }

    if (pclk != 0U)
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d021      	beq.n	8005fce <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <UART_SetConfig+0xabc>)
 8005f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	2b0f      	cmp	r3, #15
 8005fb2:	d909      	bls.n	8005fc8 <UART_SetConfig+0xa80>
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fba:	d205      	bcs.n	8005fc8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	e002      	b.n	8005fce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005fea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3738      	adds	r7, #56	; 0x38
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	03d09000 	.word	0x03d09000
 8006000:	003d0900 	.word	0x003d0900
 8006004:	08006e68 	.word	0x08006e68

08006008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01a      	beq.n	800611e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006106:	d10a      	bne.n	800611e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af02      	add	r7, sp, #8
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800615c:	f7fb f8b0 	bl	80012c0 <HAL_GetTick>
 8006160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b08      	cmp	r3, #8
 800616e:	d10e      	bne.n	800618e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f82f 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e025      	b.n	80061da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d10e      	bne.n	80061ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800619c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f819 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e00f      	b.n	80061da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b09c      	sub	sp, #112	; 0x70
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f2:	e0a9      	b.n	8006348 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	f000 80a5 	beq.w	8006348 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fb f85f 	bl	80012c0 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <UART_WaitOnFlagUntilTimeout+0x32>
 800620e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006210:	2b00      	cmp	r3, #0
 8006212:	d140      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006228:	667b      	str	r3, [r7, #100]	; 0x64
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006234:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e6      	bne.n	8006214 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	663b      	str	r3, [r7, #96]	; 0x60
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006266:	64ba      	str	r2, [r7, #72]	; 0x48
 8006268:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800626c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e5      	bne.n	8006246 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e069      	b.n	800636a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d051      	beq.n	8006348 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b2:	d149      	bne.n	8006348 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
 80062de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e6      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	66bb      	str	r3, [r7, #104]	; 0x68
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006310:	623a      	str	r2, [r7, #32]
 8006312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	61bb      	str	r3, [r7, #24]
   return(result);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e010      	b.n	800636a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4013      	ands	r3, r2
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	429a      	cmp	r2, r3
 8006364:	f43f af46 	beq.w	80061f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3770      	adds	r7, #112	; 0x70
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UARTEx_DisableFifoMode+0x16>
 8006384:	2302      	movs	r3, #2
 8006386:	e027      	b.n	80063d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	; 0x24
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e02d      	b.n	8006458 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f84f 	bl	80064dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e02d      	b.n	80064d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f811 	bl	80064dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d108      	bne.n	80064fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064fc:	e031      	b.n	8006562 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064fe:	2310      	movs	r3, #16
 8006500:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006502:	2310      	movs	r3, #16
 8006504:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	0e5b      	lsrs	r3, r3, #25
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	0f5b      	lsrs	r3, r3, #29
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	7b3a      	ldrb	r2, [r7, #12]
 800652a:	4911      	ldr	r1, [pc, #68]	; (8006570 <UARTEx_SetNbDataToProcess+0x94>)
 800652c:	5c8a      	ldrb	r2, [r1, r2]
 800652e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006532:	7b3a      	ldrb	r2, [r7, #12]
 8006534:	490f      	ldr	r1, [pc, #60]	; (8006574 <UARTEx_SetNbDataToProcess+0x98>)
 8006536:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006538:	fb93 f3f2 	sdiv	r3, r3, r2
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	7b7a      	ldrb	r2, [r7, #13]
 8006548:	4909      	ldr	r1, [pc, #36]	; (8006570 <UARTEx_SetNbDataToProcess+0x94>)
 800654a:	5c8a      	ldrb	r2, [r1, r2]
 800654c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006550:	7b7a      	ldrb	r2, [r7, #13]
 8006552:	4908      	ldr	r1, [pc, #32]	; (8006574 <UARTEx_SetNbDataToProcess+0x98>)
 8006554:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006556:	fb93 f3f2 	sdiv	r3, r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	08006e80 	.word	0x08006e80
 8006574:	08006e88 	.word	0x08006e88

08006578 <__errno>:
 8006578:	4b01      	ldr	r3, [pc, #4]	; (8006580 <__errno+0x8>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	24000030 	.word	0x24000030

08006584 <__libc_init_array>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	4d0d      	ldr	r5, [pc, #52]	; (80065bc <__libc_init_array+0x38>)
 8006588:	4c0d      	ldr	r4, [pc, #52]	; (80065c0 <__libc_init_array+0x3c>)
 800658a:	1b64      	subs	r4, r4, r5
 800658c:	10a4      	asrs	r4, r4, #2
 800658e:	2600      	movs	r6, #0
 8006590:	42a6      	cmp	r6, r4
 8006592:	d109      	bne.n	80065a8 <__libc_init_array+0x24>
 8006594:	4d0b      	ldr	r5, [pc, #44]	; (80065c4 <__libc_init_array+0x40>)
 8006596:	4c0c      	ldr	r4, [pc, #48]	; (80065c8 <__libc_init_array+0x44>)
 8006598:	f000 fc4e 	bl	8006e38 <_init>
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	2600      	movs	r6, #0
 80065a2:	42a6      	cmp	r6, r4
 80065a4:	d105      	bne.n	80065b2 <__libc_init_array+0x2e>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ac:	4798      	blx	r3
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7ee      	b.n	8006590 <__libc_init_array+0xc>
 80065b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b6:	4798      	blx	r3
 80065b8:	3601      	adds	r6, #1
 80065ba:	e7f2      	b.n	80065a2 <__libc_init_array+0x1e>
 80065bc:	08006ecc 	.word	0x08006ecc
 80065c0:	08006ecc 	.word	0x08006ecc
 80065c4:	08006ecc 	.word	0x08006ecc
 80065c8:	08006ed0 	.word	0x08006ed0

080065cc <memset>:
 80065cc:	4402      	add	r2, r0
 80065ce:	4603      	mov	r3, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <siprintf>:
 80065dc:	b40e      	push	{r1, r2, r3}
 80065de:	b500      	push	{lr}
 80065e0:	b09c      	sub	sp, #112	; 0x70
 80065e2:	ab1d      	add	r3, sp, #116	; 0x74
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	9006      	str	r0, [sp, #24]
 80065e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065ec:	4809      	ldr	r0, [pc, #36]	; (8006614 <siprintf+0x38>)
 80065ee:	9107      	str	r1, [sp, #28]
 80065f0:	9104      	str	r1, [sp, #16]
 80065f2:	4909      	ldr	r1, [pc, #36]	; (8006618 <siprintf+0x3c>)
 80065f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f8:	9105      	str	r1, [sp, #20]
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	a902      	add	r1, sp, #8
 8006600:	f000 f868 	bl	80066d4 <_svfiprintf_r>
 8006604:	9b02      	ldr	r3, [sp, #8]
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	b01c      	add	sp, #112	; 0x70
 800660c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006610:	b003      	add	sp, #12
 8006612:	4770      	bx	lr
 8006614:	24000030 	.word	0x24000030
 8006618:	ffff0208 	.word	0xffff0208

0800661c <__ssputs_r>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	688e      	ldr	r6, [r1, #8]
 8006622:	429e      	cmp	r6, r3
 8006624:	4682      	mov	sl, r0
 8006626:	460c      	mov	r4, r1
 8006628:	4690      	mov	r8, r2
 800662a:	461f      	mov	r7, r3
 800662c:	d838      	bhi.n	80066a0 <__ssputs_r+0x84>
 800662e:	898a      	ldrh	r2, [r1, #12]
 8006630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006634:	d032      	beq.n	800669c <__ssputs_r+0x80>
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	6909      	ldr	r1, [r1, #16]
 800663a:	eba5 0901 	sub.w	r9, r5, r1
 800663e:	6965      	ldr	r5, [r4, #20]
 8006640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006648:	3301      	adds	r3, #1
 800664a:	444b      	add	r3, r9
 800664c:	106d      	asrs	r5, r5, #1
 800664e:	429d      	cmp	r5, r3
 8006650:	bf38      	it	cc
 8006652:	461d      	movcc	r5, r3
 8006654:	0553      	lsls	r3, r2, #21
 8006656:	d531      	bpl.n	80066bc <__ssputs_r+0xa0>
 8006658:	4629      	mov	r1, r5
 800665a:	f000 fb47 	bl	8006cec <_malloc_r>
 800665e:	4606      	mov	r6, r0
 8006660:	b950      	cbnz	r0, 8006678 <__ssputs_r+0x5c>
 8006662:	230c      	movs	r3, #12
 8006664:	f8ca 3000 	str.w	r3, [sl]
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	464a      	mov	r2, r9
 800667c:	f000 fabe 	bl	8006bfc <memcpy>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	6165      	str	r5, [r4, #20]
 8006690:	444e      	add	r6, r9
 8006692:	eba5 0509 	sub.w	r5, r5, r9
 8006696:	6026      	str	r6, [r4, #0]
 8006698:	60a5      	str	r5, [r4, #8]
 800669a:	463e      	mov	r6, r7
 800669c:	42be      	cmp	r6, r7
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x86>
 80066a0:	463e      	mov	r6, r7
 80066a2:	4632      	mov	r2, r6
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	4641      	mov	r1, r8
 80066a8:	f000 fab6 	bl	8006c18 <memmove>
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	4432      	add	r2, r6
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	6022      	str	r2, [r4, #0]
 80066b8:	2000      	movs	r0, #0
 80066ba:	e7db      	b.n	8006674 <__ssputs_r+0x58>
 80066bc:	462a      	mov	r2, r5
 80066be:	f000 fb6f 	bl	8006da0 <_realloc_r>
 80066c2:	4606      	mov	r6, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1e1      	bne.n	800668c <__ssputs_r+0x70>
 80066c8:	6921      	ldr	r1, [r4, #16]
 80066ca:	4650      	mov	r0, sl
 80066cc:	f000 fabe 	bl	8006c4c <_free_r>
 80066d0:	e7c7      	b.n	8006662 <__ssputs_r+0x46>
	...

080066d4 <_svfiprintf_r>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	4698      	mov	r8, r3
 80066da:	898b      	ldrh	r3, [r1, #12]
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	b09d      	sub	sp, #116	; 0x74
 80066e0:	4607      	mov	r7, r0
 80066e2:	460d      	mov	r5, r1
 80066e4:	4614      	mov	r4, r2
 80066e6:	d50e      	bpl.n	8006706 <_svfiprintf_r+0x32>
 80066e8:	690b      	ldr	r3, [r1, #16]
 80066ea:	b963      	cbnz	r3, 8006706 <_svfiprintf_r+0x32>
 80066ec:	2140      	movs	r1, #64	; 0x40
 80066ee:	f000 fafd 	bl	8006cec <_malloc_r>
 80066f2:	6028      	str	r0, [r5, #0]
 80066f4:	6128      	str	r0, [r5, #16]
 80066f6:	b920      	cbnz	r0, 8006702 <_svfiprintf_r+0x2e>
 80066f8:	230c      	movs	r3, #12
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	e0d1      	b.n	80068a6 <_svfiprintf_r+0x1d2>
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	616b      	str	r3, [r5, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	9309      	str	r3, [sp, #36]	; 0x24
 800670a:	2320      	movs	r3, #32
 800670c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006710:	f8cd 800c 	str.w	r8, [sp, #12]
 8006714:	2330      	movs	r3, #48	; 0x30
 8006716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068c0 <_svfiprintf_r+0x1ec>
 800671a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800671e:	f04f 0901 	mov.w	r9, #1
 8006722:	4623      	mov	r3, r4
 8006724:	469a      	mov	sl, r3
 8006726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672a:	b10a      	cbz	r2, 8006730 <_svfiprintf_r+0x5c>
 800672c:	2a25      	cmp	r2, #37	; 0x25
 800672e:	d1f9      	bne.n	8006724 <_svfiprintf_r+0x50>
 8006730:	ebba 0b04 	subs.w	fp, sl, r4
 8006734:	d00b      	beq.n	800674e <_svfiprintf_r+0x7a>
 8006736:	465b      	mov	r3, fp
 8006738:	4622      	mov	r2, r4
 800673a:	4629      	mov	r1, r5
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff ff6d 	bl	800661c <__ssputs_r>
 8006742:	3001      	adds	r0, #1
 8006744:	f000 80aa 	beq.w	800689c <_svfiprintf_r+0x1c8>
 8006748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674a:	445a      	add	r2, fp
 800674c:	9209      	str	r2, [sp, #36]	; 0x24
 800674e:	f89a 3000 	ldrb.w	r3, [sl]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80a2 	beq.w	800689c <_svfiprintf_r+0x1c8>
 8006758:	2300      	movs	r3, #0
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006762:	f10a 0a01 	add.w	sl, sl, #1
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800676e:	931a      	str	r3, [sp, #104]	; 0x68
 8006770:	4654      	mov	r4, sl
 8006772:	2205      	movs	r2, #5
 8006774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006778:	4851      	ldr	r0, [pc, #324]	; (80068c0 <_svfiprintf_r+0x1ec>)
 800677a:	f7f9 fdb9 	bl	80002f0 <memchr>
 800677e:	9a04      	ldr	r2, [sp, #16]
 8006780:	b9d8      	cbnz	r0, 80067ba <_svfiprintf_r+0xe6>
 8006782:	06d0      	lsls	r0, r2, #27
 8006784:	bf44      	itt	mi
 8006786:	2320      	movmi	r3, #32
 8006788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678c:	0711      	lsls	r1, r2, #28
 800678e:	bf44      	itt	mi
 8006790:	232b      	movmi	r3, #43	; 0x2b
 8006792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006796:	f89a 3000 	ldrb.w	r3, [sl]
 800679a:	2b2a      	cmp	r3, #42	; 0x2a
 800679c:	d015      	beq.n	80067ca <_svfiprintf_r+0xf6>
 800679e:	9a07      	ldr	r2, [sp, #28]
 80067a0:	4654      	mov	r4, sl
 80067a2:	2000      	movs	r0, #0
 80067a4:	f04f 0c0a 	mov.w	ip, #10
 80067a8:	4621      	mov	r1, r4
 80067aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ae:	3b30      	subs	r3, #48	; 0x30
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d94e      	bls.n	8006852 <_svfiprintf_r+0x17e>
 80067b4:	b1b0      	cbz	r0, 80067e4 <_svfiprintf_r+0x110>
 80067b6:	9207      	str	r2, [sp, #28]
 80067b8:	e014      	b.n	80067e4 <_svfiprintf_r+0x110>
 80067ba:	eba0 0308 	sub.w	r3, r0, r8
 80067be:	fa09 f303 	lsl.w	r3, r9, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	46a2      	mov	sl, r4
 80067c8:	e7d2      	b.n	8006770 <_svfiprintf_r+0x9c>
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	9103      	str	r1, [sp, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bfbb      	ittet	lt
 80067d6:	425b      	neglt	r3, r3
 80067d8:	f042 0202 	orrlt.w	r2, r2, #2
 80067dc:	9307      	strge	r3, [sp, #28]
 80067de:	9307      	strlt	r3, [sp, #28]
 80067e0:	bfb8      	it	lt
 80067e2:	9204      	strlt	r2, [sp, #16]
 80067e4:	7823      	ldrb	r3, [r4, #0]
 80067e6:	2b2e      	cmp	r3, #46	; 0x2e
 80067e8:	d10c      	bne.n	8006804 <_svfiprintf_r+0x130>
 80067ea:	7863      	ldrb	r3, [r4, #1]
 80067ec:	2b2a      	cmp	r3, #42	; 0x2a
 80067ee:	d135      	bne.n	800685c <_svfiprintf_r+0x188>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	9203      	str	r2, [sp, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bfb8      	it	lt
 80067fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006800:	3402      	adds	r4, #2
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068d0 <_svfiprintf_r+0x1fc>
 8006808:	7821      	ldrb	r1, [r4, #0]
 800680a:	2203      	movs	r2, #3
 800680c:	4650      	mov	r0, sl
 800680e:	f7f9 fd6f 	bl	80002f0 <memchr>
 8006812:	b140      	cbz	r0, 8006826 <_svfiprintf_r+0x152>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	eba0 000a 	sub.w	r0, r0, sl
 800681a:	fa03 f000 	lsl.w	r0, r3, r0
 800681e:	9b04      	ldr	r3, [sp, #16]
 8006820:	4303      	orrs	r3, r0
 8006822:	3401      	adds	r4, #1
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682a:	4826      	ldr	r0, [pc, #152]	; (80068c4 <_svfiprintf_r+0x1f0>)
 800682c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006830:	2206      	movs	r2, #6
 8006832:	f7f9 fd5d 	bl	80002f0 <memchr>
 8006836:	2800      	cmp	r0, #0
 8006838:	d038      	beq.n	80068ac <_svfiprintf_r+0x1d8>
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <_svfiprintf_r+0x1f4>)
 800683c:	bb1b      	cbnz	r3, 8006886 <_svfiprintf_r+0x1b2>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	3307      	adds	r3, #7
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	3308      	adds	r3, #8
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684c:	4433      	add	r3, r6
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	e767      	b.n	8006722 <_svfiprintf_r+0x4e>
 8006852:	fb0c 3202 	mla	r2, ip, r2, r3
 8006856:	460c      	mov	r4, r1
 8006858:	2001      	movs	r0, #1
 800685a:	e7a5      	b.n	80067a8 <_svfiprintf_r+0xd4>
 800685c:	2300      	movs	r3, #0
 800685e:	3401      	adds	r4, #1
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	4619      	mov	r1, r3
 8006864:	f04f 0c0a 	mov.w	ip, #10
 8006868:	4620      	mov	r0, r4
 800686a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800686e:	3a30      	subs	r2, #48	; 0x30
 8006870:	2a09      	cmp	r2, #9
 8006872:	d903      	bls.n	800687c <_svfiprintf_r+0x1a8>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0c5      	beq.n	8006804 <_svfiprintf_r+0x130>
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	e7c3      	b.n	8006804 <_svfiprintf_r+0x130>
 800687c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006880:	4604      	mov	r4, r0
 8006882:	2301      	movs	r3, #1
 8006884:	e7f0      	b.n	8006868 <_svfiprintf_r+0x194>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <_svfiprintf_r+0x1f8>)
 800688e:	a904      	add	r1, sp, #16
 8006890:	4638      	mov	r0, r7
 8006892:	f3af 8000 	nop.w
 8006896:	1c42      	adds	r2, r0, #1
 8006898:	4606      	mov	r6, r0
 800689a:	d1d6      	bne.n	800684a <_svfiprintf_r+0x176>
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	065b      	lsls	r3, r3, #25
 80068a0:	f53f af2c 	bmi.w	80066fc <_svfiprintf_r+0x28>
 80068a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a6:	b01d      	add	sp, #116	; 0x74
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	ab03      	add	r3, sp, #12
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	462a      	mov	r2, r5
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <_svfiprintf_r+0x1f8>)
 80068b4:	a904      	add	r1, sp, #16
 80068b6:	4638      	mov	r0, r7
 80068b8:	f000 f87a 	bl	80069b0 <_printf_i>
 80068bc:	e7eb      	b.n	8006896 <_svfiprintf_r+0x1c2>
 80068be:	bf00      	nop
 80068c0:	08006e90 	.word	0x08006e90
 80068c4:	08006e9a 	.word	0x08006e9a
 80068c8:	00000000 	.word	0x00000000
 80068cc:	0800661d 	.word	0x0800661d
 80068d0:	08006e96 	.word	0x08006e96

080068d4 <_printf_common>:
 80068d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d8:	4616      	mov	r6, r2
 80068da:	4699      	mov	r9, r3
 80068dc:	688a      	ldr	r2, [r1, #8]
 80068de:	690b      	ldr	r3, [r1, #16]
 80068e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068e4:	4293      	cmp	r3, r2
 80068e6:	bfb8      	it	lt
 80068e8:	4613      	movlt	r3, r2
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068f0:	4607      	mov	r7, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	b10a      	cbz	r2, 80068fa <_printf_common+0x26>
 80068f6:	3301      	adds	r3, #1
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	0699      	lsls	r1, r3, #26
 80068fe:	bf42      	ittt	mi
 8006900:	6833      	ldrmi	r3, [r6, #0]
 8006902:	3302      	addmi	r3, #2
 8006904:	6033      	strmi	r3, [r6, #0]
 8006906:	6825      	ldr	r5, [r4, #0]
 8006908:	f015 0506 	ands.w	r5, r5, #6
 800690c:	d106      	bne.n	800691c <_printf_common+0x48>
 800690e:	f104 0a19 	add.w	sl, r4, #25
 8006912:	68e3      	ldr	r3, [r4, #12]
 8006914:	6832      	ldr	r2, [r6, #0]
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	42ab      	cmp	r3, r5
 800691a:	dc26      	bgt.n	800696a <_printf_common+0x96>
 800691c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006920:	1e13      	subs	r3, r2, #0
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	bf18      	it	ne
 8006926:	2301      	movne	r3, #1
 8006928:	0692      	lsls	r2, r2, #26
 800692a:	d42b      	bmi.n	8006984 <_printf_common+0xb0>
 800692c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006930:	4649      	mov	r1, r9
 8006932:	4638      	mov	r0, r7
 8006934:	47c0      	blx	r8
 8006936:	3001      	adds	r0, #1
 8006938:	d01e      	beq.n	8006978 <_printf_common+0xa4>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	68e5      	ldr	r5, [r4, #12]
 800693e:	6832      	ldr	r2, [r6, #0]
 8006940:	f003 0306 	and.w	r3, r3, #6
 8006944:	2b04      	cmp	r3, #4
 8006946:	bf08      	it	eq
 8006948:	1aad      	subeq	r5, r5, r2
 800694a:	68a3      	ldr	r3, [r4, #8]
 800694c:	6922      	ldr	r2, [r4, #16]
 800694e:	bf0c      	ite	eq
 8006950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006954:	2500      	movne	r5, #0
 8006956:	4293      	cmp	r3, r2
 8006958:	bfc4      	itt	gt
 800695a:	1a9b      	subgt	r3, r3, r2
 800695c:	18ed      	addgt	r5, r5, r3
 800695e:	2600      	movs	r6, #0
 8006960:	341a      	adds	r4, #26
 8006962:	42b5      	cmp	r5, r6
 8006964:	d11a      	bne.n	800699c <_printf_common+0xc8>
 8006966:	2000      	movs	r0, #0
 8006968:	e008      	b.n	800697c <_printf_common+0xa8>
 800696a:	2301      	movs	r3, #1
 800696c:	4652      	mov	r2, sl
 800696e:	4649      	mov	r1, r9
 8006970:	4638      	mov	r0, r7
 8006972:	47c0      	blx	r8
 8006974:	3001      	adds	r0, #1
 8006976:	d103      	bne.n	8006980 <_printf_common+0xac>
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	3501      	adds	r5, #1
 8006982:	e7c6      	b.n	8006912 <_printf_common+0x3e>
 8006984:	18e1      	adds	r1, r4, r3
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	2030      	movs	r0, #48	; 0x30
 800698a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800698e:	4422      	add	r2, r4
 8006990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006998:	3302      	adds	r3, #2
 800699a:	e7c7      	b.n	800692c <_printf_common+0x58>
 800699c:	2301      	movs	r3, #1
 800699e:	4622      	mov	r2, r4
 80069a0:	4649      	mov	r1, r9
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	3001      	adds	r0, #1
 80069a8:	d0e6      	beq.n	8006978 <_printf_common+0xa4>
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7d9      	b.n	8006962 <_printf_common+0x8e>
	...

080069b0 <_printf_i>:
 80069b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	460c      	mov	r4, r1
 80069b6:	4691      	mov	r9, r2
 80069b8:	7e27      	ldrb	r7, [r4, #24]
 80069ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069bc:	2f78      	cmp	r7, #120	; 0x78
 80069be:	4680      	mov	r8, r0
 80069c0:	469a      	mov	sl, r3
 80069c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069c6:	d807      	bhi.n	80069d8 <_printf_i+0x28>
 80069c8:	2f62      	cmp	r7, #98	; 0x62
 80069ca:	d80a      	bhi.n	80069e2 <_printf_i+0x32>
 80069cc:	2f00      	cmp	r7, #0
 80069ce:	f000 80d8 	beq.w	8006b82 <_printf_i+0x1d2>
 80069d2:	2f58      	cmp	r7, #88	; 0x58
 80069d4:	f000 80a3 	beq.w	8006b1e <_printf_i+0x16e>
 80069d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069e0:	e03a      	b.n	8006a58 <_printf_i+0xa8>
 80069e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069e6:	2b15      	cmp	r3, #21
 80069e8:	d8f6      	bhi.n	80069d8 <_printf_i+0x28>
 80069ea:	a001      	add	r0, pc, #4	; (adr r0, 80069f0 <_printf_i+0x40>)
 80069ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069f0:	08006a49 	.word	0x08006a49
 80069f4:	08006a5d 	.word	0x08006a5d
 80069f8:	080069d9 	.word	0x080069d9
 80069fc:	080069d9 	.word	0x080069d9
 8006a00:	080069d9 	.word	0x080069d9
 8006a04:	080069d9 	.word	0x080069d9
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	080069d9 	.word	0x080069d9
 8006a10:	080069d9 	.word	0x080069d9
 8006a14:	080069d9 	.word	0x080069d9
 8006a18:	080069d9 	.word	0x080069d9
 8006a1c:	08006b69 	.word	0x08006b69
 8006a20:	08006a8d 	.word	0x08006a8d
 8006a24:	08006b4b 	.word	0x08006b4b
 8006a28:	080069d9 	.word	0x080069d9
 8006a2c:	080069d9 	.word	0x080069d9
 8006a30:	08006b8b 	.word	0x08006b8b
 8006a34:	080069d9 	.word	0x080069d9
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	080069d9 	.word	0x080069d9
 8006a40:	080069d9 	.word	0x080069d9
 8006a44:	08006b53 	.word	0x08006b53
 8006a48:	680b      	ldr	r3, [r1, #0]
 8006a4a:	1d1a      	adds	r2, r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	600a      	str	r2, [r1, #0]
 8006a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0a3      	b.n	8006ba4 <_printf_i+0x1f4>
 8006a5c:	6825      	ldr	r5, [r4, #0]
 8006a5e:	6808      	ldr	r0, [r1, #0]
 8006a60:	062e      	lsls	r6, r5, #24
 8006a62:	f100 0304 	add.w	r3, r0, #4
 8006a66:	d50a      	bpl.n	8006a7e <_printf_i+0xce>
 8006a68:	6805      	ldr	r5, [r0, #0]
 8006a6a:	600b      	str	r3, [r1, #0]
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	da03      	bge.n	8006a78 <_printf_i+0xc8>
 8006a70:	232d      	movs	r3, #45	; 0x2d
 8006a72:	426d      	negs	r5, r5
 8006a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a78:	485e      	ldr	r0, [pc, #376]	; (8006bf4 <_printf_i+0x244>)
 8006a7a:	230a      	movs	r3, #10
 8006a7c:	e019      	b.n	8006ab2 <_printf_i+0x102>
 8006a7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a82:	6805      	ldr	r5, [r0, #0]
 8006a84:	600b      	str	r3, [r1, #0]
 8006a86:	bf18      	it	ne
 8006a88:	b22d      	sxthne	r5, r5
 8006a8a:	e7ef      	b.n	8006a6c <_printf_i+0xbc>
 8006a8c:	680b      	ldr	r3, [r1, #0]
 8006a8e:	6825      	ldr	r5, [r4, #0]
 8006a90:	1d18      	adds	r0, r3, #4
 8006a92:	6008      	str	r0, [r1, #0]
 8006a94:	0628      	lsls	r0, r5, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xec>
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0xf2>
 8006a9c:	0669      	lsls	r1, r5, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xe8>
 8006aa0:	881d      	ldrh	r5, [r3, #0]
 8006aa2:	4854      	ldr	r0, [pc, #336]	; (8006bf4 <_printf_i+0x244>)
 8006aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2308      	moveq	r3, #8
 8006aaa:	230a      	movne	r3, #10
 8006aac:	2100      	movs	r1, #0
 8006aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ab2:	6866      	ldr	r6, [r4, #4]
 8006ab4:	60a6      	str	r6, [r4, #8]
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	bfa2      	ittt	ge
 8006aba:	6821      	ldrge	r1, [r4, #0]
 8006abc:	f021 0104 	bicge.w	r1, r1, #4
 8006ac0:	6021      	strge	r1, [r4, #0]
 8006ac2:	b90d      	cbnz	r5, 8006ac8 <_printf_i+0x118>
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	d04d      	beq.n	8006b64 <_printf_i+0x1b4>
 8006ac8:	4616      	mov	r6, r2
 8006aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ace:	fb03 5711 	mls	r7, r3, r1, r5
 8006ad2:	5dc7      	ldrb	r7, [r0, r7]
 8006ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ad8:	462f      	mov	r7, r5
 8006ada:	42bb      	cmp	r3, r7
 8006adc:	460d      	mov	r5, r1
 8006ade:	d9f4      	bls.n	8006aca <_printf_i+0x11a>
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d10b      	bne.n	8006afc <_printf_i+0x14c>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	07df      	lsls	r7, r3, #31
 8006ae8:	d508      	bpl.n	8006afc <_printf_i+0x14c>
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	6861      	ldr	r1, [r4, #4]
 8006aee:	4299      	cmp	r1, r3
 8006af0:	bfde      	ittt	le
 8006af2:	2330      	movle	r3, #48	; 0x30
 8006af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006afc:	1b92      	subs	r2, r2, r6
 8006afe:	6122      	str	r2, [r4, #16]
 8006b00:	f8cd a000 	str.w	sl, [sp]
 8006b04:	464b      	mov	r3, r9
 8006b06:	aa03      	add	r2, sp, #12
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fee2 	bl	80068d4 <_printf_common>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d14c      	bne.n	8006bae <_printf_i+0x1fe>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	b004      	add	sp, #16
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	4835      	ldr	r0, [pc, #212]	; (8006bf4 <_printf_i+0x244>)
 8006b20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	680e      	ldr	r6, [r1, #0]
 8006b28:	061f      	lsls	r7, r3, #24
 8006b2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b2e:	600e      	str	r6, [r1, #0]
 8006b30:	d514      	bpl.n	8006b5c <_printf_i+0x1ac>
 8006b32:	07d9      	lsls	r1, r3, #31
 8006b34:	bf44      	itt	mi
 8006b36:	f043 0320 	orrmi.w	r3, r3, #32
 8006b3a:	6023      	strmi	r3, [r4, #0]
 8006b3c:	b91d      	cbnz	r5, 8006b46 <_printf_i+0x196>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f023 0320 	bic.w	r3, r3, #32
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	2310      	movs	r3, #16
 8006b48:	e7b0      	b.n	8006aac <_printf_i+0xfc>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	f043 0320 	orr.w	r3, r3, #32
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	2378      	movs	r3, #120	; 0x78
 8006b54:	4828      	ldr	r0, [pc, #160]	; (8006bf8 <_printf_i+0x248>)
 8006b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b5a:	e7e3      	b.n	8006b24 <_printf_i+0x174>
 8006b5c:	065e      	lsls	r6, r3, #25
 8006b5e:	bf48      	it	mi
 8006b60:	b2ad      	uxthmi	r5, r5
 8006b62:	e7e6      	b.n	8006b32 <_printf_i+0x182>
 8006b64:	4616      	mov	r6, r2
 8006b66:	e7bb      	b.n	8006ae0 <_printf_i+0x130>
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	6826      	ldr	r6, [r4, #0]
 8006b6c:	6960      	ldr	r0, [r4, #20]
 8006b6e:	1d1d      	adds	r5, r3, #4
 8006b70:	600d      	str	r5, [r1, #0]
 8006b72:	0635      	lsls	r5, r6, #24
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	d501      	bpl.n	8006b7c <_printf_i+0x1cc>
 8006b78:	6018      	str	r0, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <_printf_i+0x1d2>
 8006b7c:	0671      	lsls	r1, r6, #25
 8006b7e:	d5fb      	bpl.n	8006b78 <_printf_i+0x1c8>
 8006b80:	8018      	strh	r0, [r3, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	4616      	mov	r6, r2
 8006b88:	e7ba      	b.n	8006b00 <_printf_i+0x150>
 8006b8a:	680b      	ldr	r3, [r1, #0]
 8006b8c:	1d1a      	adds	r2, r3, #4
 8006b8e:	600a      	str	r2, [r1, #0]
 8006b90:	681e      	ldr	r6, [r3, #0]
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	2100      	movs	r1, #0
 8006b96:	4630      	mov	r0, r6
 8006b98:	f7f9 fbaa 	bl	80002f0 <memchr>
 8006b9c:	b108      	cbz	r0, 8006ba2 <_printf_i+0x1f2>
 8006b9e:	1b80      	subs	r0, r0, r6
 8006ba0:	6060      	str	r0, [r4, #4]
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bac:	e7a8      	b.n	8006b00 <_printf_i+0x150>
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	47d0      	blx	sl
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d0ab      	beq.n	8006b14 <_printf_i+0x164>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	079b      	lsls	r3, r3, #30
 8006bc0:	d413      	bmi.n	8006bea <_printf_i+0x23a>
 8006bc2:	68e0      	ldr	r0, [r4, #12]
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	4298      	cmp	r0, r3
 8006bc8:	bfb8      	it	lt
 8006bca:	4618      	movlt	r0, r3
 8006bcc:	e7a4      	b.n	8006b18 <_printf_i+0x168>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	47d0      	blx	sl
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d09b      	beq.n	8006b14 <_printf_i+0x164>
 8006bdc:	3501      	adds	r5, #1
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	9903      	ldr	r1, [sp, #12]
 8006be2:	1a5b      	subs	r3, r3, r1
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dcf2      	bgt.n	8006bce <_printf_i+0x21e>
 8006be8:	e7eb      	b.n	8006bc2 <_printf_i+0x212>
 8006bea:	2500      	movs	r5, #0
 8006bec:	f104 0619 	add.w	r6, r4, #25
 8006bf0:	e7f5      	b.n	8006bde <_printf_i+0x22e>
 8006bf2:	bf00      	nop
 8006bf4:	08006ea1 	.word	0x08006ea1
 8006bf8:	08006eb2 	.word	0x08006eb2

08006bfc <memcpy>:
 8006bfc:	440a      	add	r2, r1
 8006bfe:	4291      	cmp	r1, r2
 8006c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c04:	d100      	bne.n	8006c08 <memcpy+0xc>
 8006c06:	4770      	bx	lr
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c12:	4291      	cmp	r1, r2
 8006c14:	d1f9      	bne.n	8006c0a <memcpy+0xe>
 8006c16:	bd10      	pop	{r4, pc}

08006c18 <memmove>:
 8006c18:	4288      	cmp	r0, r1
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	eb01 0402 	add.w	r4, r1, r2
 8006c20:	d902      	bls.n	8006c28 <memmove+0x10>
 8006c22:	4284      	cmp	r4, r0
 8006c24:	4623      	mov	r3, r4
 8006c26:	d807      	bhi.n	8006c38 <memmove+0x20>
 8006c28:	1e43      	subs	r3, r0, #1
 8006c2a:	42a1      	cmp	r1, r4
 8006c2c:	d008      	beq.n	8006c40 <memmove+0x28>
 8006c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c36:	e7f8      	b.n	8006c2a <memmove+0x12>
 8006c38:	4402      	add	r2, r0
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	428a      	cmp	r2, r1
 8006c3e:	d100      	bne.n	8006c42 <memmove+0x2a>
 8006c40:	bd10      	pop	{r4, pc}
 8006c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c4a:	e7f7      	b.n	8006c3c <memmove+0x24>

08006c4c <_free_r>:
 8006c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d048      	beq.n	8006ce4 <_free_r+0x98>
 8006c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c56:	9001      	str	r0, [sp, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c5e:	bfb8      	it	lt
 8006c60:	18e4      	addlt	r4, r4, r3
 8006c62:	f000 f8d3 	bl	8006e0c <__malloc_lock>
 8006c66:	4a20      	ldr	r2, [pc, #128]	; (8006ce8 <_free_r+0x9c>)
 8006c68:	9801      	ldr	r0, [sp, #4]
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	b933      	cbnz	r3, 8006c7e <_free_r+0x32>
 8006c70:	6063      	str	r3, [r4, #4]
 8006c72:	6014      	str	r4, [r2, #0]
 8006c74:	b003      	add	sp, #12
 8006c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c7a:	f000 b8cd 	b.w	8006e18 <__malloc_unlock>
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	d90b      	bls.n	8006c9a <_free_r+0x4e>
 8006c82:	6821      	ldr	r1, [r4, #0]
 8006c84:	1862      	adds	r2, r4, r1
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bf04      	itt	eq
 8006c8a:	681a      	ldreq	r2, [r3, #0]
 8006c8c:	685b      	ldreq	r3, [r3, #4]
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	bf04      	itt	eq
 8006c92:	1852      	addeq	r2, r2, r1
 8006c94:	6022      	streq	r2, [r4, #0]
 8006c96:	602c      	str	r4, [r5, #0]
 8006c98:	e7ec      	b.n	8006c74 <_free_r+0x28>
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	b10b      	cbz	r3, 8006ca4 <_free_r+0x58>
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d9fa      	bls.n	8006c9a <_free_r+0x4e>
 8006ca4:	6811      	ldr	r1, [r2, #0]
 8006ca6:	1855      	adds	r5, r2, r1
 8006ca8:	42a5      	cmp	r5, r4
 8006caa:	d10b      	bne.n	8006cc4 <_free_r+0x78>
 8006cac:	6824      	ldr	r4, [r4, #0]
 8006cae:	4421      	add	r1, r4
 8006cb0:	1854      	adds	r4, r2, r1
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	6011      	str	r1, [r2, #0]
 8006cb6:	d1dd      	bne.n	8006c74 <_free_r+0x28>
 8006cb8:	681c      	ldr	r4, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	6053      	str	r3, [r2, #4]
 8006cbe:	4421      	add	r1, r4
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	e7d7      	b.n	8006c74 <_free_r+0x28>
 8006cc4:	d902      	bls.n	8006ccc <_free_r+0x80>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	e7d3      	b.n	8006c74 <_free_r+0x28>
 8006ccc:	6825      	ldr	r5, [r4, #0]
 8006cce:	1961      	adds	r1, r4, r5
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	bf04      	itt	eq
 8006cd4:	6819      	ldreq	r1, [r3, #0]
 8006cd6:	685b      	ldreq	r3, [r3, #4]
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	bf04      	itt	eq
 8006cdc:	1949      	addeq	r1, r1, r5
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	6054      	str	r4, [r2, #4]
 8006ce2:	e7c7      	b.n	8006c74 <_free_r+0x28>
 8006ce4:	b003      	add	sp, #12
 8006ce6:	bd30      	pop	{r4, r5, pc}
 8006ce8:	240000b8 	.word	0x240000b8

08006cec <_malloc_r>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	1ccd      	adds	r5, r1, #3
 8006cf0:	f025 0503 	bic.w	r5, r5, #3
 8006cf4:	3508      	adds	r5, #8
 8006cf6:	2d0c      	cmp	r5, #12
 8006cf8:	bf38      	it	cc
 8006cfa:	250c      	movcc	r5, #12
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	4606      	mov	r6, r0
 8006d00:	db01      	blt.n	8006d06 <_malloc_r+0x1a>
 8006d02:	42a9      	cmp	r1, r5
 8006d04:	d903      	bls.n	8006d0e <_malloc_r+0x22>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0e:	f000 f87d 	bl	8006e0c <__malloc_lock>
 8006d12:	4921      	ldr	r1, [pc, #132]	; (8006d98 <_malloc_r+0xac>)
 8006d14:	680a      	ldr	r2, [r1, #0]
 8006d16:	4614      	mov	r4, r2
 8006d18:	b99c      	cbnz	r4, 8006d42 <_malloc_r+0x56>
 8006d1a:	4f20      	ldr	r7, [pc, #128]	; (8006d9c <_malloc_r+0xb0>)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	b923      	cbnz	r3, 8006d2a <_malloc_r+0x3e>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 f862 	bl	8006dec <_sbrk_r>
 8006d28:	6038      	str	r0, [r7, #0]
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 f85d 	bl	8006dec <_sbrk_r>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	d123      	bne.n	8006d7e <_malloc_r+0x92>
 8006d36:	230c      	movs	r3, #12
 8006d38:	6033      	str	r3, [r6, #0]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f86c 	bl	8006e18 <__malloc_unlock>
 8006d40:	e7e3      	b.n	8006d0a <_malloc_r+0x1e>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	1b5b      	subs	r3, r3, r5
 8006d46:	d417      	bmi.n	8006d78 <_malloc_r+0x8c>
 8006d48:	2b0b      	cmp	r3, #11
 8006d4a:	d903      	bls.n	8006d54 <_malloc_r+0x68>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	441c      	add	r4, r3
 8006d50:	6025      	str	r5, [r4, #0]
 8006d52:	e004      	b.n	8006d5e <_malloc_r+0x72>
 8006d54:	6863      	ldr	r3, [r4, #4]
 8006d56:	42a2      	cmp	r2, r4
 8006d58:	bf0c      	ite	eq
 8006d5a:	600b      	streq	r3, [r1, #0]
 8006d5c:	6053      	strne	r3, [r2, #4]
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f000 f85a 	bl	8006e18 <__malloc_unlock>
 8006d64:	f104 000b 	add.w	r0, r4, #11
 8006d68:	1d23      	adds	r3, r4, #4
 8006d6a:	f020 0007 	bic.w	r0, r0, #7
 8006d6e:	1ac2      	subs	r2, r0, r3
 8006d70:	d0cc      	beq.n	8006d0c <_malloc_r+0x20>
 8006d72:	1a1b      	subs	r3, r3, r0
 8006d74:	50a3      	str	r3, [r4, r2]
 8006d76:	e7c9      	b.n	8006d0c <_malloc_r+0x20>
 8006d78:	4622      	mov	r2, r4
 8006d7a:	6864      	ldr	r4, [r4, #4]
 8006d7c:	e7cc      	b.n	8006d18 <_malloc_r+0x2c>
 8006d7e:	1cc4      	adds	r4, r0, #3
 8006d80:	f024 0403 	bic.w	r4, r4, #3
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	d0e3      	beq.n	8006d50 <_malloc_r+0x64>
 8006d88:	1a21      	subs	r1, r4, r0
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 f82e 	bl	8006dec <_sbrk_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d1dd      	bne.n	8006d50 <_malloc_r+0x64>
 8006d94:	e7cf      	b.n	8006d36 <_malloc_r+0x4a>
 8006d96:	bf00      	nop
 8006d98:	240000b8 	.word	0x240000b8
 8006d9c:	240000bc 	.word	0x240000bc

08006da0 <_realloc_r>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	4607      	mov	r7, r0
 8006da4:	4614      	mov	r4, r2
 8006da6:	460e      	mov	r6, r1
 8006da8:	b921      	cbnz	r1, 8006db4 <_realloc_r+0x14>
 8006daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dae:	4611      	mov	r1, r2
 8006db0:	f7ff bf9c 	b.w	8006cec <_malloc_r>
 8006db4:	b922      	cbnz	r2, 8006dc0 <_realloc_r+0x20>
 8006db6:	f7ff ff49 	bl	8006c4c <_free_r>
 8006dba:	4625      	mov	r5, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc0:	f000 f830 	bl	8006e24 <_malloc_usable_size_r>
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	d20f      	bcs.n	8006de8 <_realloc_r+0x48>
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f7ff ff8e 	bl	8006cec <_malloc_r>
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d0f2      	beq.n	8006dbc <_realloc_r+0x1c>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4622      	mov	r2, r4
 8006dda:	f7ff ff0f 	bl	8006bfc <memcpy>
 8006dde:	4631      	mov	r1, r6
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff ff33 	bl	8006c4c <_free_r>
 8006de6:	e7e9      	b.n	8006dbc <_realloc_r+0x1c>
 8006de8:	4635      	mov	r5, r6
 8006dea:	e7e7      	b.n	8006dbc <_realloc_r+0x1c>

08006dec <_sbrk_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d06      	ldr	r5, [pc, #24]	; (8006e08 <_sbrk_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fa f97c 	bl	80010f4 <_sbrk>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_sbrk_r+0x1a>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_sbrk_r+0x1a>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	24000210 	.word	0x24000210

08006e0c <__malloc_lock>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	; (8006e14 <__malloc_lock+0x8>)
 8006e0e:	f000 b811 	b.w	8006e34 <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	24000218 	.word	0x24000218

08006e18 <__malloc_unlock>:
 8006e18:	4801      	ldr	r0, [pc, #4]	; (8006e20 <__malloc_unlock+0x8>)
 8006e1a:	f000 b80c 	b.w	8006e36 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	24000218 	.word	0x24000218

08006e24 <_malloc_usable_size_r>:
 8006e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e28:	1f18      	subs	r0, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bfbc      	itt	lt
 8006e2e:	580b      	ldrlt	r3, [r1, r0]
 8006e30:	18c0      	addlt	r0, r0, r3
 8006e32:	4770      	bx	lr

08006e34 <__retarget_lock_acquire_recursive>:
 8006e34:	4770      	bx	lr

08006e36 <__retarget_lock_release_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
