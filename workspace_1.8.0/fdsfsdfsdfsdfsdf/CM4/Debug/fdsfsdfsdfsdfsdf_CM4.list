
fdsfsdfsdfsdfsdf_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca04  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0810cc9c  0810cc9c  0001cc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ccd4  0810ccd4  0001ccd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ccdc  0810ccdc  0001ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810cce0  0810cce0  0001cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  0810cce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000010  0810ccf4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  10000070  0810cd54  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  100000d0  0810cdb4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10000da8  0810cdb4  00020da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000490a0  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062e1  00000000  00000000  000691a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029e8  00000000  00000000  0006f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002818  00000000  00000000  00071e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a5b9  00000000  00000000  00074688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000345f8  00000000  00000000  000bec41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001def32  00000000  00000000  000f3239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002d216b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b930  00000000  00000000  002d21c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810cc84 	.word	0x0810cc84

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	0810cc84 	.word	0x0810cc84

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96e 	b.w	81005cc <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468c      	mov	ip, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	f040 8083 	bne.w	810041e <__udivmoddi4+0x116>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d947      	bls.n	81003ae <__udivmoddi4+0xa6>
 810031e:	fab2 f282 	clz	r2, r2
 8100322:	b142      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100324:	f1c2 0020 	rsb	r0, r2, #32
 8100328:	fa24 f000 	lsr.w	r0, r4, r0
 810032c:	4091      	lsls	r1, r2
 810032e:	4097      	lsls	r7, r2
 8100330:	ea40 0c01 	orr.w	ip, r0, r1
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbbc f6f8 	udiv	r6, ip, r8
 8100340:	fa1f fe87 	uxth.w	lr, r7
 8100344:	fb08 c116 	mls	r1, r8, r6, ip
 8100348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034c:	fb06 f10e 	mul.w	r1, r6, lr
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18fb      	adds	r3, r7, r3
 8100356:	f106 30ff 	add.w	r0, r6, #4294967295
 810035a:	f080 8119 	bcs.w	8100590 <__udivmoddi4+0x288>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8116 	bls.w	8100590 <__udivmoddi4+0x288>
 8100364:	3e02      	subs	r6, #2
 8100366:	443b      	add	r3, r7
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100370:	fb08 3310 	mls	r3, r8, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fe0e 	mul.w	lr, r0, lr
 810037c:	45a6      	cmp	lr, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	193c      	adds	r4, r7, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8105 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810038a:	45a6      	cmp	lr, r4
 810038c:	f240 8102 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100390:	3802      	subs	r0, #2
 8100392:	443c      	add	r4, r7
 8100394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100398:	eba4 040e 	sub.w	r4, r4, lr
 810039c:	2600      	movs	r6, #0
 810039e:	b11d      	cbz	r5, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c5 4300 	strd	r4, r3, [r5]
 81003a8:	4631      	mov	r1, r6
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	b902      	cbnz	r2, 81003b2 <__udivmoddi4+0xaa>
 81003b0:	deff      	udf	#255	; 0xff
 81003b2:	fab2 f282 	clz	r2, r2
 81003b6:	2a00      	cmp	r2, #0
 81003b8:	d150      	bne.n	810045c <__udivmoddi4+0x154>
 81003ba:	1bcb      	subs	r3, r1, r7
 81003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003c0:	fa1f f887 	uxth.w	r8, r7
 81003c4:	2601      	movs	r6, #1
 81003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 81003ca:	0c21      	lsrs	r1, r4, #16
 81003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 81003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81003d4:	fb08 f30c 	mul.w	r3, r8, ip
 81003d8:	428b      	cmp	r3, r1
 81003da:	d907      	bls.n	81003ec <__udivmoddi4+0xe4>
 81003dc:	1879      	adds	r1, r7, r1
 81003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 81003e2:	d202      	bcs.n	81003ea <__udivmoddi4+0xe2>
 81003e4:	428b      	cmp	r3, r1
 81003e6:	f200 80e9 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 81003ea:	4684      	mov	ip, r0
 81003ec:	1ac9      	subs	r1, r1, r3
 81003ee:	b2a3      	uxth	r3, r4
 81003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 81003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 81003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81003fc:	fb08 f800 	mul.w	r8, r8, r0
 8100400:	45a0      	cmp	r8, r4
 8100402:	d907      	bls.n	8100414 <__udivmoddi4+0x10c>
 8100404:	193c      	adds	r4, r7, r4
 8100406:	f100 33ff 	add.w	r3, r0, #4294967295
 810040a:	d202      	bcs.n	8100412 <__udivmoddi4+0x10a>
 810040c:	45a0      	cmp	r8, r4
 810040e:	f200 80d9 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 8100412:	4618      	mov	r0, r3
 8100414:	eba4 0408 	sub.w	r4, r4, r8
 8100418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810041c:	e7bf      	b.n	810039e <__udivmoddi4+0x96>
 810041e:	428b      	cmp	r3, r1
 8100420:	d909      	bls.n	8100436 <__udivmoddi4+0x12e>
 8100422:	2d00      	cmp	r5, #0
 8100424:	f000 80b1 	beq.w	810058a <__udivmoddi4+0x282>
 8100428:	2600      	movs	r6, #0
 810042a:	e9c5 0100 	strd	r0, r1, [r5]
 810042e:	4630      	mov	r0, r6
 8100430:	4631      	mov	r1, r6
 8100432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100436:	fab3 f683 	clz	r6, r3
 810043a:	2e00      	cmp	r6, #0
 810043c:	d14a      	bne.n	81004d4 <__udivmoddi4+0x1cc>
 810043e:	428b      	cmp	r3, r1
 8100440:	d302      	bcc.n	8100448 <__udivmoddi4+0x140>
 8100442:	4282      	cmp	r2, r0
 8100444:	f200 80b8 	bhi.w	81005b8 <__udivmoddi4+0x2b0>
 8100448:	1a84      	subs	r4, r0, r2
 810044a:	eb61 0103 	sbc.w	r1, r1, r3
 810044e:	2001      	movs	r0, #1
 8100450:	468c      	mov	ip, r1
 8100452:	2d00      	cmp	r5, #0
 8100454:	d0a8      	beq.n	81003a8 <__udivmoddi4+0xa0>
 8100456:	e9c5 4c00 	strd	r4, ip, [r5]
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0xa0>
 810045c:	f1c2 0320 	rsb	r3, r2, #32
 8100460:	fa20 f603 	lsr.w	r6, r0, r3
 8100464:	4097      	lsls	r7, r2
 8100466:	fa01 f002 	lsl.w	r0, r1, r2
 810046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810046e:	40d9      	lsrs	r1, r3
 8100470:	4330      	orrs	r0, r6
 8100472:	0c03      	lsrs	r3, r0, #16
 8100474:	fbb1 f6fe 	udiv	r6, r1, lr
 8100478:	fa1f f887 	uxth.w	r8, r7
 810047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100484:	fb06 f108 	mul.w	r1, r6, r8
 8100488:	4299      	cmp	r1, r3
 810048a:	fa04 f402 	lsl.w	r4, r4, r2
 810048e:	d909      	bls.n	81004a4 <__udivmoddi4+0x19c>
 8100490:	18fb      	adds	r3, r7, r3
 8100492:	f106 3cff 	add.w	ip, r6, #4294967295
 8100496:	f080 808d 	bcs.w	81005b4 <__udivmoddi4+0x2ac>
 810049a:	4299      	cmp	r1, r3
 810049c:	f240 808a 	bls.w	81005b4 <__udivmoddi4+0x2ac>
 81004a0:	3e02      	subs	r6, #2
 81004a2:	443b      	add	r3, r7
 81004a4:	1a5b      	subs	r3, r3, r1
 81004a6:	b281      	uxth	r1, r0
 81004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 81004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 81004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004b4:	fb00 f308 	mul.w	r3, r0, r8
 81004b8:	428b      	cmp	r3, r1
 81004ba:	d907      	bls.n	81004cc <__udivmoddi4+0x1c4>
 81004bc:	1879      	adds	r1, r7, r1
 81004be:	f100 3cff 	add.w	ip, r0, #4294967295
 81004c2:	d273      	bcs.n	81005ac <__udivmoddi4+0x2a4>
 81004c4:	428b      	cmp	r3, r1
 81004c6:	d971      	bls.n	81005ac <__udivmoddi4+0x2a4>
 81004c8:	3802      	subs	r0, #2
 81004ca:	4439      	add	r1, r7
 81004cc:	1acb      	subs	r3, r1, r3
 81004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81004d2:	e778      	b.n	81003c6 <__udivmoddi4+0xbe>
 81004d4:	f1c6 0c20 	rsb	ip, r6, #32
 81004d8:	fa03 f406 	lsl.w	r4, r3, r6
 81004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 81004e0:	431c      	orrs	r4, r3
 81004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 81004e6:	fa01 f306 	lsl.w	r3, r1, r6
 81004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 81004f2:	431f      	orrs	r7, r3
 81004f4:	0c3b      	lsrs	r3, r7, #16
 81004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81004fa:	fa1f f884 	uxth.w	r8, r4
 81004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8100502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100506:	fb09 fa08 	mul.w	sl, r9, r8
 810050a:	458a      	cmp	sl, r1
 810050c:	fa02 f206 	lsl.w	r2, r2, r6
 8100510:	fa00 f306 	lsl.w	r3, r0, r6
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x220>
 8100516:	1861      	adds	r1, r4, r1
 8100518:	f109 30ff 	add.w	r0, r9, #4294967295
 810051c:	d248      	bcs.n	81005b0 <__udivmoddi4+0x2a8>
 810051e:	458a      	cmp	sl, r1
 8100520:	d946      	bls.n	81005b0 <__udivmoddi4+0x2a8>
 8100522:	f1a9 0902 	sub.w	r9, r9, #2
 8100526:	4421      	add	r1, r4
 8100528:	eba1 010a 	sub.w	r1, r1, sl
 810052c:	b2bf      	uxth	r7, r7
 810052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100532:	fb0e 1110 	mls	r1, lr, r0, r1
 8100536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810053a:	fb00 f808 	mul.w	r8, r0, r8
 810053e:	45b8      	cmp	r8, r7
 8100540:	d907      	bls.n	8100552 <__udivmoddi4+0x24a>
 8100542:	19e7      	adds	r7, r4, r7
 8100544:	f100 31ff 	add.w	r1, r0, #4294967295
 8100548:	d22e      	bcs.n	81005a8 <__udivmoddi4+0x2a0>
 810054a:	45b8      	cmp	r8, r7
 810054c:	d92c      	bls.n	81005a8 <__udivmoddi4+0x2a0>
 810054e:	3802      	subs	r0, #2
 8100550:	4427      	add	r7, r4
 8100552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100556:	eba7 0708 	sub.w	r7, r7, r8
 810055a:	fba0 8902 	umull	r8, r9, r0, r2
 810055e:	454f      	cmp	r7, r9
 8100560:	46c6      	mov	lr, r8
 8100562:	4649      	mov	r1, r9
 8100564:	d31a      	bcc.n	810059c <__udivmoddi4+0x294>
 8100566:	d017      	beq.n	8100598 <__udivmoddi4+0x290>
 8100568:	b15d      	cbz	r5, 8100582 <__udivmoddi4+0x27a>
 810056a:	ebb3 020e 	subs.w	r2, r3, lr
 810056e:	eb67 0701 	sbc.w	r7, r7, r1
 8100572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100576:	40f2      	lsrs	r2, r6
 8100578:	ea4c 0202 	orr.w	r2, ip, r2
 810057c:	40f7      	lsrs	r7, r6
 810057e:	e9c5 2700 	strd	r2, r7, [r5]
 8100582:	2600      	movs	r6, #0
 8100584:	4631      	mov	r1, r6
 8100586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810058a:	462e      	mov	r6, r5
 810058c:	4628      	mov	r0, r5
 810058e:	e70b      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100590:	4606      	mov	r6, r0
 8100592:	e6e9      	b.n	8100368 <__udivmoddi4+0x60>
 8100594:	4618      	mov	r0, r3
 8100596:	e6fd      	b.n	8100394 <__udivmoddi4+0x8c>
 8100598:	4543      	cmp	r3, r8
 810059a:	d2e5      	bcs.n	8100568 <__udivmoddi4+0x260>
 810059c:	ebb8 0e02 	subs.w	lr, r8, r2
 81005a0:	eb69 0104 	sbc.w	r1, r9, r4
 81005a4:	3801      	subs	r0, #1
 81005a6:	e7df      	b.n	8100568 <__udivmoddi4+0x260>
 81005a8:	4608      	mov	r0, r1
 81005aa:	e7d2      	b.n	8100552 <__udivmoddi4+0x24a>
 81005ac:	4660      	mov	r0, ip
 81005ae:	e78d      	b.n	81004cc <__udivmoddi4+0x1c4>
 81005b0:	4681      	mov	r9, r0
 81005b2:	e7b9      	b.n	8100528 <__udivmoddi4+0x220>
 81005b4:	4666      	mov	r6, ip
 81005b6:	e775      	b.n	81004a4 <__udivmoddi4+0x19c>
 81005b8:	4630      	mov	r0, r6
 81005ba:	e74a      	b.n	8100452 <__udivmoddi4+0x14a>
 81005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c0:	4439      	add	r1, r7
 81005c2:	e713      	b.n	81003ec <__udivmoddi4+0xe4>
 81005c4:	3802      	subs	r0, #2
 81005c6:	443c      	add	r4, r7
 81005c8:	e724      	b.n	8100414 <__udivmoddi4+0x10c>
 81005ca:	bf00      	nop

081005cc <__aeabi_idiv0>:
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop

081005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005d4:	4b0b      	ldr	r3, [pc, #44]	; (8100604 <SystemInit+0x34>)
 81005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005da:	4a0a      	ldr	r2, [pc, #40]	; (8100604 <SystemInit+0x34>)
 81005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005e4:	4b07      	ldr	r3, [pc, #28]	; (8100604 <SystemInit+0x34>)
 81005e6:	691b      	ldr	r3, [r3, #16]
 81005e8:	4a06      	ldr	r2, [pc, #24]	; (8100604 <SystemInit+0x34>)
 81005ea:	f043 0310 	orr.w	r3, r3, #16
 81005ee:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f0:	4b04      	ldr	r3, [pc, #16]	; (8100604 <SystemInit+0x34>)
 81005f2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005f6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	e000ed00 	.word	0xe000ed00

08100608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810060e:	4b2e      	ldr	r3, [pc, #184]	; (81006c8 <main+0xc0>)
 8100610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100614:	4a2c      	ldr	r2, [pc, #176]	; (81006c8 <main+0xc0>)
 8100616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810061e:	4b2a      	ldr	r3, [pc, #168]	; (81006c8 <main+0xc0>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100628:	607b      	str	r3, [r7, #4]
 810062a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810062c:	2001      	movs	r0, #1
 810062e:	f004 fcdb 	bl	8104fe8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100632:	f004 fead 	bl	8105390 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100636:	2201      	movs	r2, #1
 8100638:	2102      	movs	r1, #2
 810063a:	2000      	movs	r0, #0
 810063c:	f004 fe2e 	bl	810529c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100640:	4b22      	ldr	r3, [pc, #136]	; (81006cc <main+0xc4>)
 8100642:	681b      	ldr	r3, [r3, #0]
 8100644:	091b      	lsrs	r3, r3, #4
 8100646:	f003 030f 	and.w	r3, r3, #15
 810064a:	2b07      	cmp	r3, #7
 810064c:	d108      	bne.n	8100660 <main+0x58>
 810064e:	4b20      	ldr	r3, [pc, #128]	; (81006d0 <main+0xc8>)
 8100650:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100654:	4a1e      	ldr	r2, [pc, #120]	; (81006d0 <main+0xc8>)
 8100656:	f043 0301 	orr.w	r3, r3, #1
 810065a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810065e:	e007      	b.n	8100670 <main+0x68>
 8100660:	4b1b      	ldr	r3, [pc, #108]	; (81006d0 <main+0xc8>)
 8100662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100666:	4a1a      	ldr	r2, [pc, #104]	; (81006d0 <main+0xc8>)
 8100668:	f043 0301 	orr.w	r3, r3, #1
 810066c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100670:	f002 f9c2 	bl	81029f8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100674:	f000 fe7e 	bl	8101374 <MX_GPIO_Init>
  MX_ADC1_Init();
 8100678:	f000 f82c 	bl	81006d4 <MX_ADC1_Init>
  MX_ADC3_Init();
 810067c:	f000 f8a4 	bl	81007c8 <MX_ADC3_Init>
  MX_DFSDM1_Init();
 8100680:	f000 f906 	bl	8100890 <MX_DFSDM1_Init>
  MX_ETH_Init();
 8100684:	f000 f9a2 	bl	81009cc <MX_ETH_Init>
  MX_FMC_Init();
 8100688:	f000 fe26 	bl	81012d8 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 810068c:	f000 f9ea 	bl	8100a64 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 8100690:	f000 fa1c 	bl	8100acc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8100694:	f000 fa42 	bl	8100b1c <MX_RTC_Init>
  MX_SAI1_Init();
 8100698:	f000 fa8e 	bl	8100bb8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 810069c:	f000 fb28 	bl	8100cf0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 81006a0:	f000 fb4a 	bl	8100d38 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 81006a4:	f000 fb80 	bl	8100da8 <MX_SPI2_Init>
  MX_SPI5_Init();
 81006a8:	f000 fbd2 	bl	8100e50 <MX_SPI5_Init>
  MX_TIM8_Init();
 81006ac:	f000 fc24 	bl	8100ef8 <MX_TIM8_Init>
  MX_TIM13_Init();
 81006b0:	f000 fcb2 	bl	8101018 <MX_TIM13_Init>
  MX_UART8_Init();
 81006b4:	f000 fcf8 	bl	81010a8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 81006b8:	f000 fd42 	bl	8101140 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 81006bc:	f000 fd8c 	bl	81011d8 <MX_USART2_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 81006c0:	f000 fdd8 	bl	8101274 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006c4:	e7fe      	b.n	81006c4 <main+0xbc>
 81006c6:	bf00      	nop
 81006c8:	58024400 	.word	0x58024400
 81006cc:	e000ed00 	.word	0xe000ed00
 81006d0:	58026400 	.word	0x58026400

081006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81006d4:	b580      	push	{r7, lr}
 81006d6:	b08a      	sub	sp, #40	; 0x28
 81006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81006da:	f107 031c 	add.w	r3, r7, #28
 81006de:	2200      	movs	r2, #0
 81006e0:	601a      	str	r2, [r3, #0]
 81006e2:	605a      	str	r2, [r3, #4]
 81006e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81006e6:	463b      	mov	r3, r7
 81006e8:	2200      	movs	r2, #0
 81006ea:	601a      	str	r2, [r3, #0]
 81006ec:	605a      	str	r2, [r3, #4]
 81006ee:	609a      	str	r2, [r3, #8]
 81006f0:	60da      	str	r2, [r3, #12]
 81006f2:	611a      	str	r2, [r3, #16]
 81006f4:	615a      	str	r2, [r3, #20]
 81006f6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 81006f8:	4b30      	ldr	r3, [pc, #192]	; (81007bc <MX_ADC1_Init+0xe8>)
 81006fa:	4a31      	ldr	r2, [pc, #196]	; (81007c0 <MX_ADC1_Init+0xec>)
 81006fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 81006fe:	4b2f      	ldr	r3, [pc, #188]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100700:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8100704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100706:	4b2d      	ldr	r3, [pc, #180]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100708:	2200      	movs	r2, #0
 810070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810070c:	4b2b      	ldr	r3, [pc, #172]	; (81007bc <MX_ADC1_Init+0xe8>)
 810070e:	2200      	movs	r2, #0
 8100710:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100712:	4b2a      	ldr	r3, [pc, #168]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100714:	2204      	movs	r2, #4
 8100716:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100718:	4b28      	ldr	r3, [pc, #160]	; (81007bc <MX_ADC1_Init+0xe8>)
 810071a:	2200      	movs	r2, #0
 810071c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810071e:	4b27      	ldr	r3, [pc, #156]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100720:	2200      	movs	r2, #0
 8100722:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100724:	4b25      	ldr	r3, [pc, #148]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100726:	2201      	movs	r2, #1
 8100728:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810072a:	4b24      	ldr	r3, [pc, #144]	; (81007bc <MX_ADC1_Init+0xe8>)
 810072c:	2200      	movs	r2, #0
 810072e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100730:	4b22      	ldr	r3, [pc, #136]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100732:	2200      	movs	r2, #0
 8100734:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100736:	4b21      	ldr	r3, [pc, #132]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100738:	2200      	movs	r2, #0
 810073a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810073c:	4b1f      	ldr	r3, [pc, #124]	; (81007bc <MX_ADC1_Init+0xe8>)
 810073e:	2200      	movs	r2, #0
 8100740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100742:	4b1e      	ldr	r3, [pc, #120]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100744:	2200      	movs	r2, #0
 8100746:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100748:	4b1c      	ldr	r3, [pc, #112]	; (81007bc <MX_ADC1_Init+0xe8>)
 810074a:	2200      	movs	r2, #0
 810074c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 810074e:	4b1b      	ldr	r3, [pc, #108]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100750:	2200      	movs	r2, #0
 8100752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100756:	4819      	ldr	r0, [pc, #100]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100758:	f002 fbe8 	bl	8102f2c <HAL_ADC_Init>
 810075c:	4603      	mov	r3, r0
 810075e:	2b00      	cmp	r3, #0
 8100760:	d001      	beq.n	8100766 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8100762:	f000 feb7 	bl	81014d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100766:	2300      	movs	r3, #0
 8100768:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810076a:	f107 031c 	add.w	r3, r7, #28
 810076e:	4619      	mov	r1, r3
 8100770:	4812      	ldr	r0, [pc, #72]	; (81007bc <MX_ADC1_Init+0xe8>)
 8100772:	f003 f9fb 	bl	8103b6c <HAL_ADCEx_MultiModeConfigChannel>
 8100776:	4603      	mov	r3, r0
 8100778:	2b00      	cmp	r3, #0
 810077a:	d001      	beq.n	8100780 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 810077c:	f000 feaa 	bl	81014d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100780:	4b10      	ldr	r3, [pc, #64]	; (81007c4 <MX_ADC1_Init+0xf0>)
 8100782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100784:	2306      	movs	r3, #6
 8100786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100788:	2300      	movs	r3, #0
 810078a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810078c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100790:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100792:	2304      	movs	r3, #4
 8100794:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100796:	2300      	movs	r3, #0
 8100798:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810079a:	2300      	movs	r3, #0
 810079c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810079e:	463b      	mov	r3, r7
 81007a0:	4619      	mov	r1, r3
 81007a2:	4806      	ldr	r0, [pc, #24]	; (81007bc <MX_ADC1_Init+0xe8>)
 81007a4:	f002 fd62 	bl	810326c <HAL_ADC_ConfigChannel>
 81007a8:	4603      	mov	r3, r0
 81007aa:	2b00      	cmp	r3, #0
 81007ac:	d001      	beq.n	81007b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 81007ae:	f000 fe91 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81007b2:	bf00      	nop
 81007b4:	3728      	adds	r7, #40	; 0x28
 81007b6:	46bd      	mov	sp, r7
 81007b8:	bd80      	pop	{r7, pc}
 81007ba:	bf00      	nop
 81007bc:	10000868 	.word	0x10000868
 81007c0:	40022000 	.word	0x40022000
 81007c4:	04300002 	.word	0x04300002

081007c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81007c8:	b580      	push	{r7, lr}
 81007ca:	b088      	sub	sp, #32
 81007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81007ce:	1d3b      	adds	r3, r7, #4
 81007d0:	2200      	movs	r2, #0
 81007d2:	601a      	str	r2, [r3, #0]
 81007d4:	605a      	str	r2, [r3, #4]
 81007d6:	609a      	str	r2, [r3, #8]
 81007d8:	60da      	str	r2, [r3, #12]
 81007da:	611a      	str	r2, [r3, #16]
 81007dc:	615a      	str	r2, [r3, #20]
 81007de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 81007e0:	4b29      	ldr	r3, [pc, #164]	; (8100888 <MX_ADC3_Init+0xc0>)
 81007e2:	4a2a      	ldr	r2, [pc, #168]	; (810088c <MX_ADC3_Init+0xc4>)
 81007e4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 81007e6:	4b28      	ldr	r3, [pc, #160]	; (8100888 <MX_ADC3_Init+0xc0>)
 81007e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81007ec:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81007ee:	4b26      	ldr	r3, [pc, #152]	; (8100888 <MX_ADC3_Init+0xc0>)
 81007f0:	2200      	movs	r2, #0
 81007f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81007f4:	4b24      	ldr	r3, [pc, #144]	; (8100888 <MX_ADC3_Init+0xc0>)
 81007f6:	2200      	movs	r2, #0
 81007f8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81007fa:	4b23      	ldr	r3, [pc, #140]	; (8100888 <MX_ADC3_Init+0xc0>)
 81007fc:	2204      	movs	r2, #4
 81007fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100800:	4b21      	ldr	r3, [pc, #132]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100802:	2200      	movs	r2, #0
 8100804:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100806:	4b20      	ldr	r3, [pc, #128]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100808:	2200      	movs	r2, #0
 810080a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810080c:	4b1e      	ldr	r3, [pc, #120]	; (8100888 <MX_ADC3_Init+0xc0>)
 810080e:	2201      	movs	r2, #1
 8100810:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100812:	4b1d      	ldr	r3, [pc, #116]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100814:	2200      	movs	r2, #0
 8100816:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100818:	4b1b      	ldr	r3, [pc, #108]	; (8100888 <MX_ADC3_Init+0xc0>)
 810081a:	2200      	movs	r2, #0
 810081c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810081e:	4b1a      	ldr	r3, [pc, #104]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100820:	2200      	movs	r2, #0
 8100822:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100824:	4b18      	ldr	r3, [pc, #96]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100826:	2200      	movs	r2, #0
 8100828:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810082a:	4b17      	ldr	r3, [pc, #92]	; (8100888 <MX_ADC3_Init+0xc0>)
 810082c:	2200      	movs	r2, #0
 810082e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100830:	4b15      	ldr	r3, [pc, #84]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100832:	2200      	movs	r2, #0
 8100834:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100836:	4b14      	ldr	r3, [pc, #80]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100838:	2200      	movs	r2, #0
 810083a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 810083e:	4812      	ldr	r0, [pc, #72]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100840:	f002 fb74 	bl	8102f2c <HAL_ADC_Init>
 8100844:	4603      	mov	r3, r0
 8100846:	2b00      	cmp	r3, #0
 8100848:	d001      	beq.n	810084e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 810084a:	f000 fe43 	bl	81014d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 810084e:	2301      	movs	r3, #1
 8100850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100852:	2306      	movs	r3, #6
 8100854:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100856:	2300      	movs	r3, #0
 8100858:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810085a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810085e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100860:	2304      	movs	r3, #4
 8100862:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8100864:	2300      	movs	r3, #0
 8100866:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100868:	2300      	movs	r3, #0
 810086a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810086c:	1d3b      	adds	r3, r7, #4
 810086e:	4619      	mov	r1, r3
 8100870:	4805      	ldr	r0, [pc, #20]	; (8100888 <MX_ADC3_Init+0xc0>)
 8100872:	f002 fcfb 	bl	810326c <HAL_ADC_ConfigChannel>
 8100876:	4603      	mov	r3, r0
 8100878:	2b00      	cmp	r3, #0
 810087a:	d001      	beq.n	8100880 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 810087c:	f000 fe2a 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8100880:	bf00      	nop
 8100882:	3720      	adds	r7, #32
 8100884:	46bd      	mov	sp, r7
 8100886:	bd80      	pop	{r7, pc}
 8100888:	100008cc 	.word	0x100008cc
 810088c:	58026000 	.word	0x58026000

08100890 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8100890:	b580      	push	{r7, lr}
 8100892:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8100894:	4b47      	ldr	r3, [pc, #284]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 8100896:	4a48      	ldr	r2, [pc, #288]	; (81009b8 <MX_DFSDM1_Init+0x128>)
 8100898:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 810089a:	4b46      	ldr	r3, [pc, #280]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 810089c:	2201      	movs	r2, #1
 810089e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 81008a0:	4b44      	ldr	r3, [pc, #272]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008a2:	2200      	movs	r2, #0
 81008a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 81008a6:	4b43      	ldr	r3, [pc, #268]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008a8:	2202      	movs	r2, #2
 81008aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 81008ac:	4b41      	ldr	r3, [pc, #260]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81008b2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 81008b4:	4b3f      	ldr	r3, [pc, #252]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008b6:	2200      	movs	r2, #0
 81008b8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 81008ba:	4b3e      	ldr	r3, [pc, #248]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008bc:	2200      	movs	r2, #0
 81008be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 81008c0:	4b3c      	ldr	r3, [pc, #240]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008c2:	2200      	movs	r2, #0
 81008c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 81008c6:	4b3b      	ldr	r3, [pc, #236]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008c8:	2200      	movs	r2, #0
 81008ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 81008cc:	4b39      	ldr	r3, [pc, #228]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008ce:	2200      	movs	r2, #0
 81008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 81008d2:	4b38      	ldr	r3, [pc, #224]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008d4:	2201      	movs	r2, #1
 81008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 81008d8:	4b36      	ldr	r3, [pc, #216]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008da:	2200      	movs	r2, #0
 81008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 81008de:	4b35      	ldr	r3, [pc, #212]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008e0:	2200      	movs	r2, #0
 81008e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 81008e4:	4833      	ldr	r0, [pc, #204]	; (81009b4 <MX_DFSDM1_Init+0x124>)
 81008e6:	f003 fca5 	bl	8104234 <HAL_DFSDM_ChannelInit>
 81008ea:	4603      	mov	r3, r0
 81008ec:	2b00      	cmp	r3, #0
 81008ee:	d001      	beq.n	81008f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 81008f0:	f000 fdf0 	bl	81014d4 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 81008f4:	4b31      	ldr	r3, [pc, #196]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 81008f6:	4a32      	ldr	r2, [pc, #200]	; (81009c0 <MX_DFSDM1_Init+0x130>)
 81008f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 81008fa:	4b30      	ldr	r3, [pc, #192]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 81008fc:	2201      	movs	r2, #1
 81008fe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8100900:	4b2e      	ldr	r3, [pc, #184]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100902:	2200      	movs	r2, #0
 8100904:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8100906:	4b2d      	ldr	r3, [pc, #180]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100908:	2202      	movs	r2, #2
 810090a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 810090c:	4b2b      	ldr	r3, [pc, #172]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 810090e:	2200      	movs	r2, #0
 8100910:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8100912:	4b2a      	ldr	r3, [pc, #168]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100914:	2200      	movs	r2, #0
 8100916:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8100918:	4b28      	ldr	r3, [pc, #160]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 810091a:	2200      	movs	r2, #0
 810091c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 810091e:	4b27      	ldr	r3, [pc, #156]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100920:	2200      	movs	r2, #0
 8100922:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8100924:	4b25      	ldr	r3, [pc, #148]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100926:	2204      	movs	r2, #4
 8100928:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 810092a:	4b24      	ldr	r3, [pc, #144]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 810092c:	2200      	movs	r2, #0
 810092e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8100930:	4b22      	ldr	r3, [pc, #136]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100932:	2201      	movs	r2, #1
 8100934:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8100936:	4b21      	ldr	r3, [pc, #132]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100938:	2200      	movs	r2, #0
 810093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 810093c:	4b1f      	ldr	r3, [pc, #124]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 810093e:	2200      	movs	r2, #0
 8100940:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8100942:	481e      	ldr	r0, [pc, #120]	; (81009bc <MX_DFSDM1_Init+0x12c>)
 8100944:	f003 fc76 	bl	8104234 <HAL_DFSDM_ChannelInit>
 8100948:	4603      	mov	r3, r0
 810094a:	2b00      	cmp	r3, #0
 810094c:	d001      	beq.n	8100952 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 810094e:	f000 fdc1 	bl	81014d4 <Error_Handler>
  }
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 8100952:	4b1c      	ldr	r3, [pc, #112]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100954:	4a1c      	ldr	r2, [pc, #112]	; (81009c8 <MX_DFSDM1_Init+0x138>)
 8100956:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = ENABLE;
 8100958:	4b1a      	ldr	r3, [pc, #104]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 810095a:	2201      	movs	r2, #1
 810095c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 810095e:	4b19      	ldr	r3, [pc, #100]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100960:	2200      	movs	r2, #0
 8100962:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 8100964:	4b17      	ldr	r3, [pc, #92]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100966:	2202      	movs	r2, #2
 8100968:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 810096a:	4b16      	ldr	r3, [pc, #88]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 810096c:	2200      	movs	r2, #0
 810096e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8100970:	4b14      	ldr	r3, [pc, #80]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100972:	2200      	movs	r2, #0
 8100974:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8100976:	4b13      	ldr	r3, [pc, #76]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100978:	2200      	movs	r2, #0
 810097a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 810097c:	4b11      	ldr	r3, [pc, #68]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 810097e:	2200      	movs	r2, #0
 8100980:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8100982:	4b10      	ldr	r3, [pc, #64]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100984:	2200      	movs	r2, #0
 8100986:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8100988:	4b0e      	ldr	r3, [pc, #56]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 810098a:	2200      	movs	r2, #0
 810098c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 810098e:	4b0d      	ldr	r3, [pc, #52]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100990:	2201      	movs	r2, #1
 8100992:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 8100994:	4b0b      	ldr	r3, [pc, #44]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 8100996:	2200      	movs	r2, #0
 8100998:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 810099a:	4b0a      	ldr	r3, [pc, #40]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 810099c:	2200      	movs	r2, #0
 810099e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 81009a0:	4808      	ldr	r0, [pc, #32]	; (81009c4 <MX_DFSDM1_Init+0x134>)
 81009a2:	f003 fc47 	bl	8104234 <HAL_DFSDM_ChannelInit>
 81009a6:	4603      	mov	r3, r0
 81009a8:	2b00      	cmp	r3, #0
 81009aa:	d001      	beq.n	81009b0 <MX_DFSDM1_Init+0x120>
  {
    Error_Handler();
 81009ac:	f000 fd92 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 81009b0:	bf00      	nop
 81009b2:	bd80      	pop	{r7, pc}
 81009b4:	10000a30 	.word	0x10000a30
 81009b8:	40017000 	.word	0x40017000
 81009bc:	10000748 	.word	0x10000748
 81009c0:	40017060 	.word	0x40017060
 81009c4:	10000af8 	.word	0x10000af8
 81009c8:	400170e0 	.word	0x400170e0

081009cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81009d0:	4b1e      	ldr	r3, [pc, #120]	; (8100a4c <MX_ETH_Init+0x80>)
 81009d2:	4a1f      	ldr	r2, [pc, #124]	; (8100a50 <MX_ETH_Init+0x84>)
 81009d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81009d6:	4b1f      	ldr	r3, [pc, #124]	; (8100a54 <MX_ETH_Init+0x88>)
 81009d8:	2200      	movs	r2, #0
 81009da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 81009dc:	4b1d      	ldr	r3, [pc, #116]	; (8100a54 <MX_ETH_Init+0x88>)
 81009de:	2280      	movs	r2, #128	; 0x80
 81009e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 81009e2:	4b1c      	ldr	r3, [pc, #112]	; (8100a54 <MX_ETH_Init+0x88>)
 81009e4:	22e1      	movs	r2, #225	; 0xe1
 81009e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 81009e8:	4b1a      	ldr	r3, [pc, #104]	; (8100a54 <MX_ETH_Init+0x88>)
 81009ea:	2200      	movs	r2, #0
 81009ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 81009ee:	4b19      	ldr	r3, [pc, #100]	; (8100a54 <MX_ETH_Init+0x88>)
 81009f0:	2200      	movs	r2, #0
 81009f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 81009f4:	4b17      	ldr	r3, [pc, #92]	; (8100a54 <MX_ETH_Init+0x88>)
 81009f6:	2200      	movs	r2, #0
 81009f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 81009fa:	4b14      	ldr	r3, [pc, #80]	; (8100a4c <MX_ETH_Init+0x80>)
 81009fc:	4a15      	ldr	r2, [pc, #84]	; (8100a54 <MX_ETH_Init+0x88>)
 81009fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8100a00:	4b12      	ldr	r3, [pc, #72]	; (8100a4c <MX_ETH_Init+0x80>)
 8100a02:	2201      	movs	r2, #1
 8100a04:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100a06:	4b11      	ldr	r3, [pc, #68]	; (8100a4c <MX_ETH_Init+0x80>)
 8100a08:	4a13      	ldr	r2, [pc, #76]	; (8100a58 <MX_ETH_Init+0x8c>)
 8100a0a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100a0c:	4b0f      	ldr	r3, [pc, #60]	; (8100a4c <MX_ETH_Init+0x80>)
 8100a0e:	4a13      	ldr	r2, [pc, #76]	; (8100a5c <MX_ETH_Init+0x90>)
 8100a10:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100a12:	4b0e      	ldr	r3, [pc, #56]	; (8100a4c <MX_ETH_Init+0x80>)
 8100a14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8100a18:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100a1a:	480c      	ldr	r0, [pc, #48]	; (8100a4c <MX_ETH_Init+0x80>)
 8100a1c:	f003 fd1e 	bl	810445c <HAL_ETH_Init>
 8100a20:	4603      	mov	r3, r0
 8100a22:	2b00      	cmp	r3, #0
 8100a24:	d001      	beq.n	8100a2a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100a26:	f000 fd55 	bl	81014d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100a2a:	2234      	movs	r2, #52	; 0x34
 8100a2c:	2100      	movs	r1, #0
 8100a2e:	480c      	ldr	r0, [pc, #48]	; (8100a60 <MX_ETH_Init+0x94>)
 8100a30:	f00c f920 	bl	810cc74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100a34:	4b0a      	ldr	r3, [pc, #40]	; (8100a60 <MX_ETH_Init+0x94>)
 8100a36:	2221      	movs	r2, #33	; 0x21
 8100a38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100a3a:	4b09      	ldr	r3, [pc, #36]	; (8100a60 <MX_ETH_Init+0x94>)
 8100a3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8100a40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100a42:	4b07      	ldr	r3, [pc, #28]	; (8100a60 <MX_ETH_Init+0x94>)
 8100a44:	2200      	movs	r2, #0
 8100a46:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100a48:	bf00      	nop
 8100a4a:	bd80      	pop	{r7, pc}
 8100a4c:	10000c9c 	.word	0x10000c9c
 8100a50:	40028000 	.word	0x40028000
 8100a54:	100000ec 	.word	0x100000ec
 8100a58:	10000070 	.word	0x10000070
 8100a5c:	10000010 	.word	0x10000010
 8100a60:	10000d24 	.word	0x10000d24

08100a64 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100a64:	b580      	push	{r7, lr}
 8100a66:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100a68:	4b15      	ldr	r3, [pc, #84]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a6a:	4a16      	ldr	r2, [pc, #88]	; (8100ac4 <MX_HDMI_CEC_Init+0x60>)
 8100a6c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100a6e:	4b14      	ldr	r3, [pc, #80]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a70:	2200      	movs	r2, #0
 8100a72:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100a74:	4b12      	ldr	r3, [pc, #72]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a76:	2200      	movs	r2, #0
 8100a78:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100a7a:	4b11      	ldr	r3, [pc, #68]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a7c:	2210      	movs	r2, #16
 8100a7e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100a80:	4b0f      	ldr	r3, [pc, #60]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a82:	2200      	movs	r2, #0
 8100a84:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100a86:	4b0e      	ldr	r3, [pc, #56]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a88:	2200      	movs	r2, #0
 8100a8a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100a8c:	4b0c      	ldr	r3, [pc, #48]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a8e:	2200      	movs	r2, #0
 8100a90:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100a92:	4b0b      	ldr	r3, [pc, #44]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a94:	2200      	movs	r2, #0
 8100a96:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100a98:	4b09      	ldr	r3, [pc, #36]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8100a9e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100aa0:	4b07      	ldr	r3, [pc, #28]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100aa2:	2200      	movs	r2, #0
 8100aa4:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100aa6:	4b06      	ldr	r3, [pc, #24]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100aa8:	4a07      	ldr	r2, [pc, #28]	; (8100ac8 <MX_HDMI_CEC_Init+0x64>)
 8100aaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100aac:	4804      	ldr	r0, [pc, #16]	; (8100ac0 <MX_HDMI_CEC_Init+0x5c>)
 8100aae:	f003 f93f 	bl	8103d30 <HAL_CEC_Init>
 8100ab2:	4603      	mov	r3, r0
 8100ab4:	2b00      	cmp	r3, #0
 8100ab6:	d001      	beq.n	8100abc <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100ab8:	f000 fd0c 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100abc:	bf00      	nop
 8100abe:	bd80      	pop	{r7, pc}
 8100ac0:	10000704 	.word	0x10000704
 8100ac4:	40006c00 	.word	0x40006c00
 8100ac8:	10000c8c 	.word	0x10000c8c

08100acc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100acc:	b580      	push	{r7, lr}
 8100ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100ad0:	4b10      	ldr	r3, [pc, #64]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100ad2:	4a11      	ldr	r2, [pc, #68]	; (8100b18 <MX_QUADSPI_Init+0x4c>)
 8100ad4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100ad6:	4b0f      	ldr	r3, [pc, #60]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100ad8:	22ff      	movs	r2, #255	; 0xff
 8100ada:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100adc:	4b0d      	ldr	r3, [pc, #52]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100ade:	2201      	movs	r2, #1
 8100ae0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100ae2:	4b0c      	ldr	r3, [pc, #48]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100ae4:	2200      	movs	r2, #0
 8100ae6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100ae8:	4b0a      	ldr	r3, [pc, #40]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100aea:	2201      	movs	r2, #1
 8100aec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100aee:	4b09      	ldr	r3, [pc, #36]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100af0:	2200      	movs	r2, #0
 8100af2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100af4:	4b07      	ldr	r3, [pc, #28]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100af6:	2200      	movs	r2, #0
 8100af8:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8100afa:	4b06      	ldr	r3, [pc, #24]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100afc:	2240      	movs	r2, #64	; 0x40
 8100afe:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100b00:	4804      	ldr	r0, [pc, #16]	; (8100b14 <MX_QUADSPI_Init+0x48>)
 8100b02:	f004 fc63 	bl	81053cc <HAL_QSPI_Init>
 8100b06:	4603      	mov	r3, r0
 8100b08:	2b00      	cmp	r3, #0
 8100b0a:	d001      	beq.n	8100b10 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8100b0c:	f000 fce2 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100b10:	bf00      	nop
 8100b12:	bd80      	pop	{r7, pc}
 8100b14:	10000d58 	.word	0x10000d58
 8100b18:	52005000 	.word	0x52005000

08100b1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100b1c:	b580      	push	{r7, lr}
 8100b1e:	b08a      	sub	sp, #40	; 0x28
 8100b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100b22:	463b      	mov	r3, r7
 8100b24:	2228      	movs	r2, #40	; 0x28
 8100b26:	2100      	movs	r1, #0
 8100b28:	4618      	mov	r0, r3
 8100b2a:	f00c f8a3 	bl	810cc74 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100b2e:	4b20      	ldr	r3, [pc, #128]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b30:	4a20      	ldr	r2, [pc, #128]	; (8100bb4 <MX_RTC_Init+0x98>)
 8100b32:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100b34:	4b1e      	ldr	r3, [pc, #120]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b36:	2200      	movs	r2, #0
 8100b38:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100b3a:	4b1d      	ldr	r3, [pc, #116]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b3c:	227f      	movs	r2, #127	; 0x7f
 8100b3e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100b40:	4b1b      	ldr	r3, [pc, #108]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b42:	22ff      	movs	r2, #255	; 0xff
 8100b44:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100b46:	4b1a      	ldr	r3, [pc, #104]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b48:	2200      	movs	r2, #0
 8100b4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100b4c:	4b18      	ldr	r3, [pc, #96]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b4e:	2200      	movs	r2, #0
 8100b50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100b52:	4b17      	ldr	r3, [pc, #92]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b54:	2200      	movs	r2, #0
 8100b56:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100b58:	4b15      	ldr	r3, [pc, #84]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b5a:	2200      	movs	r2, #0
 8100b5c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100b5e:	4814      	ldr	r0, [pc, #80]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b60:	f007 f87c 	bl	8107c5c <HAL_RTC_Init>
 8100b64:	4603      	mov	r3, r0
 8100b66:	2b00      	cmp	r3, #0
 8100b68:	d001      	beq.n	8100b6e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100b6a:	f000 fcb3 	bl	81014d4 <Error_Handler>
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100b6e:	2301      	movs	r3, #1
 8100b70:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100b72:	2301      	movs	r3, #1
 8100b74:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100b76:	2300      	movs	r3, #0
 8100b78:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100b7a:	2300      	movs	r3, #0
 8100b7c:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100b7e:	2300      	movs	r3, #0
 8100b80:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100b82:	2300      	movs	r3, #0
 8100b84:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100b86:	2300      	movs	r3, #0
 8100b88:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100b8a:	2300      	movs	r3, #0
 8100b8c:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100b8e:	2380      	movs	r3, #128	; 0x80
 8100b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100b92:	463b      	mov	r3, r7
 8100b94:	4619      	mov	r1, r3
 8100b96:	4806      	ldr	r0, [pc, #24]	; (8100bb0 <MX_RTC_Init+0x94>)
 8100b98:	f007 f970 	bl	8107e7c <HAL_RTCEx_SetTamper>
 8100b9c:	4603      	mov	r3, r0
 8100b9e:	2b00      	cmp	r3, #0
 8100ba0:	d001      	beq.n	8100ba6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100ba2:	f000 fc97 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100ba6:	bf00      	nop
 8100ba8:	3728      	adds	r7, #40	; 0x28
 8100baa:	46bd      	mov	sp, r7
 8100bac:	bd80      	pop	{r7, pc}
 8100bae:	bf00      	nop
 8100bb0:	10000a0c 	.word	0x10000a0c
 8100bb4:	58004000 	.word	0x58004000

08100bb8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100bb8:	b580      	push	{r7, lr}
 8100bba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100bbc:	4b47      	ldr	r3, [pc, #284]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bbe:	4a48      	ldr	r2, [pc, #288]	; (8100ce0 <MX_SAI1_Init+0x128>)
 8100bc0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100bc2:	4b46      	ldr	r3, [pc, #280]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bc4:	2200      	movs	r2, #0
 8100bc6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100bc8:	4b44      	ldr	r3, [pc, #272]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bca:	2200      	movs	r2, #0
 8100bcc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100bce:	4b43      	ldr	r3, [pc, #268]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bd0:	2240      	movs	r2, #64	; 0x40
 8100bd2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100bd4:	4b41      	ldr	r3, [pc, #260]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bd6:	2200      	movs	r2, #0
 8100bd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100bda:	4b40      	ldr	r3, [pc, #256]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bdc:	2200      	movs	r2, #0
 8100bde:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100be0:	4b3e      	ldr	r3, [pc, #248]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100be2:	2200      	movs	r2, #0
 8100be4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100be6:	4b3d      	ldr	r3, [pc, #244]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100be8:	2200      	movs	r2, #0
 8100bea:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100bec:	4b3b      	ldr	r3, [pc, #236]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100bf2:	4b3a      	ldr	r3, [pc, #232]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100bf8:	4b38      	ldr	r3, [pc, #224]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100bfa:	4a3a      	ldr	r2, [pc, #232]	; (8100ce4 <MX_SAI1_Init+0x12c>)
 8100bfc:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100bfe:	4b37      	ldr	r3, [pc, #220]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c00:	2200      	movs	r2, #0
 8100c02:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c04:	4b35      	ldr	r3, [pc, #212]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c06:	2200      	movs	r2, #0
 8100c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c0a:	4b34      	ldr	r3, [pc, #208]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c0c:	2200      	movs	r2, #0
 8100c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100c10:	4b32      	ldr	r3, [pc, #200]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c12:	2200      	movs	r2, #0
 8100c14:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100c16:	4b31      	ldr	r3, [pc, #196]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c18:	2200      	movs	r2, #0
 8100c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100c1e:	4b2f      	ldr	r3, [pc, #188]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c20:	2201      	movs	r2, #1
 8100c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c24:	4b2d      	ldr	r3, [pc, #180]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100c2c:	4b2b      	ldr	r3, [pc, #172]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c2e:	2208      	movs	r2, #8
 8100c30:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100c32:	4b2a      	ldr	r3, [pc, #168]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c34:	2201      	movs	r2, #1
 8100c36:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100c38:	4b28      	ldr	r3, [pc, #160]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c3a:	2200      	movs	r2, #0
 8100c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100c3e:	4b27      	ldr	r3, [pc, #156]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c40:	2200      	movs	r2, #0
 8100c42:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100c44:	4b25      	ldr	r3, [pc, #148]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c46:	2200      	movs	r2, #0
 8100c48:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100c4a:	4b24      	ldr	r3, [pc, #144]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c4c:	2200      	movs	r2, #0
 8100c4e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100c50:	4b22      	ldr	r3, [pc, #136]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c52:	2200      	movs	r2, #0
 8100c54:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100c56:	4b21      	ldr	r3, [pc, #132]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c58:	2201      	movs	r2, #1
 8100c5a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100c5c:	4b1f      	ldr	r3, [pc, #124]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c5e:	2200      	movs	r2, #0
 8100c60:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100c62:	481e      	ldr	r0, [pc, #120]	; (8100cdc <MX_SAI1_Init+0x124>)
 8100c64:	f007 f9ea 	bl	810803c <HAL_SAI_Init>
 8100c68:	4603      	mov	r3, r0
 8100c6a:	2b00      	cmp	r3, #0
 8100c6c:	d001      	beq.n	8100c72 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8100c6e:	f000 fc31 	bl	81014d4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100c72:	4b1d      	ldr	r3, [pc, #116]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c74:	4a1d      	ldr	r2, [pc, #116]	; (8100cec <MX_SAI1_Init+0x134>)
 8100c76:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100c78:	4b1b      	ldr	r3, [pc, #108]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c7a:	2204      	movs	r2, #4
 8100c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100c7e:	4b1a      	ldr	r3, [pc, #104]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c80:	2200      	movs	r2, #0
 8100c82:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100c84:	4b18      	ldr	r3, [pc, #96]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c86:	2200      	movs	r2, #0
 8100c88:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100c8a:	4b17      	ldr	r3, [pc, #92]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c8c:	2200      	movs	r2, #0
 8100c8e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100c90:	4b15      	ldr	r3, [pc, #84]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c92:	2200      	movs	r2, #0
 8100c94:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100c96:	4b14      	ldr	r3, [pc, #80]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100c98:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8100c9c:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c9e:	4b12      	ldr	r3, [pc, #72]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100ca0:	2200      	movs	r2, #0
 8100ca2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100ca4:	4b10      	ldr	r3, [pc, #64]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100ca6:	2200      	movs	r2, #0
 8100ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100caa:	4b0f      	ldr	r3, [pc, #60]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100cac:	2200      	movs	r2, #0
 8100cae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100cb0:	4b0d      	ldr	r3, [pc, #52]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100cb2:	2200      	movs	r2, #0
 8100cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100cb8:	4b0b      	ldr	r3, [pc, #44]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100cba:	2201      	movs	r2, #1
 8100cbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100cbe:	4b0a      	ldr	r3, [pc, #40]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100cc4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100cc6:	4808      	ldr	r0, [pc, #32]	; (8100ce8 <MX_SAI1_Init+0x130>)
 8100cc8:	f007 f9b8 	bl	810803c <HAL_SAI_Init>
 8100ccc:	4603      	mov	r3, r0
 8100cce:	2b00      	cmp	r3, #0
 8100cd0:	d001      	beq.n	8100cd6 <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8100cd2:	f000 fbff 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100cd6:	bf00      	nop
 8100cd8:	bd80      	pop	{r7, pc}
 8100cda:	bf00      	nop
 8100cdc:	10000b30 	.word	0x10000b30
 8100ce0:	40015804 	.word	0x40015804
 8100ce4:	0002ee00 	.word	0x0002ee00
 8100ce8:	10000780 	.word	0x10000780
 8100cec:	40015824 	.word	0x40015824

08100cf0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100cf0:	b580      	push	{r7, lr}
 8100cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100cf4:	4b0e      	ldr	r3, [pc, #56]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100cf6:	4a0f      	ldr	r2, [pc, #60]	; (8100d34 <MX_SDMMC1_SD_Init+0x44>)
 8100cf8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100cfa:	4b0d      	ldr	r3, [pc, #52]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100cfc:	2200      	movs	r2, #0
 8100cfe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100d00:	4b0b      	ldr	r3, [pc, #44]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100d02:	2200      	movs	r2, #0
 8100d04:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100d06:	4b0a      	ldr	r3, [pc, #40]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100d08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100d0c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100d0e:	4b08      	ldr	r3, [pc, #32]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100d10:	2200      	movs	r2, #0
 8100d12:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100d14:	4b06      	ldr	r3, [pc, #24]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100d16:	2200      	movs	r2, #0
 8100d18:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100d1a:	4805      	ldr	r0, [pc, #20]	; (8100d30 <MX_SDMMC1_SD_Init+0x40>)
 8100d1c:	f007 fc68 	bl	81085f0 <HAL_SD_Init>
 8100d20:	4603      	mov	r3, r0
 8100d22:	2b00      	cmp	r3, #0
 8100d24:	d001      	beq.n	8100d2a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8100d26:	f000 fbd5 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100d2a:	bf00      	nop
 8100d2c:	bd80      	pop	{r7, pc}
 8100d2e:	bf00      	nop
 8100d30:	10000688 	.word	0x10000688
 8100d34:	52007000 	.word	0x52007000

08100d38 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100d38:	b580      	push	{r7, lr}
 8100d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100d3c:	4b19      	ldr	r3, [pc, #100]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d3e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8100d42:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100d44:	4b17      	ldr	r3, [pc, #92]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d46:	2200      	movs	r2, #0
 8100d48:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100d4a:	4b16      	ldr	r3, [pc, #88]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d4c:	2200      	movs	r2, #0
 8100d4e:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100d50:	4b14      	ldr	r3, [pc, #80]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d52:	2200      	movs	r2, #0
 8100d54:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100d56:	4b13      	ldr	r3, [pc, #76]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d58:	2200      	movs	r2, #0
 8100d5a:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100d5c:	4b11      	ldr	r3, [pc, #68]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d5e:	2200      	movs	r2, #0
 8100d60:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100d62:	4b10      	ldr	r3, [pc, #64]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d64:	2200      	movs	r2, #0
 8100d66:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100d68:	4b0e      	ldr	r3, [pc, #56]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d6a:	2200      	movs	r2, #0
 8100d6c:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100d6e:	4b0d      	ldr	r3, [pc, #52]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100d74:	4b0b      	ldr	r3, [pc, #44]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d76:	2200      	movs	r2, #0
 8100d78:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100d7a:	4b0a      	ldr	r3, [pc, #40]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d7c:	2200      	movs	r2, #0
 8100d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100d80:	4b08      	ldr	r3, [pc, #32]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d82:	2200      	movs	r2, #0
 8100d84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100d88:	4b06      	ldr	r3, [pc, #24]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d8a:	2200      	movs	r2, #0
 8100d8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100d90:	4804      	ldr	r0, [pc, #16]	; (8100da4 <MX_SPDIFRX1_Init+0x6c>)
 8100d92:	f008 fcd1 	bl	8109738 <HAL_SPDIFRX_Init>
 8100d96:	4603      	mov	r3, r0
 8100d98:	2b00      	cmp	r3, #0
 8100d9a:	d001      	beq.n	8100da0 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100d9c:	f000 fb9a 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100da0:	bf00      	nop
 8100da2:	bd80      	pop	{r7, pc}
 8100da4:	10000818 	.word	0x10000818

08100da8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100da8:	b580      	push	{r7, lr}
 8100daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100dac:	4b26      	ldr	r3, [pc, #152]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dae:	4a27      	ldr	r2, [pc, #156]	; (8100e4c <MX_SPI2_Init+0xa4>)
 8100db0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100db2:	4b25      	ldr	r3, [pc, #148]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100db4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100db8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100dba:	4b23      	ldr	r3, [pc, #140]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dbc:	2200      	movs	r2, #0
 8100dbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100dc0:	4b21      	ldr	r3, [pc, #132]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dc2:	2203      	movs	r2, #3
 8100dc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100dc6:	4b20      	ldr	r3, [pc, #128]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dc8:	2200      	movs	r2, #0
 8100dca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100dcc:	4b1e      	ldr	r3, [pc, #120]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dce:	2200      	movs	r2, #0
 8100dd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8100dd2:	4b1d      	ldr	r3, [pc, #116]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dd4:	2200      	movs	r2, #0
 8100dd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100dd8:	4b1b      	ldr	r3, [pc, #108]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dda:	2200      	movs	r2, #0
 8100ddc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100dde:	4b1a      	ldr	r3, [pc, #104]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100de0:	2200      	movs	r2, #0
 8100de2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100de4:	4b18      	ldr	r3, [pc, #96]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100de6:	2200      	movs	r2, #0
 8100de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100dea:	4b17      	ldr	r3, [pc, #92]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100df0:	4b15      	ldr	r3, [pc, #84]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100df2:	2200      	movs	r2, #0
 8100df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100df6:	4b14      	ldr	r3, [pc, #80]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100dfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100dfe:	4b12      	ldr	r3, [pc, #72]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e00:	2200      	movs	r2, #0
 8100e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e04:	4b10      	ldr	r3, [pc, #64]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e06:	2200      	movs	r2, #0
 8100e08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e0a:	4b0f      	ldr	r3, [pc, #60]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e10:	4b0d      	ldr	r3, [pc, #52]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e16:	4b0c      	ldr	r3, [pc, #48]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e18:	2200      	movs	r2, #0
 8100e1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e1c:	4b0a      	ldr	r3, [pc, #40]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e1e:	2200      	movs	r2, #0
 8100e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100e22:	4b09      	ldr	r3, [pc, #36]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e24:	2200      	movs	r2, #0
 8100e26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e28:	4b07      	ldr	r3, [pc, #28]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e2a:	2200      	movs	r2, #0
 8100e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e2e:	4b06      	ldr	r3, [pc, #24]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e30:	2200      	movs	r2, #0
 8100e32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100e34:	4804      	ldr	r0, [pc, #16]	; (8100e48 <MX_SPI2_Init+0xa0>)
 8100e36:	f008 fced 	bl	8109814 <HAL_SPI_Init>
 8100e3a:	4603      	mov	r3, r0
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d001      	beq.n	8100e44 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8100e40:	f000 fb48 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100e44:	bf00      	nop
 8100e46:	bd80      	pop	{r7, pc}
 8100e48:	10000124 	.word	0x10000124
 8100e4c:	40003800 	.word	0x40003800

08100e50 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100e50:	b580      	push	{r7, lr}
 8100e52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100e54:	4b26      	ldr	r3, [pc, #152]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e56:	4a27      	ldr	r2, [pc, #156]	; (8100ef4 <MX_SPI5_Init+0xa4>)
 8100e58:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100e5a:	4b25      	ldr	r3, [pc, #148]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100e60:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100e62:	4b23      	ldr	r3, [pc, #140]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e64:	2200      	movs	r2, #0
 8100e66:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e68:	4b21      	ldr	r3, [pc, #132]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e6a:	2203      	movs	r2, #3
 8100e6c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e6e:	4b20      	ldr	r3, [pc, #128]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e70:	2200      	movs	r2, #0
 8100e72:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e74:	4b1e      	ldr	r3, [pc, #120]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e76:	2200      	movs	r2, #0
 8100e78:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100e7a:	4b1d      	ldr	r3, [pc, #116]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100e80:	4b1b      	ldr	r3, [pc, #108]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e82:	2200      	movs	r2, #0
 8100e84:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e86:	4b1a      	ldr	r3, [pc, #104]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e88:	2200      	movs	r2, #0
 8100e8a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e8c:	4b18      	ldr	r3, [pc, #96]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e8e:	2200      	movs	r2, #0
 8100e90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e92:	4b17      	ldr	r3, [pc, #92]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e94:	2200      	movs	r2, #0
 8100e96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100e98:	4b15      	ldr	r3, [pc, #84]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100e9a:	2200      	movs	r2, #0
 8100e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e9e:	4b14      	ldr	r3, [pc, #80]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100ea4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100ea6:	4b12      	ldr	r3, [pc, #72]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ea8:	2200      	movs	r2, #0
 8100eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100eac:	4b10      	ldr	r3, [pc, #64]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100eae:	2200      	movs	r2, #0
 8100eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100eb2:	4b0f      	ldr	r3, [pc, #60]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100eb4:	2200      	movs	r2, #0
 8100eb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100eb8:	4b0d      	ldr	r3, [pc, #52]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100eba:	2200      	movs	r2, #0
 8100ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100ebe:	4b0c      	ldr	r3, [pc, #48]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ec0:	2200      	movs	r2, #0
 8100ec2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100ec4:	4b0a      	ldr	r3, [pc, #40]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ec6:	2200      	movs	r2, #0
 8100ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100eca:	4b09      	ldr	r3, [pc, #36]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ecc:	2200      	movs	r2, #0
 8100ece:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100ed0:	4b07      	ldr	r3, [pc, #28]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ed2:	2200      	movs	r2, #0
 8100ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100ed6:	4b06      	ldr	r3, [pc, #24]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ed8:	2200      	movs	r2, #0
 8100eda:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100edc:	4804      	ldr	r0, [pc, #16]	; (8100ef0 <MX_SPI5_Init+0xa0>)
 8100ede:	f008 fc99 	bl	8109814 <HAL_SPI_Init>
 8100ee2:	4603      	mov	r3, r0
 8100ee4:	2b00      	cmp	r3, #0
 8100ee6:	d001      	beq.n	8100eec <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100ee8:	f000 faf4 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100eec:	bf00      	nop
 8100eee:	bd80      	pop	{r7, pc}
 8100ef0:	100001f8 	.word	0x100001f8
 8100ef4:	40015000 	.word	0x40015000

08100ef8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100ef8:	b580      	push	{r7, lr}
 8100efa:	b096      	sub	sp, #88	; 0x58
 8100efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100efe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100f02:	2200      	movs	r2, #0
 8100f04:	601a      	str	r2, [r3, #0]
 8100f06:	605a      	str	r2, [r3, #4]
 8100f08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100f0e:	2200      	movs	r2, #0
 8100f10:	601a      	str	r2, [r3, #0]
 8100f12:	605a      	str	r2, [r3, #4]
 8100f14:	609a      	str	r2, [r3, #8]
 8100f16:	60da      	str	r2, [r3, #12]
 8100f18:	611a      	str	r2, [r3, #16]
 8100f1a:	615a      	str	r2, [r3, #20]
 8100f1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100f1e:	1d3b      	adds	r3, r7, #4
 8100f20:	222c      	movs	r2, #44	; 0x2c
 8100f22:	2100      	movs	r1, #0
 8100f24:	4618      	mov	r0, r3
 8100f26:	f00b fea5 	bl	810cc74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100f2a:	4b39      	ldr	r3, [pc, #228]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f2c:	4a39      	ldr	r2, [pc, #228]	; (8101014 <MX_TIM8_Init+0x11c>)
 8100f2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100f30:	4b37      	ldr	r3, [pc, #220]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f32:	2200      	movs	r2, #0
 8100f34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f36:	4b36      	ldr	r3, [pc, #216]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f38:	2200      	movs	r2, #0
 8100f3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100f3c:	4b34      	ldr	r3, [pc, #208]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100f42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100f44:	4b32      	ldr	r3, [pc, #200]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f46:	2200      	movs	r2, #0
 8100f48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100f4a:	4b31      	ldr	r3, [pc, #196]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f4c:	2200      	movs	r2, #0
 8100f4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100f50:	4b2f      	ldr	r3, [pc, #188]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f52:	2200      	movs	r2, #0
 8100f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100f56:	482e      	ldr	r0, [pc, #184]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f58:	f008 fdd4 	bl	8109b04 <HAL_TIM_OC_Init>
 8100f5c:	4603      	mov	r3, r0
 8100f5e:	2b00      	cmp	r3, #0
 8100f60:	d001      	beq.n	8100f66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100f62:	f000 fab7 	bl	81014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100f66:	2300      	movs	r3, #0
 8100f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100f6a:	2300      	movs	r3, #0
 8100f6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100f6e:	2300      	movs	r3, #0
 8100f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100f76:	4619      	mov	r1, r3
 8100f78:	4825      	ldr	r0, [pc, #148]	; (8101010 <MX_TIM8_Init+0x118>)
 8100f7a:	f009 fc2b 	bl	810a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8100f7e:	4603      	mov	r3, r0
 8100f80:	2b00      	cmp	r3, #0
 8100f82:	d001      	beq.n	8100f88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100f84:	f000 faa6 	bl	81014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100f88:	2300      	movs	r3, #0
 8100f8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100f8c:	2300      	movs	r3, #0
 8100f8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100f90:	2300      	movs	r3, #0
 8100f92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100f94:	2300      	movs	r3, #0
 8100f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100f98:	2300      	movs	r3, #0
 8100f9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100f9c:	2300      	movs	r3, #0
 8100f9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100fa0:	2300      	movs	r3, #0
 8100fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100fa8:	2204      	movs	r2, #4
 8100faa:	4619      	mov	r1, r3
 8100fac:	4818      	ldr	r0, [pc, #96]	; (8101010 <MX_TIM8_Init+0x118>)
 8100fae:	f008 fe61 	bl	8109c74 <HAL_TIM_OC_ConfigChannel>
 8100fb2:	4603      	mov	r3, r0
 8100fb4:	2b00      	cmp	r3, #0
 8100fb6:	d001      	beq.n	8100fbc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100fb8:	f000 fa8c 	bl	81014d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100fbc:	2300      	movs	r3, #0
 8100fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100fc0:	2300      	movs	r3, #0
 8100fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100fc4:	2300      	movs	r3, #0
 8100fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100fc8:	2300      	movs	r3, #0
 8100fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100fcc:	2300      	movs	r3, #0
 8100fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100fda:	2300      	movs	r3, #0
 8100fdc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100fe2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100fe4:	2300      	movs	r3, #0
 8100fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100fe8:	2300      	movs	r3, #0
 8100fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100fec:	1d3b      	adds	r3, r7, #4
 8100fee:	4619      	mov	r1, r3
 8100ff0:	4807      	ldr	r0, [pc, #28]	; (8101010 <MX_TIM8_Init+0x118>)
 8100ff2:	f009 fc7d 	bl	810a8f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8100ff6:	4603      	mov	r3, r0
 8100ff8:	2b00      	cmp	r3, #0
 8100ffa:	d001      	beq.n	8101000 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100ffc:	f000 fa6a 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8101000:	4803      	ldr	r0, [pc, #12]	; (8101010 <MX_TIM8_Init+0x118>)
 8101002:	f001 f8a1 	bl	8102148 <HAL_TIM_MspPostInit>

}
 8101006:	bf00      	nop
 8101008:	3758      	adds	r7, #88	; 0x58
 810100a:	46bd      	mov	sp, r7
 810100c:	bd80      	pop	{r7, pc}
 810100e:	bf00      	nop
 8101010:	100001ac 	.word	0x100001ac
 8101014:	40010400 	.word	0x40010400

08101018 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8101018:	b580      	push	{r7, lr}
 810101a:	b084      	sub	sp, #16
 810101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 810101e:	463b      	mov	r3, r7
 8101020:	2200      	movs	r2, #0
 8101022:	601a      	str	r2, [r3, #0]
 8101024:	605a      	str	r2, [r3, #4]
 8101026:	609a      	str	r2, [r3, #8]
 8101028:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 810102a:	4b1d      	ldr	r3, [pc, #116]	; (81010a0 <MX_TIM13_Init+0x88>)
 810102c:	4a1d      	ldr	r2, [pc, #116]	; (81010a4 <MX_TIM13_Init+0x8c>)
 810102e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8101030:	4b1b      	ldr	r3, [pc, #108]	; (81010a0 <MX_TIM13_Init+0x88>)
 8101032:	2200      	movs	r2, #0
 8101034:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101036:	4b1a      	ldr	r3, [pc, #104]	; (81010a0 <MX_TIM13_Init+0x88>)
 8101038:	2200      	movs	r2, #0
 810103a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 810103c:	4b18      	ldr	r3, [pc, #96]	; (81010a0 <MX_TIM13_Init+0x88>)
 810103e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101042:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101044:	4b16      	ldr	r3, [pc, #88]	; (81010a0 <MX_TIM13_Init+0x88>)
 8101046:	2200      	movs	r2, #0
 8101048:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810104a:	4b15      	ldr	r3, [pc, #84]	; (81010a0 <MX_TIM13_Init+0x88>)
 810104c:	2200      	movs	r2, #0
 810104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8101050:	4813      	ldr	r0, [pc, #76]	; (81010a0 <MX_TIM13_Init+0x88>)
 8101052:	f008 fd00 	bl	8109a56 <HAL_TIM_Base_Init>
 8101056:	4603      	mov	r3, r0
 8101058:	2b00      	cmp	r3, #0
 810105a:	d001      	beq.n	8101060 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 810105c:	f000 fa3a 	bl	81014d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8101060:	480f      	ldr	r0, [pc, #60]	; (81010a0 <MX_TIM13_Init+0x88>)
 8101062:	f008 fda6 	bl	8109bb2 <HAL_TIM_IC_Init>
 8101066:	4603      	mov	r3, r0
 8101068:	2b00      	cmp	r3, #0
 810106a:	d001      	beq.n	8101070 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 810106c:	f000 fa32 	bl	81014d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8101070:	2300      	movs	r3, #0
 8101072:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8101074:	2301      	movs	r3, #1
 8101076:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8101078:	2300      	movs	r3, #0
 810107a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 810107c:	2300      	movs	r3, #0
 810107e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8101080:	463b      	mov	r3, r7
 8101082:	2200      	movs	r2, #0
 8101084:	4619      	mov	r1, r3
 8101086:	4806      	ldr	r0, [pc, #24]	; (81010a0 <MX_TIM13_Init+0x88>)
 8101088:	f008 fe6e 	bl	8109d68 <HAL_TIM_IC_ConfigChannel>
 810108c:	4603      	mov	r3, r0
 810108e:	2b00      	cmp	r3, #0
 8101090:	d001      	beq.n	8101096 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8101092:	f000 fa1f 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8101096:	bf00      	nop
 8101098:	3710      	adds	r7, #16
 810109a:	46bd      	mov	sp, r7
 810109c:	bd80      	pop	{r7, pc}
 810109e:	bf00      	nop
 81010a0:	10000930 	.word	0x10000930
 81010a4:	40001c00 	.word	0x40001c00

081010a8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 81010a8:	b580      	push	{r7, lr}
 81010aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 81010ac:	4b22      	ldr	r3, [pc, #136]	; (8101138 <MX_UART8_Init+0x90>)
 81010ae:	4a23      	ldr	r2, [pc, #140]	; (810113c <MX_UART8_Init+0x94>)
 81010b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 81010b2:	4b21      	ldr	r3, [pc, #132]	; (8101138 <MX_UART8_Init+0x90>)
 81010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81010b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 81010ba:	4b1f      	ldr	r3, [pc, #124]	; (8101138 <MX_UART8_Init+0x90>)
 81010bc:	2200      	movs	r2, #0
 81010be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 81010c0:	4b1d      	ldr	r3, [pc, #116]	; (8101138 <MX_UART8_Init+0x90>)
 81010c2:	2200      	movs	r2, #0
 81010c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 81010c6:	4b1c      	ldr	r3, [pc, #112]	; (8101138 <MX_UART8_Init+0x90>)
 81010c8:	2200      	movs	r2, #0
 81010ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 81010cc:	4b1a      	ldr	r3, [pc, #104]	; (8101138 <MX_UART8_Init+0x90>)
 81010ce:	220c      	movs	r2, #12
 81010d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81010d2:	4b19      	ldr	r3, [pc, #100]	; (8101138 <MX_UART8_Init+0x90>)
 81010d4:	2200      	movs	r2, #0
 81010d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 81010d8:	4b17      	ldr	r3, [pc, #92]	; (8101138 <MX_UART8_Init+0x90>)
 81010da:	2200      	movs	r2, #0
 81010dc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81010de:	4b16      	ldr	r3, [pc, #88]	; (8101138 <MX_UART8_Init+0x90>)
 81010e0:	2200      	movs	r2, #0
 81010e2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81010e4:	4b14      	ldr	r3, [pc, #80]	; (8101138 <MX_UART8_Init+0x90>)
 81010e6:	2200      	movs	r2, #0
 81010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81010ea:	4b13      	ldr	r3, [pc, #76]	; (8101138 <MX_UART8_Init+0x90>)
 81010ec:	2200      	movs	r2, #0
 81010ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 81010f0:	4811      	ldr	r0, [pc, #68]	; (8101138 <MX_UART8_Init+0x90>)
 81010f2:	f009 fc7b 	bl	810a9ec <HAL_UART_Init>
 81010f6:	4603      	mov	r3, r0
 81010f8:	2b00      	cmp	r3, #0
 81010fa:	d001      	beq.n	8101100 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 81010fc:	f000 f9ea 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101100:	2100      	movs	r1, #0
 8101102:	480d      	ldr	r0, [pc, #52]	; (8101138 <MX_UART8_Init+0x90>)
 8101104:	f00a fc10 	bl	810b928 <HAL_UARTEx_SetTxFifoThreshold>
 8101108:	4603      	mov	r3, r0
 810110a:	2b00      	cmp	r3, #0
 810110c:	d001      	beq.n	8101112 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 810110e:	f000 f9e1 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101112:	2100      	movs	r1, #0
 8101114:	4808      	ldr	r0, [pc, #32]	; (8101138 <MX_UART8_Init+0x90>)
 8101116:	f00a fc45 	bl	810b9a4 <HAL_UARTEx_SetRxFifoThreshold>
 810111a:	4603      	mov	r3, r0
 810111c:	2b00      	cmp	r3, #0
 810111e:	d001      	beq.n	8101124 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8101120:	f000 f9d8 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8101124:	4804      	ldr	r0, [pc, #16]	; (8101138 <MX_UART8_Init+0x90>)
 8101126:	f00a fbc6 	bl	810b8b6 <HAL_UARTEx_DisableFifoMode>
 810112a:	4603      	mov	r3, r0
 810112c:	2b00      	cmp	r3, #0
 810112e:	d001      	beq.n	8101134 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8101130:	f000 f9d0 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8101134:	bf00      	nop
 8101136:	bd80      	pop	{r7, pc}
 8101138:	10000a68 	.word	0x10000a68
 810113c:	40007c00 	.word	0x40007c00

08101140 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8101140:	b580      	push	{r7, lr}
 8101142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8101144:	4b22      	ldr	r3, [pc, #136]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101146:	4a23      	ldr	r2, [pc, #140]	; (81011d4 <MX_USART1_UART_Init+0x94>)
 8101148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 810114a:	4b21      	ldr	r3, [pc, #132]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 810114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8101152:	4b1f      	ldr	r3, [pc, #124]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101154:	2200      	movs	r2, #0
 8101156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8101158:	4b1d      	ldr	r3, [pc, #116]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 810115a:	2200      	movs	r2, #0
 810115c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 810115e:	4b1c      	ldr	r3, [pc, #112]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101160:	2200      	movs	r2, #0
 8101162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8101164:	4b1a      	ldr	r3, [pc, #104]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101166:	220c      	movs	r2, #12
 8101168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810116a:	4b19      	ldr	r3, [pc, #100]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 810116c:	2200      	movs	r2, #0
 810116e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8101170:	4b17      	ldr	r3, [pc, #92]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101172:	2200      	movs	r2, #0
 8101174:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101176:	4b16      	ldr	r3, [pc, #88]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101178:	2200      	movs	r2, #0
 810117a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810117c:	4b14      	ldr	r3, [pc, #80]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 810117e:	2200      	movs	r2, #0
 8101180:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101182:	4b13      	ldr	r3, [pc, #76]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 8101184:	2200      	movs	r2, #0
 8101186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8101188:	4811      	ldr	r0, [pc, #68]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 810118a:	f009 fc2f 	bl	810a9ec <HAL_UART_Init>
 810118e:	4603      	mov	r3, r0
 8101190:	2b00      	cmp	r3, #0
 8101192:	d001      	beq.n	8101198 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8101194:	f000 f99e 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101198:	2100      	movs	r1, #0
 810119a:	480d      	ldr	r0, [pc, #52]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 810119c:	f00a fbc4 	bl	810b928 <HAL_UARTEx_SetTxFifoThreshold>
 81011a0:	4603      	mov	r3, r0
 81011a2:	2b00      	cmp	r3, #0
 81011a4:	d001      	beq.n	81011aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 81011a6:	f000 f995 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81011aa:	2100      	movs	r1, #0
 81011ac:	4808      	ldr	r0, [pc, #32]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 81011ae:	f00a fbf9 	bl	810b9a4 <HAL_UARTEx_SetRxFifoThreshold>
 81011b2:	4603      	mov	r3, r0
 81011b4:	2b00      	cmp	r3, #0
 81011b6:	d001      	beq.n	81011bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 81011b8:	f000 f98c 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 81011bc:	4804      	ldr	r0, [pc, #16]	; (81011d0 <MX_USART1_UART_Init+0x90>)
 81011be:	f00a fb7a 	bl	810b8b6 <HAL_UARTEx_DisableFifoMode>
 81011c2:	4603      	mov	r3, r0
 81011c4:	2b00      	cmp	r3, #0
 81011c6:	d001      	beq.n	81011cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 81011c8:	f000 f984 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 81011cc:	bf00      	nop
 81011ce:	bd80      	pop	{r7, pc}
 81011d0:	1000097c 	.word	0x1000097c
 81011d4:	40011000 	.word	0x40011000

081011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 81011d8:	b580      	push	{r7, lr}
 81011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 81011dc:	4b23      	ldr	r3, [pc, #140]	; (810126c <MX_USART2_UART_Init+0x94>)
 81011de:	4a24      	ldr	r2, [pc, #144]	; (8101270 <MX_USART2_UART_Init+0x98>)
 81011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 81011e2:	4b22      	ldr	r3, [pc, #136]	; (810126c <MX_USART2_UART_Init+0x94>)
 81011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 81011ea:	4b20      	ldr	r3, [pc, #128]	; (810126c <MX_USART2_UART_Init+0x94>)
 81011ec:	2200      	movs	r2, #0
 81011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 81011f0:	4b1e      	ldr	r3, [pc, #120]	; (810126c <MX_USART2_UART_Init+0x94>)
 81011f2:	2200      	movs	r2, #0
 81011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 81011f6:	4b1d      	ldr	r3, [pc, #116]	; (810126c <MX_USART2_UART_Init+0x94>)
 81011f8:	2200      	movs	r2, #0
 81011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 81011fc:	4b1b      	ldr	r3, [pc, #108]	; (810126c <MX_USART2_UART_Init+0x94>)
 81011fe:	220c      	movs	r2, #12
 8101200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8101202:	4b1a      	ldr	r3, [pc, #104]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101204:	f44f 7240 	mov.w	r2, #768	; 0x300
 8101208:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 810120a:	4b18      	ldr	r3, [pc, #96]	; (810126c <MX_USART2_UART_Init+0x94>)
 810120c:	2200      	movs	r2, #0
 810120e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101210:	4b16      	ldr	r3, [pc, #88]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101212:	2200      	movs	r2, #0
 8101214:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101216:	4b15      	ldr	r3, [pc, #84]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101218:	2200      	movs	r2, #0
 810121a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810121c:	4b13      	ldr	r3, [pc, #76]	; (810126c <MX_USART2_UART_Init+0x94>)
 810121e:	2200      	movs	r2, #0
 8101220:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8101222:	4812      	ldr	r0, [pc, #72]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101224:	f009 fbe2 	bl	810a9ec <HAL_UART_Init>
 8101228:	4603      	mov	r3, r0
 810122a:	2b00      	cmp	r3, #0
 810122c:	d001      	beq.n	8101232 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 810122e:	f000 f951 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101232:	2100      	movs	r1, #0
 8101234:	480d      	ldr	r0, [pc, #52]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101236:	f00a fb77 	bl	810b928 <HAL_UARTEx_SetTxFifoThreshold>
 810123a:	4603      	mov	r3, r0
 810123c:	2b00      	cmp	r3, #0
 810123e:	d001      	beq.n	8101244 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8101240:	f000 f948 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101244:	2100      	movs	r1, #0
 8101246:	4809      	ldr	r0, [pc, #36]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101248:	f00a fbac 	bl	810b9a4 <HAL_UARTEx_SetRxFifoThreshold>
 810124c:	4603      	mov	r3, r0
 810124e:	2b00      	cmp	r3, #0
 8101250:	d001      	beq.n	8101256 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8101252:	f000 f93f 	bl	81014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8101256:	4805      	ldr	r0, [pc, #20]	; (810126c <MX_USART2_UART_Init+0x94>)
 8101258:	f00a fb2d 	bl	810b8b6 <HAL_UARTEx_DisableFifoMode>
 810125c:	4603      	mov	r3, r0
 810125e:	2b00      	cmp	r3, #0
 8101260:	d001      	beq.n	8101266 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8101262:	f000 f937 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8101266:	bf00      	nop
 8101268:	bd80      	pop	{r7, pc}
 810126a:	bf00      	nop
 810126c:	10000bc8 	.word	0x10000bc8
 8101270:	40004400 	.word	0x40004400

08101274 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8101274:	b580      	push	{r7, lr}
 8101276:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101278:	4b15      	ldr	r3, [pc, #84]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810127a:	4a16      	ldr	r2, [pc, #88]	; (81012d4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 810127c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 810127e:	4b14      	ldr	r3, [pc, #80]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101280:	2209      	movs	r2, #9
 8101282:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8101284:	4b12      	ldr	r3, [pc, #72]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101286:	2200      	movs	r2, #0
 8101288:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 810128a:	4b11      	ldr	r3, [pc, #68]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810128c:	2200      	movs	r2, #0
 810128e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101290:	4b0f      	ldr	r3, [pc, #60]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101292:	2201      	movs	r2, #1
 8101294:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101296:	4b0e      	ldr	r3, [pc, #56]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101298:	2200      	movs	r2, #0
 810129a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 810129c:	4b0c      	ldr	r3, [pc, #48]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810129e:	2200      	movs	r2, #0
 81012a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 81012a2:	4b0b      	ldr	r3, [pc, #44]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012a4:	2200      	movs	r2, #0
 81012a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 81012a8:	4b09      	ldr	r3, [pc, #36]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012aa:	2200      	movs	r2, #0
 81012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 81012ae:	4b08      	ldr	r3, [pc, #32]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012b0:	2200      	movs	r2, #0
 81012b2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 81012b4:	4b06      	ldr	r3, [pc, #24]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012b6:	2200      	movs	r2, #0
 81012b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 81012ba:	4805      	ldr	r0, [pc, #20]	; (81012d0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012bc:	f003 fea6 	bl	810500c <HAL_PCD_Init>
 81012c0:	4603      	mov	r3, r0
 81012c2:	2b00      	cmp	r3, #0
 81012c4:	d001      	beq.n	81012ca <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 81012c6:	f000 f905 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 81012ca:	bf00      	nop
 81012cc:	bd80      	pop	{r7, pc}
 81012ce:	bf00      	nop
 81012d0:	10000280 	.word	0x10000280
 81012d4:	40040000 	.word	0x40040000

081012d8 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 81012d8:	b580      	push	{r7, lr}
 81012da:	b088      	sub	sp, #32
 81012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 81012de:	1d3b      	adds	r3, r7, #4
 81012e0:	2200      	movs	r2, #0
 81012e2:	601a      	str	r2, [r3, #0]
 81012e4:	605a      	str	r2, [r3, #4]
 81012e6:	609a      	str	r2, [r3, #8]
 81012e8:	60da      	str	r2, [r3, #12]
 81012ea:	611a      	str	r2, [r3, #16]
 81012ec:	615a      	str	r2, [r3, #20]
 81012ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 81012f0:	4b1e      	ldr	r3, [pc, #120]	; (810136c <MX_FMC_Init+0x94>)
 81012f2:	4a1f      	ldr	r2, [pc, #124]	; (8101370 <MX_FMC_Init+0x98>)
 81012f4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 81012f6:	4b1d      	ldr	r3, [pc, #116]	; (810136c <MX_FMC_Init+0x94>)
 81012f8:	2201      	movs	r2, #1
 81012fa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 81012fc:	4b1b      	ldr	r3, [pc, #108]	; (810136c <MX_FMC_Init+0x94>)
 81012fe:	2200      	movs	r2, #0
 8101300:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8101302:	4b1a      	ldr	r3, [pc, #104]	; (810136c <MX_FMC_Init+0x94>)
 8101304:	2208      	movs	r2, #8
 8101306:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8101308:	4b18      	ldr	r3, [pc, #96]	; (810136c <MX_FMC_Init+0x94>)
 810130a:	2220      	movs	r2, #32
 810130c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 810130e:	4b17      	ldr	r3, [pc, #92]	; (810136c <MX_FMC_Init+0x94>)
 8101310:	2200      	movs	r2, #0
 8101312:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8101314:	4b15      	ldr	r3, [pc, #84]	; (810136c <MX_FMC_Init+0x94>)
 8101316:	2280      	movs	r2, #128	; 0x80
 8101318:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 810131a:	4b14      	ldr	r3, [pc, #80]	; (810136c <MX_FMC_Init+0x94>)
 810131c:	2200      	movs	r2, #0
 810131e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8101320:	4b12      	ldr	r3, [pc, #72]	; (810136c <MX_FMC_Init+0x94>)
 8101322:	2200      	movs	r2, #0
 8101324:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8101326:	4b11      	ldr	r3, [pc, #68]	; (810136c <MX_FMC_Init+0x94>)
 8101328:	2200      	movs	r2, #0
 810132a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 810132c:	4b0f      	ldr	r3, [pc, #60]	; (810136c <MX_FMC_Init+0x94>)
 810132e:	2200      	movs	r2, #0
 8101330:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8101332:	2310      	movs	r3, #16
 8101334:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8101336:	2310      	movs	r3, #16
 8101338:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 810133a:	2310      	movs	r3, #16
 810133c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 810133e:	2310      	movs	r3, #16
 8101340:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8101342:	2310      	movs	r3, #16
 8101344:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8101346:	2310      	movs	r3, #16
 8101348:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 810134a:	2310      	movs	r3, #16
 810134c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 810134e:	1d3b      	adds	r3, r7, #4
 8101350:	4619      	mov	r1, r3
 8101352:	4806      	ldr	r0, [pc, #24]	; (810136c <MX_FMC_Init+0x94>)
 8101354:	f008 f9b4 	bl	81096c0 <HAL_SDRAM_Init>
 8101358:	4603      	mov	r3, r0
 810135a:	2b00      	cmp	r3, #0
 810135c:	d001      	beq.n	8101362 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 810135e:	f000 f8b9 	bl	81014d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8101362:	bf00      	nop
 8101364:	3720      	adds	r7, #32
 8101366:	46bd      	mov	sp, r7
 8101368:	bd80      	pop	{r7, pc}
 810136a:	bf00      	nop
 810136c:	10000c58 	.word	0x10000c58
 8101370:	52004140 	.word	0x52004140

08101374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101374:	b480      	push	{r7}
 8101376:	b08d      	sub	sp, #52	; 0x34
 8101378:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810137a:	4b55      	ldr	r3, [pc, #340]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101380:	4a53      	ldr	r2, [pc, #332]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810138a:	4b51      	ldr	r3, [pc, #324]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101398:	4b4d      	ldr	r3, [pc, #308]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810139e:	4a4c      	ldr	r2, [pc, #304]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013a0:	f043 0302 	orr.w	r3, r3, #2
 81013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013a8:	4b49      	ldr	r3, [pc, #292]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ae:	f003 0302 	and.w	r3, r3, #2
 81013b2:	62bb      	str	r3, [r7, #40]	; 0x28
 81013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81013b6:	4b46      	ldr	r3, [pc, #280]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013bc:	4a44      	ldr	r2, [pc, #272]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013c6:	4b42      	ldr	r3, [pc, #264]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81013d0:	627b      	str	r3, [r7, #36]	; 0x24
 81013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81013d4:	4b3e      	ldr	r3, [pc, #248]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013da:	4a3d      	ldr	r2, [pc, #244]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013dc:	f043 0308 	orr.w	r3, r3, #8
 81013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013e4:	4b3a      	ldr	r3, [pc, #232]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ea:	f003 0308 	and.w	r3, r3, #8
 81013ee:	623b      	str	r3, [r7, #32]
 81013f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81013f2:	4b37      	ldr	r3, [pc, #220]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f8:	4a35      	ldr	r2, [pc, #212]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81013fa:	f043 0304 	orr.w	r3, r3, #4
 81013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101402:	4b33      	ldr	r3, [pc, #204]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101408:	f003 0304 	and.w	r3, r3, #4
 810140c:	61fb      	str	r3, [r7, #28]
 810140e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101410:	4b2f      	ldr	r3, [pc, #188]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101416:	4a2e      	ldr	r2, [pc, #184]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101418:	f043 0310 	orr.w	r3, r3, #16
 810141c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101420:	4b2b      	ldr	r3, [pc, #172]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101426:	f003 0310 	and.w	r3, r3, #16
 810142a:	61bb      	str	r3, [r7, #24]
 810142c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810142e:	4b28      	ldr	r3, [pc, #160]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101434:	4a26      	ldr	r2, [pc, #152]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810143e:	4b24      	ldr	r3, [pc, #144]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101448:	617b      	str	r3, [r7, #20]
 810144a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810144c:	4b20      	ldr	r3, [pc, #128]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101452:	4a1f      	ldr	r2, [pc, #124]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101454:	f043 0301 	orr.w	r3, r3, #1
 8101458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810145c:	4b1c      	ldr	r3, [pc, #112]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101462:	f003 0301 	and.w	r3, r3, #1
 8101466:	613b      	str	r3, [r7, #16]
 8101468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810146a:	4b19      	ldr	r3, [pc, #100]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101470:	4a17      	ldr	r2, [pc, #92]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101472:	f043 0320 	orr.w	r3, r3, #32
 8101476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810147a:	4b15      	ldr	r3, [pc, #84]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101480:	f003 0320 	and.w	r3, r3, #32
 8101484:	60fb      	str	r3, [r7, #12]
 8101486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8101488:	4b11      	ldr	r3, [pc, #68]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810148e:	4a10      	ldr	r2, [pc, #64]	; (81014d0 <MX_GPIO_Init+0x15c>)
 8101490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101498:	4b0d      	ldr	r3, [pc, #52]	; (81014d0 <MX_GPIO_Init+0x15c>)
 810149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81014a2:	60bb      	str	r3, [r7, #8]
 81014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81014a6:	4b0a      	ldr	r3, [pc, #40]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014ac:	4a08      	ldr	r2, [pc, #32]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81014b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014b6:	4b06      	ldr	r3, [pc, #24]	; (81014d0 <MX_GPIO_Init+0x15c>)
 81014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81014c0:	607b      	str	r3, [r7, #4]
 81014c2:	687b      	ldr	r3, [r7, #4]

}
 81014c4:	bf00      	nop
 81014c6:	3734      	adds	r7, #52	; 0x34
 81014c8:	46bd      	mov	sp, r7
 81014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ce:	4770      	bx	lr
 81014d0:	58024400 	.word	0x58024400

081014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014d4:	b480      	push	{r7}
 81014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81014d8:	b672      	cpsid	i
}
 81014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81014dc:	e7fe      	b.n	81014dc <Error_Handler+0x8>
	...

081014e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014e0:	b480      	push	{r7}
 81014e2:	b083      	sub	sp, #12
 81014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014e6:	4b0a      	ldr	r3, [pc, #40]	; (8101510 <HAL_MspInit+0x30>)
 81014e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014ec:	4a08      	ldr	r2, [pc, #32]	; (8101510 <HAL_MspInit+0x30>)
 81014ee:	f043 0302 	orr.w	r3, r3, #2
 81014f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014f6:	4b06      	ldr	r3, [pc, #24]	; (8101510 <HAL_MspInit+0x30>)
 81014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014fc:	f003 0302 	and.w	r3, r3, #2
 8101500:	607b      	str	r3, [r7, #4]
 8101502:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101504:	bf00      	nop
 8101506:	370c      	adds	r7, #12
 8101508:	46bd      	mov	sp, r7
 810150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810150e:	4770      	bx	lr
 8101510:	58024400 	.word	0x58024400

08101514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101514:	b580      	push	{r7, lr}
 8101516:	b08c      	sub	sp, #48	; 0x30
 8101518:	af00      	add	r7, sp, #0
 810151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810151c:	f107 031c 	add.w	r3, r7, #28
 8101520:	2200      	movs	r2, #0
 8101522:	601a      	str	r2, [r3, #0]
 8101524:	605a      	str	r2, [r3, #4]
 8101526:	609a      	str	r2, [r3, #8]
 8101528:	60da      	str	r2, [r3, #12]
 810152a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	4a3e      	ldr	r2, [pc, #248]	; (810162c <HAL_ADC_MspInit+0x118>)
 8101532:	4293      	cmp	r3, r2
 8101534:	d12a      	bne.n	810158c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101536:	4b3e      	ldr	r3, [pc, #248]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 8101538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810153c:	4a3c      	ldr	r2, [pc, #240]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 810153e:	f043 0320 	orr.w	r3, r3, #32
 8101542:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101546:	4b3a      	ldr	r3, [pc, #232]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 8101548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810154c:	f003 0320 	and.w	r3, r3, #32
 8101550:	61bb      	str	r3, [r7, #24]
 8101552:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101554:	4b36      	ldr	r3, [pc, #216]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 8101556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810155a:	4a35      	ldr	r2, [pc, #212]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 810155c:	f043 0301 	orr.w	r3, r3, #1
 8101560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101564:	4b32      	ldr	r3, [pc, #200]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 8101566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810156a:	f003 0301 	and.w	r3, r3, #1
 810156e:	617b      	str	r3, [r7, #20]
 8101570:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101572:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8101576:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 810157a:	f001 fb35 	bl	8102be8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810157e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8101582:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8101586:	f001 fb2f 	bl	8102be8 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 810158a:	e04a      	b.n	8101622 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 810158c:	687b      	ldr	r3, [r7, #4]
 810158e:	681b      	ldr	r3, [r3, #0]
 8101590:	4a28      	ldr	r2, [pc, #160]	; (8101634 <HAL_ADC_MspInit+0x120>)
 8101592:	4293      	cmp	r3, r2
 8101594:	d145      	bne.n	8101622 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101596:	4b26      	ldr	r3, [pc, #152]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 8101598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810159c:	4a24      	ldr	r2, [pc, #144]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 810159e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015a6:	4b22      	ldr	r3, [pc, #136]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81015b0:	613b      	str	r3, [r7, #16]
 81015b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81015b4:	4b1e      	ldr	r3, [pc, #120]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ba:	4a1d      	ldr	r2, [pc, #116]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015bc:	f043 0320 	orr.w	r3, r3, #32
 81015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015c4:	4b1a      	ldr	r3, [pc, #104]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ca:	f003 0320 	and.w	r3, r3, #32
 81015ce:	60fb      	str	r3, [r7, #12]
 81015d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81015d2:	4b17      	ldr	r3, [pc, #92]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015d8:	4a15      	ldr	r2, [pc, #84]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015da:	f043 0304 	orr.w	r3, r3, #4
 81015de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015e2:	4b13      	ldr	r3, [pc, #76]	; (8101630 <HAL_ADC_MspInit+0x11c>)
 81015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015e8:	f003 0304 	and.w	r3, r3, #4
 81015ec:	60bb      	str	r3, [r7, #8]
 81015ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81015f6:	2303      	movs	r3, #3
 81015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015fa:	2300      	movs	r3, #0
 81015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81015fe:	f107 031c 	add.w	r3, r7, #28
 8101602:	4619      	mov	r1, r3
 8101604:	480c      	ldr	r0, [pc, #48]	; (8101638 <HAL_ADC_MspInit+0x124>)
 8101606:	f003 fb3f 	bl	8104c88 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810160a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 810160e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8101612:	f001 fae9 	bl	8102be8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8101616:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 810161a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 810161e:	f001 fae3 	bl	8102be8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8101622:	bf00      	nop
 8101624:	3730      	adds	r7, #48	; 0x30
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}
 810162a:	bf00      	nop
 810162c:	40022000 	.word	0x40022000
 8101630:	58024400 	.word	0x58024400
 8101634:	58026000 	.word	0x58026000
 8101638:	58021400 	.word	0x58021400

0810163c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 810163c:	b580      	push	{r7, lr}
 810163e:	b0bc      	sub	sp, #240	; 0xf0
 8101640:	af00      	add	r7, sp, #0
 8101642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101644:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101648:	2200      	movs	r2, #0
 810164a:	601a      	str	r2, [r3, #0]
 810164c:	605a      	str	r2, [r3, #4]
 810164e:	609a      	str	r2, [r3, #8]
 8101650:	60da      	str	r2, [r3, #12]
 8101652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101654:	f107 031c 	add.w	r3, r7, #28
 8101658:	22c0      	movs	r2, #192	; 0xc0
 810165a:	2100      	movs	r1, #0
 810165c:	4618      	mov	r0, r3
 810165e:	f00b fb09 	bl	810cc74 <memset>
  if(DFSDM1_Init == 0)
 8101662:	4b4d      	ldr	r3, [pc, #308]	; (8101798 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8101664:	681b      	ldr	r3, [r3, #0]
 8101666:	2b00      	cmp	r3, #0
 8101668:	f040 8091 	bne.w	810178e <HAL_DFSDM_ChannelMspInit+0x152>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 810166c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8101670:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8101672:	2300      	movs	r3, #0
 8101674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101678:	f107 031c 	add.w	r3, r7, #28
 810167c:	4618      	mov	r0, r3
 810167e:	f004 f937 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101682:	4603      	mov	r3, r0
 8101684:	2b00      	cmp	r3, #0
 8101686:	d001      	beq.n	810168c <HAL_DFSDM_ChannelMspInit+0x50>
    {
      Error_Handler();
 8101688:	f7ff ff24 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 810168c:	4b43      	ldr	r3, [pc, #268]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 810168e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101692:	4a42      	ldr	r2, [pc, #264]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 8101694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8101698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810169c:	4b3f      	ldr	r3, [pc, #252]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 810169e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81016a6:	61bb      	str	r3, [r7, #24]
 81016a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81016aa:	4b3c      	ldr	r3, [pc, #240]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016b0:	4a3a      	ldr	r2, [pc, #232]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016b2:	f043 0308 	orr.w	r3, r3, #8
 81016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016ba:	4b38      	ldr	r3, [pc, #224]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016c0:	f003 0308 	and.w	r3, r3, #8
 81016c4:	617b      	str	r3, [r7, #20]
 81016c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016c8:	4b34      	ldr	r3, [pc, #208]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ce:	4a33      	ldr	r2, [pc, #204]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016d0:	f043 0302 	orr.w	r3, r3, #2
 81016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016d8:	4b30      	ldr	r3, [pc, #192]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016de:	f003 0302 	and.w	r3, r3, #2
 81016e2:	613b      	str	r3, [r7, #16]
 81016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81016e6:	4b2d      	ldr	r3, [pc, #180]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ec:	4a2b      	ldr	r2, [pc, #172]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016ee:	f043 0304 	orr.w	r3, r3, #4
 81016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016f6:	4b29      	ldr	r3, [pc, #164]	; (810179c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016fc:	f003 0304 	and.w	r3, r3, #4
 8101700:	60fb      	str	r3, [r7, #12]
 8101702:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DFSDM1_CKOUT
    PB9     ------> DFSDM1_DATIN7
    PB8     ------> DFSDM1_CKIN7
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = PMOD_18_DFSDM_CKOUT_Pin;
 8101704:	2308      	movs	r3, #8
 8101706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810170a:	2302      	movs	r3, #2
 810170c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101710:	2300      	movs	r3, #0
 8101712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101716:	2300      	movs	r3, #0
 8101718:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 810171c:	2303      	movs	r3, #3
 810171e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(PMOD_18_DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8101722:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101726:	4619      	mov	r1, r3
 8101728:	481d      	ldr	r0, [pc, #116]	; (81017a0 <HAL_DFSDM_ChannelMspInit+0x164>)
 810172a:	f003 faad 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_19_DFSDM_DATA7_Pin|PMOD_20_DFSDM_CK7_Pin;
 810172e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101736:	2302      	movs	r3, #2
 8101738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810173c:	2300      	movs	r3, #0
 810173e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101742:	2300      	movs	r3, #0
 8101744:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8101748:	2303      	movs	r3, #3
 810174a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810174e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101752:	4619      	mov	r1, r3
 8101754:	4813      	ldr	r0, [pc, #76]	; (81017a4 <HAL_DFSDM_ChannelMspInit+0x168>)
 8101756:	f003 fa97 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_17_DFSDM_DATA3_Pin;
 810175a:	2380      	movs	r3, #128	; 0x80
 810175c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101760:	2302      	movs	r3, #2
 8101762:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101766:	2300      	movs	r3, #0
 8101768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810176c:	2300      	movs	r3, #0
 810176e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8101772:	2304      	movs	r3, #4
 8101774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(PMOD_17_DFSDM_DATA3_GPIO_Port, &GPIO_InitStruct);
 8101778:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810177c:	4619      	mov	r1, r3
 810177e:	480a      	ldr	r0, [pc, #40]	; (81017a8 <HAL_DFSDM_ChannelMspInit+0x16c>)
 8101780:	f003 fa82 	bl	8104c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8101784:	4b04      	ldr	r3, [pc, #16]	; (8101798 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	3301      	adds	r3, #1
 810178a:	4a03      	ldr	r2, [pc, #12]	; (8101798 <HAL_DFSDM_ChannelMspInit+0x15c>)
 810178c:	6013      	str	r3, [r2, #0]
  }

}
 810178e:	bf00      	nop
 8101790:	37f0      	adds	r7, #240	; 0xf0
 8101792:	46bd      	mov	sp, r7
 8101794:	bd80      	pop	{r7, pc}
 8101796:	bf00      	nop
 8101798:	100000f4 	.word	0x100000f4
 810179c:	58024400 	.word	0x58024400
 81017a0:	58020c00 	.word	0x58020c00
 81017a4:	58020400 	.word	0x58020400
 81017a8:	58020800 	.word	0x58020800

081017ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b08e      	sub	sp, #56	; 0x38
 81017b0:	af00      	add	r7, sp, #0
 81017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81017b8:	2200      	movs	r2, #0
 81017ba:	601a      	str	r2, [r3, #0]
 81017bc:	605a      	str	r2, [r3, #4]
 81017be:	609a      	str	r2, [r3, #8]
 81017c0:	60da      	str	r2, [r3, #12]
 81017c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 81017c4:	687b      	ldr	r3, [r7, #4]
 81017c6:	681b      	ldr	r3, [r3, #0]
 81017c8:	4a49      	ldr	r2, [pc, #292]	; (81018f0 <HAL_ETH_MspInit+0x144>)
 81017ca:	4293      	cmp	r3, r2
 81017cc:	f040 808b 	bne.w	81018e6 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81017d0:	4b48      	ldr	r3, [pc, #288]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 81017d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017d6:	4a47      	ldr	r2, [pc, #284]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 81017d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81017dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81017e0:	4b44      	ldr	r3, [pc, #272]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 81017e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81017ea:	623b      	str	r3, [r7, #32]
 81017ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81017ee:	4b41      	ldr	r3, [pc, #260]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 81017f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017f4:	4a3f      	ldr	r2, [pc, #252]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 81017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81017fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81017fe:	4b3d      	ldr	r3, [pc, #244]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 8101800:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101808:	61fb      	str	r3, [r7, #28]
 810180a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 810180c:	4b39      	ldr	r3, [pc, #228]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810180e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101812:	4a38      	ldr	r2, [pc, #224]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 8101814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101818:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810181c:	4b35      	ldr	r3, [pc, #212]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810181e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101826:	61bb      	str	r3, [r7, #24]
 8101828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810182a:	4b32      	ldr	r3, [pc, #200]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101830:	4a30      	ldr	r2, [pc, #192]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 8101832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810183a:	4b2e      	ldr	r3, [pc, #184]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101844:	617b      	str	r3, [r7, #20]
 8101846:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101848:	4b2a      	ldr	r3, [pc, #168]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810184e:	4a29      	ldr	r2, [pc, #164]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 8101850:	f043 0304 	orr.w	r3, r3, #4
 8101854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101858:	4b26      	ldr	r3, [pc, #152]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810185e:	f003 0304 	and.w	r3, r3, #4
 8101862:	613b      	str	r3, [r7, #16]
 8101864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101866:	4b23      	ldr	r3, [pc, #140]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 8101868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810186c:	4a21      	ldr	r2, [pc, #132]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 810186e:	f043 0301 	orr.w	r3, r3, #1
 8101872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101876:	4b1f      	ldr	r3, [pc, #124]	; (81018f4 <HAL_ETH_MspInit+0x148>)
 8101878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810187c:	f003 0301 	and.w	r3, r3, #1
 8101880:	60fb      	str	r3, [r7, #12]
 8101882:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 8101884:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8101888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810188a:	2302      	movs	r3, #2
 810188c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810188e:	2300      	movs	r3, #0
 8101890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101892:	2300      	movs	r3, #0
 8101894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101896:	230b      	movs	r3, #11
 8101898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810189e:	4619      	mov	r1, r3
 81018a0:	4815      	ldr	r0, [pc, #84]	; (81018f8 <HAL_ETH_MspInit+0x14c>)
 81018a2:	f003 f9f1 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 81018a6:	2332      	movs	r3, #50	; 0x32
 81018a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018aa:	2302      	movs	r3, #2
 81018ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018ae:	2300      	movs	r3, #0
 81018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018b2:	2300      	movs	r3, #0
 81018b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81018b6:	230b      	movs	r3, #11
 81018b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81018be:	4619      	mov	r1, r3
 81018c0:	480e      	ldr	r0, [pc, #56]	; (81018fc <HAL_ETH_MspInit+0x150>)
 81018c2:	f003 f9e1 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 81018c6:	2386      	movs	r3, #134	; 0x86
 81018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018ca:	2302      	movs	r3, #2
 81018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018ce:	2300      	movs	r3, #0
 81018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018d2:	2300      	movs	r3, #0
 81018d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81018d6:	230b      	movs	r3, #11
 81018d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81018de:	4619      	mov	r1, r3
 81018e0:	4807      	ldr	r0, [pc, #28]	; (8101900 <HAL_ETH_MspInit+0x154>)
 81018e2:	f003 f9d1 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 81018e6:	bf00      	nop
 81018e8:	3738      	adds	r7, #56	; 0x38
 81018ea:	46bd      	mov	sp, r7
 81018ec:	bd80      	pop	{r7, pc}
 81018ee:	bf00      	nop
 81018f0:	40028000 	.word	0x40028000
 81018f4:	58024400 	.word	0x58024400
 81018f8:	58021800 	.word	0x58021800
 81018fc:	58020800 	.word	0x58020800
 8101900:	58020000 	.word	0x58020000

08101904 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101904:	b580      	push	{r7, lr}
 8101906:	b0ba      	sub	sp, #232	; 0xe8
 8101908:	af00      	add	r7, sp, #0
 810190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810190c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101910:	2200      	movs	r2, #0
 8101912:	601a      	str	r2, [r3, #0]
 8101914:	605a      	str	r2, [r3, #4]
 8101916:	609a      	str	r2, [r3, #8]
 8101918:	60da      	str	r2, [r3, #12]
 810191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810191c:	f107 0314 	add.w	r3, r7, #20
 8101920:	22c0      	movs	r2, #192	; 0xc0
 8101922:	2100      	movs	r1, #0
 8101924:	4618      	mov	r0, r3
 8101926:	f00b f9a5 	bl	810cc74 <memset>
  if(hcec->Instance==CEC)
 810192a:	687b      	ldr	r3, [r7, #4]
 810192c:	681b      	ldr	r3, [r3, #0]
 810192e:	4a29      	ldr	r2, [pc, #164]	; (81019d4 <HAL_CEC_MspInit+0xd0>)
 8101930:	4293      	cmp	r3, r2
 8101932:	d14b      	bne.n	81019cc <HAL_CEC_MspInit+0xc8>
  /* USER CODE BEGIN CEC_MspInit 0 */

  /* USER CODE END CEC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101934:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8101938:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 810193a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810193e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101942:	f107 0314 	add.w	r3, r7, #20
 8101946:	4618      	mov	r0, r3
 8101948:	f003 ffd2 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d001      	beq.n	8101956 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 8101952:	f7ff fdbf 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8101956:	4b20      	ldr	r3, [pc, #128]	; (81019d8 <HAL_CEC_MspInit+0xd4>)
 8101958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810195c:	4a1e      	ldr	r2, [pc, #120]	; (81019d8 <HAL_CEC_MspInit+0xd4>)
 810195e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8101962:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101966:	4b1c      	ldr	r3, [pc, #112]	; (81019d8 <HAL_CEC_MspInit+0xd4>)
 8101968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810196c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101970:	613b      	str	r3, [r7, #16]
 8101972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101974:	4b18      	ldr	r3, [pc, #96]	; (81019d8 <HAL_CEC_MspInit+0xd4>)
 8101976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810197a:	4a17      	ldr	r2, [pc, #92]	; (81019d8 <HAL_CEC_MspInit+0xd4>)
 810197c:	f043 0302 	orr.w	r3, r3, #2
 8101980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101984:	4b14      	ldr	r3, [pc, #80]	; (81019d8 <HAL_CEC_MspInit+0xd4>)
 8101986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810198a:	f003 0302 	and.w	r3, r3, #2
 810198e:	60fb      	str	r3, [r7, #12]
 8101990:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101992:	2340      	movs	r3, #64	; 0x40
 8101994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101998:	2312      	movs	r3, #18
 810199a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810199e:	2300      	movs	r3, #0
 81019a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019a4:	2300      	movs	r3, #0
 81019a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81019aa:	2305      	movs	r3, #5
 81019ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 81019b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81019b4:	4619      	mov	r1, r3
 81019b6:	4809      	ldr	r0, [pc, #36]	; (81019dc <HAL_CEC_MspInit+0xd8>)
 81019b8:	f003 f966 	bl	8104c88 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 81019bc:	2200      	movs	r2, #0
 81019be:	2100      	movs	r1, #0
 81019c0:	205e      	movs	r0, #94	; 0x5e
 81019c2:	f002 fbee 	bl	81041a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81019c6:	205e      	movs	r0, #94	; 0x5e
 81019c8:	f002 fc05 	bl	81041d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 81019cc:	bf00      	nop
 81019ce:	37e8      	adds	r7, #232	; 0xe8
 81019d0:	46bd      	mov	sp, r7
 81019d2:	bd80      	pop	{r7, pc}
 81019d4:	40006c00 	.word	0x40006c00
 81019d8:	58024400 	.word	0x58024400
 81019dc:	58020400 	.word	0x58020400

081019e0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 81019e0:	b580      	push	{r7, lr}
 81019e2:	b0be      	sub	sp, #248	; 0xf8
 81019e4:	af00      	add	r7, sp, #0
 81019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81019ec:	2200      	movs	r2, #0
 81019ee:	601a      	str	r2, [r3, #0]
 81019f0:	605a      	str	r2, [r3, #4]
 81019f2:	609a      	str	r2, [r3, #8]
 81019f4:	60da      	str	r2, [r3, #12]
 81019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81019fc:	22c0      	movs	r2, #192	; 0xc0
 81019fe:	2100      	movs	r1, #0
 8101a00:	4618      	mov	r0, r3
 8101a02:	f00b f937 	bl	810cc74 <memset>
  if(hqspi->Instance==QUADSPI)
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	681b      	ldr	r3, [r3, #0]
 8101a0a:	4a83      	ldr	r2, [pc, #524]	; (8101c18 <HAL_QSPI_MspInit+0x238>)
 8101a0c:	4293      	cmp	r3, r2
 8101a0e:	f040 80ff 	bne.w	8101c10 <HAL_QSPI_MspInit+0x230>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8101a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101a16:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8101a18:	2300      	movs	r3, #0
 8101a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101a20:	4618      	mov	r0, r3
 8101a22:	f003 ff65 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101a26:	4603      	mov	r3, r0
 8101a28:	2b00      	cmp	r3, #0
 8101a2a:	d001      	beq.n	8101a30 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8101a2c:	f7ff fd52 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101a30:	4b7a      	ldr	r3, [pc, #488]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101a36:	4a79      	ldr	r2, [pc, #484]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101a3c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101a40:	4b76      	ldr	r3, [pc, #472]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101a4a:	623b      	str	r3, [r7, #32]
 8101a4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8101a4e:	4b73      	ldr	r3, [pc, #460]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a54:	4a71      	ldr	r2, [pc, #452]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a5e:	4b6f      	ldr	r3, [pc, #444]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101a68:	61fb      	str	r3, [r7, #28]
 8101a6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101a6c:	4b6b      	ldr	r3, [pc, #428]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a72:	4a6a      	ldr	r2, [pc, #424]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a74:	f043 0320 	orr.w	r3, r3, #32
 8101a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a7c:	4b67      	ldr	r3, [pc, #412]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a82:	f003 0320 	and.w	r3, r3, #32
 8101a86:	61bb      	str	r3, [r7, #24]
 8101a88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101a8a:	4b64      	ldr	r3, [pc, #400]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a90:	4a62      	ldr	r2, [pc, #392]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a9a:	4b60      	ldr	r3, [pc, #384]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101aa4:	617b      	str	r3, [r7, #20]
 8101aa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101aa8:	4b5c      	ldr	r3, [pc, #368]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aae:	4a5b      	ldr	r2, [pc, #364]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101ab0:	f043 0302 	orr.w	r3, r3, #2
 8101ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ab8:	4b58      	ldr	r3, [pc, #352]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101abe:	f003 0302 	and.w	r3, r3, #2
 8101ac2:	613b      	str	r3, [r7, #16]
 8101ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ac6:	4b55      	ldr	r3, [pc, #340]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101acc:	4a53      	ldr	r2, [pc, #332]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101ace:	f043 0308 	orr.w	r3, r3, #8
 8101ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ad6:	4b51      	ldr	r3, [pc, #324]	; (8101c1c <HAL_QSPI_MspInit+0x23c>)
 8101ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101adc:	f003 0308 	and.w	r3, r3, #8
 8101ae0:	60fb      	str	r3, [r7, #12]
 8101ae2:	68fb      	ldr	r3, [r7, #12]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8101ae4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8101ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101aec:	2302      	movs	r3, #2
 8101aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101af2:	2300      	movs	r3, #0
 8101af4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101af8:	2300      	movs	r3, #0
 8101afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101afe:	2309      	movs	r3, #9
 8101b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101b04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101b08:	4619      	mov	r1, r3
 8101b0a:	4845      	ldr	r0, [pc, #276]	; (8101c20 <HAL_QSPI_MspInit+0x240>)
 8101b0c:	f003 f8bc 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8101b10:	2340      	movs	r3, #64	; 0x40
 8101b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b16:	2302      	movs	r3, #2
 8101b18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b1c:	2300      	movs	r3, #0
 8101b1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b22:	2300      	movs	r3, #0
 8101b24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101b28:	230a      	movs	r3, #10
 8101b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8101b2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101b32:	4619      	mov	r1, r3
 8101b34:	483a      	ldr	r0, [pc, #232]	; (8101c20 <HAL_QSPI_MspInit+0x240>)
 8101b36:	f003 f8a7 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8101b3a:	23c0      	movs	r3, #192	; 0xc0
 8101b3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b40:	2302      	movs	r3, #2
 8101b42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b46:	2300      	movs	r3, #0
 8101b48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b4c:	2300      	movs	r3, #0
 8101b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101b52:	2309      	movs	r3, #9
 8101b54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101b58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101b5c:	4619      	mov	r1, r3
 8101b5e:	4831      	ldr	r0, [pc, #196]	; (8101c24 <HAL_QSPI_MspInit+0x244>)
 8101b60:	f003 f892 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8101b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101b68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6c:	2302      	movs	r3, #2
 8101b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b72:	2300      	movs	r3, #0
 8101b74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b78:	2300      	movs	r3, #0
 8101b7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101b7e:	230a      	movs	r3, #10
 8101b80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8101b84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101b88:	4619      	mov	r1, r3
 8101b8a:	4826      	ldr	r0, [pc, #152]	; (8101c24 <HAL_QSPI_MspInit+0x244>)
 8101b8c:	f003 f87c 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8101b90:	230c      	movs	r3, #12
 8101b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b96:	2302      	movs	r3, #2
 8101b98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b9c:	2300      	movs	r3, #0
 8101b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ba2:	2300      	movs	r3, #0
 8101ba4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101ba8:	2309      	movs	r3, #9
 8101baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101bae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101bb2:	4619      	mov	r1, r3
 8101bb4:	481c      	ldr	r0, [pc, #112]	; (8101c28 <HAL_QSPI_MspInit+0x248>)
 8101bb6:	f003 f867 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101bba:	2304      	movs	r3, #4
 8101bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bc0:	2302      	movs	r3, #2
 8101bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc6:	2300      	movs	r3, #0
 8101bc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bcc:	2300      	movs	r3, #0
 8101bce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101bd2:	2309      	movs	r3, #9
 8101bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101bd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101bdc:	4619      	mov	r1, r3
 8101bde:	4813      	ldr	r0, [pc, #76]	; (8101c2c <HAL_QSPI_MspInit+0x24c>)
 8101be0:	f003 f852 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101be8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bec:	2302      	movs	r3, #2
 8101bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bf2:	2300      	movs	r3, #0
 8101bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bf8:	2300      	movs	r3, #0
 8101bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101bfe:	2309      	movs	r3, #9
 8101c00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8101c04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101c08:	4619      	mov	r1, r3
 8101c0a:	4809      	ldr	r0, [pc, #36]	; (8101c30 <HAL_QSPI_MspInit+0x250>)
 8101c0c:	f003 f83c 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8101c10:	bf00      	nop
 8101c12:	37f8      	adds	r7, #248	; 0xf8
 8101c14:	46bd      	mov	sp, r7
 8101c16:	bd80      	pop	{r7, pc}
 8101c18:	52005000 	.word	0x52005000
 8101c1c:	58024400 	.word	0x58024400
 8101c20:	58021800 	.word	0x58021800
 8101c24:	58021400 	.word	0x58021400
 8101c28:	58021c00 	.word	0x58021c00
 8101c2c:	58020400 	.word	0x58020400
 8101c30:	58020c00 	.word	0x58020c00

08101c34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101c34:	b580      	push	{r7, lr}
 8101c36:	b0b2      	sub	sp, #200	; 0xc8
 8101c38:	af00      	add	r7, sp, #0
 8101c3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c3c:	f107 0308 	add.w	r3, r7, #8
 8101c40:	22c0      	movs	r2, #192	; 0xc0
 8101c42:	2100      	movs	r1, #0
 8101c44:	4618      	mov	r0, r3
 8101c46:	f00b f815 	bl	810cc74 <memset>
  if(hrtc->Instance==RTC)
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	4a0f      	ldr	r2, [pc, #60]	; (8101c8c <HAL_RTC_MspInit+0x58>)
 8101c50:	4293      	cmp	r3, r2
 8101c52:	d116      	bne.n	8101c82 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8101c58:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c62:	f107 0308 	add.w	r3, r7, #8
 8101c66:	4618      	mov	r0, r3
 8101c68:	f003 fe42 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101c6c:	4603      	mov	r3, r0
 8101c6e:	2b00      	cmp	r3, #0
 8101c70:	d001      	beq.n	8101c76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8101c72:	f7ff fc2f 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101c76:	4b06      	ldr	r3, [pc, #24]	; (8101c90 <HAL_RTC_MspInit+0x5c>)
 8101c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101c7a:	4a05      	ldr	r2, [pc, #20]	; (8101c90 <HAL_RTC_MspInit+0x5c>)
 8101c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101c80:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8101c82:	bf00      	nop
 8101c84:	37c8      	adds	r7, #200	; 0xc8
 8101c86:	46bd      	mov	sp, r7
 8101c88:	bd80      	pop	{r7, pc}
 8101c8a:	bf00      	nop
 8101c8c:	58004000 	.word	0x58004000
 8101c90:	58024400 	.word	0x58024400

08101c94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8101c94:	b580      	push	{r7, lr}
 8101c96:	b0ba      	sub	sp, #232	; 0xe8
 8101c98:	af00      	add	r7, sp, #0
 8101c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101ca0:	2200      	movs	r2, #0
 8101ca2:	601a      	str	r2, [r3, #0]
 8101ca4:	605a      	str	r2, [r3, #4]
 8101ca6:	609a      	str	r2, [r3, #8]
 8101ca8:	60da      	str	r2, [r3, #12]
 8101caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cac:	f107 0314 	add.w	r3, r7, #20
 8101cb0:	22c0      	movs	r2, #192	; 0xc0
 8101cb2:	2100      	movs	r1, #0
 8101cb4:	4618      	mov	r0, r3
 8101cb6:	f00a ffdd 	bl	810cc74 <memset>
  if(hsd->Instance==SDMMC1)
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	681b      	ldr	r3, [r3, #0]
 8101cbe:	4a37      	ldr	r2, [pc, #220]	; (8101d9c <HAL_SD_MspInit+0x108>)
 8101cc0:	4293      	cmp	r3, r2
 8101cc2:	d166      	bne.n	8101d92 <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8101cc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101cca:	2300      	movs	r3, #0
 8101ccc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cce:	f107 0314 	add.w	r3, r7, #20
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	f003 fe0c 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101cd8:	4603      	mov	r3, r0
 8101cda:	2b00      	cmp	r3, #0
 8101cdc:	d001      	beq.n	8101ce2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8101cde:	f7ff fbf9 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101ce2:	4b2f      	ldr	r3, [pc, #188]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101ce8:	4a2d      	ldr	r2, [pc, #180]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101cee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101cf2:	4b2b      	ldr	r3, [pc, #172]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101cf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101cfc:	613b      	str	r3, [r7, #16]
 8101cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101d00:	4b27      	ldr	r3, [pc, #156]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d06:	4a26      	ldr	r2, [pc, #152]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101d08:	f043 0304 	orr.w	r3, r3, #4
 8101d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d10:	4b23      	ldr	r3, [pc, #140]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d16:	f003 0304 	and.w	r3, r3, #4
 8101d1a:	60fb      	str	r3, [r7, #12]
 8101d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d1e:	4b20      	ldr	r3, [pc, #128]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d24:	4a1e      	ldr	r2, [pc, #120]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101d26:	f043 0308 	orr.w	r3, r3, #8
 8101d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d2e:	4b1c      	ldr	r3, [pc, #112]	; (8101da0 <HAL_SD_MspInit+0x10c>)
 8101d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d34:	f003 0308 	and.w	r3, r3, #8
 8101d38:	60bb      	str	r3, [r7, #8]
 8101d3a:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101d3c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d44:	2302      	movs	r3, #2
 8101d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d4a:	2300      	movs	r3, #0
 8101d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101d50:	2303      	movs	r3, #3
 8101d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101d56:	230c      	movs	r3, #12
 8101d58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101d5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d60:	4619      	mov	r1, r3
 8101d62:	4810      	ldr	r0, [pc, #64]	; (8101da4 <HAL_SD_MspInit+0x110>)
 8101d64:	f002 ff90 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101d68:	2304      	movs	r3, #4
 8101d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d6e:	2302      	movs	r3, #2
 8101d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d74:	2300      	movs	r3, #0
 8101d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101d7a:	2303      	movs	r3, #3
 8101d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101d80:	230c      	movs	r3, #12
 8101d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101d86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d8a:	4619      	mov	r1, r3
 8101d8c:	4806      	ldr	r0, [pc, #24]	; (8101da8 <HAL_SD_MspInit+0x114>)
 8101d8e:	f002 ff7b 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8101d92:	bf00      	nop
 8101d94:	37e8      	adds	r7, #232	; 0xe8
 8101d96:	46bd      	mov	sp, r7
 8101d98:	bd80      	pop	{r7, pc}
 8101d9a:	bf00      	nop
 8101d9c:	52007000 	.word	0x52007000
 8101da0:	58024400 	.word	0x58024400
 8101da4:	58020800 	.word	0x58020800
 8101da8:	58020c00 	.word	0x58020c00

08101dac <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101dac:	b580      	push	{r7, lr}
 8101dae:	b0ba      	sub	sp, #232	; 0xe8
 8101db0:	af00      	add	r7, sp, #0
 8101db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101db8:	2200      	movs	r2, #0
 8101dba:	601a      	str	r2, [r3, #0]
 8101dbc:	605a      	str	r2, [r3, #4]
 8101dbe:	609a      	str	r2, [r3, #8]
 8101dc0:	60da      	str	r2, [r3, #12]
 8101dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101dc4:	f107 0314 	add.w	r3, r7, #20
 8101dc8:	22c0      	movs	r2, #192	; 0xc0
 8101dca:	2100      	movs	r1, #0
 8101dcc:	4618      	mov	r0, r3
 8101dce:	f00a ff51 	bl	810cc74 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8101dda:	d141      	bne.n	8101e60 <HAL_SPDIFRX_MspInit+0xb4>
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8101de0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101de2:	2300      	movs	r3, #0
 8101de4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101de6:	f107 0314 	add.w	r3, r7, #20
 8101dea:	4618      	mov	r0, r3
 8101dec:	f003 fd80 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101df0:	4603      	mov	r3, r0
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d001      	beq.n	8101dfa <HAL_SPDIFRX_MspInit+0x4e>
    {
      Error_Handler();
 8101df6:	f7ff fb6d 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101dfa:	4b1b      	ldr	r3, [pc, #108]	; (8101e68 <HAL_SPDIFRX_MspInit+0xbc>)
 8101dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e00:	4a19      	ldr	r2, [pc, #100]	; (8101e68 <HAL_SPDIFRX_MspInit+0xbc>)
 8101e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e0a:	4b17      	ldr	r3, [pc, #92]	; (8101e68 <HAL_SPDIFRX_MspInit+0xbc>)
 8101e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101e14:	613b      	str	r3, [r7, #16]
 8101e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101e18:	4b13      	ldr	r3, [pc, #76]	; (8101e68 <HAL_SPDIFRX_MspInit+0xbc>)
 8101e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e1e:	4a12      	ldr	r2, [pc, #72]	; (8101e68 <HAL_SPDIFRX_MspInit+0xbc>)
 8101e20:	f043 0308 	orr.w	r3, r3, #8
 8101e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e28:	4b0f      	ldr	r3, [pc, #60]	; (8101e68 <HAL_SPDIFRX_MspInit+0xbc>)
 8101e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e2e:	f003 0308 	and.w	r3, r3, #8
 8101e32:	60fb      	str	r3, [r7, #12]
 8101e34:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101e36:	2380      	movs	r3, #128	; 0x80
 8101e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e3c:	2302      	movs	r3, #2
 8101e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e42:	2300      	movs	r3, #0
 8101e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e48:	2300      	movs	r3, #0
 8101e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101e4e:	2309      	movs	r3, #9
 8101e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101e54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101e58:	4619      	mov	r1, r3
 8101e5a:	4804      	ldr	r0, [pc, #16]	; (8101e6c <HAL_SPDIFRX_MspInit+0xc0>)
 8101e5c:	f002 ff14 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8101e60:	bf00      	nop
 8101e62:	37e8      	adds	r7, #232	; 0xe8
 8101e64:	46bd      	mov	sp, r7
 8101e66:	bd80      	pop	{r7, pc}
 8101e68:	58024400 	.word	0x58024400
 8101e6c:	58020c00 	.word	0x58020c00

08101e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101e70:	b580      	push	{r7, lr}
 8101e72:	b0be      	sub	sp, #248	; 0xf8
 8101e74:	af00      	add	r7, sp, #0
 8101e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	601a      	str	r2, [r3, #0]
 8101e80:	605a      	str	r2, [r3, #4]
 8101e82:	609a      	str	r2, [r3, #8]
 8101e84:	60da      	str	r2, [r3, #12]
 8101e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101e8c:	22c0      	movs	r2, #192	; 0xc0
 8101e8e:	2100      	movs	r1, #0
 8101e90:	4618      	mov	r0, r3
 8101e92:	f00a feef 	bl	810cc74 <memset>
  if(hspi->Instance==SPI2)
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	681b      	ldr	r3, [r3, #0]
 8101e9a:	4a6e      	ldr	r2, [pc, #440]	; (8102054 <HAL_SPI_MspInit+0x1e4>)
 8101e9c:	4293      	cmp	r3, r2
 8101e9e:	d168      	bne.n	8101f72 <HAL_SPI_MspInit+0x102>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101ea4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101ea6:	2300      	movs	r3, #0
 8101ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101eb0:	4618      	mov	r0, r3
 8101eb2:	f003 fd1d 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101eb6:	4603      	mov	r3, r0
 8101eb8:	2b00      	cmp	r3, #0
 8101eba:	d001      	beq.n	8101ec0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101ebc:	f7ff fb0a 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101ec0:	4b65      	ldr	r3, [pc, #404]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ec6:	4a64      	ldr	r2, [pc, #400]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101ecc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101ed0:	4b61      	ldr	r3, [pc, #388]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101eda:	623b      	str	r3, [r7, #32]
 8101edc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ede:	4b5e      	ldr	r3, [pc, #376]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ee4:	4a5c      	ldr	r2, [pc, #368]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101ee6:	f043 0301 	orr.w	r3, r3, #1
 8101eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101eee:	4b5a      	ldr	r3, [pc, #360]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ef4:	f003 0301 	and.w	r3, r3, #1
 8101ef8:	61fb      	str	r3, [r7, #28]
 8101efa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101efc:	4b56      	ldr	r3, [pc, #344]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f02:	4a55      	ldr	r2, [pc, #340]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101f04:	f043 0304 	orr.w	r3, r3, #4
 8101f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f0c:	4b52      	ldr	r3, [pc, #328]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f12:	f003 0304 	and.w	r3, r3, #4
 8101f16:	61bb      	str	r3, [r7, #24]
 8101f18:	69bb      	ldr	r3, [r7, #24]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 8101f1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8101f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f22:	2302      	movs	r3, #2
 8101f24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f28:	2300      	movs	r3, #0
 8101f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f2e:	2300      	movs	r3, #0
 8101f30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101f34:	2305      	movs	r3, #5
 8101f36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101f3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101f3e:	4619      	mov	r1, r3
 8101f40:	4846      	ldr	r0, [pc, #280]	; (810205c <HAL_SPI_MspInit+0x1ec>)
 8101f42:	f002 fea1 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101f46:	230c      	movs	r3, #12
 8101f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f4c:	2302      	movs	r3, #2
 8101f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f52:	2300      	movs	r3, #0
 8101f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f58:	2300      	movs	r3, #0
 8101f5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101f5e:	2305      	movs	r3, #5
 8101f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101f64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101f68:	4619      	mov	r1, r3
 8101f6a:	483d      	ldr	r0, [pc, #244]	; (8102060 <HAL_SPI_MspInit+0x1f0>)
 8101f6c:	f002 fe8c 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101f70:	e06c      	b.n	810204c <HAL_SPI_MspInit+0x1dc>
  else if(hspi->Instance==SPI5)
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	4a3b      	ldr	r2, [pc, #236]	; (8102064 <HAL_SPI_MspInit+0x1f4>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d167      	bne.n	810204c <HAL_SPI_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101f80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101f82:	2300      	movs	r3, #0
 8101f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101f8c:	4618      	mov	r0, r3
 8101f8e:	f003 fcaf 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8101f92:	4603      	mov	r3, r0
 8101f94:	2b00      	cmp	r3, #0
 8101f96:	d001      	beq.n	8101f9c <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8101f98:	f7ff fa9c 	bl	81014d4 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101f9c:	4b2e      	ldr	r3, [pc, #184]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101fa2:	4a2d      	ldr	r2, [pc, #180]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101fac:	4b2a      	ldr	r3, [pc, #168]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101fb6:	617b      	str	r3, [r7, #20]
 8101fb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101fba:	4b27      	ldr	r3, [pc, #156]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fc0:	4a25      	ldr	r2, [pc, #148]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fca:	4b23      	ldr	r3, [pc, #140]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101fd4:	613b      	str	r3, [r7, #16]
 8101fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101fd8:	4b1f      	ldr	r3, [pc, #124]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fde:	4a1e      	ldr	r2, [pc, #120]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fe8:	4b1b      	ldr	r3, [pc, #108]	; (8102058 <HAL_SPI_MspInit+0x1e8>)
 8101fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101ff2:	60fb      	str	r3, [r7, #12]
 8101ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101ff6:	2303      	movs	r3, #3
 8101ff8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ffc:	2302      	movs	r3, #2
 8101ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102002:	2300      	movs	r3, #0
 8102004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102008:	2300      	movs	r3, #0
 810200a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 810200e:	2305      	movs	r3, #5
 8102010:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8102014:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102018:	4619      	mov	r1, r3
 810201a:	4813      	ldr	r0, [pc, #76]	; (8102068 <HAL_SPI_MspInit+0x1f8>)
 810201c:	f002 fe34 	bl	8104c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8102020:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8102024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102028:	2302      	movs	r3, #2
 810202a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810202e:	2300      	movs	r3, #0
 8102030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102034:	2300      	movs	r3, #0
 8102036:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 810203a:	2305      	movs	r3, #5
 810203c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102040:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102044:	4619      	mov	r1, r3
 8102046:	4809      	ldr	r0, [pc, #36]	; (810206c <HAL_SPI_MspInit+0x1fc>)
 8102048:	f002 fe1e 	bl	8104c88 <HAL_GPIO_Init>
}
 810204c:	bf00      	nop
 810204e:	37f8      	adds	r7, #248	; 0xf8
 8102050:	46bd      	mov	sp, r7
 8102052:	bd80      	pop	{r7, pc}
 8102054:	40003800 	.word	0x40003800
 8102058:	58024400 	.word	0x58024400
 810205c:	58020000 	.word	0x58020000
 8102060:	58020800 	.word	0x58020800
 8102064:	40015000 	.word	0x40015000
 8102068:	58022800 	.word	0x58022800
 810206c:	58022400 	.word	0x58022400

08102070 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8102070:	b480      	push	{r7}
 8102072:	b085      	sub	sp, #20
 8102074:	af00      	add	r7, sp, #0
 8102076:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	4a0b      	ldr	r2, [pc, #44]	; (81020ac <HAL_TIM_OC_MspInit+0x3c>)
 810207e:	4293      	cmp	r3, r2
 8102080:	d10e      	bne.n	81020a0 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8102082:	4b0b      	ldr	r3, [pc, #44]	; (81020b0 <HAL_TIM_OC_MspInit+0x40>)
 8102084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102088:	4a09      	ldr	r2, [pc, #36]	; (81020b0 <HAL_TIM_OC_MspInit+0x40>)
 810208a:	f043 0302 	orr.w	r3, r3, #2
 810208e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102092:	4b07      	ldr	r3, [pc, #28]	; (81020b0 <HAL_TIM_OC_MspInit+0x40>)
 8102094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102098:	f003 0302 	and.w	r3, r3, #2
 810209c:	60fb      	str	r3, [r7, #12]
 810209e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 81020a0:	bf00      	nop
 81020a2:	3714      	adds	r7, #20
 81020a4:	46bd      	mov	sp, r7
 81020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020aa:	4770      	bx	lr
 81020ac:	40010400 	.word	0x40010400
 81020b0:	58024400 	.word	0x58024400

081020b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81020b4:	b580      	push	{r7, lr}
 81020b6:	b08a      	sub	sp, #40	; 0x28
 81020b8:	af00      	add	r7, sp, #0
 81020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020bc:	f107 0314 	add.w	r3, r7, #20
 81020c0:	2200      	movs	r2, #0
 81020c2:	601a      	str	r2, [r3, #0]
 81020c4:	605a      	str	r2, [r3, #4]
 81020c6:	609a      	str	r2, [r3, #8]
 81020c8:	60da      	str	r2, [r3, #12]
 81020ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	4a1a      	ldr	r2, [pc, #104]	; (810213c <HAL_TIM_Base_MspInit+0x88>)
 81020d2:	4293      	cmp	r3, r2
 81020d4:	d12e      	bne.n	8102134 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 81020d6:	4b1a      	ldr	r3, [pc, #104]	; (8102140 <HAL_TIM_Base_MspInit+0x8c>)
 81020d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020dc:	4a18      	ldr	r2, [pc, #96]	; (8102140 <HAL_TIM_Base_MspInit+0x8c>)
 81020de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81020e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81020e6:	4b16      	ldr	r3, [pc, #88]	; (8102140 <HAL_TIM_Base_MspInit+0x8c>)
 81020e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81020f0:	613b      	str	r3, [r7, #16]
 81020f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81020f4:	4b12      	ldr	r3, [pc, #72]	; (8102140 <HAL_TIM_Base_MspInit+0x8c>)
 81020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020fa:	4a11      	ldr	r2, [pc, #68]	; (8102140 <HAL_TIM_Base_MspInit+0x8c>)
 81020fc:	f043 0320 	orr.w	r3, r3, #32
 8102100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102104:	4b0e      	ldr	r3, [pc, #56]	; (8102140 <HAL_TIM_Base_MspInit+0x8c>)
 8102106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810210a:	f003 0320 	and.w	r3, r3, #32
 810210e:	60fb      	str	r3, [r7, #12]
 8102110:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8102112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102118:	2302      	movs	r3, #2
 810211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810211c:	2300      	movs	r3, #0
 810211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102120:	2300      	movs	r3, #0
 8102122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102124:	2309      	movs	r3, #9
 8102126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8102128:	f107 0314 	add.w	r3, r7, #20
 810212c:	4619      	mov	r1, r3
 810212e:	4805      	ldr	r0, [pc, #20]	; (8102144 <HAL_TIM_Base_MspInit+0x90>)
 8102130:	f002 fdaa 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8102134:	bf00      	nop
 8102136:	3728      	adds	r7, #40	; 0x28
 8102138:	46bd      	mov	sp, r7
 810213a:	bd80      	pop	{r7, pc}
 810213c:	40001c00 	.word	0x40001c00
 8102140:	58024400 	.word	0x58024400
 8102144:	58021400 	.word	0x58021400

08102148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102148:	b580      	push	{r7, lr}
 810214a:	b088      	sub	sp, #32
 810214c:	af00      	add	r7, sp, #0
 810214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102150:	f107 030c 	add.w	r3, r7, #12
 8102154:	2200      	movs	r2, #0
 8102156:	601a      	str	r2, [r3, #0]
 8102158:	605a      	str	r2, [r3, #4]
 810215a:	609a      	str	r2, [r3, #8]
 810215c:	60da      	str	r2, [r3, #12]
 810215e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	4a12      	ldr	r2, [pc, #72]	; (81021b0 <HAL_TIM_MspPostInit+0x68>)
 8102166:	4293      	cmp	r3, r2
 8102168:	d11e      	bne.n	81021a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810216a:	4b12      	ldr	r3, [pc, #72]	; (81021b4 <HAL_TIM_MspPostInit+0x6c>)
 810216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102170:	4a10      	ldr	r2, [pc, #64]	; (81021b4 <HAL_TIM_MspPostInit+0x6c>)
 8102172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810217a:	4b0e      	ldr	r3, [pc, #56]	; (81021b4 <HAL_TIM_MspPostInit+0x6c>)
 810217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102184:	60bb      	str	r3, [r7, #8]
 8102186:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8102188:	23c0      	movs	r3, #192	; 0xc0
 810218a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810218c:	2302      	movs	r3, #2
 810218e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102190:	2300      	movs	r3, #0
 8102192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102194:	2300      	movs	r3, #0
 8102196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8102198:	2303      	movs	r3, #3
 810219a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810219c:	f107 030c 	add.w	r3, r7, #12
 81021a0:	4619      	mov	r1, r3
 81021a2:	4805      	ldr	r0, [pc, #20]	; (81021b8 <HAL_TIM_MspPostInit+0x70>)
 81021a4:	f002 fd70 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 81021a8:	bf00      	nop
 81021aa:	3720      	adds	r7, #32
 81021ac:	46bd      	mov	sp, r7
 81021ae:	bd80      	pop	{r7, pc}
 81021b0:	40010400 	.word	0x40010400
 81021b4:	58024400 	.word	0x58024400
 81021b8:	58022400 	.word	0x58022400

081021bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81021bc:	b580      	push	{r7, lr}
 81021be:	b0be      	sub	sp, #248	; 0xf8
 81021c0:	af00      	add	r7, sp, #0
 81021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81021c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81021c8:	2200      	movs	r2, #0
 81021ca:	601a      	str	r2, [r3, #0]
 81021cc:	605a      	str	r2, [r3, #4]
 81021ce:	609a      	str	r2, [r3, #8]
 81021d0:	60da      	str	r2, [r3, #12]
 81021d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81021d8:	22c0      	movs	r2, #192	; 0xc0
 81021da:	2100      	movs	r1, #0
 81021dc:	4618      	mov	r0, r3
 81021de:	f00a fd49 	bl	810cc74 <memset>
  if(huart->Instance==UART8)
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	4a7f      	ldr	r2, [pc, #508]	; (81023e4 <HAL_UART_MspInit+0x228>)
 81021e8:	4293      	cmp	r3, r2
 81021ea:	d143      	bne.n	8102274 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 81021ec:	2302      	movs	r3, #2
 81021ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81021f0:	2300      	movs	r3, #0
 81021f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81021fa:	4618      	mov	r0, r3
 81021fc:	f003 fb78 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8102200:	4603      	mov	r3, r0
 8102202:	2b00      	cmp	r3, #0
 8102204:	d001      	beq.n	810220a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102206:	f7ff f965 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 810220a:	4b77      	ldr	r3, [pc, #476]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102210:	4a75      	ldr	r2, [pc, #468]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8102216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810221a:	4b73      	ldr	r3, [pc, #460]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8102224:	623b      	str	r3, [r7, #32]
 8102226:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102228:	4b6f      	ldr	r3, [pc, #444]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810222e:	4a6e      	ldr	r2, [pc, #440]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102238:	4b6b      	ldr	r3, [pc, #428]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102242:	61fb      	str	r3, [r7, #28]
 8102244:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8102246:	f44f 7340 	mov.w	r3, #768	; 0x300
 810224a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810224e:	2302      	movs	r3, #2
 8102250:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102254:	2300      	movs	r3, #0
 8102256:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810225a:	2300      	movs	r3, #0
 810225c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8102260:	2308      	movs	r3, #8
 8102262:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102266:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810226a:	4619      	mov	r1, r3
 810226c:	485f      	ldr	r0, [pc, #380]	; (81023ec <HAL_UART_MspInit+0x230>)
 810226e:	f002 fd0b 	bl	8104c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8102272:	e0b3      	b.n	81023dc <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	4a5d      	ldr	r2, [pc, #372]	; (81023f0 <HAL_UART_MspInit+0x234>)
 810227a:	4293      	cmp	r3, r2
 810227c:	d143      	bne.n	8102306 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 810227e:	2301      	movs	r3, #1
 8102280:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8102282:	2300      	movs	r3, #0
 8102284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810228c:	4618      	mov	r0, r3
 810228e:	f003 fb2f 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8102292:	4603      	mov	r3, r0
 8102294:	2b00      	cmp	r3, #0
 8102296:	d001      	beq.n	810229c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8102298:	f7ff f91c 	bl	81014d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 810229c:	4b52      	ldr	r3, [pc, #328]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810229e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81022a2:	4a51      	ldr	r2, [pc, #324]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 81022a4:	f043 0310 	orr.w	r3, r3, #16
 81022a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81022ac:	4b4e      	ldr	r3, [pc, #312]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 81022ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81022b2:	f003 0310 	and.w	r3, r3, #16
 81022b6:	61bb      	str	r3, [r7, #24]
 81022b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81022ba:	4b4b      	ldr	r3, [pc, #300]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 81022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81022c0:	4a49      	ldr	r2, [pc, #292]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 81022c2:	f043 0301 	orr.w	r3, r3, #1
 81022c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81022ca:	4b47      	ldr	r3, [pc, #284]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 81022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81022d0:	f003 0301 	and.w	r3, r3, #1
 81022d4:	617b      	str	r3, [r7, #20]
 81022d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 81022d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 81022dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81022e0:	2302      	movs	r3, #2
 81022e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022e6:	2300      	movs	r3, #0
 81022e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81022ec:	2300      	movs	r3, #0
 81022ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 81022f2:	2307      	movs	r3, #7
 81022f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81022f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81022fc:	4619      	mov	r1, r3
 81022fe:	483d      	ldr	r0, [pc, #244]	; (81023f4 <HAL_UART_MspInit+0x238>)
 8102300:	f002 fcc2 	bl	8104c88 <HAL_GPIO_Init>
}
 8102304:	e06a      	b.n	81023dc <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	4a3b      	ldr	r2, [pc, #236]	; (81023f8 <HAL_UART_MspInit+0x23c>)
 810230c:	4293      	cmp	r3, r2
 810230e:	d165      	bne.n	81023dc <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8102310:	2302      	movs	r3, #2
 8102312:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102314:	2300      	movs	r3, #0
 8102316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810231e:	4618      	mov	r0, r3
 8102320:	f003 fae6 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8102324:	4603      	mov	r3, r0
 8102326:	2b00      	cmp	r3, #0
 8102328:	d001      	beq.n	810232e <HAL_UART_MspInit+0x172>
      Error_Handler();
 810232a:	f7ff f8d3 	bl	81014d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 810232e:	4b2e      	ldr	r3, [pc, #184]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102334:	4a2c      	ldr	r2, [pc, #176]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810233a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810233e:	4b2a      	ldr	r3, [pc, #168]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102348:	613b      	str	r3, [r7, #16]
 810234a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810234c:	4b26      	ldr	r3, [pc, #152]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102352:	4a25      	ldr	r2, [pc, #148]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102354:	f043 0308 	orr.w	r3, r3, #8
 8102358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810235c:	4b22      	ldr	r3, [pc, #136]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102362:	f003 0308 	and.w	r3, r3, #8
 8102366:	60fb      	str	r3, [r7, #12]
 8102368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810236a:	4b1f      	ldr	r3, [pc, #124]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102370:	4a1d      	ldr	r2, [pc, #116]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 8102372:	f043 0301 	orr.w	r3, r3, #1
 8102376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810237a:	4b1b      	ldr	r3, [pc, #108]	; (81023e8 <HAL_UART_MspInit+0x22c>)
 810237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102380:	f003 0301 	and.w	r3, r3, #1
 8102384:	60bb      	str	r3, [r7, #8]
 8102386:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_2__USART2_TX_Pin|PMOD_4__USART2_RTS_Pin|PMOD_3__USART2_RX_Pin;
 8102388:	2370      	movs	r3, #112	; 0x70
 810238a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810238e:	2302      	movs	r3, #2
 8102390:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102394:	2300      	movs	r3, #0
 8102396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810239a:	2300      	movs	r3, #0
 810239c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 81023a0:	2307      	movs	r3, #7
 81023a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81023a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81023aa:	4619      	mov	r1, r3
 81023ac:	4813      	ldr	r0, [pc, #76]	; (81023fc <HAL_UART_MspInit+0x240>)
 81023ae:	f002 fc6b 	bl	8104c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMOD_1__USART2_CTS_NSS_Pin;
 81023b2:	2301      	movs	r3, #1
 81023b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023b8:	2302      	movs	r3, #2
 81023ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023be:	2300      	movs	r3, #0
 81023c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81023c4:	2300      	movs	r3, #0
 81023c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 81023ca:	2307      	movs	r3, #7
 81023cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(PMOD_1__USART2_CTS_NSS_GPIO_Port, &GPIO_InitStruct);
 81023d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81023d4:	4619      	mov	r1, r3
 81023d6:	4807      	ldr	r0, [pc, #28]	; (81023f4 <HAL_UART_MspInit+0x238>)
 81023d8:	f002 fc56 	bl	8104c88 <HAL_GPIO_Init>
}
 81023dc:	bf00      	nop
 81023de:	37f8      	adds	r7, #248	; 0xf8
 81023e0:	46bd      	mov	sp, r7
 81023e2:	bd80      	pop	{r7, pc}
 81023e4:	40007c00 	.word	0x40007c00
 81023e8:	58024400 	.word	0x58024400
 81023ec:	58022400 	.word	0x58022400
 81023f0:	40011000 	.word	0x40011000
 81023f4:	58020000 	.word	0x58020000
 81023f8:	40004400 	.word	0x40004400
 81023fc:	58020c00 	.word	0x58020c00

08102400 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8102400:	b580      	push	{r7, lr}
 8102402:	b0be      	sub	sp, #248	; 0xf8
 8102404:	af00      	add	r7, sp, #0
 8102406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102408:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810240c:	2200      	movs	r2, #0
 810240e:	601a      	str	r2, [r3, #0]
 8102410:	605a      	str	r2, [r3, #4]
 8102412:	609a      	str	r2, [r3, #8]
 8102414:	60da      	str	r2, [r3, #12]
 8102416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810241c:	22c0      	movs	r2, #192	; 0xc0
 810241e:	2100      	movs	r1, #0
 8102420:	4618      	mov	r0, r3
 8102422:	f00a fc27 	bl	810cc74 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a77      	ldr	r2, [pc, #476]	; (8102608 <HAL_PCD_MspInit+0x208>)
 810242c:	4293      	cmp	r3, r2
 810242e:	f040 80e7 	bne.w	8102600 <HAL_PCD_MspInit+0x200>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8102432:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8102436:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8102438:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810243c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102444:	4618      	mov	r0, r3
 8102446:	f003 fa53 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 810244a:	4603      	mov	r3, r0
 810244c:	2b00      	cmp	r3, #0
 810244e:	d001      	beq.n	8102454 <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8102450:	f7ff f840 	bl	81014d4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8102454:	f002 ffaa 	bl	81053ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102458:	4b6c      	ldr	r3, [pc, #432]	; (810260c <HAL_PCD_MspInit+0x20c>)
 810245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810245e:	4a6b      	ldr	r2, [pc, #428]	; (810260c <HAL_PCD_MspInit+0x20c>)
 8102460:	f043 0302 	orr.w	r3, r3, #2
 8102464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102468:	4b68      	ldr	r3, [pc, #416]	; (810260c <HAL_PCD_MspInit+0x20c>)
 810246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810246e:	f003 0302 	and.w	r3, r3, #2
 8102472:	623b      	str	r3, [r7, #32]
 8102474:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8102476:	4b65      	ldr	r3, [pc, #404]	; (810260c <HAL_PCD_MspInit+0x20c>)
 8102478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810247c:	4a63      	ldr	r2, [pc, #396]	; (810260c <HAL_PCD_MspInit+0x20c>)
 810247e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102486:	4b61      	ldr	r3, [pc, #388]	; (810260c <HAL_PCD_MspInit+0x20c>)
 8102488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102490:	61fb      	str	r3, [r7, #28]
 8102492:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102494:	4b5d      	ldr	r3, [pc, #372]	; (810260c <HAL_PCD_MspInit+0x20c>)
 8102496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810249a:	4a5c      	ldr	r2, [pc, #368]	; (810260c <HAL_PCD_MspInit+0x20c>)
 810249c:	f043 0304 	orr.w	r3, r3, #4
 81024a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024a4:	4b59      	ldr	r3, [pc, #356]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024aa:	f003 0304 	and.w	r3, r3, #4
 81024ae:	61bb      	str	r3, [r7, #24]
 81024b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81024b2:	4b56      	ldr	r3, [pc, #344]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024b8:	4a54      	ldr	r2, [pc, #336]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81024be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024c2:	4b52      	ldr	r3, [pc, #328]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81024cc:	617b      	str	r3, [r7, #20]
 81024ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81024d0:	4b4e      	ldr	r3, [pc, #312]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024d6:	4a4d      	ldr	r2, [pc, #308]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024d8:	f043 0301 	orr.w	r3, r3, #1
 81024dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024e0:	4b4a      	ldr	r3, [pc, #296]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024e6:	f003 0301 	and.w	r3, r3, #1
 81024ea:	613b      	str	r3, [r7, #16]
 81024ec:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81024ee:	f643 4323 	movw	r3, #15395	; 0x3c23
 81024f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81024f6:	2302      	movs	r3, #2
 81024f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024fc:	2300      	movs	r3, #0
 81024fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102502:	2302      	movs	r3, #2
 8102504:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102508:	230a      	movs	r3, #10
 810250a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810250e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102512:	4619      	mov	r1, r3
 8102514:	483e      	ldr	r0, [pc, #248]	; (8102610 <HAL_PCD_MspInit+0x210>)
 8102516:	f002 fbb7 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 810251a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810251e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102522:	2302      	movs	r3, #2
 8102524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102528:	2300      	movs	r3, #0
 810252a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810252e:	2302      	movs	r3, #2
 8102530:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102534:	230a      	movs	r3, #10
 8102536:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 810253a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810253e:	4619      	mov	r1, r3
 8102540:	4834      	ldr	r0, [pc, #208]	; (8102614 <HAL_PCD_MspInit+0x214>)
 8102542:	f002 fba1 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8102546:	2301      	movs	r3, #1
 8102548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810254c:	2302      	movs	r3, #2
 810254e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102552:	2300      	movs	r3, #0
 8102554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102558:	2302      	movs	r3, #2
 810255a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810255e:	230a      	movs	r3, #10
 8102560:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8102564:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102568:	4619      	mov	r1, r3
 810256a:	482b      	ldr	r0, [pc, #172]	; (8102618 <HAL_PCD_MspInit+0x218>)
 810256c:	f002 fb8c 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8102570:	2310      	movs	r3, #16
 8102572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102576:	2302      	movs	r3, #2
 8102578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810257c:	2300      	movs	r3, #0
 810257e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102582:	2302      	movs	r3, #2
 8102584:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102588:	230a      	movs	r3, #10
 810258a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 810258e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102592:	4619      	mov	r1, r3
 8102594:	4821      	ldr	r0, [pc, #132]	; (810261c <HAL_PCD_MspInit+0x21c>)
 8102596:	f002 fb77 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 810259a:	2328      	movs	r3, #40	; 0x28
 810259c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025a0:	2302      	movs	r3, #2
 81025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025a6:	2300      	movs	r3, #0
 81025a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81025ac:	2302      	movs	r3, #2
 81025ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81025b2:	230a      	movs	r3, #10
 81025b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81025b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81025bc:	4619      	mov	r1, r3
 81025be:	4818      	ldr	r0, [pc, #96]	; (8102620 <HAL_PCD_MspInit+0x220>)
 81025c0:	f002 fb62 	bl	8104c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 81025c4:	4b11      	ldr	r3, [pc, #68]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81025c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025ca:	4a10      	ldr	r2, [pc, #64]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81025cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81025d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81025d4:	4b0d      	ldr	r3, [pc, #52]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81025d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81025de:	60fb      	str	r3, [r7, #12]
 81025e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81025e2:	4b0a      	ldr	r3, [pc, #40]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81025e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025e8:	4a08      	ldr	r2, [pc, #32]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81025ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81025ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81025f2:	4b06      	ldr	r3, [pc, #24]	; (810260c <HAL_PCD_MspInit+0x20c>)
 81025f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81025fc:	60bb      	str	r3, [r7, #8]
 81025fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8102600:	bf00      	nop
 8102602:	37f8      	adds	r7, #248	; 0xf8
 8102604:	46bd      	mov	sp, r7
 8102606:	bd80      	pop	{r7, pc}
 8102608:	40040000 	.word	0x40040000
 810260c:	58024400 	.word	0x58024400
 8102610:	58020400 	.word	0x58020400
 8102614:	58022000 	.word	0x58022000
 8102618:	58020800 	.word	0x58020800
 810261c:	58021c00 	.word	0x58021c00
 8102620:	58020000 	.word	0x58020000

08102624 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8102624:	b580      	push	{r7, lr}
 8102626:	b0b6      	sub	sp, #216	; 0xd8
 8102628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 810262a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 810262e:	2200      	movs	r2, #0
 8102630:	601a      	str	r2, [r3, #0]
 8102632:	605a      	str	r2, [r3, #4]
 8102634:	609a      	str	r2, [r3, #8]
 8102636:	60da      	str	r2, [r3, #12]
 8102638:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 810263a:	4b5a      	ldr	r3, [pc, #360]	; (81027a4 <HAL_FMC_MspInit+0x180>)
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	2b00      	cmp	r3, #0
 8102640:	f040 80ab 	bne.w	810279a <HAL_FMC_MspInit+0x176>
    return;
  }
  FMC_Initialized = 1;
 8102644:	4b57      	ldr	r3, [pc, #348]	; (81027a4 <HAL_FMC_MspInit+0x180>)
 8102646:	2201      	movs	r2, #1
 8102648:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810264a:	1d3b      	adds	r3, r7, #4
 810264c:	22c0      	movs	r2, #192	; 0xc0
 810264e:	2100      	movs	r1, #0
 8102650:	4618      	mov	r0, r3
 8102652:	f00a fb0f 	bl	810cc74 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8102656:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810265a:	607b      	str	r3, [r7, #4]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 810265c:	2300      	movs	r3, #0
 810265e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102660:	1d3b      	adds	r3, r7, #4
 8102662:	4618      	mov	r0, r3
 8102664:	f003 f944 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 8102668:	4603      	mov	r3, r0
 810266a:	2b00      	cmp	r3, #0
 810266c:	d001      	beq.n	8102672 <HAL_FMC_MspInit+0x4e>
    {
      Error_Handler();
 810266e:	f7fe ff31 	bl	81014d4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8102672:	4b4d      	ldr	r3, [pc, #308]	; (81027a8 <HAL_FMC_MspInit+0x184>)
 8102674:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8102678:	4a4b      	ldr	r2, [pc, #300]	; (81027a8 <HAL_FMC_MspInit+0x184>)
 810267a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 810267e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8102682:	4b49      	ldr	r3, [pc, #292]	; (81027a8 <HAL_FMC_MspInit+0x184>)
 8102684:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8102688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810268c:	603b      	str	r3, [r7, #0]
 810268e:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 8102690:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8102694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102698:	2302      	movs	r3, #2
 810269a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810269e:	2300      	movs	r3, #0
 81026a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81026a4:	2303      	movs	r3, #3
 81026a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81026aa:	230c      	movs	r3, #12
 81026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81026b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 81026b4:	4619      	mov	r1, r3
 81026b6:	483d      	ldr	r0, [pc, #244]	; (81027ac <HAL_FMC_MspInit+0x188>)
 81026b8:	f002 fae6 	bl	8104c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 81026bc:	f64f 7383 	movw	r3, #65411	; 0xff83
 81026c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81026c4:	2302      	movs	r3, #2
 81026c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026ca:	2300      	movs	r3, #0
 81026cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81026d0:	2303      	movs	r3, #3
 81026d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81026d6:	230c      	movs	r3, #12
 81026d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81026dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 81026e0:	4619      	mov	r1, r3
 81026e2:	4833      	ldr	r0, [pc, #204]	; (81027b0 <HAL_FMC_MspInit+0x18c>)
 81026e4:	f002 fad0 	bl	8104c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 81026e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 81026ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81026f0:	2302      	movs	r3, #2
 81026f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026f6:	2300      	movs	r3, #0
 81026f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81026fc:	2303      	movs	r3, #3
 81026fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102702:	230c      	movs	r3, #12
 8102704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8102708:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 810270c:	4619      	mov	r1, r3
 810270e:	4829      	ldr	r0, [pc, #164]	; (81027b4 <HAL_FMC_MspInit+0x190>)
 8102710:	f002 faba 	bl	8104c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|GPIO_PIN_5|FMC_BA0_Pin
 8102714:	f248 1337 	movw	r3, #33079	; 0x8137
 8102718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_A12_Pin|FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810271c:	2302      	movs	r3, #2
 810271e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102722:	2300      	movs	r3, #0
 8102724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102728:	2303      	movs	r3, #3
 810272a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810272e:	230c      	movs	r3, #12
 8102730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8102734:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8102738:	4619      	mov	r1, r3
 810273a:	481f      	ldr	r0, [pc, #124]	; (81027b8 <HAL_FMC_MspInit+0x194>)
 810273c:	f002 faa4 	bl	8104c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 8102740:	f24c 7303 	movw	r3, #50947	; 0xc703
 8102744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102748:	2302      	movs	r3, #2
 810274a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810274e:	2300      	movs	r3, #0
 8102750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102754:	2303      	movs	r3, #3
 8102756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810275a:	230c      	movs	r3, #12
 810275c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102760:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8102764:	4619      	mov	r1, r3
 8102766:	4815      	ldr	r0, [pc, #84]	; (81027bc <HAL_FMC_MspInit+0x198>)
 8102768:	f002 fa8e 	bl	8104c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 810276c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8102770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102774:	2302      	movs	r3, #2
 8102776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810277a:	2300      	movs	r3, #0
 810277c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102780:	2303      	movs	r3, #3
 8102782:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102786:	230c      	movs	r3, #12
 8102788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810278c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8102790:	4619      	mov	r1, r3
 8102792:	480b      	ldr	r0, [pc, #44]	; (81027c0 <HAL_FMC_MspInit+0x19c>)
 8102794:	f002 fa78 	bl	8104c88 <HAL_GPIO_Init>
 8102798:	e000      	b.n	810279c <HAL_FMC_MspInit+0x178>
    return;
 810279a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 810279c:	37d8      	adds	r7, #216	; 0xd8
 810279e:	46bd      	mov	sp, r7
 81027a0:	bd80      	pop	{r7, pc}
 81027a2:	bf00      	nop
 81027a4:	100000f8 	.word	0x100000f8
 81027a8:	58024400 	.word	0x58024400
 81027ac:	58022000 	.word	0x58022000
 81027b0:	58021000 	.word	0x58021000
 81027b4:	58021c00 	.word	0x58021c00
 81027b8:	58021800 	.word	0x58021800
 81027bc:	58020c00 	.word	0x58020c00
 81027c0:	58021400 	.word	0x58021400

081027c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 81027c4:	b580      	push	{r7, lr}
 81027c6:	b082      	sub	sp, #8
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 81027cc:	f7ff ff2a 	bl	8102624 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 81027d0:	bf00      	nop
 81027d2:	3708      	adds	r7, #8
 81027d4:	46bd      	mov	sp, r7
 81027d6:	bd80      	pop	{r7, pc}

081027d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81027d8:	b580      	push	{r7, lr}
 81027da:	b0ba      	sub	sp, #232	; 0xe8
 81027dc:	af00      	add	r7, sp, #0
 81027de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81027e0:	f107 0314 	add.w	r3, r7, #20
 81027e4:	22c0      	movs	r2, #192	; 0xc0
 81027e6:	2100      	movs	r1, #0
 81027e8:	4618      	mov	r0, r3
 81027ea:	f00a fa43 	bl	810cc74 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	4a4c      	ldr	r2, [pc, #304]	; (8102924 <HAL_SAI_MspInit+0x14c>)
 81027f4:	4293      	cmp	r3, r2
 81027f6:	d150      	bne.n	810289a <HAL_SAI_MspInit+0xc2>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81027f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81027fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81027fe:	2300      	movs	r3, #0
 8102800:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102802:	f107 0314 	add.w	r3, r7, #20
 8102806:	4618      	mov	r0, r3
 8102808:	f003 f872 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 810280c:	4603      	mov	r3, r0
 810280e:	2b00      	cmp	r3, #0
 8102810:	d001      	beq.n	8102816 <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8102812:	f7fe fe5f 	bl	81014d4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8102816:	4b44      	ldr	r3, [pc, #272]	; (8102928 <HAL_SAI_MspInit+0x150>)
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	2b00      	cmp	r3, #0
 810281c:	d10e      	bne.n	810283c <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 810281e:	4b43      	ldr	r3, [pc, #268]	; (810292c <HAL_SAI_MspInit+0x154>)
 8102820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102824:	4a41      	ldr	r2, [pc, #260]	; (810292c <HAL_SAI_MspInit+0x154>)
 8102826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810282a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810282e:	4b3f      	ldr	r3, [pc, #252]	; (810292c <HAL_SAI_MspInit+0x154>)
 8102830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102838:	613b      	str	r3, [r7, #16]
 810283a:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 810283c:	4b3a      	ldr	r3, [pc, #232]	; (8102928 <HAL_SAI_MspInit+0x150>)
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	3301      	adds	r3, #1
 8102842:	4a39      	ldr	r2, [pc, #228]	; (8102928 <HAL_SAI_MspInit+0x150>)
 8102844:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8102846:	2370      	movs	r3, #112	; 0x70
 8102848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810284c:	2302      	movs	r3, #2
 810284e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102852:	2300      	movs	r3, #0
 8102854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102858:	2300      	movs	r3, #0
 810285a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810285e:	2306      	movs	r3, #6
 8102860:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102864:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102868:	4619      	mov	r1, r3
 810286a:	4831      	ldr	r0, [pc, #196]	; (8102930 <HAL_SAI_MspInit+0x158>)
 810286c:	f002 fa0c 	bl	8104c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8102870:	2380      	movs	r3, #128	; 0x80
 8102872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102876:	2302      	movs	r3, #2
 8102878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810287c:	2300      	movs	r3, #0
 810287e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102882:	2300      	movs	r3, #0
 8102884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102888:	2306      	movs	r3, #6
 810288a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 810288e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102892:	4619      	mov	r1, r3
 8102894:	4827      	ldr	r0, [pc, #156]	; (8102934 <HAL_SAI_MspInit+0x15c>)
 8102896:	f002 f9f7 	bl	8104c88 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	4a26      	ldr	r2, [pc, #152]	; (8102938 <HAL_SAI_MspInit+0x160>)
 81028a0:	4293      	cmp	r3, r2
 81028a2:	d13b      	bne.n	810291c <HAL_SAI_MspInit+0x144>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81028a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 81028a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81028aa:	2300      	movs	r3, #0
 81028ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81028ae:	f107 0314 	add.w	r3, r7, #20
 81028b2:	4618      	mov	r0, r3
 81028b4:	f003 f81c 	bl	81058f0 <HAL_RCCEx_PeriphCLKConfig>
 81028b8:	4603      	mov	r3, r0
 81028ba:	2b00      	cmp	r3, #0
 81028bc:	d001      	beq.n	81028c2 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 81028be:	f7fe fe09 	bl	81014d4 <Error_Handler>
    }

      if (SAI1_client == 0)
 81028c2:	4b19      	ldr	r3, [pc, #100]	; (8102928 <HAL_SAI_MspInit+0x150>)
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	d10e      	bne.n	81028e8 <HAL_SAI_MspInit+0x110>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81028ca:	4b18      	ldr	r3, [pc, #96]	; (810292c <HAL_SAI_MspInit+0x154>)
 81028cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81028d0:	4a16      	ldr	r2, [pc, #88]	; (810292c <HAL_SAI_MspInit+0x154>)
 81028d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81028d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81028da:	4b14      	ldr	r3, [pc, #80]	; (810292c <HAL_SAI_MspInit+0x154>)
 81028dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81028e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81028e4:	60fb      	str	r3, [r7, #12]
 81028e6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 81028e8:	4b0f      	ldr	r3, [pc, #60]	; (8102928 <HAL_SAI_MspInit+0x150>)
 81028ea:	681b      	ldr	r3, [r3, #0]
 81028ec:	3301      	adds	r3, #1
 81028ee:	4a0e      	ldr	r2, [pc, #56]	; (8102928 <HAL_SAI_MspInit+0x150>)
 81028f0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81028f2:	2308      	movs	r3, #8
 81028f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81028f8:	2302      	movs	r3, #2
 81028fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81028fe:	2300      	movs	r3, #0
 8102900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102904:	2300      	movs	r3, #0
 8102906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810290a:	2306      	movs	r3, #6
 810290c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8102910:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102914:	4619      	mov	r1, r3
 8102916:	4806      	ldr	r0, [pc, #24]	; (8102930 <HAL_SAI_MspInit+0x158>)
 8102918:	f002 f9b6 	bl	8104c88 <HAL_GPIO_Init>

    }
}
 810291c:	bf00      	nop
 810291e:	37e8      	adds	r7, #232	; 0xe8
 8102920:	46bd      	mov	sp, r7
 8102922:	bd80      	pop	{r7, pc}
 8102924:	40015804 	.word	0x40015804
 8102928:	100000fc 	.word	0x100000fc
 810292c:	58024400 	.word	0x58024400
 8102930:	58021000 	.word	0x58021000
 8102934:	58021800 	.word	0x58021800
 8102938:	40015824 	.word	0x40015824

0810293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810293c:	b480      	push	{r7}
 810293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102940:	e7fe      	b.n	8102940 <NMI_Handler+0x4>

08102942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102942:	b480      	push	{r7}
 8102944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102946:	e7fe      	b.n	8102946 <HardFault_Handler+0x4>

08102948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102948:	b480      	push	{r7}
 810294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810294c:	e7fe      	b.n	810294c <MemManage_Handler+0x4>

0810294e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810294e:	b480      	push	{r7}
 8102950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102952:	e7fe      	b.n	8102952 <BusFault_Handler+0x4>

08102954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102954:	b480      	push	{r7}
 8102956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102958:	e7fe      	b.n	8102958 <UsageFault_Handler+0x4>

0810295a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810295a:	b480      	push	{r7}
 810295c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810295e:	bf00      	nop
 8102960:	46bd      	mov	sp, r7
 8102962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102966:	4770      	bx	lr

08102968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102968:	b480      	push	{r7}
 810296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810296c:	bf00      	nop
 810296e:	46bd      	mov	sp, r7
 8102970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102974:	4770      	bx	lr

08102976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102976:	b480      	push	{r7}
 8102978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810297a:	bf00      	nop
 810297c:	46bd      	mov	sp, r7
 810297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102982:	4770      	bx	lr

08102984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102984:	b580      	push	{r7, lr}
 8102986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102988:	f000 f8ca 	bl	8102b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810298c:	bf00      	nop
 810298e:	bd80      	pop	{r7, pc}

08102990 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102990:	b580      	push	{r7, lr}
 8102992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102994:	4802      	ldr	r0, [pc, #8]	; (81029a0 <CEC_IRQHandler+0x10>)
 8102996:	f001 fa2d 	bl	8103df4 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 810299a:	bf00      	nop
 810299c:	bd80      	pop	{r7, pc}
 810299e:	bf00      	nop
 81029a0:	10000704 	.word	0x10000704

081029a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81029a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81029dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81029a8:	f7fd fe12 	bl	81005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81029ac:	480c      	ldr	r0, [pc, #48]	; (81029e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81029ae:	490d      	ldr	r1, [pc, #52]	; (81029e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81029b0:	4a0d      	ldr	r2, [pc, #52]	; (81029e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81029b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81029b4:	e002      	b.n	81029bc <LoopCopyDataInit>

081029b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81029b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81029b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81029ba:	3304      	adds	r3, #4

081029bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81029bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81029be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81029c0:	d3f9      	bcc.n	81029b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81029c2:	4a0a      	ldr	r2, [pc, #40]	; (81029ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81029c4:	4c0a      	ldr	r4, [pc, #40]	; (81029f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81029c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81029c8:	e001      	b.n	81029ce <LoopFillZerobss>

081029ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81029ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81029cc:	3204      	adds	r2, #4

081029ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81029ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81029d0:	d3fb      	bcc.n	81029ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81029d2:	f00a f92b 	bl	810cc2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81029d6:	f7fd fe17 	bl	8100608 <main>
  bx  lr
 81029da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81029dc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81029e0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81029e4:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81029e8:	0810cce4 	.word	0x0810cce4
  ldr r2, =_sbss
 81029ec:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 81029f0:	10000da8 	.word	0x10000da8

081029f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81029f4:	e7fe      	b.n	81029f4 <ADC3_IRQHandler>
	...

081029f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81029f8:	b580      	push	{r7, lr}
 81029fa:	b082      	sub	sp, #8
 81029fc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81029fe:	4b28      	ldr	r3, [pc, #160]	; (8102aa0 <HAL_Init+0xa8>)
 8102a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102a04:	4a26      	ldr	r2, [pc, #152]	; (8102aa0 <HAL_Init+0xa8>)
 8102a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102a0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102a0e:	4b24      	ldr	r3, [pc, #144]	; (8102aa0 <HAL_Init+0xa8>)
 8102a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102a18:	603b      	str	r3, [r7, #0]
 8102a1a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102a1c:	4b21      	ldr	r3, [pc, #132]	; (8102aa4 <HAL_Init+0xac>)
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102a28:	4a1e      	ldr	r2, [pc, #120]	; (8102aa4 <HAL_Init+0xac>)
 8102a2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102a2e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102a30:	4b1c      	ldr	r3, [pc, #112]	; (8102aa4 <HAL_Init+0xac>)
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	4a1b      	ldr	r2, [pc, #108]	; (8102aa4 <HAL_Init+0xac>)
 8102a36:	f043 0301 	orr.w	r3, r3, #1
 8102a3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102a3c:	2003      	movs	r0, #3
 8102a3e:	f001 fba5 	bl	810418c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a42:	f002 fd7d 	bl	8105540 <HAL_RCC_GetSysClockFreq>
 8102a46:	4602      	mov	r2, r0
 8102a48:	4b15      	ldr	r3, [pc, #84]	; (8102aa0 <HAL_Init+0xa8>)
 8102a4a:	699b      	ldr	r3, [r3, #24]
 8102a4c:	0a1b      	lsrs	r3, r3, #8
 8102a4e:	f003 030f 	and.w	r3, r3, #15
 8102a52:	4915      	ldr	r1, [pc, #84]	; (8102aa8 <HAL_Init+0xb0>)
 8102a54:	5ccb      	ldrb	r3, [r1, r3]
 8102a56:	f003 031f 	and.w	r3, r3, #31
 8102a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8102a5e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a60:	4b0f      	ldr	r3, [pc, #60]	; (8102aa0 <HAL_Init+0xa8>)
 8102a62:	699b      	ldr	r3, [r3, #24]
 8102a64:	f003 030f 	and.w	r3, r3, #15
 8102a68:	4a0f      	ldr	r2, [pc, #60]	; (8102aa8 <HAL_Init+0xb0>)
 8102a6a:	5cd3      	ldrb	r3, [r2, r3]
 8102a6c:	f003 031f 	and.w	r3, r3, #31
 8102a70:	687a      	ldr	r2, [r7, #4]
 8102a72:	fa22 f303 	lsr.w	r3, r2, r3
 8102a76:	4a0d      	ldr	r2, [pc, #52]	; (8102aac <HAL_Init+0xb4>)
 8102a78:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a7a:	4b0c      	ldr	r3, [pc, #48]	; (8102aac <HAL_Init+0xb4>)
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a0c      	ldr	r2, [pc, #48]	; (8102ab0 <HAL_Init+0xb8>)
 8102a80:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102a82:	2000      	movs	r0, #0
 8102a84:	f000 f816 	bl	8102ab4 <HAL_InitTick>
 8102a88:	4603      	mov	r3, r0
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d001      	beq.n	8102a92 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102a8e:	2301      	movs	r3, #1
 8102a90:	e002      	b.n	8102a98 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102a92:	f7fe fd25 	bl	81014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102a96:	2300      	movs	r3, #0
}
 8102a98:	4618      	mov	r0, r3
 8102a9a:	3708      	adds	r7, #8
 8102a9c:	46bd      	mov	sp, r7
 8102a9e:	bd80      	pop	{r7, pc}
 8102aa0:	58024400 	.word	0x58024400
 8102aa4:	40024400 	.word	0x40024400
 8102aa8:	0810cc9c 	.word	0x0810cc9c
 8102aac:	10000004 	.word	0x10000004
 8102ab0:	10000000 	.word	0x10000000

08102ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102ab4:	b580      	push	{r7, lr}
 8102ab6:	b082      	sub	sp, #8
 8102ab8:	af00      	add	r7, sp, #0
 8102aba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102abc:	4b15      	ldr	r3, [pc, #84]	; (8102b14 <HAL_InitTick+0x60>)
 8102abe:	781b      	ldrb	r3, [r3, #0]
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d101      	bne.n	8102ac8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102ac4:	2301      	movs	r3, #1
 8102ac6:	e021      	b.n	8102b0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102ac8:	4b13      	ldr	r3, [pc, #76]	; (8102b18 <HAL_InitTick+0x64>)
 8102aca:	681a      	ldr	r2, [r3, #0]
 8102acc:	4b11      	ldr	r3, [pc, #68]	; (8102b14 <HAL_InitTick+0x60>)
 8102ace:	781b      	ldrb	r3, [r3, #0]
 8102ad0:	4619      	mov	r1, r3
 8102ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8102ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8102ade:	4618      	mov	r0, r3
 8102ae0:	f001 fb87 	bl	81041f2 <HAL_SYSTICK_Config>
 8102ae4:	4603      	mov	r3, r0
 8102ae6:	2b00      	cmp	r3, #0
 8102ae8:	d001      	beq.n	8102aee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102aea:	2301      	movs	r3, #1
 8102aec:	e00e      	b.n	8102b0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	2b0f      	cmp	r3, #15
 8102af2:	d80a      	bhi.n	8102b0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102af4:	2200      	movs	r2, #0
 8102af6:	6879      	ldr	r1, [r7, #4]
 8102af8:	f04f 30ff 	mov.w	r0, #4294967295
 8102afc:	f001 fb51 	bl	81041a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102b00:	4a06      	ldr	r2, [pc, #24]	; (8102b1c <HAL_InitTick+0x68>)
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102b06:	2300      	movs	r3, #0
 8102b08:	e000      	b.n	8102b0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102b0a:	2301      	movs	r3, #1
}
 8102b0c:	4618      	mov	r0, r3
 8102b0e:	3708      	adds	r7, #8
 8102b10:	46bd      	mov	sp, r7
 8102b12:	bd80      	pop	{r7, pc}
 8102b14:	1000000c 	.word	0x1000000c
 8102b18:	10000000 	.word	0x10000000
 8102b1c:	10000008 	.word	0x10000008

08102b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102b20:	b480      	push	{r7}
 8102b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102b24:	4b06      	ldr	r3, [pc, #24]	; (8102b40 <HAL_IncTick+0x20>)
 8102b26:	781b      	ldrb	r3, [r3, #0]
 8102b28:	461a      	mov	r2, r3
 8102b2a:	4b06      	ldr	r3, [pc, #24]	; (8102b44 <HAL_IncTick+0x24>)
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	4413      	add	r3, r2
 8102b30:	4a04      	ldr	r2, [pc, #16]	; (8102b44 <HAL_IncTick+0x24>)
 8102b32:	6013      	str	r3, [r2, #0]
}
 8102b34:	bf00      	nop
 8102b36:	46bd      	mov	sp, r7
 8102b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b3c:	4770      	bx	lr
 8102b3e:	bf00      	nop
 8102b40:	1000000c 	.word	0x1000000c
 8102b44:	10000da4 	.word	0x10000da4

08102b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102b48:	b480      	push	{r7}
 8102b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8102b4c:	4b03      	ldr	r3, [pc, #12]	; (8102b5c <HAL_GetTick+0x14>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
}
 8102b50:	4618      	mov	r0, r3
 8102b52:	46bd      	mov	sp, r7
 8102b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b58:	4770      	bx	lr
 8102b5a:	bf00      	nop
 8102b5c:	10000da4 	.word	0x10000da4

08102b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102b60:	b580      	push	{r7, lr}
 8102b62:	b084      	sub	sp, #16
 8102b64:	af00      	add	r7, sp, #0
 8102b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102b68:	f7ff ffee 	bl	8102b48 <HAL_GetTick>
 8102b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b78:	d005      	beq.n	8102b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102b7a:	4b0a      	ldr	r3, [pc, #40]	; (8102ba4 <HAL_Delay+0x44>)
 8102b7c:	781b      	ldrb	r3, [r3, #0]
 8102b7e:	461a      	mov	r2, r3
 8102b80:	68fb      	ldr	r3, [r7, #12]
 8102b82:	4413      	add	r3, r2
 8102b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102b86:	bf00      	nop
 8102b88:	f7ff ffde 	bl	8102b48 <HAL_GetTick>
 8102b8c:	4602      	mov	r2, r0
 8102b8e:	68bb      	ldr	r3, [r7, #8]
 8102b90:	1ad3      	subs	r3, r2, r3
 8102b92:	68fa      	ldr	r2, [r7, #12]
 8102b94:	429a      	cmp	r2, r3
 8102b96:	d8f7      	bhi.n	8102b88 <HAL_Delay+0x28>
  {
  }
}
 8102b98:	bf00      	nop
 8102b9a:	bf00      	nop
 8102b9c:	3710      	adds	r7, #16
 8102b9e:	46bd      	mov	sp, r7
 8102ba0:	bd80      	pop	{r7, pc}
 8102ba2:	bf00      	nop
 8102ba4:	1000000c 	.word	0x1000000c

08102ba8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102ba8:	b480      	push	{r7}
 8102baa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102bac:	4b03      	ldr	r3, [pc, #12]	; (8102bbc <HAL_GetREVID+0x14>)
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	0c1b      	lsrs	r3, r3, #16
}
 8102bb2:	4618      	mov	r0, r3
 8102bb4:	46bd      	mov	sp, r7
 8102bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bba:	4770      	bx	lr
 8102bbc:	5c001000 	.word	0x5c001000

08102bc0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102bc0:	b480      	push	{r7}
 8102bc2:	b083      	sub	sp, #12
 8102bc4:	af00      	add	r7, sp, #0
 8102bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102bc8:	4b06      	ldr	r3, [pc, #24]	; (8102be4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102bca:	685b      	ldr	r3, [r3, #4]
 8102bcc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102bd0:	4904      	ldr	r1, [pc, #16]	; (8102be4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	4313      	orrs	r3, r2
 8102bd6:	604b      	str	r3, [r1, #4]
}
 8102bd8:	bf00      	nop
 8102bda:	370c      	adds	r7, #12
 8102bdc:	46bd      	mov	sp, r7
 8102bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be2:	4770      	bx	lr
 8102be4:	58000400 	.word	0x58000400

08102be8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102be8:	b480      	push	{r7}
 8102bea:	b083      	sub	sp, #12
 8102bec:	af00      	add	r7, sp, #0
 8102bee:	6078      	str	r0, [r7, #4]
 8102bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102bf2:	4b07      	ldr	r3, [pc, #28]	; (8102c10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102bf4:	685a      	ldr	r2, [r3, #4]
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	43db      	mvns	r3, r3
 8102bfa:	401a      	ands	r2, r3
 8102bfc:	4904      	ldr	r1, [pc, #16]	; (8102c10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102bfe:	683b      	ldr	r3, [r7, #0]
 8102c00:	4313      	orrs	r3, r2
 8102c02:	604b      	str	r3, [r1, #4]
}
 8102c04:	bf00      	nop
 8102c06:	370c      	adds	r7, #12
 8102c08:	46bd      	mov	sp, r7
 8102c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c0e:	4770      	bx	lr
 8102c10:	58000400 	.word	0x58000400

08102c14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102c14:	b480      	push	{r7}
 8102c16:	b083      	sub	sp, #12
 8102c18:	af00      	add	r7, sp, #0
 8102c1a:	6078      	str	r0, [r7, #4]
 8102c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	689b      	ldr	r3, [r3, #8]
 8102c22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8102c26:	683b      	ldr	r3, [r7, #0]
 8102c28:	431a      	orrs	r2, r3
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	609a      	str	r2, [r3, #8]
}
 8102c2e:	bf00      	nop
 8102c30:	370c      	adds	r7, #12
 8102c32:	46bd      	mov	sp, r7
 8102c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c38:	4770      	bx	lr

08102c3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102c3a:	b480      	push	{r7}
 8102c3c:	b083      	sub	sp, #12
 8102c3e:	af00      	add	r7, sp, #0
 8102c40:	6078      	str	r0, [r7, #4]
 8102c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	689b      	ldr	r3, [r3, #8]
 8102c48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102c4c:	683b      	ldr	r3, [r7, #0]
 8102c4e:	431a      	orrs	r2, r3
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	609a      	str	r2, [r3, #8]
}
 8102c54:	bf00      	nop
 8102c56:	370c      	adds	r7, #12
 8102c58:	46bd      	mov	sp, r7
 8102c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c5e:	4770      	bx	lr

08102c60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102c60:	b480      	push	{r7}
 8102c62:	b083      	sub	sp, #12
 8102c64:	af00      	add	r7, sp, #0
 8102c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	689b      	ldr	r3, [r3, #8]
 8102c6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102c70:	4618      	mov	r0, r3
 8102c72:	370c      	adds	r7, #12
 8102c74:	46bd      	mov	sp, r7
 8102c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c7a:	4770      	bx	lr

08102c7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102c7c:	b480      	push	{r7}
 8102c7e:	b087      	sub	sp, #28
 8102c80:	af00      	add	r7, sp, #0
 8102c82:	60f8      	str	r0, [r7, #12]
 8102c84:	60b9      	str	r1, [r7, #8]
 8102c86:	607a      	str	r2, [r7, #4]
 8102c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	3360      	adds	r3, #96	; 0x60
 8102c8e:	461a      	mov	r2, r3
 8102c90:	68bb      	ldr	r3, [r7, #8]
 8102c92:	009b      	lsls	r3, r3, #2
 8102c94:	4413      	add	r3, r2
 8102c96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102c98:	697b      	ldr	r3, [r7, #20]
 8102c9a:	681b      	ldr	r3, [r3, #0]
 8102c9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102ca6:	683b      	ldr	r3, [r7, #0]
 8102ca8:	430b      	orrs	r3, r1
 8102caa:	431a      	orrs	r2, r3
 8102cac:	697b      	ldr	r3, [r7, #20]
 8102cae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102cb0:	bf00      	nop
 8102cb2:	371c      	adds	r7, #28
 8102cb4:	46bd      	mov	sp, r7
 8102cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cba:	4770      	bx	lr

08102cbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102cbc:	b480      	push	{r7}
 8102cbe:	b085      	sub	sp, #20
 8102cc0:	af00      	add	r7, sp, #0
 8102cc2:	60f8      	str	r0, [r7, #12]
 8102cc4:	60b9      	str	r1, [r7, #8]
 8102cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102cc8:	68fb      	ldr	r3, [r7, #12]
 8102cca:	691b      	ldr	r3, [r3, #16]
 8102ccc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102cd0:	68bb      	ldr	r3, [r7, #8]
 8102cd2:	f003 031f 	and.w	r3, r3, #31
 8102cd6:	6879      	ldr	r1, [r7, #4]
 8102cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8102cdc:	431a      	orrs	r2, r3
 8102cde:	68fb      	ldr	r3, [r7, #12]
 8102ce0:	611a      	str	r2, [r3, #16]
}
 8102ce2:	bf00      	nop
 8102ce4:	3714      	adds	r7, #20
 8102ce6:	46bd      	mov	sp, r7
 8102ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cec:	4770      	bx	lr

08102cee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102cee:	b480      	push	{r7}
 8102cf0:	b087      	sub	sp, #28
 8102cf2:	af00      	add	r7, sp, #0
 8102cf4:	60f8      	str	r0, [r7, #12]
 8102cf6:	60b9      	str	r1, [r7, #8]
 8102cf8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	3360      	adds	r3, #96	; 0x60
 8102cfe:	461a      	mov	r2, r3
 8102d00:	68bb      	ldr	r3, [r7, #8]
 8102d02:	009b      	lsls	r3, r3, #2
 8102d04:	4413      	add	r3, r2
 8102d06:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102d08:	697b      	ldr	r3, [r7, #20]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	431a      	orrs	r2, r3
 8102d14:	697b      	ldr	r3, [r7, #20]
 8102d16:	601a      	str	r2, [r3, #0]
  }
}
 8102d18:	bf00      	nop
 8102d1a:	371c      	adds	r7, #28
 8102d1c:	46bd      	mov	sp, r7
 8102d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d22:	4770      	bx	lr

08102d24 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102d24:	b480      	push	{r7}
 8102d26:	b087      	sub	sp, #28
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	60f8      	str	r0, [r7, #12]
 8102d2c:	60b9      	str	r1, [r7, #8]
 8102d2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102d30:	68fb      	ldr	r3, [r7, #12]
 8102d32:	3330      	adds	r3, #48	; 0x30
 8102d34:	461a      	mov	r2, r3
 8102d36:	68bb      	ldr	r3, [r7, #8]
 8102d38:	0a1b      	lsrs	r3, r3, #8
 8102d3a:	009b      	lsls	r3, r3, #2
 8102d3c:	f003 030c 	and.w	r3, r3, #12
 8102d40:	4413      	add	r3, r2
 8102d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102d44:	697b      	ldr	r3, [r7, #20]
 8102d46:	681a      	ldr	r2, [r3, #0]
 8102d48:	68bb      	ldr	r3, [r7, #8]
 8102d4a:	f003 031f 	and.w	r3, r3, #31
 8102d4e:	211f      	movs	r1, #31
 8102d50:	fa01 f303 	lsl.w	r3, r1, r3
 8102d54:	43db      	mvns	r3, r3
 8102d56:	401a      	ands	r2, r3
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	0e9b      	lsrs	r3, r3, #26
 8102d5c:	f003 011f 	and.w	r1, r3, #31
 8102d60:	68bb      	ldr	r3, [r7, #8]
 8102d62:	f003 031f 	and.w	r3, r3, #31
 8102d66:	fa01 f303 	lsl.w	r3, r1, r3
 8102d6a:	431a      	orrs	r2, r3
 8102d6c:	697b      	ldr	r3, [r7, #20]
 8102d6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102d70:	bf00      	nop
 8102d72:	371c      	adds	r7, #28
 8102d74:	46bd      	mov	sp, r7
 8102d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d7a:	4770      	bx	lr

08102d7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102d7c:	b480      	push	{r7}
 8102d7e:	b087      	sub	sp, #28
 8102d80:	af00      	add	r7, sp, #0
 8102d82:	60f8      	str	r0, [r7, #12]
 8102d84:	60b9      	str	r1, [r7, #8]
 8102d86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102d88:	68fb      	ldr	r3, [r7, #12]
 8102d8a:	3314      	adds	r3, #20
 8102d8c:	461a      	mov	r2, r3
 8102d8e:	68bb      	ldr	r3, [r7, #8]
 8102d90:	0e5b      	lsrs	r3, r3, #25
 8102d92:	009b      	lsls	r3, r3, #2
 8102d94:	f003 0304 	and.w	r3, r3, #4
 8102d98:	4413      	add	r3, r2
 8102d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102d9c:	697b      	ldr	r3, [r7, #20]
 8102d9e:	681a      	ldr	r2, [r3, #0]
 8102da0:	68bb      	ldr	r3, [r7, #8]
 8102da2:	0d1b      	lsrs	r3, r3, #20
 8102da4:	f003 031f 	and.w	r3, r3, #31
 8102da8:	2107      	movs	r1, #7
 8102daa:	fa01 f303 	lsl.w	r3, r1, r3
 8102dae:	43db      	mvns	r3, r3
 8102db0:	401a      	ands	r2, r3
 8102db2:	68bb      	ldr	r3, [r7, #8]
 8102db4:	0d1b      	lsrs	r3, r3, #20
 8102db6:	f003 031f 	and.w	r3, r3, #31
 8102dba:	6879      	ldr	r1, [r7, #4]
 8102dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8102dc0:	431a      	orrs	r2, r3
 8102dc2:	697b      	ldr	r3, [r7, #20]
 8102dc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102dc6:	bf00      	nop
 8102dc8:	371c      	adds	r7, #28
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd0:	4770      	bx	lr
	...

08102dd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102dd4:	b480      	push	{r7}
 8102dd6:	b085      	sub	sp, #20
 8102dd8:	af00      	add	r7, sp, #0
 8102dda:	60f8      	str	r0, [r7, #12]
 8102ddc:	60b9      	str	r1, [r7, #8]
 8102dde:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102de6:	68bb      	ldr	r3, [r7, #8]
 8102de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102dec:	43db      	mvns	r3, r3
 8102dee:	401a      	ands	r2, r3
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	f003 0318 	and.w	r3, r3, #24
 8102df6:	4908      	ldr	r1, [pc, #32]	; (8102e18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102df8:	40d9      	lsrs	r1, r3
 8102dfa:	68bb      	ldr	r3, [r7, #8]
 8102dfc:	400b      	ands	r3, r1
 8102dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e02:	431a      	orrs	r2, r3
 8102e04:	68fb      	ldr	r3, [r7, #12]
 8102e06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102e0a:	bf00      	nop
 8102e0c:	3714      	adds	r7, #20
 8102e0e:	46bd      	mov	sp, r7
 8102e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e14:	4770      	bx	lr
 8102e16:	bf00      	nop
 8102e18:	000fffff 	.word	0x000fffff

08102e1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102e1c:	b480      	push	{r7}
 8102e1e:	b083      	sub	sp, #12
 8102e20:	af00      	add	r7, sp, #0
 8102e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	689b      	ldr	r3, [r3, #8]
 8102e28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102e2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102e30:	687a      	ldr	r2, [r7, #4]
 8102e32:	6093      	str	r3, [r2, #8]
}
 8102e34:	bf00      	nop
 8102e36:	370c      	adds	r7, #12
 8102e38:	46bd      	mov	sp, r7
 8102e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e3e:	4770      	bx	lr

08102e40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102e40:	b480      	push	{r7}
 8102e42:	b083      	sub	sp, #12
 8102e44:	af00      	add	r7, sp, #0
 8102e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	689b      	ldr	r3, [r3, #8]
 8102e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102e54:	d101      	bne.n	8102e5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102e56:	2301      	movs	r3, #1
 8102e58:	e000      	b.n	8102e5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102e5a:	2300      	movs	r3, #0
}
 8102e5c:	4618      	mov	r0, r3
 8102e5e:	370c      	adds	r7, #12
 8102e60:	46bd      	mov	sp, r7
 8102e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e66:	4770      	bx	lr

08102e68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102e68:	b480      	push	{r7}
 8102e6a:	b083      	sub	sp, #12
 8102e6c:	af00      	add	r7, sp, #0
 8102e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	689b      	ldr	r3, [r3, #8]
 8102e74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102e84:	bf00      	nop
 8102e86:	370c      	adds	r7, #12
 8102e88:	46bd      	mov	sp, r7
 8102e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e8e:	4770      	bx	lr

08102e90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102e90:	b480      	push	{r7}
 8102e92:	b083      	sub	sp, #12
 8102e94:	af00      	add	r7, sp, #0
 8102e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	689b      	ldr	r3, [r3, #8]
 8102e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102ea4:	d101      	bne.n	8102eaa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102ea6:	2301      	movs	r3, #1
 8102ea8:	e000      	b.n	8102eac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102eaa:	2300      	movs	r3, #0
}
 8102eac:	4618      	mov	r0, r3
 8102eae:	370c      	adds	r7, #12
 8102eb0:	46bd      	mov	sp, r7
 8102eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb6:	4770      	bx	lr

08102eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102eb8:	b480      	push	{r7}
 8102eba:	b083      	sub	sp, #12
 8102ebc:	af00      	add	r7, sp, #0
 8102ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	689b      	ldr	r3, [r3, #8]
 8102ec4:	f003 0301 	and.w	r3, r3, #1
 8102ec8:	2b01      	cmp	r3, #1
 8102eca:	d101      	bne.n	8102ed0 <LL_ADC_IsEnabled+0x18>
 8102ecc:	2301      	movs	r3, #1
 8102ece:	e000      	b.n	8102ed2 <LL_ADC_IsEnabled+0x1a>
 8102ed0:	2300      	movs	r3, #0
}
 8102ed2:	4618      	mov	r0, r3
 8102ed4:	370c      	adds	r7, #12
 8102ed6:	46bd      	mov	sp, r7
 8102ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102edc:	4770      	bx	lr

08102ede <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102ede:	b480      	push	{r7}
 8102ee0:	b083      	sub	sp, #12
 8102ee2:	af00      	add	r7, sp, #0
 8102ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	689b      	ldr	r3, [r3, #8]
 8102eea:	f003 0304 	and.w	r3, r3, #4
 8102eee:	2b04      	cmp	r3, #4
 8102ef0:	d101      	bne.n	8102ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102ef2:	2301      	movs	r3, #1
 8102ef4:	e000      	b.n	8102ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102ef6:	2300      	movs	r3, #0
}
 8102ef8:	4618      	mov	r0, r3
 8102efa:	370c      	adds	r7, #12
 8102efc:	46bd      	mov	sp, r7
 8102efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f02:	4770      	bx	lr

08102f04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102f04:	b480      	push	{r7}
 8102f06:	b083      	sub	sp, #12
 8102f08:	af00      	add	r7, sp, #0
 8102f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	689b      	ldr	r3, [r3, #8]
 8102f10:	f003 0308 	and.w	r3, r3, #8
 8102f14:	2b08      	cmp	r3, #8
 8102f16:	d101      	bne.n	8102f1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102f18:	2301      	movs	r3, #1
 8102f1a:	e000      	b.n	8102f1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102f1c:	2300      	movs	r3, #0
}
 8102f1e:	4618      	mov	r0, r3
 8102f20:	370c      	adds	r7, #12
 8102f22:	46bd      	mov	sp, r7
 8102f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f28:	4770      	bx	lr
	...

08102f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102f2c:	b590      	push	{r4, r7, lr}
 8102f2e:	b089      	sub	sp, #36	; 0x24
 8102f30:	af00      	add	r7, sp, #0
 8102f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102f34:	2300      	movs	r3, #0
 8102f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102f38:	2300      	movs	r3, #0
 8102f3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d101      	bne.n	8102f46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102f42:	2301      	movs	r3, #1
 8102f44:	e18e      	b.n	8103264 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	68db      	ldr	r3, [r3, #12]
 8102f4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d109      	bne.n	8102f68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102f54:	6878      	ldr	r0, [r7, #4]
 8102f56:	f7fe fadd 	bl	8101514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	2200      	movs	r2, #0
 8102f5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	2200      	movs	r2, #0
 8102f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4618      	mov	r0, r3
 8102f6e:	f7ff ff67 	bl	8102e40 <LL_ADC_IsDeepPowerDownEnabled>
 8102f72:	4603      	mov	r3, r0
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d004      	beq.n	8102f82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	4618      	mov	r0, r3
 8102f7e:	f7ff ff4d 	bl	8102e1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	681b      	ldr	r3, [r3, #0]
 8102f86:	4618      	mov	r0, r3
 8102f88:	f7ff ff82 	bl	8102e90 <LL_ADC_IsInternalRegulatorEnabled>
 8102f8c:	4603      	mov	r3, r0
 8102f8e:	2b00      	cmp	r3, #0
 8102f90:	d114      	bne.n	8102fbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4618      	mov	r0, r3
 8102f98:	f7ff ff66 	bl	8102e68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102f9c:	4b9b      	ldr	r3, [pc, #620]	; (810320c <HAL_ADC_Init+0x2e0>)
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	099b      	lsrs	r3, r3, #6
 8102fa2:	4a9b      	ldr	r2, [pc, #620]	; (8103210 <HAL_ADC_Init+0x2e4>)
 8102fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8102fa8:	099b      	lsrs	r3, r3, #6
 8102faa:	3301      	adds	r3, #1
 8102fac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102fae:	e002      	b.n	8102fb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102fb0:	68bb      	ldr	r3, [r7, #8]
 8102fb2:	3b01      	subs	r3, #1
 8102fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102fb6:	68bb      	ldr	r3, [r7, #8]
 8102fb8:	2b00      	cmp	r3, #0
 8102fba:	d1f9      	bne.n	8102fb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	4618      	mov	r0, r3
 8102fc2:	f7ff ff65 	bl	8102e90 <LL_ADC_IsInternalRegulatorEnabled>
 8102fc6:	4603      	mov	r3, r0
 8102fc8:	2b00      	cmp	r3, #0
 8102fca:	d10d      	bne.n	8102fe8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fd0:	f043 0210 	orr.w	r2, r3, #16
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102fdc:	f043 0201 	orr.w	r2, r3, #1
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102fe4:	2301      	movs	r3, #1
 8102fe6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	4618      	mov	r0, r3
 8102fee:	f7ff ff76 	bl	8102ede <LL_ADC_REG_IsConversionOngoing>
 8102ff2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ff8:	f003 0310 	and.w	r3, r3, #16
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	f040 8128 	bne.w	8103252 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103002:	697b      	ldr	r3, [r7, #20]
 8103004:	2b00      	cmp	r3, #0
 8103006:	f040 8124 	bne.w	8103252 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810300e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8103012:	f043 0202 	orr.w	r2, r3, #2
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	4618      	mov	r0, r3
 8103020:	f7ff ff4a 	bl	8102eb8 <LL_ADC_IsEnabled>
 8103024:	4603      	mov	r3, r0
 8103026:	2b00      	cmp	r3, #0
 8103028:	d136      	bne.n	8103098 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a79      	ldr	r2, [pc, #484]	; (8103214 <HAL_ADC_Init+0x2e8>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d004      	beq.n	810303e <HAL_ADC_Init+0x112>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a77      	ldr	r2, [pc, #476]	; (8103218 <HAL_ADC_Init+0x2ec>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d10e      	bne.n	810305c <HAL_ADC_Init+0x130>
 810303e:	4875      	ldr	r0, [pc, #468]	; (8103214 <HAL_ADC_Init+0x2e8>)
 8103040:	f7ff ff3a 	bl	8102eb8 <LL_ADC_IsEnabled>
 8103044:	4604      	mov	r4, r0
 8103046:	4874      	ldr	r0, [pc, #464]	; (8103218 <HAL_ADC_Init+0x2ec>)
 8103048:	f7ff ff36 	bl	8102eb8 <LL_ADC_IsEnabled>
 810304c:	4603      	mov	r3, r0
 810304e:	4323      	orrs	r3, r4
 8103050:	2b00      	cmp	r3, #0
 8103052:	bf0c      	ite	eq
 8103054:	2301      	moveq	r3, #1
 8103056:	2300      	movne	r3, #0
 8103058:	b2db      	uxtb	r3, r3
 810305a:	e008      	b.n	810306e <HAL_ADC_Init+0x142>
 810305c:	486f      	ldr	r0, [pc, #444]	; (810321c <HAL_ADC_Init+0x2f0>)
 810305e:	f7ff ff2b 	bl	8102eb8 <LL_ADC_IsEnabled>
 8103062:	4603      	mov	r3, r0
 8103064:	2b00      	cmp	r3, #0
 8103066:	bf0c      	ite	eq
 8103068:	2301      	moveq	r3, #1
 810306a:	2300      	movne	r3, #0
 810306c:	b2db      	uxtb	r3, r3
 810306e:	2b00      	cmp	r3, #0
 8103070:	d012      	beq.n	8103098 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	4a67      	ldr	r2, [pc, #412]	; (8103214 <HAL_ADC_Init+0x2e8>)
 8103078:	4293      	cmp	r3, r2
 810307a:	d004      	beq.n	8103086 <HAL_ADC_Init+0x15a>
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	4a65      	ldr	r2, [pc, #404]	; (8103218 <HAL_ADC_Init+0x2ec>)
 8103082:	4293      	cmp	r3, r2
 8103084:	d101      	bne.n	810308a <HAL_ADC_Init+0x15e>
 8103086:	4a66      	ldr	r2, [pc, #408]	; (8103220 <HAL_ADC_Init+0x2f4>)
 8103088:	e000      	b.n	810308c <HAL_ADC_Init+0x160>
 810308a:	4a66      	ldr	r2, [pc, #408]	; (8103224 <HAL_ADC_Init+0x2f8>)
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	685b      	ldr	r3, [r3, #4]
 8103090:	4619      	mov	r1, r3
 8103092:	4610      	mov	r0, r2
 8103094:	f7ff fdbe 	bl	8102c14 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103098:	f7ff fd86 	bl	8102ba8 <HAL_GetREVID>
 810309c:	4603      	mov	r3, r0
 810309e:	f241 0203 	movw	r2, #4099	; 0x1003
 81030a2:	4293      	cmp	r3, r2
 81030a4:	d914      	bls.n	81030d0 <HAL_ADC_Init+0x1a4>
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	689b      	ldr	r3, [r3, #8]
 81030aa:	2b10      	cmp	r3, #16
 81030ac:	d110      	bne.n	81030d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	7d5b      	ldrb	r3, [r3, #21]
 81030b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81030be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	7f1b      	ldrb	r3, [r3, #28]
 81030c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81030c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030c8:	f043 030c 	orr.w	r3, r3, #12
 81030cc:	61bb      	str	r3, [r7, #24]
 81030ce:	e00d      	b.n	81030ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	7d5b      	ldrb	r3, [r3, #21]
 81030d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81030e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	7f1b      	ldrb	r3, [r3, #28]
 81030e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030e8:	4313      	orrs	r3, r2
 81030ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	7f1b      	ldrb	r3, [r3, #28]
 81030f0:	2b01      	cmp	r3, #1
 81030f2:	d106      	bne.n	8103102 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	6a1b      	ldr	r3, [r3, #32]
 81030f8:	3b01      	subs	r3, #1
 81030fa:	045b      	lsls	r3, r3, #17
 81030fc:	69ba      	ldr	r2, [r7, #24]
 81030fe:	4313      	orrs	r3, r2
 8103100:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103106:	2b00      	cmp	r3, #0
 8103108:	d009      	beq.n	810311e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810310e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103116:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103118:	69ba      	ldr	r2, [r7, #24]
 810311a:	4313      	orrs	r3, r2
 810311c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	68da      	ldr	r2, [r3, #12]
 8103124:	4b40      	ldr	r3, [pc, #256]	; (8103228 <HAL_ADC_Init+0x2fc>)
 8103126:	4013      	ands	r3, r2
 8103128:	687a      	ldr	r2, [r7, #4]
 810312a:	6812      	ldr	r2, [r2, #0]
 810312c:	69b9      	ldr	r1, [r7, #24]
 810312e:	430b      	orrs	r3, r1
 8103130:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	4618      	mov	r0, r3
 8103138:	f7ff fed1 	bl	8102ede <LL_ADC_REG_IsConversionOngoing>
 810313c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4618      	mov	r0, r3
 8103144:	f7ff fede 	bl	8102f04 <LL_ADC_INJ_IsConversionOngoing>
 8103148:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810314a:	693b      	ldr	r3, [r7, #16]
 810314c:	2b00      	cmp	r3, #0
 810314e:	d14c      	bne.n	81031ea <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103150:	68fb      	ldr	r3, [r7, #12]
 8103152:	2b00      	cmp	r3, #0
 8103154:	d149      	bne.n	81031ea <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	7d1b      	ldrb	r3, [r3, #20]
 810315a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8103160:	4313      	orrs	r3, r2
 8103162:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	68db      	ldr	r3, [r3, #12]
 810316a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810316e:	f023 0303 	bic.w	r3, r3, #3
 8103172:	687a      	ldr	r2, [r7, #4]
 8103174:	6812      	ldr	r2, [r2, #0]
 8103176:	69b9      	ldr	r1, [r7, #24]
 8103178:	430b      	orrs	r3, r1
 810317a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103182:	2b01      	cmp	r3, #1
 8103184:	d11b      	bne.n	81031be <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810318a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	691a      	ldr	r2, [r3, #16]
 8103192:	4b26      	ldr	r3, [pc, #152]	; (810322c <HAL_ADC_Init+0x300>)
 8103194:	4013      	ands	r3, r2
 8103196:	687a      	ldr	r2, [r7, #4]
 8103198:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810319a:	3a01      	subs	r2, #1
 810319c:	0411      	lsls	r1, r2, #16
 810319e:	687a      	ldr	r2, [r7, #4]
 81031a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 81031a2:	4311      	orrs	r1, r2
 81031a4:	687a      	ldr	r2, [r7, #4]
 81031a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81031a8:	4311      	orrs	r1, r2
 81031aa:	687a      	ldr	r2, [r7, #4]
 81031ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81031ae:	430a      	orrs	r2, r1
 81031b0:	431a      	orrs	r2, r3
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	f042 0201 	orr.w	r2, r2, #1
 81031ba:	611a      	str	r2, [r3, #16]
 81031bc:	e007      	b.n	81031ce <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	691a      	ldr	r2, [r3, #16]
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	f022 0201 	bic.w	r2, r2, #1
 81031cc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	691b      	ldr	r3, [r3, #16]
 81031d4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	430a      	orrs	r2, r1
 81031e2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81031e4:	6878      	ldr	r0, [r7, #4]
 81031e6:	f000 fb91 	bl	810390c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	68db      	ldr	r3, [r3, #12]
 81031ee:	2b01      	cmp	r3, #1
 81031f0:	d11e      	bne.n	8103230 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031f8:	f023 010f 	bic.w	r1, r3, #15
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	699b      	ldr	r3, [r3, #24]
 8103200:	1e5a      	subs	r2, r3, #1
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	430a      	orrs	r2, r1
 8103208:	631a      	str	r2, [r3, #48]	; 0x30
 810320a:	e019      	b.n	8103240 <HAL_ADC_Init+0x314>
 810320c:	10000000 	.word	0x10000000
 8103210:	053e2d63 	.word	0x053e2d63
 8103214:	40022000 	.word	0x40022000
 8103218:	40022100 	.word	0x40022100
 810321c:	58026000 	.word	0x58026000
 8103220:	40022300 	.word	0x40022300
 8103224:	58026300 	.word	0x58026300
 8103228:	fff0c003 	.word	0xfff0c003
 810322c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	f022 020f 	bic.w	r2, r2, #15
 810323e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103244:	f023 0303 	bic.w	r3, r3, #3
 8103248:	f043 0201 	orr.w	r2, r3, #1
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	655a      	str	r2, [r3, #84]	; 0x54
 8103250:	e007      	b.n	8103262 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103256:	f043 0210 	orr.w	r2, r3, #16
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810325e:	2301      	movs	r3, #1
 8103260:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103262:	7ffb      	ldrb	r3, [r7, #31]
}
 8103264:	4618      	mov	r0, r3
 8103266:	3724      	adds	r7, #36	; 0x24
 8103268:	46bd      	mov	sp, r7
 810326a:	bd90      	pop	{r4, r7, pc}

0810326c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810326c:	b590      	push	{r4, r7, lr}
 810326e:	b0a1      	sub	sp, #132	; 0x84
 8103270:	af00      	add	r7, sp, #0
 8103272:	6078      	str	r0, [r7, #4]
 8103274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103276:	2300      	movs	r3, #0
 8103278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810327c:	2300      	movs	r3, #0
 810327e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103280:	683b      	ldr	r3, [r7, #0]
 8103282:	68db      	ldr	r3, [r3, #12]
 8103284:	4a9d      	ldr	r2, [pc, #628]	; (81034fc <HAL_ADC_ConfigChannel+0x290>)
 8103286:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810328e:	2b01      	cmp	r3, #1
 8103290:	d101      	bne.n	8103296 <HAL_ADC_ConfigChannel+0x2a>
 8103292:	2302      	movs	r3, #2
 8103294:	e321      	b.n	81038da <HAL_ADC_ConfigChannel+0x66e>
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	2201      	movs	r2, #1
 810329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	4618      	mov	r0, r3
 81032a4:	f7ff fe1b 	bl	8102ede <LL_ADC_REG_IsConversionOngoing>
 81032a8:	4603      	mov	r3, r0
 81032aa:	2b00      	cmp	r3, #0
 81032ac:	f040 8306 	bne.w	81038bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81032b0:	683b      	ldr	r3, [r7, #0]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d108      	bne.n	81032ce <HAL_ADC_ConfigChannel+0x62>
 81032bc:	683b      	ldr	r3, [r7, #0]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	0e9b      	lsrs	r3, r3, #26
 81032c2:	f003 031f 	and.w	r3, r3, #31
 81032c6:	2201      	movs	r2, #1
 81032c8:	fa02 f303 	lsl.w	r3, r2, r3
 81032cc:	e016      	b.n	81032fc <HAL_ADC_ConfigChannel+0x90>
 81032ce:	683b      	ldr	r3, [r7, #0]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81032d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81032d6:	fa93 f3a3 	rbit	r3, r3
 81032da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81032dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81032de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81032e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81032e2:	2b00      	cmp	r3, #0
 81032e4:	d101      	bne.n	81032ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81032e6:	2320      	movs	r3, #32
 81032e8:	e003      	b.n	81032f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81032ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81032ec:	fab3 f383 	clz	r3, r3
 81032f0:	b2db      	uxtb	r3, r3
 81032f2:	f003 031f 	and.w	r3, r3, #31
 81032f6:	2201      	movs	r2, #1
 81032f8:	fa02 f303 	lsl.w	r3, r2, r3
 81032fc:	687a      	ldr	r2, [r7, #4]
 81032fe:	6812      	ldr	r2, [r2, #0]
 8103300:	69d1      	ldr	r1, [r2, #28]
 8103302:	687a      	ldr	r2, [r7, #4]
 8103304:	6812      	ldr	r2, [r2, #0]
 8103306:	430b      	orrs	r3, r1
 8103308:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	6818      	ldr	r0, [r3, #0]
 810330e:	683b      	ldr	r3, [r7, #0]
 8103310:	6859      	ldr	r1, [r3, #4]
 8103312:	683b      	ldr	r3, [r7, #0]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	461a      	mov	r2, r3
 8103318:	f7ff fd04 	bl	8102d24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4618      	mov	r0, r3
 8103322:	f7ff fddc 	bl	8102ede <LL_ADC_REG_IsConversionOngoing>
 8103326:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	4618      	mov	r0, r3
 810332e:	f7ff fde9 	bl	8102f04 <LL_ADC_INJ_IsConversionOngoing>
 8103332:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103336:	2b00      	cmp	r3, #0
 8103338:	f040 80b3 	bne.w	81034a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810333c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810333e:	2b00      	cmp	r3, #0
 8103340:	f040 80af 	bne.w	81034a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	6818      	ldr	r0, [r3, #0]
 8103348:	683b      	ldr	r3, [r7, #0]
 810334a:	6819      	ldr	r1, [r3, #0]
 810334c:	683b      	ldr	r3, [r7, #0]
 810334e:	689b      	ldr	r3, [r3, #8]
 8103350:	461a      	mov	r2, r3
 8103352:	f7ff fd13 	bl	8102d7c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103356:	4b6a      	ldr	r3, [pc, #424]	; (8103500 <HAL_ADC_ConfigChannel+0x294>)
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 810335e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103362:	d10b      	bne.n	810337c <HAL_ADC_ConfigChannel+0x110>
 8103364:	683b      	ldr	r3, [r7, #0]
 8103366:	695a      	ldr	r2, [r3, #20]
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	68db      	ldr	r3, [r3, #12]
 810336e:	089b      	lsrs	r3, r3, #2
 8103370:	f003 0307 	and.w	r3, r3, #7
 8103374:	005b      	lsls	r3, r3, #1
 8103376:	fa02 f303 	lsl.w	r3, r2, r3
 810337a:	e01d      	b.n	81033b8 <HAL_ADC_ConfigChannel+0x14c>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	68db      	ldr	r3, [r3, #12]
 8103382:	f003 0310 	and.w	r3, r3, #16
 8103386:	2b00      	cmp	r3, #0
 8103388:	d10b      	bne.n	81033a2 <HAL_ADC_ConfigChannel+0x136>
 810338a:	683b      	ldr	r3, [r7, #0]
 810338c:	695a      	ldr	r2, [r3, #20]
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	68db      	ldr	r3, [r3, #12]
 8103394:	089b      	lsrs	r3, r3, #2
 8103396:	f003 0307 	and.w	r3, r3, #7
 810339a:	005b      	lsls	r3, r3, #1
 810339c:	fa02 f303 	lsl.w	r3, r2, r3
 81033a0:	e00a      	b.n	81033b8 <HAL_ADC_ConfigChannel+0x14c>
 81033a2:	683b      	ldr	r3, [r7, #0]
 81033a4:	695a      	ldr	r2, [r3, #20]
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	68db      	ldr	r3, [r3, #12]
 81033ac:	089b      	lsrs	r3, r3, #2
 81033ae:	f003 0304 	and.w	r3, r3, #4
 81033b2:	005b      	lsls	r3, r3, #1
 81033b4:	fa02 f303 	lsl.w	r3, r2, r3
 81033b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81033ba:	683b      	ldr	r3, [r7, #0]
 81033bc:	691b      	ldr	r3, [r3, #16]
 81033be:	2b04      	cmp	r3, #4
 81033c0:	d027      	beq.n	8103412 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	6818      	ldr	r0, [r3, #0]
 81033c6:	683b      	ldr	r3, [r7, #0]
 81033c8:	6919      	ldr	r1, [r3, #16]
 81033ca:	683b      	ldr	r3, [r7, #0]
 81033cc:	681a      	ldr	r2, [r3, #0]
 81033ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81033d0:	f7ff fc54 	bl	8102c7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	6818      	ldr	r0, [r3, #0]
 81033d8:	683b      	ldr	r3, [r7, #0]
 81033da:	6919      	ldr	r1, [r3, #16]
 81033dc:	683b      	ldr	r3, [r7, #0]
 81033de:	7e5b      	ldrb	r3, [r3, #25]
 81033e0:	2b01      	cmp	r3, #1
 81033e2:	d102      	bne.n	81033ea <HAL_ADC_ConfigChannel+0x17e>
 81033e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81033e8:	e000      	b.n	81033ec <HAL_ADC_ConfigChannel+0x180>
 81033ea:	2300      	movs	r3, #0
 81033ec:	461a      	mov	r2, r3
 81033ee:	f7ff fc7e 	bl	8102cee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	6818      	ldr	r0, [r3, #0]
 81033f6:	683b      	ldr	r3, [r7, #0]
 81033f8:	6919      	ldr	r1, [r3, #16]
 81033fa:	683b      	ldr	r3, [r7, #0]
 81033fc:	7e1b      	ldrb	r3, [r3, #24]
 81033fe:	2b01      	cmp	r3, #1
 8103400:	d102      	bne.n	8103408 <HAL_ADC_ConfigChannel+0x19c>
 8103402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103406:	e000      	b.n	810340a <HAL_ADC_ConfigChannel+0x19e>
 8103408:	2300      	movs	r3, #0
 810340a:	461a      	mov	r2, r3
 810340c:	f7ff fc56 	bl	8102cbc <LL_ADC_SetDataRightShift>
 8103410:	e047      	b.n	81034a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810341c:	683b      	ldr	r3, [r7, #0]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	069b      	lsls	r3, r3, #26
 8103422:	429a      	cmp	r2, r3
 8103424:	d107      	bne.n	8103436 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103434:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810343c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103440:	683b      	ldr	r3, [r7, #0]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	069b      	lsls	r3, r3, #26
 8103446:	429a      	cmp	r2, r3
 8103448:	d107      	bne.n	810345a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103458:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103464:	683b      	ldr	r3, [r7, #0]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	069b      	lsls	r3, r3, #26
 810346a:	429a      	cmp	r2, r3
 810346c:	d107      	bne.n	810347e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810347c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103488:	683b      	ldr	r3, [r7, #0]
 810348a:	681b      	ldr	r3, [r3, #0]
 810348c:	069b      	lsls	r3, r3, #26
 810348e:	429a      	cmp	r2, r3
 8103490:	d107      	bne.n	81034a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	681b      	ldr	r3, [r3, #0]
 8103496:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81034a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	4618      	mov	r0, r3
 81034a8:	f7ff fd06 	bl	8102eb8 <LL_ADC_IsEnabled>
 81034ac:	4603      	mov	r3, r0
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	f040 820d 	bne.w	81038ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	6818      	ldr	r0, [r3, #0]
 81034b8:	683b      	ldr	r3, [r7, #0]
 81034ba:	6819      	ldr	r1, [r3, #0]
 81034bc:	683b      	ldr	r3, [r7, #0]
 81034be:	68db      	ldr	r3, [r3, #12]
 81034c0:	461a      	mov	r2, r3
 81034c2:	f7ff fc87 	bl	8102dd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81034c6:	683b      	ldr	r3, [r7, #0]
 81034c8:	68db      	ldr	r3, [r3, #12]
 81034ca:	4a0c      	ldr	r2, [pc, #48]	; (81034fc <HAL_ADC_ConfigChannel+0x290>)
 81034cc:	4293      	cmp	r3, r2
 81034ce:	f040 8133 	bne.w	8103738 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81034d6:	683b      	ldr	r3, [r7, #0]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81034de:	2b00      	cmp	r3, #0
 81034e0:	d110      	bne.n	8103504 <HAL_ADC_ConfigChannel+0x298>
 81034e2:	683b      	ldr	r3, [r7, #0]
 81034e4:	681b      	ldr	r3, [r3, #0]
 81034e6:	0e9b      	lsrs	r3, r3, #26
 81034e8:	3301      	adds	r3, #1
 81034ea:	f003 031f 	and.w	r3, r3, #31
 81034ee:	2b09      	cmp	r3, #9
 81034f0:	bf94      	ite	ls
 81034f2:	2301      	movls	r3, #1
 81034f4:	2300      	movhi	r3, #0
 81034f6:	b2db      	uxtb	r3, r3
 81034f8:	e01e      	b.n	8103538 <HAL_ADC_ConfigChannel+0x2cc>
 81034fa:	bf00      	nop
 81034fc:	47ff0000 	.word	0x47ff0000
 8103500:	5c001000 	.word	0x5c001000
 8103504:	683b      	ldr	r3, [r7, #0]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810350a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810350c:	fa93 f3a3 	rbit	r3, r3
 8103510:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103514:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103518:	2b00      	cmp	r3, #0
 810351a:	d101      	bne.n	8103520 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 810351c:	2320      	movs	r3, #32
 810351e:	e003      	b.n	8103528 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103522:	fab3 f383 	clz	r3, r3
 8103526:	b2db      	uxtb	r3, r3
 8103528:	3301      	adds	r3, #1
 810352a:	f003 031f 	and.w	r3, r3, #31
 810352e:	2b09      	cmp	r3, #9
 8103530:	bf94      	ite	ls
 8103532:	2301      	movls	r3, #1
 8103534:	2300      	movhi	r3, #0
 8103536:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103538:	2b00      	cmp	r3, #0
 810353a:	d079      	beq.n	8103630 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810353c:	683b      	ldr	r3, [r7, #0]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103544:	2b00      	cmp	r3, #0
 8103546:	d107      	bne.n	8103558 <HAL_ADC_ConfigChannel+0x2ec>
 8103548:	683b      	ldr	r3, [r7, #0]
 810354a:	681b      	ldr	r3, [r3, #0]
 810354c:	0e9b      	lsrs	r3, r3, #26
 810354e:	3301      	adds	r3, #1
 8103550:	069b      	lsls	r3, r3, #26
 8103552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103556:	e015      	b.n	8103584 <HAL_ADC_ConfigChannel+0x318>
 8103558:	683b      	ldr	r3, [r7, #0]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103560:	fa93 f3a3 	rbit	r3, r3
 8103564:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103568:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 810356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810356c:	2b00      	cmp	r3, #0
 810356e:	d101      	bne.n	8103574 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103570:	2320      	movs	r3, #32
 8103572:	e003      	b.n	810357c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103576:	fab3 f383 	clz	r3, r3
 810357a:	b2db      	uxtb	r3, r3
 810357c:	3301      	adds	r3, #1
 810357e:	069b      	lsls	r3, r3, #26
 8103580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103584:	683b      	ldr	r3, [r7, #0]
 8103586:	681b      	ldr	r3, [r3, #0]
 8103588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810358c:	2b00      	cmp	r3, #0
 810358e:	d109      	bne.n	81035a4 <HAL_ADC_ConfigChannel+0x338>
 8103590:	683b      	ldr	r3, [r7, #0]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	0e9b      	lsrs	r3, r3, #26
 8103596:	3301      	adds	r3, #1
 8103598:	f003 031f 	and.w	r3, r3, #31
 810359c:	2101      	movs	r1, #1
 810359e:	fa01 f303 	lsl.w	r3, r1, r3
 81035a2:	e017      	b.n	81035d4 <HAL_ADC_ConfigChannel+0x368>
 81035a4:	683b      	ldr	r3, [r7, #0]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81035aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81035ac:	fa93 f3a3 	rbit	r3, r3
 81035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 81035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81035b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 81035b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81035b8:	2b00      	cmp	r3, #0
 81035ba:	d101      	bne.n	81035c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 81035bc:	2320      	movs	r3, #32
 81035be:	e003      	b.n	81035c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 81035c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81035c2:	fab3 f383 	clz	r3, r3
 81035c6:	b2db      	uxtb	r3, r3
 81035c8:	3301      	adds	r3, #1
 81035ca:	f003 031f 	and.w	r3, r3, #31
 81035ce:	2101      	movs	r1, #1
 81035d0:	fa01 f303 	lsl.w	r3, r1, r3
 81035d4:	ea42 0103 	orr.w	r1, r2, r3
 81035d8:	683b      	ldr	r3, [r7, #0]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	d10a      	bne.n	81035fa <HAL_ADC_ConfigChannel+0x38e>
 81035e4:	683b      	ldr	r3, [r7, #0]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	0e9b      	lsrs	r3, r3, #26
 81035ea:	3301      	adds	r3, #1
 81035ec:	f003 021f 	and.w	r2, r3, #31
 81035f0:	4613      	mov	r3, r2
 81035f2:	005b      	lsls	r3, r3, #1
 81035f4:	4413      	add	r3, r2
 81035f6:	051b      	lsls	r3, r3, #20
 81035f8:	e018      	b.n	810362c <HAL_ADC_ConfigChannel+0x3c0>
 81035fa:	683b      	ldr	r3, [r7, #0]
 81035fc:	681b      	ldr	r3, [r3, #0]
 81035fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103602:	fa93 f3a3 	rbit	r3, r3
 8103606:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810360a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 810360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810360e:	2b00      	cmp	r3, #0
 8103610:	d101      	bne.n	8103616 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103612:	2320      	movs	r3, #32
 8103614:	e003      	b.n	810361e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103618:	fab3 f383 	clz	r3, r3
 810361c:	b2db      	uxtb	r3, r3
 810361e:	3301      	adds	r3, #1
 8103620:	f003 021f 	and.w	r2, r3, #31
 8103624:	4613      	mov	r3, r2
 8103626:	005b      	lsls	r3, r3, #1
 8103628:	4413      	add	r3, r2
 810362a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810362c:	430b      	orrs	r3, r1
 810362e:	e07e      	b.n	810372e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103630:	683b      	ldr	r3, [r7, #0]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103638:	2b00      	cmp	r3, #0
 810363a:	d107      	bne.n	810364c <HAL_ADC_ConfigChannel+0x3e0>
 810363c:	683b      	ldr	r3, [r7, #0]
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	0e9b      	lsrs	r3, r3, #26
 8103642:	3301      	adds	r3, #1
 8103644:	069b      	lsls	r3, r3, #26
 8103646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810364a:	e015      	b.n	8103678 <HAL_ADC_ConfigChannel+0x40c>
 810364c:	683b      	ldr	r3, [r7, #0]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103654:	fa93 f3a3 	rbit	r3, r3
 8103658:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 810365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 810365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103660:	2b00      	cmp	r3, #0
 8103662:	d101      	bne.n	8103668 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103664:	2320      	movs	r3, #32
 8103666:	e003      	b.n	8103670 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810366a:	fab3 f383 	clz	r3, r3
 810366e:	b2db      	uxtb	r3, r3
 8103670:	3301      	adds	r3, #1
 8103672:	069b      	lsls	r3, r3, #26
 8103674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103678:	683b      	ldr	r3, [r7, #0]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103680:	2b00      	cmp	r3, #0
 8103682:	d109      	bne.n	8103698 <HAL_ADC_ConfigChannel+0x42c>
 8103684:	683b      	ldr	r3, [r7, #0]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	0e9b      	lsrs	r3, r3, #26
 810368a:	3301      	adds	r3, #1
 810368c:	f003 031f 	and.w	r3, r3, #31
 8103690:	2101      	movs	r1, #1
 8103692:	fa01 f303 	lsl.w	r3, r1, r3
 8103696:	e017      	b.n	81036c8 <HAL_ADC_ConfigChannel+0x45c>
 8103698:	683b      	ldr	r3, [r7, #0]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810369e:	69fb      	ldr	r3, [r7, #28]
 81036a0:	fa93 f3a3 	rbit	r3, r3
 81036a4:	61bb      	str	r3, [r7, #24]
  return result;
 81036a6:	69bb      	ldr	r3, [r7, #24]
 81036a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81036aa:	6a3b      	ldr	r3, [r7, #32]
 81036ac:	2b00      	cmp	r3, #0
 81036ae:	d101      	bne.n	81036b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 81036b0:	2320      	movs	r3, #32
 81036b2:	e003      	b.n	81036bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 81036b4:	6a3b      	ldr	r3, [r7, #32]
 81036b6:	fab3 f383 	clz	r3, r3
 81036ba:	b2db      	uxtb	r3, r3
 81036bc:	3301      	adds	r3, #1
 81036be:	f003 031f 	and.w	r3, r3, #31
 81036c2:	2101      	movs	r1, #1
 81036c4:	fa01 f303 	lsl.w	r3, r1, r3
 81036c8:	ea42 0103 	orr.w	r1, r2, r3
 81036cc:	683b      	ldr	r3, [r7, #0]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81036d4:	2b00      	cmp	r3, #0
 81036d6:	d10d      	bne.n	81036f4 <HAL_ADC_ConfigChannel+0x488>
 81036d8:	683b      	ldr	r3, [r7, #0]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	0e9b      	lsrs	r3, r3, #26
 81036de:	3301      	adds	r3, #1
 81036e0:	f003 021f 	and.w	r2, r3, #31
 81036e4:	4613      	mov	r3, r2
 81036e6:	005b      	lsls	r3, r3, #1
 81036e8:	4413      	add	r3, r2
 81036ea:	3b1e      	subs	r3, #30
 81036ec:	051b      	lsls	r3, r3, #20
 81036ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81036f2:	e01b      	b.n	810372c <HAL_ADC_ConfigChannel+0x4c0>
 81036f4:	683b      	ldr	r3, [r7, #0]
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81036fa:	693b      	ldr	r3, [r7, #16]
 81036fc:	fa93 f3a3 	rbit	r3, r3
 8103700:	60fb      	str	r3, [r7, #12]
  return result;
 8103702:	68fb      	ldr	r3, [r7, #12]
 8103704:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103706:	697b      	ldr	r3, [r7, #20]
 8103708:	2b00      	cmp	r3, #0
 810370a:	d101      	bne.n	8103710 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 810370c:	2320      	movs	r3, #32
 810370e:	e003      	b.n	8103718 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103710:	697b      	ldr	r3, [r7, #20]
 8103712:	fab3 f383 	clz	r3, r3
 8103716:	b2db      	uxtb	r3, r3
 8103718:	3301      	adds	r3, #1
 810371a:	f003 021f 	and.w	r2, r3, #31
 810371e:	4613      	mov	r3, r2
 8103720:	005b      	lsls	r3, r3, #1
 8103722:	4413      	add	r3, r2
 8103724:	3b1e      	subs	r3, #30
 8103726:	051b      	lsls	r3, r3, #20
 8103728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810372c:	430b      	orrs	r3, r1
 810372e:	683a      	ldr	r2, [r7, #0]
 8103730:	6892      	ldr	r2, [r2, #8]
 8103732:	4619      	mov	r1, r3
 8103734:	f7ff fb22 	bl	8102d7c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103738:	683b      	ldr	r3, [r7, #0]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	2b00      	cmp	r3, #0
 810373e:	f280 80c6 	bge.w	81038ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a67      	ldr	r2, [pc, #412]	; (81038e4 <HAL_ADC_ConfigChannel+0x678>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d004      	beq.n	8103756 <HAL_ADC_ConfigChannel+0x4ea>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a65      	ldr	r2, [pc, #404]	; (81038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8103752:	4293      	cmp	r3, r2
 8103754:	d101      	bne.n	810375a <HAL_ADC_ConfigChannel+0x4ee>
 8103756:	4b65      	ldr	r3, [pc, #404]	; (81038ec <HAL_ADC_ConfigChannel+0x680>)
 8103758:	e000      	b.n	810375c <HAL_ADC_ConfigChannel+0x4f0>
 810375a:	4b65      	ldr	r3, [pc, #404]	; (81038f0 <HAL_ADC_ConfigChannel+0x684>)
 810375c:	4618      	mov	r0, r3
 810375e:	f7ff fa7f 	bl	8102c60 <LL_ADC_GetCommonPathInternalCh>
 8103762:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	4a5e      	ldr	r2, [pc, #376]	; (81038e4 <HAL_ADC_ConfigChannel+0x678>)
 810376a:	4293      	cmp	r3, r2
 810376c:	d004      	beq.n	8103778 <HAL_ADC_ConfigChannel+0x50c>
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	681b      	ldr	r3, [r3, #0]
 8103772:	4a5d      	ldr	r2, [pc, #372]	; (81038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8103774:	4293      	cmp	r3, r2
 8103776:	d10e      	bne.n	8103796 <HAL_ADC_ConfigChannel+0x52a>
 8103778:	485a      	ldr	r0, [pc, #360]	; (81038e4 <HAL_ADC_ConfigChannel+0x678>)
 810377a:	f7ff fb9d 	bl	8102eb8 <LL_ADC_IsEnabled>
 810377e:	4604      	mov	r4, r0
 8103780:	4859      	ldr	r0, [pc, #356]	; (81038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8103782:	f7ff fb99 	bl	8102eb8 <LL_ADC_IsEnabled>
 8103786:	4603      	mov	r3, r0
 8103788:	4323      	orrs	r3, r4
 810378a:	2b00      	cmp	r3, #0
 810378c:	bf0c      	ite	eq
 810378e:	2301      	moveq	r3, #1
 8103790:	2300      	movne	r3, #0
 8103792:	b2db      	uxtb	r3, r3
 8103794:	e008      	b.n	81037a8 <HAL_ADC_ConfigChannel+0x53c>
 8103796:	4857      	ldr	r0, [pc, #348]	; (81038f4 <HAL_ADC_ConfigChannel+0x688>)
 8103798:	f7ff fb8e 	bl	8102eb8 <LL_ADC_IsEnabled>
 810379c:	4603      	mov	r3, r0
 810379e:	2b00      	cmp	r3, #0
 81037a0:	bf0c      	ite	eq
 81037a2:	2301      	moveq	r3, #1
 81037a4:	2300      	movne	r3, #0
 81037a6:	b2db      	uxtb	r3, r3
 81037a8:	2b00      	cmp	r3, #0
 81037aa:	d07d      	beq.n	81038a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81037ac:	683b      	ldr	r3, [r7, #0]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4a51      	ldr	r2, [pc, #324]	; (81038f8 <HAL_ADC_ConfigChannel+0x68c>)
 81037b2:	4293      	cmp	r3, r2
 81037b4:	d130      	bne.n	8103818 <HAL_ADC_ConfigChannel+0x5ac>
 81037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81037b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81037bc:	2b00      	cmp	r3, #0
 81037be:	d12b      	bne.n	8103818 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	4a4b      	ldr	r2, [pc, #300]	; (81038f4 <HAL_ADC_ConfigChannel+0x688>)
 81037c6:	4293      	cmp	r3, r2
 81037c8:	f040 8081 	bne.w	81038ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a44      	ldr	r2, [pc, #272]	; (81038e4 <HAL_ADC_ConfigChannel+0x678>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d004      	beq.n	81037e0 <HAL_ADC_ConfigChannel+0x574>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a43      	ldr	r2, [pc, #268]	; (81038e8 <HAL_ADC_ConfigChannel+0x67c>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d101      	bne.n	81037e4 <HAL_ADC_ConfigChannel+0x578>
 81037e0:	4a42      	ldr	r2, [pc, #264]	; (81038ec <HAL_ADC_ConfigChannel+0x680>)
 81037e2:	e000      	b.n	81037e6 <HAL_ADC_ConfigChannel+0x57a>
 81037e4:	4a42      	ldr	r2, [pc, #264]	; (81038f0 <HAL_ADC_ConfigChannel+0x684>)
 81037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81037e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81037ec:	4619      	mov	r1, r3
 81037ee:	4610      	mov	r0, r2
 81037f0:	f7ff fa23 	bl	8102c3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81037f4:	4b41      	ldr	r3, [pc, #260]	; (81038fc <HAL_ADC_ConfigChannel+0x690>)
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	099b      	lsrs	r3, r3, #6
 81037fa:	4a41      	ldr	r2, [pc, #260]	; (8103900 <HAL_ADC_ConfigChannel+0x694>)
 81037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8103800:	099b      	lsrs	r3, r3, #6
 8103802:	3301      	adds	r3, #1
 8103804:	005b      	lsls	r3, r3, #1
 8103806:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103808:	e002      	b.n	8103810 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 810380a:	68bb      	ldr	r3, [r7, #8]
 810380c:	3b01      	subs	r3, #1
 810380e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103810:	68bb      	ldr	r3, [r7, #8]
 8103812:	2b00      	cmp	r3, #0
 8103814:	d1f9      	bne.n	810380a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103816:	e05a      	b.n	81038ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103818:	683b      	ldr	r3, [r7, #0]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	4a39      	ldr	r2, [pc, #228]	; (8103904 <HAL_ADC_ConfigChannel+0x698>)
 810381e:	4293      	cmp	r3, r2
 8103820:	d11e      	bne.n	8103860 <HAL_ADC_ConfigChannel+0x5f4>
 8103822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103828:	2b00      	cmp	r3, #0
 810382a:	d119      	bne.n	8103860 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	4a30      	ldr	r2, [pc, #192]	; (81038f4 <HAL_ADC_ConfigChannel+0x688>)
 8103832:	4293      	cmp	r3, r2
 8103834:	d14b      	bne.n	81038ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	4a2a      	ldr	r2, [pc, #168]	; (81038e4 <HAL_ADC_ConfigChannel+0x678>)
 810383c:	4293      	cmp	r3, r2
 810383e:	d004      	beq.n	810384a <HAL_ADC_ConfigChannel+0x5de>
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	4a28      	ldr	r2, [pc, #160]	; (81038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8103846:	4293      	cmp	r3, r2
 8103848:	d101      	bne.n	810384e <HAL_ADC_ConfigChannel+0x5e2>
 810384a:	4a28      	ldr	r2, [pc, #160]	; (81038ec <HAL_ADC_ConfigChannel+0x680>)
 810384c:	e000      	b.n	8103850 <HAL_ADC_ConfigChannel+0x5e4>
 810384e:	4a28      	ldr	r2, [pc, #160]	; (81038f0 <HAL_ADC_ConfigChannel+0x684>)
 8103850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103856:	4619      	mov	r1, r3
 8103858:	4610      	mov	r0, r2
 810385a:	f7ff f9ee 	bl	8102c3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810385e:	e036      	b.n	81038ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103860:	683b      	ldr	r3, [r7, #0]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	4a28      	ldr	r2, [pc, #160]	; (8103908 <HAL_ADC_ConfigChannel+0x69c>)
 8103866:	4293      	cmp	r3, r2
 8103868:	d131      	bne.n	81038ce <HAL_ADC_ConfigChannel+0x662>
 810386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810386c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103870:	2b00      	cmp	r3, #0
 8103872:	d12c      	bne.n	81038ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	4a1e      	ldr	r2, [pc, #120]	; (81038f4 <HAL_ADC_ConfigChannel+0x688>)
 810387a:	4293      	cmp	r3, r2
 810387c:	d127      	bne.n	81038ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	681b      	ldr	r3, [r3, #0]
 8103882:	4a18      	ldr	r2, [pc, #96]	; (81038e4 <HAL_ADC_ConfigChannel+0x678>)
 8103884:	4293      	cmp	r3, r2
 8103886:	d004      	beq.n	8103892 <HAL_ADC_ConfigChannel+0x626>
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	4a16      	ldr	r2, [pc, #88]	; (81038e8 <HAL_ADC_ConfigChannel+0x67c>)
 810388e:	4293      	cmp	r3, r2
 8103890:	d101      	bne.n	8103896 <HAL_ADC_ConfigChannel+0x62a>
 8103892:	4a16      	ldr	r2, [pc, #88]	; (81038ec <HAL_ADC_ConfigChannel+0x680>)
 8103894:	e000      	b.n	8103898 <HAL_ADC_ConfigChannel+0x62c>
 8103896:	4a16      	ldr	r2, [pc, #88]	; (81038f0 <HAL_ADC_ConfigChannel+0x684>)
 8103898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810389a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810389e:	4619      	mov	r1, r3
 81038a0:	4610      	mov	r0, r2
 81038a2:	f7ff f9ca 	bl	8102c3a <LL_ADC_SetCommonPathInternalCh>
 81038a6:	e012      	b.n	81038ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038ac:	f043 0220 	orr.w	r2, r3, #32
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 81038b4:	2301      	movs	r3, #1
 81038b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 81038ba:	e008      	b.n	81038ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038c0:	f043 0220 	orr.w	r2, r3, #32
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81038c8:	2301      	movs	r3, #1
 81038ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	2200      	movs	r2, #0
 81038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81038d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 81038da:	4618      	mov	r0, r3
 81038dc:	3784      	adds	r7, #132	; 0x84
 81038de:	46bd      	mov	sp, r7
 81038e0:	bd90      	pop	{r4, r7, pc}
 81038e2:	bf00      	nop
 81038e4:	40022000 	.word	0x40022000
 81038e8:	40022100 	.word	0x40022100
 81038ec:	40022300 	.word	0x40022300
 81038f0:	58026300 	.word	0x58026300
 81038f4:	58026000 	.word	0x58026000
 81038f8:	cb840000 	.word	0xcb840000
 81038fc:	10000000 	.word	0x10000000
 8103900:	053e2d63 	.word	0x053e2d63
 8103904:	c7520000 	.word	0xc7520000
 8103908:	cfb80000 	.word	0xcfb80000

0810390c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810390c:	b580      	push	{r7, lr}
 810390e:	b084      	sub	sp, #16
 8103910:	af00      	add	r7, sp, #0
 8103912:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	4a79      	ldr	r2, [pc, #484]	; (8103b00 <ADC_ConfigureBoostMode+0x1f4>)
 810391a:	4293      	cmp	r3, r2
 810391c:	d004      	beq.n	8103928 <ADC_ConfigureBoostMode+0x1c>
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	681b      	ldr	r3, [r3, #0]
 8103922:	4a78      	ldr	r2, [pc, #480]	; (8103b04 <ADC_ConfigureBoostMode+0x1f8>)
 8103924:	4293      	cmp	r3, r2
 8103926:	d109      	bne.n	810393c <ADC_ConfigureBoostMode+0x30>
 8103928:	4b77      	ldr	r3, [pc, #476]	; (8103b08 <ADC_ConfigureBoostMode+0x1fc>)
 810392a:	689b      	ldr	r3, [r3, #8]
 810392c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103930:	2b00      	cmp	r3, #0
 8103932:	bf14      	ite	ne
 8103934:	2301      	movne	r3, #1
 8103936:	2300      	moveq	r3, #0
 8103938:	b2db      	uxtb	r3, r3
 810393a:	e008      	b.n	810394e <ADC_ConfigureBoostMode+0x42>
 810393c:	4b73      	ldr	r3, [pc, #460]	; (8103b0c <ADC_ConfigureBoostMode+0x200>)
 810393e:	689b      	ldr	r3, [r3, #8]
 8103940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103944:	2b00      	cmp	r3, #0
 8103946:	bf14      	ite	ne
 8103948:	2301      	movne	r3, #1
 810394a:	2300      	moveq	r3, #0
 810394c:	b2db      	uxtb	r3, r3
 810394e:	2b00      	cmp	r3, #0
 8103950:	d01c      	beq.n	810398c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103952:	f001 ff6f 	bl	8105834 <HAL_RCC_GetHCLKFreq>
 8103956:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	685b      	ldr	r3, [r3, #4]
 810395c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103960:	d010      	beq.n	8103984 <ADC_ConfigureBoostMode+0x78>
 8103962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103966:	d871      	bhi.n	8103a4c <ADC_ConfigureBoostMode+0x140>
 8103968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810396c:	d002      	beq.n	8103974 <ADC_ConfigureBoostMode+0x68>
 810396e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103972:	d16b      	bne.n	8103a4c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	685b      	ldr	r3, [r3, #4]
 8103978:	0c1b      	lsrs	r3, r3, #16
 810397a:	68fa      	ldr	r2, [r7, #12]
 810397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103980:	60fb      	str	r3, [r7, #12]
        break;
 8103982:	e066      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103984:	68fb      	ldr	r3, [r7, #12]
 8103986:	089b      	lsrs	r3, r3, #2
 8103988:	60fb      	str	r3, [r7, #12]
        break;
 810398a:	e062      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 810398c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103990:	f002 ff1e 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8103994:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	685b      	ldr	r3, [r3, #4]
 810399a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810399e:	d051      	beq.n	8103a44 <ADC_ConfigureBoostMode+0x138>
 81039a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81039a4:	d854      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81039aa:	d047      	beq.n	8103a3c <ADC_ConfigureBoostMode+0x130>
 81039ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81039b0:	d84e      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81039b6:	d03d      	beq.n	8103a34 <ADC_ConfigureBoostMode+0x128>
 81039b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81039bc:	d848      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81039c2:	d033      	beq.n	8103a2c <ADC_ConfigureBoostMode+0x120>
 81039c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81039c8:	d842      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81039ce:	d029      	beq.n	8103a24 <ADC_ConfigureBoostMode+0x118>
 81039d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81039d4:	d83c      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81039da:	d01a      	beq.n	8103a12 <ADC_ConfigureBoostMode+0x106>
 81039dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81039e0:	d836      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81039e6:	d014      	beq.n	8103a12 <ADC_ConfigureBoostMode+0x106>
 81039e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81039ec:	d830      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81039f2:	d00e      	beq.n	8103a12 <ADC_ConfigureBoostMode+0x106>
 81039f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81039f8:	d82a      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 81039fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81039fe:	d008      	beq.n	8103a12 <ADC_ConfigureBoostMode+0x106>
 8103a00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103a04:	d824      	bhi.n	8103a50 <ADC_ConfigureBoostMode+0x144>
 8103a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103a0a:	d002      	beq.n	8103a12 <ADC_ConfigureBoostMode+0x106>
 8103a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103a10:	d11e      	bne.n	8103a50 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	685b      	ldr	r3, [r3, #4]
 8103a16:	0c9b      	lsrs	r3, r3, #18
 8103a18:	005b      	lsls	r3, r3, #1
 8103a1a:	68fa      	ldr	r2, [r7, #12]
 8103a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a20:	60fb      	str	r3, [r7, #12]
        break;
 8103a22:	e016      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103a24:	68fb      	ldr	r3, [r7, #12]
 8103a26:	091b      	lsrs	r3, r3, #4
 8103a28:	60fb      	str	r3, [r7, #12]
        break;
 8103a2a:	e012      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103a2c:	68fb      	ldr	r3, [r7, #12]
 8103a2e:	095b      	lsrs	r3, r3, #5
 8103a30:	60fb      	str	r3, [r7, #12]
        break;
 8103a32:	e00e      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103a34:	68fb      	ldr	r3, [r7, #12]
 8103a36:	099b      	lsrs	r3, r3, #6
 8103a38:	60fb      	str	r3, [r7, #12]
        break;
 8103a3a:	e00a      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103a3c:	68fb      	ldr	r3, [r7, #12]
 8103a3e:	09db      	lsrs	r3, r3, #7
 8103a40:	60fb      	str	r3, [r7, #12]
        break;
 8103a42:	e006      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103a44:	68fb      	ldr	r3, [r7, #12]
 8103a46:	0a1b      	lsrs	r3, r3, #8
 8103a48:	60fb      	str	r3, [r7, #12]
        break;
 8103a4a:	e002      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
        break;
 8103a4c:	bf00      	nop
 8103a4e:	e000      	b.n	8103a52 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103a50:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103a52:	f7ff f8a9 	bl	8102ba8 <HAL_GetREVID>
 8103a56:	4603      	mov	r3, r0
 8103a58:	f241 0203 	movw	r2, #4099	; 0x1003
 8103a5c:	4293      	cmp	r3, r2
 8103a5e:	d815      	bhi.n	8103a8c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103a60:	68fb      	ldr	r3, [r7, #12]
 8103a62:	4a2b      	ldr	r2, [pc, #172]	; (8103b10 <ADC_ConfigureBoostMode+0x204>)
 8103a64:	4293      	cmp	r3, r2
 8103a66:	d908      	bls.n	8103a7a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	689a      	ldr	r2, [r3, #8]
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103a76:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103a78:	e03e      	b.n	8103af8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	689a      	ldr	r2, [r3, #8]
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103a88:	609a      	str	r2, [r3, #8]
}
 8103a8a:	e035      	b.n	8103af8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103a8c:	68fb      	ldr	r3, [r7, #12]
 8103a8e:	085b      	lsrs	r3, r3, #1
 8103a90:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	4a1f      	ldr	r2, [pc, #124]	; (8103b14 <ADC_ConfigureBoostMode+0x208>)
 8103a96:	4293      	cmp	r3, r2
 8103a98:	d808      	bhi.n	8103aac <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	681b      	ldr	r3, [r3, #0]
 8103a9e:	689a      	ldr	r2, [r3, #8]
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103aa8:	609a      	str	r2, [r3, #8]
}
 8103aaa:	e025      	b.n	8103af8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103aac:	68fb      	ldr	r3, [r7, #12]
 8103aae:	4a1a      	ldr	r2, [pc, #104]	; (8103b18 <ADC_ConfigureBoostMode+0x20c>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d80a      	bhi.n	8103aca <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	689b      	ldr	r3, [r3, #8]
 8103aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103ac6:	609a      	str	r2, [r3, #8]
}
 8103ac8:	e016      	b.n	8103af8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103aca:	68fb      	ldr	r3, [r7, #12]
 8103acc:	4a13      	ldr	r2, [pc, #76]	; (8103b1c <ADC_ConfigureBoostMode+0x210>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d80a      	bhi.n	8103ae8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	689b      	ldr	r3, [r3, #8]
 8103ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103ae4:	609a      	str	r2, [r3, #8]
}
 8103ae6:	e007      	b.n	8103af8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	689a      	ldr	r2, [r3, #8]
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103af6:	609a      	str	r2, [r3, #8]
}
 8103af8:	bf00      	nop
 8103afa:	3710      	adds	r7, #16
 8103afc:	46bd      	mov	sp, r7
 8103afe:	bd80      	pop	{r7, pc}
 8103b00:	40022000 	.word	0x40022000
 8103b04:	40022100 	.word	0x40022100
 8103b08:	40022300 	.word	0x40022300
 8103b0c:	58026300 	.word	0x58026300
 8103b10:	01312d00 	.word	0x01312d00
 8103b14:	005f5e10 	.word	0x005f5e10
 8103b18:	00bebc20 	.word	0x00bebc20
 8103b1c:	017d7840 	.word	0x017d7840

08103b20 <LL_ADC_IsEnabled>:
{
 8103b20:	b480      	push	{r7}
 8103b22:	b083      	sub	sp, #12
 8103b24:	af00      	add	r7, sp, #0
 8103b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	689b      	ldr	r3, [r3, #8]
 8103b2c:	f003 0301 	and.w	r3, r3, #1
 8103b30:	2b01      	cmp	r3, #1
 8103b32:	d101      	bne.n	8103b38 <LL_ADC_IsEnabled+0x18>
 8103b34:	2301      	movs	r3, #1
 8103b36:	e000      	b.n	8103b3a <LL_ADC_IsEnabled+0x1a>
 8103b38:	2300      	movs	r3, #0
}
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	370c      	adds	r7, #12
 8103b3e:	46bd      	mov	sp, r7
 8103b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b44:	4770      	bx	lr

08103b46 <LL_ADC_REG_IsConversionOngoing>:
{
 8103b46:	b480      	push	{r7}
 8103b48:	b083      	sub	sp, #12
 8103b4a:	af00      	add	r7, sp, #0
 8103b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	689b      	ldr	r3, [r3, #8]
 8103b52:	f003 0304 	and.w	r3, r3, #4
 8103b56:	2b04      	cmp	r3, #4
 8103b58:	d101      	bne.n	8103b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8103b5a:	2301      	movs	r3, #1
 8103b5c:	e000      	b.n	8103b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103b5e:	2300      	movs	r3, #0
}
 8103b60:	4618      	mov	r0, r3
 8103b62:	370c      	adds	r7, #12
 8103b64:	46bd      	mov	sp, r7
 8103b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b6a:	4770      	bx	lr

08103b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103b6c:	b590      	push	{r4, r7, lr}
 8103b6e:	b09f      	sub	sp, #124	; 0x7c
 8103b70:	af00      	add	r7, sp, #0
 8103b72:	6078      	str	r0, [r7, #4]
 8103b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103b76:	2300      	movs	r3, #0
 8103b78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103b82:	2b01      	cmp	r3, #1
 8103b84:	d101      	bne.n	8103b8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103b86:	2302      	movs	r3, #2
 8103b88:	e0c4      	b.n	8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	2201      	movs	r2, #1
 8103b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103b92:	2300      	movs	r3, #0
 8103b94:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103b96:	2300      	movs	r3, #0
 8103b98:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	681b      	ldr	r3, [r3, #0]
 8103b9e:	4a5f      	ldr	r2, [pc, #380]	; (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103ba0:	4293      	cmp	r3, r2
 8103ba2:	d102      	bne.n	8103baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103ba4:	4b5e      	ldr	r3, [pc, #376]	; (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103ba6:	60bb      	str	r3, [r7, #8]
 8103ba8:	e001      	b.n	8103bae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103baa:	2300      	movs	r3, #0
 8103bac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103bae:	68bb      	ldr	r3, [r7, #8]
 8103bb0:	2b00      	cmp	r3, #0
 8103bb2:	d10b      	bne.n	8103bcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bb8:	f043 0220 	orr.w	r2, r3, #32
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	2200      	movs	r2, #0
 8103bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103bc8:	2301      	movs	r3, #1
 8103bca:	e0a3      	b.n	8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103bcc:	68bb      	ldr	r3, [r7, #8]
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f7ff ffb9 	bl	8103b46 <LL_ADC_REG_IsConversionOngoing>
 8103bd4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	681b      	ldr	r3, [r3, #0]
 8103bda:	4618      	mov	r0, r3
 8103bdc:	f7ff ffb3 	bl	8103b46 <LL_ADC_REG_IsConversionOngoing>
 8103be0:	4603      	mov	r3, r0
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	f040 8085 	bne.w	8103cf2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103bea:	2b00      	cmp	r3, #0
 8103bec:	f040 8081 	bne.w	8103cf2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	4a49      	ldr	r2, [pc, #292]	; (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d004      	beq.n	8103c04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	4a48      	ldr	r2, [pc, #288]	; (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c00:	4293      	cmp	r3, r2
 8103c02:	d101      	bne.n	8103c08 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103c04:	4b47      	ldr	r3, [pc, #284]	; (8103d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103c06:	e000      	b.n	8103c0a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103c08:	4b47      	ldr	r3, [pc, #284]	; (8103d28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103c0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c0c:	683b      	ldr	r3, [r7, #0]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d03b      	beq.n	8103c8c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c16:	689b      	ldr	r3, [r3, #8]
 8103c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103c1c:	683b      	ldr	r3, [r7, #0]
 8103c1e:	685b      	ldr	r3, [r3, #4]
 8103c20:	431a      	orrs	r2, r3
 8103c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	681b      	ldr	r3, [r3, #0]
 8103c2a:	4a3c      	ldr	r2, [pc, #240]	; (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c2c:	4293      	cmp	r3, r2
 8103c2e:	d004      	beq.n	8103c3a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	681b      	ldr	r3, [r3, #0]
 8103c34:	4a3a      	ldr	r2, [pc, #232]	; (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c36:	4293      	cmp	r3, r2
 8103c38:	d10e      	bne.n	8103c58 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103c3a:	4838      	ldr	r0, [pc, #224]	; (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c3c:	f7ff ff70 	bl	8103b20 <LL_ADC_IsEnabled>
 8103c40:	4604      	mov	r4, r0
 8103c42:	4837      	ldr	r0, [pc, #220]	; (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c44:	f7ff ff6c 	bl	8103b20 <LL_ADC_IsEnabled>
 8103c48:	4603      	mov	r3, r0
 8103c4a:	4323      	orrs	r3, r4
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	bf0c      	ite	eq
 8103c50:	2301      	moveq	r3, #1
 8103c52:	2300      	movne	r3, #0
 8103c54:	b2db      	uxtb	r3, r3
 8103c56:	e008      	b.n	8103c6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103c58:	4834      	ldr	r0, [pc, #208]	; (8103d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103c5a:	f7ff ff61 	bl	8103b20 <LL_ADC_IsEnabled>
 8103c5e:	4603      	mov	r3, r0
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	bf0c      	ite	eq
 8103c64:	2301      	moveq	r3, #1
 8103c66:	2300      	movne	r3, #0
 8103c68:	b2db      	uxtb	r3, r3
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d04b      	beq.n	8103d06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c70:	689b      	ldr	r3, [r3, #8]
 8103c72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103c76:	f023 030f 	bic.w	r3, r3, #15
 8103c7a:	683a      	ldr	r2, [r7, #0]
 8103c7c:	6811      	ldr	r1, [r2, #0]
 8103c7e:	683a      	ldr	r2, [r7, #0]
 8103c80:	6892      	ldr	r2, [r2, #8]
 8103c82:	430a      	orrs	r2, r1
 8103c84:	431a      	orrs	r2, r3
 8103c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c8a:	e03c      	b.n	8103d06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c8e:	689b      	ldr	r3, [r3, #8]
 8103c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	4a1f      	ldr	r2, [pc, #124]	; (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c9e:	4293      	cmp	r3, r2
 8103ca0:	d004      	beq.n	8103cac <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	681b      	ldr	r3, [r3, #0]
 8103ca6:	4a1e      	ldr	r2, [pc, #120]	; (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103ca8:	4293      	cmp	r3, r2
 8103caa:	d10e      	bne.n	8103cca <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103cac:	481b      	ldr	r0, [pc, #108]	; (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103cae:	f7ff ff37 	bl	8103b20 <LL_ADC_IsEnabled>
 8103cb2:	4604      	mov	r4, r0
 8103cb4:	481a      	ldr	r0, [pc, #104]	; (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103cb6:	f7ff ff33 	bl	8103b20 <LL_ADC_IsEnabled>
 8103cba:	4603      	mov	r3, r0
 8103cbc:	4323      	orrs	r3, r4
 8103cbe:	2b00      	cmp	r3, #0
 8103cc0:	bf0c      	ite	eq
 8103cc2:	2301      	moveq	r3, #1
 8103cc4:	2300      	movne	r3, #0
 8103cc6:	b2db      	uxtb	r3, r3
 8103cc8:	e008      	b.n	8103cdc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103cca:	4818      	ldr	r0, [pc, #96]	; (8103d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103ccc:	f7ff ff28 	bl	8103b20 <LL_ADC_IsEnabled>
 8103cd0:	4603      	mov	r3, r0
 8103cd2:	2b00      	cmp	r3, #0
 8103cd4:	bf0c      	ite	eq
 8103cd6:	2301      	moveq	r3, #1
 8103cd8:	2300      	movne	r3, #0
 8103cda:	b2db      	uxtb	r3, r3
 8103cdc:	2b00      	cmp	r3, #0
 8103cde:	d012      	beq.n	8103d06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103ce2:	689b      	ldr	r3, [r3, #8]
 8103ce4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103ce8:	f023 030f 	bic.w	r3, r3, #15
 8103cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8103cee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103cf0:	e009      	b.n	8103d06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cf6:	f043 0220 	orr.w	r2, r3, #32
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103cfe:	2301      	movs	r3, #1
 8103d00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103d04:	e000      	b.n	8103d08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103d06:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	2200      	movs	r2, #0
 8103d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103d10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103d14:	4618      	mov	r0, r3
 8103d16:	377c      	adds	r7, #124	; 0x7c
 8103d18:	46bd      	mov	sp, r7
 8103d1a:	bd90      	pop	{r4, r7, pc}
 8103d1c:	40022000 	.word	0x40022000
 8103d20:	40022100 	.word	0x40022100
 8103d24:	40022300 	.word	0x40022300
 8103d28:	58026300 	.word	0x58026300
 8103d2c:	58026000 	.word	0x58026000

08103d30 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103d30:	b580      	push	{r7, lr}
 8103d32:	b082      	sub	sp, #8
 8103d34:	af00      	add	r7, sp, #0
 8103d36:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	2b00      	cmp	r3, #0
 8103d3c:	d003      	beq.n	8103d46 <HAL_CEC_Init+0x16>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d101      	bne.n	8103d4a <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103d46:	2301      	movs	r3, #1
 8103d48:	e050      	b.n	8103dec <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d106      	bne.n	8103d60 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	2200      	movs	r2, #0
 8103d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103d5a:	6878      	ldr	r0, [r7, #4]
 8103d5c:	f7fd fdd2 	bl	8101904 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	2224      	movs	r2, #36	; 0x24
 8103d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	681a      	ldr	r2, [r3, #0]
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	f022 0201 	bic.w	r2, r2, #1
 8103d74:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	685a      	ldr	r2, [r3, #4]
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	689b      	ldr	r3, [r3, #8]
 8103d7e:	431a      	orrs	r2, r3
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	68db      	ldr	r3, [r3, #12]
 8103d84:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d8a:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	695b      	ldr	r3, [r3, #20]
 8103d90:	431a      	orrs	r2, r3
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	699b      	ldr	r3, [r3, #24]
 8103d96:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d9c:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8103da2:	041b      	lsls	r3, r3, #16
 8103da4:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103db0:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103db2:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	695b      	ldr	r3, [r3, #20]
 8103dba:	687a      	ldr	r2, [r7, #4]
 8103dbc:	6812      	ldr	r2, [r2, #0]
 8103dbe:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8103dc2:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8103dc6:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	681a      	ldr	r2, [r3, #0]
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	f042 0201 	orr.w	r2, r2, #1
 8103dd6:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	2200      	movs	r2, #0
 8103ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	2220      	movs	r2, #32
 8103de2:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	2220      	movs	r2, #32
 8103de8:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8103dea:	2300      	movs	r3, #0
}
 8103dec:	4618      	mov	r0, r3
 8103dee:	3708      	adds	r7, #8
 8103df0:	46bd      	mov	sp, r7
 8103df2:	bd80      	pop	{r7, pc}

08103df4 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8103df4:	b580      	push	{r7, lr}
 8103df6:	b084      	sub	sp, #16
 8103df8:	af00      	add	r7, sp, #0
 8103dfa:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	691b      	ldr	r3, [r3, #16]
 8103e02:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d00a      	beq.n	8103e24 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	2280      	movs	r2, #128	; 0x80
 8103e12:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	691a      	ldr	r2, [r3, #16]
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8103e22:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8103e24:	68fb      	ldr	r3, [r7, #12]
 8103e26:	f003 0301 	and.w	r3, r3, #1
 8103e2a:	2b00      	cmp	r3, #0
 8103e2c:	d01c      	beq.n	8103e68 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	2222      	movs	r2, #34	; 0x22
 8103e32:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103e38:	3301      	adds	r3, #1
 8103e3a:	b29a      	uxth	r2, r3
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	68da      	ldr	r2, [r3, #12]
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e4a:	b2d2      	uxtb	r2, r2
 8103e4c:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e52:	1c5a      	adds	r2, r3, #1
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	691a      	ldr	r2, [r3, #16]
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	681b      	ldr	r3, [r3, #0]
 8103e62:	f042 0201 	orr.w	r2, r2, #1
 8103e66:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8103e68:	68fb      	ldr	r3, [r7, #12]
 8103e6a:	f003 0302 	and.w	r3, r3, #2
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d01e      	beq.n	8103eb0 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	691a      	ldr	r2, [r3, #16]
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	f042 0202 	orr.w	r2, r2, #2
 8103e80:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	2220      	movs	r2, #32
 8103e86:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	2200      	movs	r2, #0
 8103e8c:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103e96:	425b      	negs	r3, r3
 8103e98:	441a      	add	r2, r3
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103ea2:	4619      	mov	r1, r3
 8103ea4:	6878      	ldr	r0, [r7, #4]
 8103ea6:	f000 f88c 	bl	8103fc2 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	2200      	movs	r2, #0
 8103eae:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 8103eb0:	68fb      	ldr	r3, [r7, #12]
 8103eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d024      	beq.n	8103f04 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8103ebe:	3b01      	subs	r3, #1
 8103ec0:	b29a      	uxth	r2, r3
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d107      	bne.n	8103ede <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	681a      	ldr	r2, [r3, #0]
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	f042 0204 	orr.w	r2, r2, #4
 8103edc:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ee2:	781a      	ldrb	r2, [r3, #0]
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eee:	1c5a      	adds	r2, r3, #1
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	691a      	ldr	r2, [r3, #16]
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103f02:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 8103f04:	68fb      	ldr	r3, [r7, #12]
 8103f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103f0a:	2b00      	cmp	r3, #0
 8103f0c:	d014      	beq.n	8103f38 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	691a      	ldr	r2, [r3, #16]
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103f1c:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	2220      	movs	r2, #32
 8103f22:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	2200      	movs	r2, #0
 8103f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	2200      	movs	r2, #0
 8103f30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103f32:	6878      	ldr	r0, [r7, #4]
 8103f34:	f000 f83b 	bl	8103fae <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 8103f38:	68fa      	ldr	r2, [r7, #12]
 8103f3a:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8103f3e:	4013      	ands	r3, r2
 8103f40:	2b00      	cmp	r3, #0
 8103f42:	d030      	beq.n	8103fa6 <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	68fa      	ldr	r2, [r7, #12]
 8103f48:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	691b      	ldr	r3, [r3, #16]
 8103f50:	687a      	ldr	r2, [r7, #4]
 8103f52:	6812      	ldr	r2, [r2, #0]
 8103f54:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8103f58:	f043 031c 	orr.w	r3, r3, #28
 8103f5c:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103f5e:	68fb      	ldr	r3, [r7, #12]
 8103f60:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d00e      	beq.n	8103f86 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103f70:	425b      	negs	r3, r3
 8103f72:	441a      	add	r2, r3
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	2200      	movs	r2, #0
 8103f7c:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	2220      	movs	r2, #32
 8103f82:	63da      	str	r2, [r3, #60]	; 0x3c
 8103f84:	e00c      	b.n	8103fa0 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103f8c:	2b00      	cmp	r3, #0
 8103f8e:	d107      	bne.n	8103fa0 <HAL_CEC_IRQHandler+0x1ac>
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8103f96:	2b00      	cmp	r3, #0
 8103f98:	d002      	beq.n	8103fa0 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	2220      	movs	r2, #32
 8103f9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103fa0:	6878      	ldr	r0, [r7, #4]
 8103fa2:	f000 f819 	bl	8103fd8 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8103fa6:	bf00      	nop
 8103fa8:	3710      	adds	r7, #16
 8103faa:	46bd      	mov	sp, r7
 8103fac:	bd80      	pop	{r7, pc}

08103fae <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103fae:	b480      	push	{r7}
 8103fb0:	b083      	sub	sp, #12
 8103fb2:	af00      	add	r7, sp, #0
 8103fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8103fb6:	bf00      	nop
 8103fb8:	370c      	adds	r7, #12
 8103fba:	46bd      	mov	sp, r7
 8103fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc0:	4770      	bx	lr

08103fc2 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8103fc2:	b480      	push	{r7}
 8103fc4:	b083      	sub	sp, #12
 8103fc6:	af00      	add	r7, sp, #0
 8103fc8:	6078      	str	r0, [r7, #4]
 8103fca:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8103fcc:	bf00      	nop
 8103fce:	370c      	adds	r7, #12
 8103fd0:	46bd      	mov	sp, r7
 8103fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fd6:	4770      	bx	lr

08103fd8 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8103fd8:	b480      	push	{r7}
 8103fda:	b083      	sub	sp, #12
 8103fdc:	af00      	add	r7, sp, #0
 8103fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8103fe0:	bf00      	nop
 8103fe2:	370c      	adds	r7, #12
 8103fe4:	46bd      	mov	sp, r7
 8103fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fea:	4770      	bx	lr

08103fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103fec:	b480      	push	{r7}
 8103fee:	b085      	sub	sp, #20
 8103ff0:	af00      	add	r7, sp, #0
 8103ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	f003 0307 	and.w	r3, r3, #7
 8103ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103ffc:	4b0c      	ldr	r3, [pc, #48]	; (8104030 <__NVIC_SetPriorityGrouping+0x44>)
 8103ffe:	68db      	ldr	r3, [r3, #12]
 8104000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104002:	68ba      	ldr	r2, [r7, #8]
 8104004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104008:	4013      	ands	r3, r2
 810400a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810400c:	68fb      	ldr	r3, [r7, #12]
 810400e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104010:	68bb      	ldr	r3, [r7, #8]
 8104012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810401c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810401e:	4a04      	ldr	r2, [pc, #16]	; (8104030 <__NVIC_SetPriorityGrouping+0x44>)
 8104020:	68bb      	ldr	r3, [r7, #8]
 8104022:	60d3      	str	r3, [r2, #12]
}
 8104024:	bf00      	nop
 8104026:	3714      	adds	r7, #20
 8104028:	46bd      	mov	sp, r7
 810402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810402e:	4770      	bx	lr
 8104030:	e000ed00 	.word	0xe000ed00

08104034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104034:	b480      	push	{r7}
 8104036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104038:	4b04      	ldr	r3, [pc, #16]	; (810404c <__NVIC_GetPriorityGrouping+0x18>)
 810403a:	68db      	ldr	r3, [r3, #12]
 810403c:	0a1b      	lsrs	r3, r3, #8
 810403e:	f003 0307 	and.w	r3, r3, #7
}
 8104042:	4618      	mov	r0, r3
 8104044:	46bd      	mov	sp, r7
 8104046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810404a:	4770      	bx	lr
 810404c:	e000ed00 	.word	0xe000ed00

08104050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104050:	b480      	push	{r7}
 8104052:	b083      	sub	sp, #12
 8104054:	af00      	add	r7, sp, #0
 8104056:	4603      	mov	r3, r0
 8104058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810405a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810405e:	2b00      	cmp	r3, #0
 8104060:	db0b      	blt.n	810407a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104062:	88fb      	ldrh	r3, [r7, #6]
 8104064:	f003 021f 	and.w	r2, r3, #31
 8104068:	4907      	ldr	r1, [pc, #28]	; (8104088 <__NVIC_EnableIRQ+0x38>)
 810406a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810406e:	095b      	lsrs	r3, r3, #5
 8104070:	2001      	movs	r0, #1
 8104072:	fa00 f202 	lsl.w	r2, r0, r2
 8104076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810407a:	bf00      	nop
 810407c:	370c      	adds	r7, #12
 810407e:	46bd      	mov	sp, r7
 8104080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104084:	4770      	bx	lr
 8104086:	bf00      	nop
 8104088:	e000e100 	.word	0xe000e100

0810408c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810408c:	b480      	push	{r7}
 810408e:	b083      	sub	sp, #12
 8104090:	af00      	add	r7, sp, #0
 8104092:	4603      	mov	r3, r0
 8104094:	6039      	str	r1, [r7, #0]
 8104096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810409c:	2b00      	cmp	r3, #0
 810409e:	db0a      	blt.n	81040b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81040a0:	683b      	ldr	r3, [r7, #0]
 81040a2:	b2da      	uxtb	r2, r3
 81040a4:	490c      	ldr	r1, [pc, #48]	; (81040d8 <__NVIC_SetPriority+0x4c>)
 81040a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81040aa:	0112      	lsls	r2, r2, #4
 81040ac:	b2d2      	uxtb	r2, r2
 81040ae:	440b      	add	r3, r1
 81040b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81040b4:	e00a      	b.n	81040cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81040b6:	683b      	ldr	r3, [r7, #0]
 81040b8:	b2da      	uxtb	r2, r3
 81040ba:	4908      	ldr	r1, [pc, #32]	; (81040dc <__NVIC_SetPriority+0x50>)
 81040bc:	88fb      	ldrh	r3, [r7, #6]
 81040be:	f003 030f 	and.w	r3, r3, #15
 81040c2:	3b04      	subs	r3, #4
 81040c4:	0112      	lsls	r2, r2, #4
 81040c6:	b2d2      	uxtb	r2, r2
 81040c8:	440b      	add	r3, r1
 81040ca:	761a      	strb	r2, [r3, #24]
}
 81040cc:	bf00      	nop
 81040ce:	370c      	adds	r7, #12
 81040d0:	46bd      	mov	sp, r7
 81040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040d6:	4770      	bx	lr
 81040d8:	e000e100 	.word	0xe000e100
 81040dc:	e000ed00 	.word	0xe000ed00

081040e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81040e0:	b480      	push	{r7}
 81040e2:	b089      	sub	sp, #36	; 0x24
 81040e4:	af00      	add	r7, sp, #0
 81040e6:	60f8      	str	r0, [r7, #12]
 81040e8:	60b9      	str	r1, [r7, #8]
 81040ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	f003 0307 	and.w	r3, r3, #7
 81040f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81040f4:	69fb      	ldr	r3, [r7, #28]
 81040f6:	f1c3 0307 	rsb	r3, r3, #7
 81040fa:	2b04      	cmp	r3, #4
 81040fc:	bf28      	it	cs
 81040fe:	2304      	movcs	r3, #4
 8104100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104102:	69fb      	ldr	r3, [r7, #28]
 8104104:	3304      	adds	r3, #4
 8104106:	2b06      	cmp	r3, #6
 8104108:	d902      	bls.n	8104110 <NVIC_EncodePriority+0x30>
 810410a:	69fb      	ldr	r3, [r7, #28]
 810410c:	3b03      	subs	r3, #3
 810410e:	e000      	b.n	8104112 <NVIC_EncodePriority+0x32>
 8104110:	2300      	movs	r3, #0
 8104112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104114:	f04f 32ff 	mov.w	r2, #4294967295
 8104118:	69bb      	ldr	r3, [r7, #24]
 810411a:	fa02 f303 	lsl.w	r3, r2, r3
 810411e:	43da      	mvns	r2, r3
 8104120:	68bb      	ldr	r3, [r7, #8]
 8104122:	401a      	ands	r2, r3
 8104124:	697b      	ldr	r3, [r7, #20]
 8104126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104128:	f04f 31ff 	mov.w	r1, #4294967295
 810412c:	697b      	ldr	r3, [r7, #20]
 810412e:	fa01 f303 	lsl.w	r3, r1, r3
 8104132:	43d9      	mvns	r1, r3
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104138:	4313      	orrs	r3, r2
         );
}
 810413a:	4618      	mov	r0, r3
 810413c:	3724      	adds	r7, #36	; 0x24
 810413e:	46bd      	mov	sp, r7
 8104140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104144:	4770      	bx	lr
	...

08104148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104148:	b580      	push	{r7, lr}
 810414a:	b082      	sub	sp, #8
 810414c:	af00      	add	r7, sp, #0
 810414e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	3b01      	subs	r3, #1
 8104154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104158:	d301      	bcc.n	810415e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810415a:	2301      	movs	r3, #1
 810415c:	e00f      	b.n	810417e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810415e:	4a0a      	ldr	r2, [pc, #40]	; (8104188 <SysTick_Config+0x40>)
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	3b01      	subs	r3, #1
 8104164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104166:	210f      	movs	r1, #15
 8104168:	f04f 30ff 	mov.w	r0, #4294967295
 810416c:	f7ff ff8e 	bl	810408c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104170:	4b05      	ldr	r3, [pc, #20]	; (8104188 <SysTick_Config+0x40>)
 8104172:	2200      	movs	r2, #0
 8104174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104176:	4b04      	ldr	r3, [pc, #16]	; (8104188 <SysTick_Config+0x40>)
 8104178:	2207      	movs	r2, #7
 810417a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810417c:	2300      	movs	r3, #0
}
 810417e:	4618      	mov	r0, r3
 8104180:	3708      	adds	r7, #8
 8104182:	46bd      	mov	sp, r7
 8104184:	bd80      	pop	{r7, pc}
 8104186:	bf00      	nop
 8104188:	e000e010 	.word	0xe000e010

0810418c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810418c:	b580      	push	{r7, lr}
 810418e:	b082      	sub	sp, #8
 8104190:	af00      	add	r7, sp, #0
 8104192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104194:	6878      	ldr	r0, [r7, #4]
 8104196:	f7ff ff29 	bl	8103fec <__NVIC_SetPriorityGrouping>
}
 810419a:	bf00      	nop
 810419c:	3708      	adds	r7, #8
 810419e:	46bd      	mov	sp, r7
 81041a0:	bd80      	pop	{r7, pc}

081041a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81041a2:	b580      	push	{r7, lr}
 81041a4:	b086      	sub	sp, #24
 81041a6:	af00      	add	r7, sp, #0
 81041a8:	4603      	mov	r3, r0
 81041aa:	60b9      	str	r1, [r7, #8]
 81041ac:	607a      	str	r2, [r7, #4]
 81041ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81041b0:	f7ff ff40 	bl	8104034 <__NVIC_GetPriorityGrouping>
 81041b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81041b6:	687a      	ldr	r2, [r7, #4]
 81041b8:	68b9      	ldr	r1, [r7, #8]
 81041ba:	6978      	ldr	r0, [r7, #20]
 81041bc:	f7ff ff90 	bl	81040e0 <NVIC_EncodePriority>
 81041c0:	4602      	mov	r2, r0
 81041c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81041c6:	4611      	mov	r1, r2
 81041c8:	4618      	mov	r0, r3
 81041ca:	f7ff ff5f 	bl	810408c <__NVIC_SetPriority>
}
 81041ce:	bf00      	nop
 81041d0:	3718      	adds	r7, #24
 81041d2:	46bd      	mov	sp, r7
 81041d4:	bd80      	pop	{r7, pc}

081041d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81041d6:	b580      	push	{r7, lr}
 81041d8:	b082      	sub	sp, #8
 81041da:	af00      	add	r7, sp, #0
 81041dc:	4603      	mov	r3, r0
 81041de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81041e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041e4:	4618      	mov	r0, r3
 81041e6:	f7ff ff33 	bl	8104050 <__NVIC_EnableIRQ>
}
 81041ea:	bf00      	nop
 81041ec:	3708      	adds	r7, #8
 81041ee:	46bd      	mov	sp, r7
 81041f0:	bd80      	pop	{r7, pc}

081041f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81041f2:	b580      	push	{r7, lr}
 81041f4:	b082      	sub	sp, #8
 81041f6:	af00      	add	r7, sp, #0
 81041f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81041fa:	6878      	ldr	r0, [r7, #4]
 81041fc:	f7ff ffa4 	bl	8104148 <SysTick_Config>
 8104200:	4603      	mov	r3, r0
}
 8104202:	4618      	mov	r0, r3
 8104204:	3708      	adds	r7, #8
 8104206:	46bd      	mov	sp, r7
 8104208:	bd80      	pop	{r7, pc}
	...

0810420c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810420c:	b480      	push	{r7}
 810420e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104210:	4b07      	ldr	r3, [pc, #28]	; (8104230 <HAL_GetCurrentCPUID+0x24>)
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	091b      	lsrs	r3, r3, #4
 8104216:	f003 030f 	and.w	r3, r3, #15
 810421a:	2b07      	cmp	r3, #7
 810421c:	d101      	bne.n	8104222 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810421e:	2303      	movs	r3, #3
 8104220:	e000      	b.n	8104224 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104222:	2301      	movs	r3, #1
  }
}
 8104224:	4618      	mov	r0, r3
 8104226:	46bd      	mov	sp, r7
 8104228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810422c:	4770      	bx	lr
 810422e:	bf00      	nop
 8104230:	e000ed00 	.word	0xe000ed00

08104234 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8104234:	b580      	push	{r7, lr}
 8104236:	b086      	sub	sp, #24
 8104238:	af00      	add	r7, sp, #0
 810423a:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	2b00      	cmp	r3, #0
 8104240:	d101      	bne.n	8104246 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8104242:	2301      	movs	r3, #1
 8104244:	e0b4      	b.n	81043b0 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8104246:	4b5c      	ldr	r3, [pc, #368]	; (81043b8 <HAL_DFSDM_ChannelInit+0x184>)
 8104248:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 810424a:	4b5c      	ldr	r3, [pc, #368]	; (81043bc <HAL_DFSDM_ChannelInit+0x188>)
 810424c:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 810424e:	4b5c      	ldr	r3, [pc, #368]	; (81043c0 <HAL_DFSDM_ChannelInit+0x18c>)
 8104250:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	4618      	mov	r0, r3
 8104258:	f000 f8b4 	bl	81043c4 <DFSDM_GetChannelFromInstance>
 810425c:	4603      	mov	r3, r0
 810425e:	009b      	lsls	r3, r3, #2
 8104260:	693a      	ldr	r2, [r7, #16]
 8104262:	4413      	add	r3, r2
 8104264:	681b      	ldr	r3, [r3, #0]
 8104266:	2b00      	cmp	r3, #0
 8104268:	d001      	beq.n	810426e <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 810426a:	2301      	movs	r3, #1
 810426c:	e0a0      	b.n	81043b0 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 810426e:	6878      	ldr	r0, [r7, #4]
 8104270:	f7fd f9e4 	bl	810163c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8104274:	697b      	ldr	r3, [r7, #20]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	1c5a      	adds	r2, r3, #1
 810427a:	697b      	ldr	r3, [r7, #20]
 810427c:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 810427e:	697b      	ldr	r3, [r7, #20]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	2b01      	cmp	r3, #1
 8104284:	d125      	bne.n	81042d2 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8104286:	68fb      	ldr	r3, [r7, #12]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 810428e:	68fb      	ldr	r3, [r7, #12]
 8104290:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8104292:	68fb      	ldr	r3, [r7, #12]
 8104294:	681a      	ldr	r2, [r3, #0]
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	689b      	ldr	r3, [r3, #8]
 810429a:	431a      	orrs	r2, r3
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 81042a8:	68fb      	ldr	r3, [r7, #12]
 81042aa:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	791b      	ldrb	r3, [r3, #4]
 81042b0:	2b01      	cmp	r3, #1
 81042b2:	d108      	bne.n	81042c6 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 81042b4:	68fb      	ldr	r3, [r7, #12]
 81042b6:	681a      	ldr	r2, [r3, #0]
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	68db      	ldr	r3, [r3, #12]
 81042bc:	3b01      	subs	r3, #1
 81042be:	041b      	lsls	r3, r3, #16
 81042c0:	431a      	orrs	r2, r3
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	681a      	ldr	r2, [r3, #0]
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 81042e0:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	6819      	ldr	r1, [r3, #0]
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 81042f0:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 81042f6:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	430a      	orrs	r2, r1
 81042fe:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	681a      	ldr	r2, [r3, #0]
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	f022 020f 	bic.w	r2, r2, #15
 810430e:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	681b      	ldr	r3, [r3, #0]
 8104314:	6819      	ldr	r1, [r3, #0]
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 810431e:	431a      	orrs	r2, r3
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	430a      	orrs	r2, r1
 8104326:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	689a      	ldr	r2, [r3, #8]
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8104336:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	6899      	ldr	r1, [r3, #8]
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104346:	3b01      	subs	r3, #1
 8104348:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 810434a:	431a      	orrs	r2, r3
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	430a      	orrs	r2, r1
 8104352:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	685a      	ldr	r2, [r3, #4]
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	f002 0207 	and.w	r2, r2, #7
 8104362:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	6859      	ldr	r1, [r3, #4]
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810436e:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104374:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8104376:	431a      	orrs	r2, r3
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	430a      	orrs	r2, r1
 810437e:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	681a      	ldr	r2, [r3, #0]
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810438e:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	2201      	movs	r2, #1
 8104394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4618      	mov	r0, r3
 810439e:	f000 f811 	bl	81043c4 <DFSDM_GetChannelFromInstance>
 81043a2:	4603      	mov	r3, r0
 81043a4:	009b      	lsls	r3, r3, #2
 81043a6:	693a      	ldr	r2, [r7, #16]
 81043a8:	4413      	add	r3, r2
 81043aa:	687a      	ldr	r2, [r7, #4]
 81043ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 81043ae:	2300      	movs	r3, #0
}
 81043b0:	4618      	mov	r0, r3
 81043b2:	3718      	adds	r7, #24
 81043b4:	46bd      	mov	sp, r7
 81043b6:	bd80      	pop	{r7, pc}
 81043b8:	10000100 	.word	0x10000100
 81043bc:	10000104 	.word	0x10000104
 81043c0:	40017000 	.word	0x40017000

081043c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 81043c4:	b480      	push	{r7}
 81043c6:	b085      	sub	sp, #20
 81043c8:	af00      	add	r7, sp, #0
 81043ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	4a1c      	ldr	r2, [pc, #112]	; (8104440 <DFSDM_GetChannelFromInstance+0x7c>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d102      	bne.n	81043da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 81043d4:	2300      	movs	r3, #0
 81043d6:	60fb      	str	r3, [r7, #12]
 81043d8:	e02b      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	4a19      	ldr	r2, [pc, #100]	; (8104444 <DFSDM_GetChannelFromInstance+0x80>)
 81043de:	4293      	cmp	r3, r2
 81043e0:	d102      	bne.n	81043e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 81043e2:	2301      	movs	r3, #1
 81043e4:	60fb      	str	r3, [r7, #12]
 81043e6:	e024      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	4a17      	ldr	r2, [pc, #92]	; (8104448 <DFSDM_GetChannelFromInstance+0x84>)
 81043ec:	4293      	cmp	r3, r2
 81043ee:	d102      	bne.n	81043f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 81043f0:	2302      	movs	r3, #2
 81043f2:	60fb      	str	r3, [r7, #12]
 81043f4:	e01d      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	4a14      	ldr	r2, [pc, #80]	; (810444c <DFSDM_GetChannelFromInstance+0x88>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d102      	bne.n	8104404 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 81043fe:	2303      	movs	r3, #3
 8104400:	60fb      	str	r3, [r7, #12]
 8104402:	e016      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	4a12      	ldr	r2, [pc, #72]	; (8104450 <DFSDM_GetChannelFromInstance+0x8c>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d102      	bne.n	8104412 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 810440c:	2304      	movs	r3, #4
 810440e:	60fb      	str	r3, [r7, #12]
 8104410:	e00f      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	4a0f      	ldr	r2, [pc, #60]	; (8104454 <DFSDM_GetChannelFromInstance+0x90>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d102      	bne.n	8104420 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 810441a:	2305      	movs	r3, #5
 810441c:	60fb      	str	r3, [r7, #12]
 810441e:	e008      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	4a0d      	ldr	r2, [pc, #52]	; (8104458 <DFSDM_GetChannelFromInstance+0x94>)
 8104424:	4293      	cmp	r3, r2
 8104426:	d102      	bne.n	810442e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8104428:	2306      	movs	r3, #6
 810442a:	60fb      	str	r3, [r7, #12]
 810442c:	e001      	b.n	8104432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 810442e:	2307      	movs	r3, #7
 8104430:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8104432:	68fb      	ldr	r3, [r7, #12]
}
 8104434:	4618      	mov	r0, r3
 8104436:	3714      	adds	r7, #20
 8104438:	46bd      	mov	sp, r7
 810443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810443e:	4770      	bx	lr
 8104440:	40017000 	.word	0x40017000
 8104444:	40017020 	.word	0x40017020
 8104448:	40017040 	.word	0x40017040
 810444c:	40017060 	.word	0x40017060
 8104450:	40017080 	.word	0x40017080
 8104454:	400170a0 	.word	0x400170a0
 8104458:	400170c0 	.word	0x400170c0

0810445c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 810445c:	b580      	push	{r7, lr}
 810445e:	b084      	sub	sp, #16
 8104460:	af00      	add	r7, sp, #0
 8104462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	2b00      	cmp	r3, #0
 8104468:	d101      	bne.n	810446e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810446a:	2301      	movs	r3, #1
 810446c:	e0c8      	b.n	8104600 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104472:	2b00      	cmp	r3, #0
 8104474:	d102      	bne.n	810447c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8104476:	6878      	ldr	r0, [r7, #4]
 8104478:	f7fd f998 	bl	81017ac <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 810447c:	687b      	ldr	r3, [r7, #4]
 810447e:	2223      	movs	r2, #35	; 0x23
 8104480:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104482:	4b61      	ldr	r3, [pc, #388]	; (8104608 <HAL_ETH_Init+0x1ac>)
 8104484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104488:	4a5f      	ldr	r2, [pc, #380]	; (8104608 <HAL_ETH_Init+0x1ac>)
 810448a:	f043 0302 	orr.w	r3, r3, #2
 810448e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104492:	4b5d      	ldr	r3, [pc, #372]	; (8104608 <HAL_ETH_Init+0x1ac>)
 8104494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104498:	f003 0302 	and.w	r3, r3, #2
 810449c:	60bb      	str	r3, [r7, #8]
 810449e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	7a1b      	ldrb	r3, [r3, #8]
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	d103      	bne.n	81044b0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 81044a8:	2000      	movs	r0, #0
 81044aa:	f7fe fb89 	bl	8102bc0 <HAL_SYSCFG_ETHInterfaceSelect>
 81044ae:	e003      	b.n	81044b8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 81044b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 81044b4:	f7fe fb84 	bl	8102bc0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81044c0:	681a      	ldr	r2, [r3, #0]
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	f042 0201 	orr.w	r2, r2, #1
 81044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81044ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81044d0:	f7fe fb3a 	bl	8102b48 <HAL_GetTick>
 81044d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81044d6:	e00f      	b.n	81044f8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 81044d8:	f7fe fb36 	bl	8102b48 <HAL_GetTick>
 81044dc:	4602      	mov	r2, r0
 81044de:	68fb      	ldr	r3, [r7, #12]
 81044e0:	1ad3      	subs	r3, r2, r3
 81044e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81044e6:	d907      	bls.n	81044f8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	2204      	movs	r2, #4
 81044ec:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	22e0      	movs	r2, #224	; 0xe0
 81044f2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 81044f4:	2301      	movs	r3, #1
 81044f6:	e083      	b.n	8104600 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	f003 0301 	and.w	r3, r3, #1
 8104506:	2b00      	cmp	r3, #0
 8104508:	d1e6      	bne.n	81044d8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 810450a:	6878      	ldr	r0, [r7, #4]
 810450c:	f000 fac0 	bl	8104a90 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8104510:	f001 f990 	bl	8105834 <HAL_RCC_GetHCLKFreq>
 8104514:	4603      	mov	r3, r0
 8104516:	4a3d      	ldr	r2, [pc, #244]	; (810460c <HAL_ETH_Init+0x1b0>)
 8104518:	fba2 2303 	umull	r2, r3, r2, r3
 810451c:	0c9a      	lsrs	r2, r3, #18
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	3a01      	subs	r2, #1
 8104524:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8104528:	6878      	ldr	r0, [r7, #4]
 810452a:	f000 fa13 	bl	8104954 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8104544:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8104548:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	695b      	ldr	r3, [r3, #20]
 810454e:	f003 0303 	and.w	r3, r3, #3
 8104552:	2b00      	cmp	r3, #0
 8104554:	d007      	beq.n	8104566 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	2201      	movs	r2, #1
 810455a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	22e0      	movs	r2, #224	; 0xe0
 8104560:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8104562:	2301      	movs	r3, #1
 8104564:	e04c      	b.n	8104600 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810456e:	3308      	adds	r3, #8
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8104576:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 810457a:	687a      	ldr	r2, [r7, #4]
 810457c:	6952      	ldr	r2, [r2, #20]
 810457e:	0052      	lsls	r2, r2, #1
 8104580:	6879      	ldr	r1, [r7, #4]
 8104582:	6809      	ldr	r1, [r1, #0]
 8104584:	431a      	orrs	r2, r3
 8104586:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 810458a:	3308      	adds	r3, #8
 810458c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810458e:	6878      	ldr	r0, [r7, #4]
 8104590:	f000 fad6 	bl	8104b40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8104594:	6878      	ldr	r0, [r7, #4]
 8104596:	f000 fb1a 	bl	8104bce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	685b      	ldr	r3, [r3, #4]
 810459e:	3305      	adds	r3, #5
 81045a0:	781b      	ldrb	r3, [r3, #0]
 81045a2:	021a      	lsls	r2, r3, #8
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	685b      	ldr	r3, [r3, #4]
 81045a8:	3304      	adds	r3, #4
 81045aa:	781b      	ldrb	r3, [r3, #0]
 81045ac:	4619      	mov	r1, r3
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	430a      	orrs	r2, r1
 81045b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	685b      	ldr	r3, [r3, #4]
 81045bc:	3303      	adds	r3, #3
 81045be:	781b      	ldrb	r3, [r3, #0]
 81045c0:	061a      	lsls	r2, r3, #24
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	685b      	ldr	r3, [r3, #4]
 81045c6:	3302      	adds	r3, #2
 81045c8:	781b      	ldrb	r3, [r3, #0]
 81045ca:	041b      	lsls	r3, r3, #16
 81045cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	685b      	ldr	r3, [r3, #4]
 81045d2:	3301      	adds	r3, #1
 81045d4:	781b      	ldrb	r3, [r3, #0]
 81045d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81045d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	685b      	ldr	r3, [r3, #4]
 81045de:	781b      	ldrb	r3, [r3, #0]
 81045e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81045e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81045e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	2200      	movs	r2, #0
 81045f0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	2210      	movs	r2, #16
 81045f6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	2210      	movs	r2, #16
 81045fc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 81045fe:	2300      	movs	r3, #0
}
 8104600:	4618      	mov	r0, r3
 8104602:	3710      	adds	r7, #16
 8104604:	46bd      	mov	sp, r7
 8104606:	bd80      	pop	{r7, pc}
 8104608:	58024400 	.word	0x58024400
 810460c:	431bde83 	.word	0x431bde83

08104610 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8104610:	b480      	push	{r7}
 8104612:	b085      	sub	sp, #20
 8104614:	af00      	add	r7, sp, #0
 8104616:	6078      	str	r0, [r7, #4]
 8104618:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 810461a:	683b      	ldr	r3, [r7, #0]
 810461c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 810461e:	683b      	ldr	r3, [r7, #0]
 8104620:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8104622:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8104624:	683b      	ldr	r3, [r7, #0]
 8104626:	791b      	ldrb	r3, [r3, #4]
 8104628:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 810462a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810462c:	683b      	ldr	r3, [r7, #0]
 810462e:	7b1b      	ldrb	r3, [r3, #12]
 8104630:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8104632:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8104634:	683b      	ldr	r3, [r7, #0]
 8104636:	7b5b      	ldrb	r3, [r3, #13]
 8104638:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810463a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810463c:	683b      	ldr	r3, [r7, #0]
 810463e:	7b9b      	ldrb	r3, [r3, #14]
 8104640:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8104642:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8104644:	683b      	ldr	r3, [r7, #0]
 8104646:	7bdb      	ldrb	r3, [r3, #15]
 8104648:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810464a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810464c:	683a      	ldr	r2, [r7, #0]
 810464e:	7c12      	ldrb	r2, [r2, #16]
 8104650:	2a00      	cmp	r2, #0
 8104652:	d102      	bne.n	810465a <ETH_SetMACConfig+0x4a>
 8104654:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8104658:	e000      	b.n	810465c <ETH_SetMACConfig+0x4c>
 810465a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810465c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810465e:	683a      	ldr	r2, [r7, #0]
 8104660:	7c52      	ldrb	r2, [r2, #17]
 8104662:	2a00      	cmp	r2, #0
 8104664:	d102      	bne.n	810466c <ETH_SetMACConfig+0x5c>
 8104666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810466a:	e000      	b.n	810466e <ETH_SetMACConfig+0x5e>
 810466c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810466e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8104670:	683b      	ldr	r3, [r7, #0]
 8104672:	7c9b      	ldrb	r3, [r3, #18]
 8104674:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8104676:	431a      	orrs	r2, r3
                                macconf->Speed |
 8104678:	683b      	ldr	r3, [r7, #0]
 810467a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 810467c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 810467e:	683b      	ldr	r3, [r7, #0]
 8104680:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8104682:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8104684:	683b      	ldr	r3, [r7, #0]
 8104686:	7f1b      	ldrb	r3, [r3, #28]
 8104688:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 810468a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 810468c:	683b      	ldr	r3, [r7, #0]
 810468e:	7f5b      	ldrb	r3, [r3, #29]
 8104690:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8104692:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8104694:	683a      	ldr	r2, [r7, #0]
 8104696:	7f92      	ldrb	r2, [r2, #30]
 8104698:	2a00      	cmp	r2, #0
 810469a:	d102      	bne.n	81046a2 <ETH_SetMACConfig+0x92>
 810469c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81046a0:	e000      	b.n	81046a4 <ETH_SetMACConfig+0x94>
 81046a2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 81046a4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 81046a6:	683b      	ldr	r3, [r7, #0]
 81046a8:	7fdb      	ldrb	r3, [r3, #31]
 81046aa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 81046ac:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 81046ae:	683a      	ldr	r2, [r7, #0]
 81046b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 81046b4:	2a00      	cmp	r2, #0
 81046b6:	d102      	bne.n	81046be <ETH_SetMACConfig+0xae>
 81046b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 81046bc:	e000      	b.n	81046c0 <ETH_SetMACConfig+0xb0>
 81046be:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 81046c0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 81046c2:	683b      	ldr	r3, [r7, #0]
 81046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 81046c6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 81046c8:	683b      	ldr	r3, [r7, #0]
 81046ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81046ce:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 81046d0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 81046d2:	683b      	ldr	r3, [r7, #0]
 81046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 81046d6:	4313      	orrs	r3, r2
 81046d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	681b      	ldr	r3, [r3, #0]
 81046de:	681a      	ldr	r2, [r3, #0]
 81046e0:	4b57      	ldr	r3, [pc, #348]	; (8104840 <ETH_SetMACConfig+0x230>)
 81046e2:	4013      	ands	r3, r2
 81046e4:	687a      	ldr	r2, [r7, #4]
 81046e6:	6812      	ldr	r2, [r2, #0]
 81046e8:	68f9      	ldr	r1, [r7, #12]
 81046ea:	430b      	orrs	r3, r1
 81046ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 81046ee:	683b      	ldr	r3, [r7, #0]
 81046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 81046f4:	683b      	ldr	r3, [r7, #0]
 81046f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81046fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 81046fc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 81046fe:	683b      	ldr	r3, [r7, #0]
 8104700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8104704:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8104706:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8104708:	683b      	ldr	r3, [r7, #0]
 810470a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 810470e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8104710:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8104712:	683a      	ldr	r2, [r7, #0]
 8104714:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8104718:	2a00      	cmp	r2, #0
 810471a:	d102      	bne.n	8104722 <ETH_SetMACConfig+0x112>
 810471c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8104720:	e000      	b.n	8104724 <ETH_SetMACConfig+0x114>
 8104722:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8104724:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8104726:	683b      	ldr	r3, [r7, #0]
 8104728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 810472a:	4313      	orrs	r3, r2
 810472c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	685a      	ldr	r2, [r3, #4]
 8104734:	4b43      	ldr	r3, [pc, #268]	; (8104844 <ETH_SetMACConfig+0x234>)
 8104736:	4013      	ands	r3, r2
 8104738:	687a      	ldr	r2, [r7, #4]
 810473a:	6812      	ldr	r2, [r2, #0]
 810473c:	68f9      	ldr	r1, [r7, #12]
 810473e:	430b      	orrs	r3, r1
 8104740:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8104742:	683b      	ldr	r3, [r7, #0]
 8104744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104748:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 810474a:	683b      	ldr	r3, [r7, #0]
 810474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810474e:	4313      	orrs	r3, r2
 8104750:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8104752:	687b      	ldr	r3, [r7, #4]
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	68db      	ldr	r3, [r3, #12]
 8104758:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 810475c:	f023 0301 	bic.w	r3, r3, #1
 8104760:	687a      	ldr	r2, [r7, #4]
 8104762:	6812      	ldr	r2, [r2, #0]
 8104764:	68f9      	ldr	r1, [r7, #12]
 8104766:	430b      	orrs	r3, r1
 8104768:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810476a:	683b      	ldr	r3, [r7, #0]
 810476c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8104770:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8104772:	683b      	ldr	r3, [r7, #0]
 8104774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104776:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8104778:	683a      	ldr	r2, [r7, #0]
 810477a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 810477e:	2a00      	cmp	r2, #0
 8104780:	d101      	bne.n	8104786 <ETH_SetMACConfig+0x176>
 8104782:	2280      	movs	r2, #128	; 0x80
 8104784:	e000      	b.n	8104788 <ETH_SetMACConfig+0x178>
 8104786:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8104788:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 810478a:	683b      	ldr	r3, [r7, #0]
 810478c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810478e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104790:	4313      	orrs	r3, r2
 8104792:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	681b      	ldr	r3, [r3, #0]
 8104798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810479a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 810479e:	4013      	ands	r3, r2
 81047a0:	687a      	ldr	r2, [r7, #4]
 81047a2:	6812      	ldr	r2, [r2, #0]
 81047a4:	68f9      	ldr	r1, [r7, #12]
 81047a6:	430b      	orrs	r3, r1
 81047a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81047aa:	683b      	ldr	r3, [r7, #0]
 81047ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 81047b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 81047b2:	683b      	ldr	r3, [r7, #0]
 81047b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 81047b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81047ba:	4313      	orrs	r3, r2
 81047bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81047c6:	f023 0103 	bic.w	r1, r3, #3
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	68fa      	ldr	r2, [r7, #12]
 81047d0:	430a      	orrs	r2, r1
 81047d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81047d6:	687b      	ldr	r3, [r7, #4]
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 81047de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 81047e2:	683b      	ldr	r3, [r7, #0]
 81047e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	430a      	orrs	r2, r1
 81047ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81047f0:	683b      	ldr	r3, [r7, #0]
 81047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81047f4:	683a      	ldr	r2, [r7, #0]
 81047f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 81047fa:	2a00      	cmp	r2, #0
 81047fc:	d101      	bne.n	8104802 <ETH_SetMACConfig+0x1f2>
 81047fe:	2240      	movs	r2, #64	; 0x40
 8104800:	e000      	b.n	8104804 <ETH_SetMACConfig+0x1f4>
 8104802:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8104804:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8104806:	683b      	ldr	r3, [r7, #0]
 8104808:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 810480c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810480e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8104810:	683b      	ldr	r3, [r7, #0]
 8104812:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8104816:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8104818:	4313      	orrs	r3, r2
 810481a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	681b      	ldr	r3, [r3, #0]
 8104820:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8104824:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	68fa      	ldr	r2, [r7, #12]
 810482e:	430a      	orrs	r2, r1
 8104830:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8104834:	bf00      	nop
 8104836:	3714      	adds	r7, #20
 8104838:	46bd      	mov	sp, r7
 810483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810483e:	4770      	bx	lr
 8104840:	00048083 	.word	0x00048083
 8104844:	c0f88000 	.word	0xc0f88000

08104848 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8104848:	b480      	push	{r7}
 810484a:	b085      	sub	sp, #20
 810484c:	af00      	add	r7, sp, #0
 810484e:	6078      	str	r0, [r7, #4]
 8104850:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	681b      	ldr	r3, [r3, #0]
 8104856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8104860:	f023 0302 	bic.w	r3, r3, #2
 8104864:	683a      	ldr	r2, [r7, #0]
 8104866:	6812      	ldr	r2, [r2, #0]
 8104868:	6879      	ldr	r1, [r7, #4]
 810486a:	6809      	ldr	r1, [r1, #0]
 810486c:	431a      	orrs	r2, r3
 810486e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8104872:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104874:	683b      	ldr	r3, [r7, #0]
 8104876:	791b      	ldrb	r3, [r3, #4]
 8104878:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810487a:	683b      	ldr	r3, [r7, #0]
 810487c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810487e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8104880:	683b      	ldr	r3, [r7, #0]
 8104882:	7b1b      	ldrb	r3, [r3, #12]
 8104884:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104886:	4313      	orrs	r3, r2
 8104888:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	681b      	ldr	r3, [r3, #0]
 810488e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104892:	3304      	adds	r3, #4
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 810489a:	f023 0301 	bic.w	r3, r3, #1
 810489e:	687a      	ldr	r2, [r7, #4]
 81048a0:	6811      	ldr	r1, [r2, #0]
 81048a2:	68fa      	ldr	r2, [r7, #12]
 81048a4:	431a      	orrs	r2, r3
 81048a6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 81048aa:	3304      	adds	r3, #4
 81048ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81048ae:	683b      	ldr	r3, [r7, #0]
 81048b0:	7b5b      	ldrb	r3, [r3, #13]
 81048b2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 81048b4:	683b      	ldr	r3, [r7, #0]
 81048b6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81048b8:	4313      	orrs	r3, r2
 81048ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81048c4:	681a      	ldr	r2, [r3, #0]
 81048c6:	4b21      	ldr	r3, [pc, #132]	; (810494c <ETH_SetDMAConfig+0x104>)
 81048c8:	4013      	ands	r3, r2
 81048ca:	687a      	ldr	r2, [r7, #4]
 81048cc:	6811      	ldr	r1, [r2, #0]
 81048ce:	68fa      	ldr	r2, [r7, #12]
 81048d0:	431a      	orrs	r2, r3
 81048d2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81048d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81048d8:	683b      	ldr	r3, [r7, #0]
 81048da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 81048dc:	683b      	ldr	r3, [r7, #0]
 81048de:	7d1b      	ldrb	r3, [r3, #20]
 81048e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81048e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 81048e4:	683b      	ldr	r3, [r7, #0]
 81048e6:	7f5b      	ldrb	r3, [r3, #29]
 81048e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81048ea:	4313      	orrs	r3, r2
 81048ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	681b      	ldr	r3, [r3, #0]
 81048f2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81048f6:	3304      	adds	r3, #4
 81048f8:	681a      	ldr	r2, [r3, #0]
 81048fa:	4b15      	ldr	r3, [pc, #84]	; (8104950 <ETH_SetDMAConfig+0x108>)
 81048fc:	4013      	ands	r3, r2
 81048fe:	687a      	ldr	r2, [r7, #4]
 8104900:	6811      	ldr	r1, [r2, #0]
 8104902:	68fa      	ldr	r2, [r7, #12]
 8104904:	431a      	orrs	r2, r3
 8104906:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 810490a:	3304      	adds	r3, #4
 810490c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810490e:	683b      	ldr	r3, [r7, #0]
 8104910:	7f1b      	ldrb	r3, [r3, #28]
 8104912:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8104914:	683b      	ldr	r3, [r7, #0]
 8104916:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8104918:	4313      	orrs	r3, r2
 810491a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8104924:	3308      	adds	r3, #8
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810492c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8104930:	687a      	ldr	r2, [r7, #4]
 8104932:	6811      	ldr	r1, [r2, #0]
 8104934:	68fa      	ldr	r2, [r7, #12]
 8104936:	431a      	orrs	r2, r3
 8104938:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 810493c:	3308      	adds	r3, #8
 810493e:	601a      	str	r2, [r3, #0]
}
 8104940:	bf00      	nop
 8104942:	3714      	adds	r7, #20
 8104944:	46bd      	mov	sp, r7
 8104946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810494a:	4770      	bx	lr
 810494c:	fffec000 	.word	0xfffec000
 8104950:	ffc0efef 	.word	0xffc0efef

08104954 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8104954:	b580      	push	{r7, lr}
 8104956:	b0a4      	sub	sp, #144	; 0x90
 8104958:	af00      	add	r7, sp, #0
 810495a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 810495c:	2301      	movs	r3, #1
 810495e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8104962:	2300      	movs	r3, #0
 8104964:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8104966:	2300      	movs	r3, #0
 8104968:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810496c:	2300      	movs	r3, #0
 810496e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8104972:	2301      	movs	r3, #1
 8104974:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8104978:	2301      	movs	r3, #1
 810497a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810497e:	2301      	movs	r3, #1
 8104980:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8104984:	2300      	movs	r3, #0
 8104986:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810498a:	2301      	movs	r3, #1
 810498c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8104990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8104994:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8104996:	2300      	movs	r3, #0
 8104998:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 810499c:	2300      	movs	r3, #0
 810499e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 81049a0:	2300      	movs	r3, #0
 81049a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 81049a6:	2300      	movs	r3, #0
 81049a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 81049ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 81049b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 81049b2:	2300      	movs	r3, #0
 81049b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 81049b8:	2300      	movs	r3, #0
 81049ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 81049bc:	2301      	movs	r3, #1
 81049be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 81049c2:	2300      	movs	r3, #0
 81049c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81049c8:	2300      	movs	r3, #0
 81049ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81049ce:	2300      	movs	r3, #0
 81049d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 81049d2:	2300      	movs	r3, #0
 81049d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81049d6:	2300      	movs	r3, #0
 81049d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81049da:	2300      	movs	r3, #0
 81049dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81049e0:	2300      	movs	r3, #0
 81049e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81049e6:	2301      	movs	r3, #1
 81049e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81049ec:	2320      	movs	r3, #32
 81049ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81049f2:	2301      	movs	r3, #1
 81049f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81049f8:	2300      	movs	r3, #0
 81049fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81049fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8104a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8104a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8104a08:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8104a0a:	2300      	movs	r3, #0
 8104a0c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8104a10:	2302      	movs	r3, #2
 8104a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8104a16:	2300      	movs	r3, #0
 8104a18:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8104a1c:	2300      	movs	r3, #0
 8104a1e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8104a22:	2300      	movs	r3, #0
 8104a24:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8104a28:	2301      	movs	r3, #1
 8104a2a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8104a2e:	2300      	movs	r3, #0
 8104a30:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8104a32:	2301      	movs	r3, #1
 8104a34:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8104a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8104a3c:	4619      	mov	r1, r3
 8104a3e:	6878      	ldr	r0, [r7, #4]
 8104a40:	f7ff fde6 	bl	8104610 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8104a44:	2301      	movs	r3, #1
 8104a46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8104a48:	2301      	movs	r3, #1
 8104a4a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8104a4c:	2300      	movs	r3, #0
 8104a4e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8104a50:	2300      	movs	r3, #0
 8104a52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8104a56:	2300      	movs	r3, #0
 8104a58:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8104a5a:	2300      	movs	r3, #0
 8104a5c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8104a5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8104a62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8104a64:	2300      	movs	r3, #0
 8104a66:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8104a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8104a6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8104a6e:	2300      	movs	r3, #0
 8104a70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8104a74:	f44f 7306 	mov.w	r3, #536	; 0x218
 8104a78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8104a7a:	f107 0308 	add.w	r3, r7, #8
 8104a7e:	4619      	mov	r1, r3
 8104a80:	6878      	ldr	r0, [r7, #4]
 8104a82:	f7ff fee1 	bl	8104848 <ETH_SetDMAConfig>
}
 8104a86:	bf00      	nop
 8104a88:	3790      	adds	r7, #144	; 0x90
 8104a8a:	46bd      	mov	sp, r7
 8104a8c:	bd80      	pop	{r7, pc}
	...

08104a90 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8104a90:	b580      	push	{r7, lr}
 8104a92:	b084      	sub	sp, #16
 8104a94:	af00      	add	r7, sp, #0
 8104a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8104aa0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8104aa2:	68fb      	ldr	r3, [r7, #12]
 8104aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104aa8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8104aaa:	f000 fec3 	bl	8105834 <HAL_RCC_GetHCLKFreq>
 8104aae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8104ab0:	68bb      	ldr	r3, [r7, #8]
 8104ab2:	4a1e      	ldr	r2, [pc, #120]	; (8104b2c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8104ab4:	4293      	cmp	r3, r2
 8104ab6:	d908      	bls.n	8104aca <ETH_MAC_MDIO_ClkConfig+0x3a>
 8104ab8:	68bb      	ldr	r3, [r7, #8]
 8104aba:	4a1d      	ldr	r2, [pc, #116]	; (8104b30 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8104abc:	4293      	cmp	r3, r2
 8104abe:	d804      	bhi.n	8104aca <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8104ac6:	60fb      	str	r3, [r7, #12]
 8104ac8:	e027      	b.n	8104b1a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8104aca:	68bb      	ldr	r3, [r7, #8]
 8104acc:	4a18      	ldr	r2, [pc, #96]	; (8104b30 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8104ace:	4293      	cmp	r3, r2
 8104ad0:	d908      	bls.n	8104ae4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8104ad2:	68bb      	ldr	r3, [r7, #8]
 8104ad4:	4a17      	ldr	r2, [pc, #92]	; (8104b34 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8104ad6:	4293      	cmp	r3, r2
 8104ad8:	d204      	bcs.n	8104ae4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8104ada:	68fb      	ldr	r3, [r7, #12]
 8104adc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8104ae0:	60fb      	str	r3, [r7, #12]
 8104ae2:	e01a      	b.n	8104b1a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8104ae4:	68bb      	ldr	r3, [r7, #8]
 8104ae6:	4a13      	ldr	r2, [pc, #76]	; (8104b34 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8104ae8:	4293      	cmp	r3, r2
 8104aea:	d303      	bcc.n	8104af4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8104aec:	68bb      	ldr	r3, [r7, #8]
 8104aee:	4a12      	ldr	r2, [pc, #72]	; (8104b38 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8104af0:	4293      	cmp	r3, r2
 8104af2:	d911      	bls.n	8104b18 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8104af4:	68bb      	ldr	r3, [r7, #8]
 8104af6:	4a10      	ldr	r2, [pc, #64]	; (8104b38 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8104af8:	4293      	cmp	r3, r2
 8104afa:	d908      	bls.n	8104b0e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8104afc:	68bb      	ldr	r3, [r7, #8]
 8104afe:	4a0f      	ldr	r2, [pc, #60]	; (8104b3c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8104b00:	4293      	cmp	r3, r2
 8104b02:	d804      	bhi.n	8104b0e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8104b04:	68fb      	ldr	r3, [r7, #12]
 8104b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104b0a:	60fb      	str	r3, [r7, #12]
 8104b0c:	e005      	b.n	8104b1a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8104b14:	60fb      	str	r3, [r7, #12]
 8104b16:	e000      	b.n	8104b1a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8104b18:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	68fa      	ldr	r2, [r7, #12]
 8104b20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8104b24:	bf00      	nop
 8104b26:	3710      	adds	r7, #16
 8104b28:	46bd      	mov	sp, r7
 8104b2a:	bd80      	pop	{r7, pc}
 8104b2c:	01312cff 	.word	0x01312cff
 8104b30:	02160ebf 	.word	0x02160ebf
 8104b34:	03938700 	.word	0x03938700
 8104b38:	05f5e0ff 	.word	0x05f5e0ff
 8104b3c:	08f0d17f 	.word	0x08f0d17f

08104b40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8104b40:	b480      	push	{r7}
 8104b42:	b085      	sub	sp, #20
 8104b44:	af00      	add	r7, sp, #0
 8104b46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104b48:	2300      	movs	r3, #0
 8104b4a:	60fb      	str	r3, [r7, #12]
 8104b4c:	e01d      	b.n	8104b8a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	68d9      	ldr	r1, [r3, #12]
 8104b52:	68fa      	ldr	r2, [r7, #12]
 8104b54:	4613      	mov	r3, r2
 8104b56:	005b      	lsls	r3, r3, #1
 8104b58:	4413      	add	r3, r2
 8104b5a:	00db      	lsls	r3, r3, #3
 8104b5c:	440b      	add	r3, r1
 8104b5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8104b60:	68bb      	ldr	r3, [r7, #8]
 8104b62:	2200      	movs	r2, #0
 8104b64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8104b66:	68bb      	ldr	r3, [r7, #8]
 8104b68:	2200      	movs	r2, #0
 8104b6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8104b6c:	68bb      	ldr	r3, [r7, #8]
 8104b6e:	2200      	movs	r2, #0
 8104b70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8104b72:	68bb      	ldr	r3, [r7, #8]
 8104b74:	2200      	movs	r2, #0
 8104b76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8104b78:	68b9      	ldr	r1, [r7, #8]
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	68fa      	ldr	r2, [r7, #12]
 8104b7e:	3206      	adds	r2, #6
 8104b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	3301      	adds	r3, #1
 8104b88:	60fb      	str	r3, [r7, #12]
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	2b03      	cmp	r3, #3
 8104b8e:	d9de      	bls.n	8104b4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	2200      	movs	r2, #0
 8104b94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8104b96:	687b      	ldr	r3, [r7, #4]
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8104b9e:	330c      	adds	r3, #12
 8104ba0:	2203      	movs	r2, #3
 8104ba2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	68da      	ldr	r2, [r3, #12]
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8104bb0:	3314      	adds	r3, #20
 8104bb2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	68da      	ldr	r2, [r3, #12]
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8104bc0:	601a      	str	r2, [r3, #0]
}
 8104bc2:	bf00      	nop
 8104bc4:	3714      	adds	r7, #20
 8104bc6:	46bd      	mov	sp, r7
 8104bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bcc:	4770      	bx	lr

08104bce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8104bce:	b480      	push	{r7}
 8104bd0:	b085      	sub	sp, #20
 8104bd2:	af00      	add	r7, sp, #0
 8104bd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104bd6:	2300      	movs	r3, #0
 8104bd8:	60fb      	str	r3, [r7, #12]
 8104bda:	e024      	b.n	8104c26 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	6919      	ldr	r1, [r3, #16]
 8104be0:	68fa      	ldr	r2, [r7, #12]
 8104be2:	4613      	mov	r3, r2
 8104be4:	005b      	lsls	r3, r3, #1
 8104be6:	4413      	add	r3, r2
 8104be8:	00db      	lsls	r3, r3, #3
 8104bea:	440b      	add	r3, r1
 8104bec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8104bee:	68bb      	ldr	r3, [r7, #8]
 8104bf0:	2200      	movs	r2, #0
 8104bf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8104bf4:	68bb      	ldr	r3, [r7, #8]
 8104bf6:	2200      	movs	r2, #0
 8104bf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8104bfa:	68bb      	ldr	r3, [r7, #8]
 8104bfc:	2200      	movs	r2, #0
 8104bfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8104c00:	68bb      	ldr	r3, [r7, #8]
 8104c02:	2200      	movs	r2, #0
 8104c04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8104c06:	68bb      	ldr	r3, [r7, #8]
 8104c08:	2200      	movs	r2, #0
 8104c0a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8104c0c:	68bb      	ldr	r3, [r7, #8]
 8104c0e:	2200      	movs	r2, #0
 8104c10:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8104c12:	68ba      	ldr	r2, [r7, #8]
 8104c14:	6879      	ldr	r1, [r7, #4]
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	3310      	adds	r3, #16
 8104c1a:	009b      	lsls	r3, r3, #2
 8104c1c:	440b      	add	r3, r1
 8104c1e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	3301      	adds	r3, #1
 8104c24:	60fb      	str	r3, [r7, #12]
 8104c26:	68fb      	ldr	r3, [r7, #12]
 8104c28:	2b03      	cmp	r3, #3
 8104c2a:	d9d7      	bls.n	8104bdc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	2200      	movs	r2, #0
 8104c30:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	2200      	movs	r2, #0
 8104c36:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	2200      	movs	r2, #0
 8104c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	2200      	movs	r2, #0
 8104c42:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	2200      	movs	r2, #0
 8104c48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	681b      	ldr	r3, [r3, #0]
 8104c4e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8104c52:	3310      	adds	r3, #16
 8104c54:	2203      	movs	r2, #3
 8104c56:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	691a      	ldr	r2, [r3, #16]
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8104c64:	331c      	adds	r3, #28
 8104c66:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	691b      	ldr	r3, [r3, #16]
 8104c6c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8104c78:	3308      	adds	r3, #8
 8104c7a:	601a      	str	r2, [r3, #0]
}
 8104c7c:	bf00      	nop
 8104c7e:	3714      	adds	r7, #20
 8104c80:	46bd      	mov	sp, r7
 8104c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c86:	4770      	bx	lr

08104c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104c88:	b480      	push	{r7}
 8104c8a:	b089      	sub	sp, #36	; 0x24
 8104c8c:	af00      	add	r7, sp, #0
 8104c8e:	6078      	str	r0, [r7, #4]
 8104c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104c92:	2300      	movs	r3, #0
 8104c94:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104c96:	4b89      	ldr	r3, [pc, #548]	; (8104ebc <HAL_GPIO_Init+0x234>)
 8104c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104c9a:	e194      	b.n	8104fc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104c9c:	683b      	ldr	r3, [r7, #0]
 8104c9e:	681a      	ldr	r2, [r3, #0]
 8104ca0:	2101      	movs	r1, #1
 8104ca2:	69fb      	ldr	r3, [r7, #28]
 8104ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8104ca8:	4013      	ands	r3, r2
 8104caa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104cac:	693b      	ldr	r3, [r7, #16]
 8104cae:	2b00      	cmp	r3, #0
 8104cb0:	f000 8186 	beq.w	8104fc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104cb4:	683b      	ldr	r3, [r7, #0]
 8104cb6:	685b      	ldr	r3, [r3, #4]
 8104cb8:	f003 0303 	and.w	r3, r3, #3
 8104cbc:	2b01      	cmp	r3, #1
 8104cbe:	d005      	beq.n	8104ccc <HAL_GPIO_Init+0x44>
 8104cc0:	683b      	ldr	r3, [r7, #0]
 8104cc2:	685b      	ldr	r3, [r3, #4]
 8104cc4:	f003 0303 	and.w	r3, r3, #3
 8104cc8:	2b02      	cmp	r3, #2
 8104cca:	d130      	bne.n	8104d2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	689b      	ldr	r3, [r3, #8]
 8104cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104cd2:	69fb      	ldr	r3, [r7, #28]
 8104cd4:	005b      	lsls	r3, r3, #1
 8104cd6:	2203      	movs	r2, #3
 8104cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8104cdc:	43db      	mvns	r3, r3
 8104cde:	69ba      	ldr	r2, [r7, #24]
 8104ce0:	4013      	ands	r3, r2
 8104ce2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104ce4:	683b      	ldr	r3, [r7, #0]
 8104ce6:	68da      	ldr	r2, [r3, #12]
 8104ce8:	69fb      	ldr	r3, [r7, #28]
 8104cea:	005b      	lsls	r3, r3, #1
 8104cec:	fa02 f303 	lsl.w	r3, r2, r3
 8104cf0:	69ba      	ldr	r2, [r7, #24]
 8104cf2:	4313      	orrs	r3, r2
 8104cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	69ba      	ldr	r2, [r7, #24]
 8104cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104cfc:	687b      	ldr	r3, [r7, #4]
 8104cfe:	685b      	ldr	r3, [r3, #4]
 8104d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104d02:	2201      	movs	r2, #1
 8104d04:	69fb      	ldr	r3, [r7, #28]
 8104d06:	fa02 f303 	lsl.w	r3, r2, r3
 8104d0a:	43db      	mvns	r3, r3
 8104d0c:	69ba      	ldr	r2, [r7, #24]
 8104d0e:	4013      	ands	r3, r2
 8104d10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104d12:	683b      	ldr	r3, [r7, #0]
 8104d14:	685b      	ldr	r3, [r3, #4]
 8104d16:	091b      	lsrs	r3, r3, #4
 8104d18:	f003 0201 	and.w	r2, r3, #1
 8104d1c:	69fb      	ldr	r3, [r7, #28]
 8104d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8104d22:	69ba      	ldr	r2, [r7, #24]
 8104d24:	4313      	orrs	r3, r2
 8104d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	69ba      	ldr	r2, [r7, #24]
 8104d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104d2e:	683b      	ldr	r3, [r7, #0]
 8104d30:	685b      	ldr	r3, [r3, #4]
 8104d32:	f003 0303 	and.w	r3, r3, #3
 8104d36:	2b03      	cmp	r3, #3
 8104d38:	d017      	beq.n	8104d6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	68db      	ldr	r3, [r3, #12]
 8104d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104d40:	69fb      	ldr	r3, [r7, #28]
 8104d42:	005b      	lsls	r3, r3, #1
 8104d44:	2203      	movs	r2, #3
 8104d46:	fa02 f303 	lsl.w	r3, r2, r3
 8104d4a:	43db      	mvns	r3, r3
 8104d4c:	69ba      	ldr	r2, [r7, #24]
 8104d4e:	4013      	ands	r3, r2
 8104d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104d52:	683b      	ldr	r3, [r7, #0]
 8104d54:	689a      	ldr	r2, [r3, #8]
 8104d56:	69fb      	ldr	r3, [r7, #28]
 8104d58:	005b      	lsls	r3, r3, #1
 8104d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8104d5e:	69ba      	ldr	r2, [r7, #24]
 8104d60:	4313      	orrs	r3, r2
 8104d62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	69ba      	ldr	r2, [r7, #24]
 8104d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104d6a:	683b      	ldr	r3, [r7, #0]
 8104d6c:	685b      	ldr	r3, [r3, #4]
 8104d6e:	f003 0303 	and.w	r3, r3, #3
 8104d72:	2b02      	cmp	r3, #2
 8104d74:	d123      	bne.n	8104dbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104d76:	69fb      	ldr	r3, [r7, #28]
 8104d78:	08da      	lsrs	r2, r3, #3
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	3208      	adds	r2, #8
 8104d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104d84:	69fb      	ldr	r3, [r7, #28]
 8104d86:	f003 0307 	and.w	r3, r3, #7
 8104d8a:	009b      	lsls	r3, r3, #2
 8104d8c:	220f      	movs	r2, #15
 8104d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8104d92:	43db      	mvns	r3, r3
 8104d94:	69ba      	ldr	r2, [r7, #24]
 8104d96:	4013      	ands	r3, r2
 8104d98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104d9a:	683b      	ldr	r3, [r7, #0]
 8104d9c:	691a      	ldr	r2, [r3, #16]
 8104d9e:	69fb      	ldr	r3, [r7, #28]
 8104da0:	f003 0307 	and.w	r3, r3, #7
 8104da4:	009b      	lsls	r3, r3, #2
 8104da6:	fa02 f303 	lsl.w	r3, r2, r3
 8104daa:	69ba      	ldr	r2, [r7, #24]
 8104dac:	4313      	orrs	r3, r2
 8104dae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104db0:	69fb      	ldr	r3, [r7, #28]
 8104db2:	08da      	lsrs	r2, r3, #3
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	3208      	adds	r2, #8
 8104db8:	69b9      	ldr	r1, [r7, #24]
 8104dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104dbe:	687b      	ldr	r3, [r7, #4]
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104dc4:	69fb      	ldr	r3, [r7, #28]
 8104dc6:	005b      	lsls	r3, r3, #1
 8104dc8:	2203      	movs	r2, #3
 8104dca:	fa02 f303 	lsl.w	r3, r2, r3
 8104dce:	43db      	mvns	r3, r3
 8104dd0:	69ba      	ldr	r2, [r7, #24]
 8104dd2:	4013      	ands	r3, r2
 8104dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104dd6:	683b      	ldr	r3, [r7, #0]
 8104dd8:	685b      	ldr	r3, [r3, #4]
 8104dda:	f003 0203 	and.w	r2, r3, #3
 8104dde:	69fb      	ldr	r3, [r7, #28]
 8104de0:	005b      	lsls	r3, r3, #1
 8104de2:	fa02 f303 	lsl.w	r3, r2, r3
 8104de6:	69ba      	ldr	r2, [r7, #24]
 8104de8:	4313      	orrs	r3, r2
 8104dea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	69ba      	ldr	r2, [r7, #24]
 8104df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104df2:	683b      	ldr	r3, [r7, #0]
 8104df4:	685b      	ldr	r3, [r3, #4]
 8104df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104dfa:	2b00      	cmp	r3, #0
 8104dfc:	f000 80e0 	beq.w	8104fc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104e00:	4b2f      	ldr	r3, [pc, #188]	; (8104ec0 <HAL_GPIO_Init+0x238>)
 8104e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104e06:	4a2e      	ldr	r2, [pc, #184]	; (8104ec0 <HAL_GPIO_Init+0x238>)
 8104e08:	f043 0302 	orr.w	r3, r3, #2
 8104e0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104e10:	4b2b      	ldr	r3, [pc, #172]	; (8104ec0 <HAL_GPIO_Init+0x238>)
 8104e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104e16:	f003 0302 	and.w	r3, r3, #2
 8104e1a:	60fb      	str	r3, [r7, #12]
 8104e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104e1e:	4a29      	ldr	r2, [pc, #164]	; (8104ec4 <HAL_GPIO_Init+0x23c>)
 8104e20:	69fb      	ldr	r3, [r7, #28]
 8104e22:	089b      	lsrs	r3, r3, #2
 8104e24:	3302      	adds	r3, #2
 8104e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104e2c:	69fb      	ldr	r3, [r7, #28]
 8104e2e:	f003 0303 	and.w	r3, r3, #3
 8104e32:	009b      	lsls	r3, r3, #2
 8104e34:	220f      	movs	r2, #15
 8104e36:	fa02 f303 	lsl.w	r3, r2, r3
 8104e3a:	43db      	mvns	r3, r3
 8104e3c:	69ba      	ldr	r2, [r7, #24]
 8104e3e:	4013      	ands	r3, r2
 8104e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	4a20      	ldr	r2, [pc, #128]	; (8104ec8 <HAL_GPIO_Init+0x240>)
 8104e46:	4293      	cmp	r3, r2
 8104e48:	d052      	beq.n	8104ef0 <HAL_GPIO_Init+0x268>
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	4a1f      	ldr	r2, [pc, #124]	; (8104ecc <HAL_GPIO_Init+0x244>)
 8104e4e:	4293      	cmp	r3, r2
 8104e50:	d031      	beq.n	8104eb6 <HAL_GPIO_Init+0x22e>
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	4a1e      	ldr	r2, [pc, #120]	; (8104ed0 <HAL_GPIO_Init+0x248>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d02b      	beq.n	8104eb2 <HAL_GPIO_Init+0x22a>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	4a1d      	ldr	r2, [pc, #116]	; (8104ed4 <HAL_GPIO_Init+0x24c>)
 8104e5e:	4293      	cmp	r3, r2
 8104e60:	d025      	beq.n	8104eae <HAL_GPIO_Init+0x226>
 8104e62:	687b      	ldr	r3, [r7, #4]
 8104e64:	4a1c      	ldr	r2, [pc, #112]	; (8104ed8 <HAL_GPIO_Init+0x250>)
 8104e66:	4293      	cmp	r3, r2
 8104e68:	d01f      	beq.n	8104eaa <HAL_GPIO_Init+0x222>
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	4a1b      	ldr	r2, [pc, #108]	; (8104edc <HAL_GPIO_Init+0x254>)
 8104e6e:	4293      	cmp	r3, r2
 8104e70:	d019      	beq.n	8104ea6 <HAL_GPIO_Init+0x21e>
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	4a1a      	ldr	r2, [pc, #104]	; (8104ee0 <HAL_GPIO_Init+0x258>)
 8104e76:	4293      	cmp	r3, r2
 8104e78:	d013      	beq.n	8104ea2 <HAL_GPIO_Init+0x21a>
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	4a19      	ldr	r2, [pc, #100]	; (8104ee4 <HAL_GPIO_Init+0x25c>)
 8104e7e:	4293      	cmp	r3, r2
 8104e80:	d00d      	beq.n	8104e9e <HAL_GPIO_Init+0x216>
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	4a18      	ldr	r2, [pc, #96]	; (8104ee8 <HAL_GPIO_Init+0x260>)
 8104e86:	4293      	cmp	r3, r2
 8104e88:	d007      	beq.n	8104e9a <HAL_GPIO_Init+0x212>
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	4a17      	ldr	r2, [pc, #92]	; (8104eec <HAL_GPIO_Init+0x264>)
 8104e8e:	4293      	cmp	r3, r2
 8104e90:	d101      	bne.n	8104e96 <HAL_GPIO_Init+0x20e>
 8104e92:	2309      	movs	r3, #9
 8104e94:	e02d      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104e96:	230a      	movs	r3, #10
 8104e98:	e02b      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104e9a:	2308      	movs	r3, #8
 8104e9c:	e029      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104e9e:	2307      	movs	r3, #7
 8104ea0:	e027      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104ea2:	2306      	movs	r3, #6
 8104ea4:	e025      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104ea6:	2305      	movs	r3, #5
 8104ea8:	e023      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104eaa:	2304      	movs	r3, #4
 8104eac:	e021      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104eae:	2303      	movs	r3, #3
 8104eb0:	e01f      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104eb2:	2302      	movs	r3, #2
 8104eb4:	e01d      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104eb6:	2301      	movs	r3, #1
 8104eb8:	e01b      	b.n	8104ef2 <HAL_GPIO_Init+0x26a>
 8104eba:	bf00      	nop
 8104ebc:	580000c0 	.word	0x580000c0
 8104ec0:	58024400 	.word	0x58024400
 8104ec4:	58000400 	.word	0x58000400
 8104ec8:	58020000 	.word	0x58020000
 8104ecc:	58020400 	.word	0x58020400
 8104ed0:	58020800 	.word	0x58020800
 8104ed4:	58020c00 	.word	0x58020c00
 8104ed8:	58021000 	.word	0x58021000
 8104edc:	58021400 	.word	0x58021400
 8104ee0:	58021800 	.word	0x58021800
 8104ee4:	58021c00 	.word	0x58021c00
 8104ee8:	58022000 	.word	0x58022000
 8104eec:	58022400 	.word	0x58022400
 8104ef0:	2300      	movs	r3, #0
 8104ef2:	69fa      	ldr	r2, [r7, #28]
 8104ef4:	f002 0203 	and.w	r2, r2, #3
 8104ef8:	0092      	lsls	r2, r2, #2
 8104efa:	4093      	lsls	r3, r2
 8104efc:	69ba      	ldr	r2, [r7, #24]
 8104efe:	4313      	orrs	r3, r2
 8104f00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104f02:	4938      	ldr	r1, [pc, #224]	; (8104fe4 <HAL_GPIO_Init+0x35c>)
 8104f04:	69fb      	ldr	r3, [r7, #28]
 8104f06:	089b      	lsrs	r3, r3, #2
 8104f08:	3302      	adds	r3, #2
 8104f0a:	69ba      	ldr	r2, [r7, #24]
 8104f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104f14:	681b      	ldr	r3, [r3, #0]
 8104f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104f18:	693b      	ldr	r3, [r7, #16]
 8104f1a:	43db      	mvns	r3, r3
 8104f1c:	69ba      	ldr	r2, [r7, #24]
 8104f1e:	4013      	ands	r3, r2
 8104f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104f22:	683b      	ldr	r3, [r7, #0]
 8104f24:	685b      	ldr	r3, [r3, #4]
 8104f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d003      	beq.n	8104f36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104f2e:	69ba      	ldr	r2, [r7, #24]
 8104f30:	693b      	ldr	r3, [r7, #16]
 8104f32:	4313      	orrs	r3, r2
 8104f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104f3a:	69bb      	ldr	r3, [r7, #24]
 8104f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104f42:	685b      	ldr	r3, [r3, #4]
 8104f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104f46:	693b      	ldr	r3, [r7, #16]
 8104f48:	43db      	mvns	r3, r3
 8104f4a:	69ba      	ldr	r2, [r7, #24]
 8104f4c:	4013      	ands	r3, r2
 8104f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104f50:	683b      	ldr	r3, [r7, #0]
 8104f52:	685b      	ldr	r3, [r3, #4]
 8104f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104f58:	2b00      	cmp	r3, #0
 8104f5a:	d003      	beq.n	8104f64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104f5c:	69ba      	ldr	r2, [r7, #24]
 8104f5e:	693b      	ldr	r3, [r7, #16]
 8104f60:	4313      	orrs	r3, r2
 8104f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104f68:	69bb      	ldr	r3, [r7, #24]
 8104f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104f6c:	697b      	ldr	r3, [r7, #20]
 8104f6e:	685b      	ldr	r3, [r3, #4]
 8104f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104f72:	693b      	ldr	r3, [r7, #16]
 8104f74:	43db      	mvns	r3, r3
 8104f76:	69ba      	ldr	r2, [r7, #24]
 8104f78:	4013      	ands	r3, r2
 8104f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104f7c:	683b      	ldr	r3, [r7, #0]
 8104f7e:	685b      	ldr	r3, [r3, #4]
 8104f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104f84:	2b00      	cmp	r3, #0
 8104f86:	d003      	beq.n	8104f90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104f88:	69ba      	ldr	r2, [r7, #24]
 8104f8a:	693b      	ldr	r3, [r7, #16]
 8104f8c:	4313      	orrs	r3, r2
 8104f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104f90:	697b      	ldr	r3, [r7, #20]
 8104f92:	69ba      	ldr	r2, [r7, #24]
 8104f94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104f96:	697b      	ldr	r3, [r7, #20]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104f9c:	693b      	ldr	r3, [r7, #16]
 8104f9e:	43db      	mvns	r3, r3
 8104fa0:	69ba      	ldr	r2, [r7, #24]
 8104fa2:	4013      	ands	r3, r2
 8104fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104fa6:	683b      	ldr	r3, [r7, #0]
 8104fa8:	685b      	ldr	r3, [r3, #4]
 8104faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104fae:	2b00      	cmp	r3, #0
 8104fb0:	d003      	beq.n	8104fba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104fb2:	69ba      	ldr	r2, [r7, #24]
 8104fb4:	693b      	ldr	r3, [r7, #16]
 8104fb6:	4313      	orrs	r3, r2
 8104fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104fba:	697b      	ldr	r3, [r7, #20]
 8104fbc:	69ba      	ldr	r2, [r7, #24]
 8104fbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104fc0:	69fb      	ldr	r3, [r7, #28]
 8104fc2:	3301      	adds	r3, #1
 8104fc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104fc6:	683b      	ldr	r3, [r7, #0]
 8104fc8:	681a      	ldr	r2, [r3, #0]
 8104fca:	69fb      	ldr	r3, [r7, #28]
 8104fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8104fd0:	2b00      	cmp	r3, #0
 8104fd2:	f47f ae63 	bne.w	8104c9c <HAL_GPIO_Init+0x14>
  }
}
 8104fd6:	bf00      	nop
 8104fd8:	bf00      	nop
 8104fda:	3724      	adds	r7, #36	; 0x24
 8104fdc:	46bd      	mov	sp, r7
 8104fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fe2:	4770      	bx	lr
 8104fe4:	58000400 	.word	0x58000400

08104fe8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104fe8:	b480      	push	{r7}
 8104fea:	b083      	sub	sp, #12
 8104fec:	af00      	add	r7, sp, #0
 8104fee:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104ff0:	4b05      	ldr	r3, [pc, #20]	; (8105008 <HAL_HSEM_ActivateNotification+0x20>)
 8104ff2:	681a      	ldr	r2, [r3, #0]
 8104ff4:	4904      	ldr	r1, [pc, #16]	; (8105008 <HAL_HSEM_ActivateNotification+0x20>)
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	4313      	orrs	r3, r2
 8104ffa:	600b      	str	r3, [r1, #0]
#endif
}
 8104ffc:	bf00      	nop
 8104ffe:	370c      	adds	r7, #12
 8105000:	46bd      	mov	sp, r7
 8105002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105006:	4770      	bx	lr
 8105008:	58026510 	.word	0x58026510

0810500c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810500e:	b08f      	sub	sp, #60	; 0x3c
 8105010:	af0a      	add	r7, sp, #40	; 0x28
 8105012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	2b00      	cmp	r3, #0
 8105018:	d101      	bne.n	810501e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810501a:	2301      	movs	r3, #1
 810501c:	e116      	b.n	810524c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 810502a:	b2db      	uxtb	r3, r3
 810502c:	2b00      	cmp	r3, #0
 810502e:	d106      	bne.n	810503e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	2200      	movs	r2, #0
 8105034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8105038:	6878      	ldr	r0, [r7, #4]
 810503a:	f7fd f9e1 	bl	8102400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	2203      	movs	r2, #3
 8105042:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8105046:	68bb      	ldr	r3, [r7, #8]
 8105048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810504e:	2b00      	cmp	r3, #0
 8105050:	d102      	bne.n	8105058 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	2200      	movs	r2, #0
 8105056:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8105058:	687b      	ldr	r3, [r7, #4]
 810505a:	681b      	ldr	r3, [r3, #0]
 810505c:	4618      	mov	r0, r3
 810505e:	f007 fb4f 	bl	810c700 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	603b      	str	r3, [r7, #0]
 8105068:	687e      	ldr	r6, [r7, #4]
 810506a:	466d      	mov	r5, sp
 810506c:	f106 0410 	add.w	r4, r6, #16
 8105070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105078:	e894 0003 	ldmia.w	r4, {r0, r1}
 810507c:	e885 0003 	stmia.w	r5, {r0, r1}
 8105080:	1d33      	adds	r3, r6, #4
 8105082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8105084:	6838      	ldr	r0, [r7, #0]
 8105086:	f007 facd 	bl	810c624 <USB_CoreInit>
 810508a:	4603      	mov	r3, r0
 810508c:	2b00      	cmp	r3, #0
 810508e:	d005      	beq.n	810509c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	2202      	movs	r2, #2
 8105094:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8105098:	2301      	movs	r3, #1
 810509a:	e0d7      	b.n	810524c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	2100      	movs	r1, #0
 81050a2:	4618      	mov	r0, r3
 81050a4:	f007 fb3d 	bl	810c722 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81050a8:	2300      	movs	r3, #0
 81050aa:	73fb      	strb	r3, [r7, #15]
 81050ac:	e04a      	b.n	8105144 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81050ae:	7bfa      	ldrb	r2, [r7, #15]
 81050b0:	6879      	ldr	r1, [r7, #4]
 81050b2:	4613      	mov	r3, r2
 81050b4:	00db      	lsls	r3, r3, #3
 81050b6:	1a9b      	subs	r3, r3, r2
 81050b8:	009b      	lsls	r3, r3, #2
 81050ba:	440b      	add	r3, r1
 81050bc:	333d      	adds	r3, #61	; 0x3d
 81050be:	2201      	movs	r2, #1
 81050c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81050c2:	7bfa      	ldrb	r2, [r7, #15]
 81050c4:	6879      	ldr	r1, [r7, #4]
 81050c6:	4613      	mov	r3, r2
 81050c8:	00db      	lsls	r3, r3, #3
 81050ca:	1a9b      	subs	r3, r3, r2
 81050cc:	009b      	lsls	r3, r3, #2
 81050ce:	440b      	add	r3, r1
 81050d0:	333c      	adds	r3, #60	; 0x3c
 81050d2:	7bfa      	ldrb	r2, [r7, #15]
 81050d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81050d6:	7bfa      	ldrb	r2, [r7, #15]
 81050d8:	7bfb      	ldrb	r3, [r7, #15]
 81050da:	b298      	uxth	r0, r3
 81050dc:	6879      	ldr	r1, [r7, #4]
 81050de:	4613      	mov	r3, r2
 81050e0:	00db      	lsls	r3, r3, #3
 81050e2:	1a9b      	subs	r3, r3, r2
 81050e4:	009b      	lsls	r3, r3, #2
 81050e6:	440b      	add	r3, r1
 81050e8:	3342      	adds	r3, #66	; 0x42
 81050ea:	4602      	mov	r2, r0
 81050ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81050ee:	7bfa      	ldrb	r2, [r7, #15]
 81050f0:	6879      	ldr	r1, [r7, #4]
 81050f2:	4613      	mov	r3, r2
 81050f4:	00db      	lsls	r3, r3, #3
 81050f6:	1a9b      	subs	r3, r3, r2
 81050f8:	009b      	lsls	r3, r3, #2
 81050fa:	440b      	add	r3, r1
 81050fc:	333f      	adds	r3, #63	; 0x3f
 81050fe:	2200      	movs	r2, #0
 8105100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8105102:	7bfa      	ldrb	r2, [r7, #15]
 8105104:	6879      	ldr	r1, [r7, #4]
 8105106:	4613      	mov	r3, r2
 8105108:	00db      	lsls	r3, r3, #3
 810510a:	1a9b      	subs	r3, r3, r2
 810510c:	009b      	lsls	r3, r3, #2
 810510e:	440b      	add	r3, r1
 8105110:	3344      	adds	r3, #68	; 0x44
 8105112:	2200      	movs	r2, #0
 8105114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8105116:	7bfa      	ldrb	r2, [r7, #15]
 8105118:	6879      	ldr	r1, [r7, #4]
 810511a:	4613      	mov	r3, r2
 810511c:	00db      	lsls	r3, r3, #3
 810511e:	1a9b      	subs	r3, r3, r2
 8105120:	009b      	lsls	r3, r3, #2
 8105122:	440b      	add	r3, r1
 8105124:	3348      	adds	r3, #72	; 0x48
 8105126:	2200      	movs	r2, #0
 8105128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810512a:	7bfa      	ldrb	r2, [r7, #15]
 810512c:	6879      	ldr	r1, [r7, #4]
 810512e:	4613      	mov	r3, r2
 8105130:	00db      	lsls	r3, r3, #3
 8105132:	1a9b      	subs	r3, r3, r2
 8105134:	009b      	lsls	r3, r3, #2
 8105136:	440b      	add	r3, r1
 8105138:	3350      	adds	r3, #80	; 0x50
 810513a:	2200      	movs	r2, #0
 810513c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810513e:	7bfb      	ldrb	r3, [r7, #15]
 8105140:	3301      	adds	r3, #1
 8105142:	73fb      	strb	r3, [r7, #15]
 8105144:	7bfa      	ldrb	r2, [r7, #15]
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	685b      	ldr	r3, [r3, #4]
 810514a:	429a      	cmp	r2, r3
 810514c:	d3af      	bcc.n	81050ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810514e:	2300      	movs	r3, #0
 8105150:	73fb      	strb	r3, [r7, #15]
 8105152:	e044      	b.n	81051de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8105154:	7bfa      	ldrb	r2, [r7, #15]
 8105156:	6879      	ldr	r1, [r7, #4]
 8105158:	4613      	mov	r3, r2
 810515a:	00db      	lsls	r3, r3, #3
 810515c:	1a9b      	subs	r3, r3, r2
 810515e:	009b      	lsls	r3, r3, #2
 8105160:	440b      	add	r3, r1
 8105162:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8105166:	2200      	movs	r2, #0
 8105168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810516a:	7bfa      	ldrb	r2, [r7, #15]
 810516c:	6879      	ldr	r1, [r7, #4]
 810516e:	4613      	mov	r3, r2
 8105170:	00db      	lsls	r3, r3, #3
 8105172:	1a9b      	subs	r3, r3, r2
 8105174:	009b      	lsls	r3, r3, #2
 8105176:	440b      	add	r3, r1
 8105178:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 810517c:	7bfa      	ldrb	r2, [r7, #15]
 810517e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8105180:	7bfa      	ldrb	r2, [r7, #15]
 8105182:	6879      	ldr	r1, [r7, #4]
 8105184:	4613      	mov	r3, r2
 8105186:	00db      	lsls	r3, r3, #3
 8105188:	1a9b      	subs	r3, r3, r2
 810518a:	009b      	lsls	r3, r3, #2
 810518c:	440b      	add	r3, r1
 810518e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8105192:	2200      	movs	r2, #0
 8105194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8105196:	7bfa      	ldrb	r2, [r7, #15]
 8105198:	6879      	ldr	r1, [r7, #4]
 810519a:	4613      	mov	r3, r2
 810519c:	00db      	lsls	r3, r3, #3
 810519e:	1a9b      	subs	r3, r3, r2
 81051a0:	009b      	lsls	r3, r3, #2
 81051a2:	440b      	add	r3, r1
 81051a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 81051a8:	2200      	movs	r2, #0
 81051aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81051ac:	7bfa      	ldrb	r2, [r7, #15]
 81051ae:	6879      	ldr	r1, [r7, #4]
 81051b0:	4613      	mov	r3, r2
 81051b2:	00db      	lsls	r3, r3, #3
 81051b4:	1a9b      	subs	r3, r3, r2
 81051b6:	009b      	lsls	r3, r3, #2
 81051b8:	440b      	add	r3, r1
 81051ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 81051be:	2200      	movs	r2, #0
 81051c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81051c2:	7bfa      	ldrb	r2, [r7, #15]
 81051c4:	6879      	ldr	r1, [r7, #4]
 81051c6:	4613      	mov	r3, r2
 81051c8:	00db      	lsls	r3, r3, #3
 81051ca:	1a9b      	subs	r3, r3, r2
 81051cc:	009b      	lsls	r3, r3, #2
 81051ce:	440b      	add	r3, r1
 81051d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 81051d4:	2200      	movs	r2, #0
 81051d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81051d8:	7bfb      	ldrb	r3, [r7, #15]
 81051da:	3301      	adds	r3, #1
 81051dc:	73fb      	strb	r3, [r7, #15]
 81051de:	7bfa      	ldrb	r2, [r7, #15]
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	685b      	ldr	r3, [r3, #4]
 81051e4:	429a      	cmp	r2, r3
 81051e6:	d3b5      	bcc.n	8105154 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	603b      	str	r3, [r7, #0]
 81051ee:	687e      	ldr	r6, [r7, #4]
 81051f0:	466d      	mov	r5, sp
 81051f2:	f106 0410 	add.w	r4, r6, #16
 81051f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81051f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81051fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81051fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81051fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105202:	e885 0003 	stmia.w	r5, {r0, r1}
 8105206:	1d33      	adds	r3, r6, #4
 8105208:	cb0e      	ldmia	r3, {r1, r2, r3}
 810520a:	6838      	ldr	r0, [r7, #0]
 810520c:	f007 fad6 	bl	810c7bc <USB_DevInit>
 8105210:	4603      	mov	r3, r0
 8105212:	2b00      	cmp	r3, #0
 8105214:	d005      	beq.n	8105222 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	2202      	movs	r2, #2
 810521a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 810521e:	2301      	movs	r3, #1
 8105220:	e014      	b.n	810524c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	2200      	movs	r2, #0
 8105226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	2201      	movs	r2, #1
 810522e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105236:	2b01      	cmp	r3, #1
 8105238:	d102      	bne.n	8105240 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810523a:	6878      	ldr	r0, [r7, #4]
 810523c:	f000 f80a 	bl	8105254 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	4618      	mov	r0, r3
 8105246:	f007 fc90 	bl	810cb6a <USB_DevDisconnect>

  return HAL_OK;
 810524a:	2300      	movs	r3, #0
}
 810524c:	4618      	mov	r0, r3
 810524e:	3714      	adds	r7, #20
 8105250:	46bd      	mov	sp, r7
 8105252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08105254 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8105254:	b480      	push	{r7}
 8105256:	b085      	sub	sp, #20
 8105258:	af00      	add	r7, sp, #0
 810525a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	2201      	movs	r2, #1
 8105266:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	2200      	movs	r2, #0
 810526e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8105272:	68fb      	ldr	r3, [r7, #12]
 8105274:	699b      	ldr	r3, [r3, #24]
 8105276:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810527a:	68fb      	ldr	r3, [r7, #12]
 810527c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810527e:	68fb      	ldr	r3, [r7, #12]
 8105280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105286:	f043 0303 	orr.w	r3, r3, #3
 810528a:	68fa      	ldr	r2, [r7, #12]
 810528c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 810528e:	2300      	movs	r3, #0
}
 8105290:	4618      	mov	r0, r3
 8105292:	3714      	adds	r7, #20
 8105294:	46bd      	mov	sp, r7
 8105296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810529a:	4770      	bx	lr

0810529c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810529c:	b580      	push	{r7, lr}
 810529e:	b084      	sub	sp, #16
 81052a0:	af00      	add	r7, sp, #0
 81052a2:	60f8      	str	r0, [r7, #12]
 81052a4:	460b      	mov	r3, r1
 81052a6:	607a      	str	r2, [r7, #4]
 81052a8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81052aa:	4b37      	ldr	r3, [pc, #220]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	f023 0201 	bic.w	r2, r3, #1
 81052b2:	4935      	ldr	r1, [pc, #212]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81052b4:	68fb      	ldr	r3, [r7, #12]
 81052b6:	4313      	orrs	r3, r2
 81052b8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	2b00      	cmp	r3, #0
 81052be:	d123      	bne.n	8105308 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81052c0:	f7fe ffa4 	bl	810420c <HAL_GetCurrentCPUID>
 81052c4:	4603      	mov	r3, r0
 81052c6:	2b03      	cmp	r3, #3
 81052c8:	d158      	bne.n	810537c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81052ca:	4b2f      	ldr	r3, [pc, #188]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81052cc:	691b      	ldr	r3, [r3, #16]
 81052ce:	4a2e      	ldr	r2, [pc, #184]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81052d0:	f023 0301 	bic.w	r3, r3, #1
 81052d4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81052d6:	4b2d      	ldr	r3, [pc, #180]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81052d8:	691b      	ldr	r3, [r3, #16]
 81052da:	4a2c      	ldr	r2, [pc, #176]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81052dc:	f043 0304 	orr.w	r3, r3, #4
 81052e0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81052e2:	f3bf 8f4f 	dsb	sy
}
 81052e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81052e8:	f3bf 8f6f 	isb	sy
}
 81052ec:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81052ee:	7afb      	ldrb	r3, [r7, #11]
 81052f0:	2b01      	cmp	r3, #1
 81052f2:	d101      	bne.n	81052f8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81052f4:	bf30      	wfi
 81052f6:	e000      	b.n	81052fa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81052f8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81052fa:	4b24      	ldr	r3, [pc, #144]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81052fc:	691b      	ldr	r3, [r3, #16]
 81052fe:	4a23      	ldr	r2, [pc, #140]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105300:	f023 0304 	bic.w	r3, r3, #4
 8105304:	6113      	str	r3, [r2, #16]
 8105306:	e03c      	b.n	8105382 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	2b01      	cmp	r3, #1
 810530c:	d123      	bne.n	8105356 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810530e:	f7fe ff7d 	bl	810420c <HAL_GetCurrentCPUID>
 8105312:	4603      	mov	r3, r0
 8105314:	2b01      	cmp	r3, #1
 8105316:	d133      	bne.n	8105380 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105318:	4b1b      	ldr	r3, [pc, #108]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 810531a:	695b      	ldr	r3, [r3, #20]
 810531c:	4a1a      	ldr	r2, [pc, #104]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 810531e:	f023 0302 	bic.w	r3, r3, #2
 8105322:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105324:	4b19      	ldr	r3, [pc, #100]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105326:	691b      	ldr	r3, [r3, #16]
 8105328:	4a18      	ldr	r2, [pc, #96]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810532a:	f043 0304 	orr.w	r3, r3, #4
 810532e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105330:	f3bf 8f4f 	dsb	sy
}
 8105334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105336:	f3bf 8f6f 	isb	sy
}
 810533a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810533c:	7afb      	ldrb	r3, [r7, #11]
 810533e:	2b01      	cmp	r3, #1
 8105340:	d101      	bne.n	8105346 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105342:	bf30      	wfi
 8105344:	e000      	b.n	8105348 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105346:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105348:	4b10      	ldr	r3, [pc, #64]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810534a:	691b      	ldr	r3, [r3, #16]
 810534c:	4a0f      	ldr	r2, [pc, #60]	; (810538c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810534e:	f023 0304 	bic.w	r3, r3, #4
 8105352:	6113      	str	r3, [r2, #16]
 8105354:	e015      	b.n	8105382 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105356:	f7fe ff59 	bl	810420c <HAL_GetCurrentCPUID>
 810535a:	4603      	mov	r3, r0
 810535c:	2b03      	cmp	r3, #3
 810535e:	d106      	bne.n	810536e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105360:	4b09      	ldr	r3, [pc, #36]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105362:	691b      	ldr	r3, [r3, #16]
 8105364:	4a08      	ldr	r2, [pc, #32]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105366:	f023 0304 	bic.w	r3, r3, #4
 810536a:	6113      	str	r3, [r2, #16]
 810536c:	e009      	b.n	8105382 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810536e:	4b06      	ldr	r3, [pc, #24]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105370:	695b      	ldr	r3, [r3, #20]
 8105372:	4a05      	ldr	r2, [pc, #20]	; (8105388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105374:	f023 0304 	bic.w	r3, r3, #4
 8105378:	6153      	str	r3, [r2, #20]
 810537a:	e002      	b.n	8105382 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810537c:	bf00      	nop
 810537e:	e000      	b.n	8105382 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105380:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105382:	3710      	adds	r7, #16
 8105384:	46bd      	mov	sp, r7
 8105386:	bd80      	pop	{r7, pc}
 8105388:	58024800 	.word	0x58024800
 810538c:	e000ed00 	.word	0xe000ed00

08105390 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105390:	b580      	push	{r7, lr}
 8105392:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105394:	f7fe ff3a 	bl	810420c <HAL_GetCurrentCPUID>
 8105398:	4603      	mov	r3, r0
 810539a:	2b03      	cmp	r3, #3
 810539c:	d101      	bne.n	81053a2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810539e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81053a0:	e001      	b.n	81053a6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81053a2:	bf40      	sev
    __WFE ();
 81053a4:	bf20      	wfe
}
 81053a6:	bf00      	nop
 81053a8:	bd80      	pop	{r7, pc}
	...

081053ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 81053ac:	b480      	push	{r7}
 81053ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81053b0:	4b05      	ldr	r3, [pc, #20]	; (81053c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81053b2:	68db      	ldr	r3, [r3, #12]
 81053b4:	4a04      	ldr	r2, [pc, #16]	; (81053c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81053b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81053ba:	60d3      	str	r3, [r2, #12]
}
 81053bc:	bf00      	nop
 81053be:	46bd      	mov	sp, r7
 81053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053c4:	4770      	bx	lr
 81053c6:	bf00      	nop
 81053c8:	58024800 	.word	0x58024800

081053cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 81053cc:	b580      	push	{r7, lr}
 81053ce:	b086      	sub	sp, #24
 81053d0:	af02      	add	r7, sp, #8
 81053d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 81053d4:	f7fd fbb8 	bl	8102b48 <HAL_GetTick>
 81053d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	2b00      	cmp	r3, #0
 81053de:	d101      	bne.n	81053e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 81053e0:	2301      	movs	r3, #1
 81053e2:	e061      	b.n	81054a8 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 81053e4:	687b      	ldr	r3, [r7, #4]
 81053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81053ea:	b2db      	uxtb	r3, r3
 81053ec:	2b00      	cmp	r3, #0
 81053ee:	d107      	bne.n	8105400 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 81053f0:	6878      	ldr	r0, [r7, #4]
 81053f2:	f7fc faf5 	bl	81019e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 81053f6:	f241 3188 	movw	r1, #5000	; 0x1388
 81053fa:	6878      	ldr	r0, [r7, #4]
 81053fc:	f000 f85a 	bl	81054b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	689b      	ldr	r3, [r3, #8]
 810540e:	3b01      	subs	r3, #1
 8105410:	021a      	lsls	r2, r3, #8
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	430a      	orrs	r2, r1
 8105418:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810541e:	9300      	str	r3, [sp, #0]
 8105420:	68fb      	ldr	r3, [r7, #12]
 8105422:	2200      	movs	r2, #0
 8105424:	2120      	movs	r1, #32
 8105426:	6878      	ldr	r0, [r7, #4]
 8105428:	f000 f852 	bl	81054d0 <QSPI_WaitFlagStateUntilTimeout>
 810542c:	4603      	mov	r3, r0
 810542e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8105430:	7afb      	ldrb	r3, [r7, #11]
 8105432:	2b00      	cmp	r3, #0
 8105434:	d137      	bne.n	81054a6 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105440:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8105444:	687a      	ldr	r2, [r7, #4]
 8105446:	6852      	ldr	r2, [r2, #4]
 8105448:	0611      	lsls	r1, r2, #24
 810544a:	687a      	ldr	r2, [r7, #4]
 810544c:	68d2      	ldr	r2, [r2, #12]
 810544e:	4311      	orrs	r1, r2
 8105450:	687a      	ldr	r2, [r7, #4]
 8105452:	69d2      	ldr	r2, [r2, #28]
 8105454:	4311      	orrs	r1, r2
 8105456:	687a      	ldr	r2, [r7, #4]
 8105458:	6a12      	ldr	r2, [r2, #32]
 810545a:	4311      	orrs	r1, r2
 810545c:	687a      	ldr	r2, [r7, #4]
 810545e:	6812      	ldr	r2, [r2, #0]
 8105460:	430b      	orrs	r3, r1
 8105462:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	685a      	ldr	r2, [r3, #4]
 810546a:	4b11      	ldr	r3, [pc, #68]	; (81054b0 <HAL_QSPI_Init+0xe4>)
 810546c:	4013      	ands	r3, r2
 810546e:	687a      	ldr	r2, [r7, #4]
 8105470:	6912      	ldr	r2, [r2, #16]
 8105472:	0411      	lsls	r1, r2, #16
 8105474:	687a      	ldr	r2, [r7, #4]
 8105476:	6952      	ldr	r2, [r2, #20]
 8105478:	4311      	orrs	r1, r2
 810547a:	687a      	ldr	r2, [r7, #4]
 810547c:	6992      	ldr	r2, [r2, #24]
 810547e:	4311      	orrs	r1, r2
 8105480:	687a      	ldr	r2, [r7, #4]
 8105482:	6812      	ldr	r2, [r2, #0]
 8105484:	430b      	orrs	r3, r1
 8105486:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	681b      	ldr	r3, [r3, #0]
 810548c:	681a      	ldr	r2, [r3, #0]
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	f042 0201 	orr.w	r2, r2, #1
 8105496:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	2200      	movs	r2, #0
 810549c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	2201      	movs	r2, #1
 81054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 81054a6:	7afb      	ldrb	r3, [r7, #11]
}
 81054a8:	4618      	mov	r0, r3
 81054aa:	3710      	adds	r7, #16
 81054ac:	46bd      	mov	sp, r7
 81054ae:	bd80      	pop	{r7, pc}
 81054b0:	ffe0f8fe 	.word	0xffe0f8fe

081054b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 81054b4:	b480      	push	{r7}
 81054b6:	b083      	sub	sp, #12
 81054b8:	af00      	add	r7, sp, #0
 81054ba:	6078      	str	r0, [r7, #4]
 81054bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	683a      	ldr	r2, [r7, #0]
 81054c2:	649a      	str	r2, [r3, #72]	; 0x48
}
 81054c4:	bf00      	nop
 81054c6:	370c      	adds	r7, #12
 81054c8:	46bd      	mov	sp, r7
 81054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054ce:	4770      	bx	lr

081054d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 81054d0:	b580      	push	{r7, lr}
 81054d2:	b084      	sub	sp, #16
 81054d4:	af00      	add	r7, sp, #0
 81054d6:	60f8      	str	r0, [r7, #12]
 81054d8:	60b9      	str	r1, [r7, #8]
 81054da:	603b      	str	r3, [r7, #0]
 81054dc:	4613      	mov	r3, r2
 81054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81054e0:	e01a      	b.n	8105518 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81054e2:	69bb      	ldr	r3, [r7, #24]
 81054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054e8:	d016      	beq.n	8105518 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81054ea:	f7fd fb2d 	bl	8102b48 <HAL_GetTick>
 81054ee:	4602      	mov	r2, r0
 81054f0:	683b      	ldr	r3, [r7, #0]
 81054f2:	1ad3      	subs	r3, r2, r3
 81054f4:	69ba      	ldr	r2, [r7, #24]
 81054f6:	429a      	cmp	r2, r3
 81054f8:	d302      	bcc.n	8105500 <QSPI_WaitFlagStateUntilTimeout+0x30>
 81054fa:	69bb      	ldr	r3, [r7, #24]
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	d10b      	bne.n	8105518 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8105500:	68fb      	ldr	r3, [r7, #12]
 8105502:	2204      	movs	r2, #4
 8105504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8105508:	68fb      	ldr	r3, [r7, #12]
 810550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810550c:	f043 0201 	orr.w	r2, r3, #1
 8105510:	68fb      	ldr	r3, [r7, #12]
 8105512:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8105514:	2301      	movs	r3, #1
 8105516:	e00e      	b.n	8105536 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	689a      	ldr	r2, [r3, #8]
 810551e:	68bb      	ldr	r3, [r7, #8]
 8105520:	4013      	ands	r3, r2
 8105522:	2b00      	cmp	r3, #0
 8105524:	bf14      	ite	ne
 8105526:	2301      	movne	r3, #1
 8105528:	2300      	moveq	r3, #0
 810552a:	b2db      	uxtb	r3, r3
 810552c:	461a      	mov	r2, r3
 810552e:	79fb      	ldrb	r3, [r7, #7]
 8105530:	429a      	cmp	r2, r3
 8105532:	d1d6      	bne.n	81054e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105534:	2300      	movs	r3, #0
}
 8105536:	4618      	mov	r0, r3
 8105538:	3710      	adds	r7, #16
 810553a:	46bd      	mov	sp, r7
 810553c:	bd80      	pop	{r7, pc}
	...

08105540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105540:	b480      	push	{r7}
 8105542:	b089      	sub	sp, #36	; 0x24
 8105544:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105546:	4bb3      	ldr	r3, [pc, #716]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105548:	691b      	ldr	r3, [r3, #16]
 810554a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810554e:	2b18      	cmp	r3, #24
 8105550:	f200 8155 	bhi.w	81057fe <HAL_RCC_GetSysClockFreq+0x2be>
 8105554:	a201      	add	r2, pc, #4	; (adr r2, 810555c <HAL_RCC_GetSysClockFreq+0x1c>)
 8105556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810555a:	bf00      	nop
 810555c:	081055c1 	.word	0x081055c1
 8105560:	081057ff 	.word	0x081057ff
 8105564:	081057ff 	.word	0x081057ff
 8105568:	081057ff 	.word	0x081057ff
 810556c:	081057ff 	.word	0x081057ff
 8105570:	081057ff 	.word	0x081057ff
 8105574:	081057ff 	.word	0x081057ff
 8105578:	081057ff 	.word	0x081057ff
 810557c:	081055e7 	.word	0x081055e7
 8105580:	081057ff 	.word	0x081057ff
 8105584:	081057ff 	.word	0x081057ff
 8105588:	081057ff 	.word	0x081057ff
 810558c:	081057ff 	.word	0x081057ff
 8105590:	081057ff 	.word	0x081057ff
 8105594:	081057ff 	.word	0x081057ff
 8105598:	081057ff 	.word	0x081057ff
 810559c:	081055ed 	.word	0x081055ed
 81055a0:	081057ff 	.word	0x081057ff
 81055a4:	081057ff 	.word	0x081057ff
 81055a8:	081057ff 	.word	0x081057ff
 81055ac:	081057ff 	.word	0x081057ff
 81055b0:	081057ff 	.word	0x081057ff
 81055b4:	081057ff 	.word	0x081057ff
 81055b8:	081057ff 	.word	0x081057ff
 81055bc:	081055f3 	.word	0x081055f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055c0:	4b94      	ldr	r3, [pc, #592]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	f003 0320 	and.w	r3, r3, #32
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d009      	beq.n	81055e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81055cc:	4b91      	ldr	r3, [pc, #580]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	08db      	lsrs	r3, r3, #3
 81055d2:	f003 0303 	and.w	r3, r3, #3
 81055d6:	4a90      	ldr	r2, [pc, #576]	; (8105818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81055d8:	fa22 f303 	lsr.w	r3, r2, r3
 81055dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81055de:	e111      	b.n	8105804 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81055e0:	4b8d      	ldr	r3, [pc, #564]	; (8105818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81055e2:	61bb      	str	r3, [r7, #24]
    break;
 81055e4:	e10e      	b.n	8105804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81055e6:	4b8d      	ldr	r3, [pc, #564]	; (810581c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81055e8:	61bb      	str	r3, [r7, #24]
    break;
 81055ea:	e10b      	b.n	8105804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81055ec:	4b8c      	ldr	r3, [pc, #560]	; (8105820 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81055ee:	61bb      	str	r3, [r7, #24]
    break;
 81055f0:	e108      	b.n	8105804 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81055f2:	4b88      	ldr	r3, [pc, #544]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055f6:	f003 0303 	and.w	r3, r3, #3
 81055fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81055fc:	4b85      	ldr	r3, [pc, #532]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105600:	091b      	lsrs	r3, r3, #4
 8105602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105606:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105608:	4b82      	ldr	r3, [pc, #520]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810560c:	f003 0301 	and.w	r3, r3, #1
 8105610:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105612:	4b80      	ldr	r3, [pc, #512]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105616:	08db      	lsrs	r3, r3, #3
 8105618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810561c:	68fa      	ldr	r2, [r7, #12]
 810561e:	fb02 f303 	mul.w	r3, r2, r3
 8105622:	ee07 3a90 	vmov	s15, r3
 8105626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810562a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810562e:	693b      	ldr	r3, [r7, #16]
 8105630:	2b00      	cmp	r3, #0
 8105632:	f000 80e1 	beq.w	81057f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105636:	697b      	ldr	r3, [r7, #20]
 8105638:	2b02      	cmp	r3, #2
 810563a:	f000 8083 	beq.w	8105744 <HAL_RCC_GetSysClockFreq+0x204>
 810563e:	697b      	ldr	r3, [r7, #20]
 8105640:	2b02      	cmp	r3, #2
 8105642:	f200 80a1 	bhi.w	8105788 <HAL_RCC_GetSysClockFreq+0x248>
 8105646:	697b      	ldr	r3, [r7, #20]
 8105648:	2b00      	cmp	r3, #0
 810564a:	d003      	beq.n	8105654 <HAL_RCC_GetSysClockFreq+0x114>
 810564c:	697b      	ldr	r3, [r7, #20]
 810564e:	2b01      	cmp	r3, #1
 8105650:	d056      	beq.n	8105700 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105652:	e099      	b.n	8105788 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105654:	4b6f      	ldr	r3, [pc, #444]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f003 0320 	and.w	r3, r3, #32
 810565c:	2b00      	cmp	r3, #0
 810565e:	d02d      	beq.n	81056bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105660:	4b6c      	ldr	r3, [pc, #432]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	08db      	lsrs	r3, r3, #3
 8105666:	f003 0303 	and.w	r3, r3, #3
 810566a:	4a6b      	ldr	r2, [pc, #428]	; (8105818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810566c:	fa22 f303 	lsr.w	r3, r2, r3
 8105670:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	ee07 3a90 	vmov	s15, r3
 8105678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810567c:	693b      	ldr	r3, [r7, #16]
 810567e:	ee07 3a90 	vmov	s15, r3
 8105682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810568a:	4b62      	ldr	r3, [pc, #392]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105692:	ee07 3a90 	vmov	s15, r3
 8105696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810569a:	ed97 6a02 	vldr	s12, [r7, #8]
 810569e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8105824 <HAL_RCC_GetSysClockFreq+0x2e4>
 81056a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81056ba:	e087      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81056bc:	693b      	ldr	r3, [r7, #16]
 81056be:	ee07 3a90 	vmov	s15, r3
 81056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8105828 <HAL_RCC_GetSysClockFreq+0x2e8>
 81056ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056ce:	4b51      	ldr	r3, [pc, #324]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056d6:	ee07 3a90 	vmov	s15, r3
 81056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056de:	ed97 6a02 	vldr	s12, [r7, #8]
 81056e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8105824 <HAL_RCC_GetSysClockFreq+0x2e4>
 81056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81056fe:	e065      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105700:	693b      	ldr	r3, [r7, #16]
 8105702:	ee07 3a90 	vmov	s15, r3
 8105706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810570a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810582c <HAL_RCC_GetSysClockFreq+0x2ec>
 810570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105712:	4b40      	ldr	r3, [pc, #256]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810571a:	ee07 3a90 	vmov	s15, r3
 810571e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105722:	ed97 6a02 	vldr	s12, [r7, #8]
 8105726:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8105824 <HAL_RCC_GetSysClockFreq+0x2e4>
 810572a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810572e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810573a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810573e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105742:	e043      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105744:	693b      	ldr	r3, [r7, #16]
 8105746:	ee07 3a90 	vmov	s15, r3
 810574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810574e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105830 <HAL_RCC_GetSysClockFreq+0x2f0>
 8105752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105756:	4b2f      	ldr	r3, [pc, #188]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810575e:	ee07 3a90 	vmov	s15, r3
 8105762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105766:	ed97 6a02 	vldr	s12, [r7, #8]
 810576a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8105824 <HAL_RCC_GetSysClockFreq+0x2e4>
 810576e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105786:	e021      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105788:	693b      	ldr	r3, [r7, #16]
 810578a:	ee07 3a90 	vmov	s15, r3
 810578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105792:	eddf 6a26 	vldr	s13, [pc, #152]	; 810582c <HAL_RCC_GetSysClockFreq+0x2ec>
 8105796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810579a:	4b1e      	ldr	r3, [pc, #120]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057a2:	ee07 3a90 	vmov	s15, r3
 81057a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81057ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8105824 <HAL_RCC_GetSysClockFreq+0x2e4>
 81057b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81057ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81057cc:	4b11      	ldr	r3, [pc, #68]	; (8105814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057d0:	0a5b      	lsrs	r3, r3, #9
 81057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81057d6:	3301      	adds	r3, #1
 81057d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81057da:	683b      	ldr	r3, [r7, #0]
 81057dc:	ee07 3a90 	vmov	s15, r3
 81057e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81057e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81057e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81057ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81057f0:	ee17 3a90 	vmov	r3, s15
 81057f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81057f6:	e005      	b.n	8105804 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81057f8:	2300      	movs	r3, #0
 81057fa:	61bb      	str	r3, [r7, #24]
    break;
 81057fc:	e002      	b.n	8105804 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81057fe:	4b07      	ldr	r3, [pc, #28]	; (810581c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105800:	61bb      	str	r3, [r7, #24]
    break;
 8105802:	bf00      	nop
  }

  return sysclockfreq;
 8105804:	69bb      	ldr	r3, [r7, #24]
}
 8105806:	4618      	mov	r0, r3
 8105808:	3724      	adds	r7, #36	; 0x24
 810580a:	46bd      	mov	sp, r7
 810580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105810:	4770      	bx	lr
 8105812:	bf00      	nop
 8105814:	58024400 	.word	0x58024400
 8105818:	03d09000 	.word	0x03d09000
 810581c:	003d0900 	.word	0x003d0900
 8105820:	017d7840 	.word	0x017d7840
 8105824:	46000000 	.word	0x46000000
 8105828:	4c742400 	.word	0x4c742400
 810582c:	4a742400 	.word	0x4a742400
 8105830:	4bbebc20 	.word	0x4bbebc20

08105834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105834:	b580      	push	{r7, lr}
 8105836:	b082      	sub	sp, #8
 8105838:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810583a:	f7ff fe81 	bl	8105540 <HAL_RCC_GetSysClockFreq>
 810583e:	4602      	mov	r2, r0
 8105840:	4b11      	ldr	r3, [pc, #68]	; (8105888 <HAL_RCC_GetHCLKFreq+0x54>)
 8105842:	699b      	ldr	r3, [r3, #24]
 8105844:	0a1b      	lsrs	r3, r3, #8
 8105846:	f003 030f 	and.w	r3, r3, #15
 810584a:	4910      	ldr	r1, [pc, #64]	; (810588c <HAL_RCC_GetHCLKFreq+0x58>)
 810584c:	5ccb      	ldrb	r3, [r1, r3]
 810584e:	f003 031f 	and.w	r3, r3, #31
 8105852:	fa22 f303 	lsr.w	r3, r2, r3
 8105856:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105858:	4b0b      	ldr	r3, [pc, #44]	; (8105888 <HAL_RCC_GetHCLKFreq+0x54>)
 810585a:	699b      	ldr	r3, [r3, #24]
 810585c:	f003 030f 	and.w	r3, r3, #15
 8105860:	4a0a      	ldr	r2, [pc, #40]	; (810588c <HAL_RCC_GetHCLKFreq+0x58>)
 8105862:	5cd3      	ldrb	r3, [r2, r3]
 8105864:	f003 031f 	and.w	r3, r3, #31
 8105868:	687a      	ldr	r2, [r7, #4]
 810586a:	fa22 f303 	lsr.w	r3, r2, r3
 810586e:	4a08      	ldr	r2, [pc, #32]	; (8105890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105870:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105872:	4b07      	ldr	r3, [pc, #28]	; (8105890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	4a07      	ldr	r2, [pc, #28]	; (8105894 <HAL_RCC_GetHCLKFreq+0x60>)
 8105878:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810587a:	4b05      	ldr	r3, [pc, #20]	; (8105890 <HAL_RCC_GetHCLKFreq+0x5c>)
 810587c:	681b      	ldr	r3, [r3, #0]
}
 810587e:	4618      	mov	r0, r3
 8105880:	3708      	adds	r7, #8
 8105882:	46bd      	mov	sp, r7
 8105884:	bd80      	pop	{r7, pc}
 8105886:	bf00      	nop
 8105888:	58024400 	.word	0x58024400
 810588c:	0810cc9c 	.word	0x0810cc9c
 8105890:	10000004 	.word	0x10000004
 8105894:	10000000 	.word	0x10000000

08105898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105898:	b580      	push	{r7, lr}
 810589a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810589c:	f7ff ffca 	bl	8105834 <HAL_RCC_GetHCLKFreq>
 81058a0:	4602      	mov	r2, r0
 81058a2:	4b06      	ldr	r3, [pc, #24]	; (81058bc <HAL_RCC_GetPCLK1Freq+0x24>)
 81058a4:	69db      	ldr	r3, [r3, #28]
 81058a6:	091b      	lsrs	r3, r3, #4
 81058a8:	f003 0307 	and.w	r3, r3, #7
 81058ac:	4904      	ldr	r1, [pc, #16]	; (81058c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81058ae:	5ccb      	ldrb	r3, [r1, r3]
 81058b0:	f003 031f 	and.w	r3, r3, #31
 81058b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81058b8:	4618      	mov	r0, r3
 81058ba:	bd80      	pop	{r7, pc}
 81058bc:	58024400 	.word	0x58024400
 81058c0:	0810cc9c 	.word	0x0810cc9c

081058c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81058c4:	b580      	push	{r7, lr}
 81058c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81058c8:	f7ff ffb4 	bl	8105834 <HAL_RCC_GetHCLKFreq>
 81058cc:	4602      	mov	r2, r0
 81058ce:	4b06      	ldr	r3, [pc, #24]	; (81058e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81058d0:	69db      	ldr	r3, [r3, #28]
 81058d2:	0a1b      	lsrs	r3, r3, #8
 81058d4:	f003 0307 	and.w	r3, r3, #7
 81058d8:	4904      	ldr	r1, [pc, #16]	; (81058ec <HAL_RCC_GetPCLK2Freq+0x28>)
 81058da:	5ccb      	ldrb	r3, [r1, r3]
 81058dc:	f003 031f 	and.w	r3, r3, #31
 81058e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81058e4:	4618      	mov	r0, r3
 81058e6:	bd80      	pop	{r7, pc}
 81058e8:	58024400 	.word	0x58024400
 81058ec:	0810cc9c 	.word	0x0810cc9c

081058f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81058f0:	b580      	push	{r7, lr}
 81058f2:	b086      	sub	sp, #24
 81058f4:	af00      	add	r7, sp, #0
 81058f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81058f8:	2300      	movs	r3, #0
 81058fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81058fc:	2300      	movs	r3, #0
 81058fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105908:	2b00      	cmp	r3, #0
 810590a:	d03f      	beq.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105914:	d02a      	beq.n	810596c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810591a:	d824      	bhi.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810591c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105920:	d018      	beq.n	8105954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105926:	d81e      	bhi.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105928:	2b00      	cmp	r3, #0
 810592a:	d003      	beq.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810592c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105930:	d007      	beq.n	8105942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8105932:	e018      	b.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105934:	4bab      	ldr	r3, [pc, #684]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105938:	4aaa      	ldr	r2, [pc, #680]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810593a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810593e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105940:	e015      	b.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	3304      	adds	r3, #4
 8105946:	2102      	movs	r1, #2
 8105948:	4618      	mov	r0, r3
 810594a:	f002 f823 	bl	8107994 <RCCEx_PLL2_Config>
 810594e:	4603      	mov	r3, r0
 8105950:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105952:	e00c      	b.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	3324      	adds	r3, #36	; 0x24
 8105958:	2102      	movs	r1, #2
 810595a:	4618      	mov	r0, r3
 810595c:	f002 f8cc 	bl	8107af8 <RCCEx_PLL3_Config>
 8105960:	4603      	mov	r3, r0
 8105962:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105964:	e003      	b.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105966:	2301      	movs	r3, #1
 8105968:	75fb      	strb	r3, [r7, #23]
      break;
 810596a:	e000      	b.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810596c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810596e:	7dfb      	ldrb	r3, [r7, #23]
 8105970:	2b00      	cmp	r3, #0
 8105972:	d109      	bne.n	8105988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105974:	4b9b      	ldr	r3, [pc, #620]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105980:	4998      	ldr	r1, [pc, #608]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105982:	4313      	orrs	r3, r2
 8105984:	650b      	str	r3, [r1, #80]	; 0x50
 8105986:	e001      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105988:	7dfb      	ldrb	r3, [r7, #23]
 810598a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105994:	2b00      	cmp	r3, #0
 8105996:	d03d      	beq.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810599c:	2b04      	cmp	r3, #4
 810599e:	d826      	bhi.n	81059ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81059a0:	a201      	add	r2, pc, #4	; (adr r2, 81059a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059a6:	bf00      	nop
 81059a8:	081059bd 	.word	0x081059bd
 81059ac:	081059cb 	.word	0x081059cb
 81059b0:	081059dd 	.word	0x081059dd
 81059b4:	081059f5 	.word	0x081059f5
 81059b8:	081059f5 	.word	0x081059f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059bc:	4b89      	ldr	r3, [pc, #548]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059c0:	4a88      	ldr	r2, [pc, #544]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81059c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81059c8:	e015      	b.n	81059f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	3304      	adds	r3, #4
 81059ce:	2100      	movs	r1, #0
 81059d0:	4618      	mov	r0, r3
 81059d2:	f001 ffdf 	bl	8107994 <RCCEx_PLL2_Config>
 81059d6:	4603      	mov	r3, r0
 81059d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81059da:	e00c      	b.n	81059f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	3324      	adds	r3, #36	; 0x24
 81059e0:	2100      	movs	r1, #0
 81059e2:	4618      	mov	r0, r3
 81059e4:	f002 f888 	bl	8107af8 <RCCEx_PLL3_Config>
 81059e8:	4603      	mov	r3, r0
 81059ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81059ec:	e003      	b.n	81059f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81059ee:	2301      	movs	r3, #1
 81059f0:	75fb      	strb	r3, [r7, #23]
      break;
 81059f2:	e000      	b.n	81059f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81059f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81059f6:	7dfb      	ldrb	r3, [r7, #23]
 81059f8:	2b00      	cmp	r3, #0
 81059fa:	d109      	bne.n	8105a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81059fc:	4b79      	ldr	r3, [pc, #484]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a00:	f023 0207 	bic.w	r2, r3, #7
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a08:	4976      	ldr	r1, [pc, #472]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a0a:	4313      	orrs	r3, r2
 8105a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8105a0e:	e001      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a10:	7dfb      	ldrb	r3, [r7, #23]
 8105a12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105a1c:	2b00      	cmp	r3, #0
 8105a1e:	d042      	beq.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105a28:	d02b      	beq.n	8105a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8105a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105a2e:	d825      	bhi.n	8105a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105a30:	2bc0      	cmp	r3, #192	; 0xc0
 8105a32:	d028      	beq.n	8105a86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105a34:	2bc0      	cmp	r3, #192	; 0xc0
 8105a36:	d821      	bhi.n	8105a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105a38:	2b80      	cmp	r3, #128	; 0x80
 8105a3a:	d016      	beq.n	8105a6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8105a3c:	2b80      	cmp	r3, #128	; 0x80
 8105a3e:	d81d      	bhi.n	8105a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105a40:	2b00      	cmp	r3, #0
 8105a42:	d002      	beq.n	8105a4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105a44:	2b40      	cmp	r3, #64	; 0x40
 8105a46:	d007      	beq.n	8105a58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105a48:	e018      	b.n	8105a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a4a:	4b66      	ldr	r3, [pc, #408]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a4e:	4a65      	ldr	r2, [pc, #404]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105a56:	e017      	b.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	3304      	adds	r3, #4
 8105a5c:	2100      	movs	r1, #0
 8105a5e:	4618      	mov	r0, r3
 8105a60:	f001 ff98 	bl	8107994 <RCCEx_PLL2_Config>
 8105a64:	4603      	mov	r3, r0
 8105a66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105a68:	e00e      	b.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	3324      	adds	r3, #36	; 0x24
 8105a6e:	2100      	movs	r1, #0
 8105a70:	4618      	mov	r0, r3
 8105a72:	f002 f841 	bl	8107af8 <RCCEx_PLL3_Config>
 8105a76:	4603      	mov	r3, r0
 8105a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105a7a:	e005      	b.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105a7c:	2301      	movs	r3, #1
 8105a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8105a80:	e002      	b.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105a82:	bf00      	nop
 8105a84:	e000      	b.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a88:	7dfb      	ldrb	r3, [r7, #23]
 8105a8a:	2b00      	cmp	r3, #0
 8105a8c:	d109      	bne.n	8105aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105a8e:	4b55      	ldr	r3, [pc, #340]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a9a:	4952      	ldr	r1, [pc, #328]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a9c:	4313      	orrs	r3, r2
 8105a9e:	650b      	str	r3, [r1, #80]	; 0x50
 8105aa0:	e001      	b.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105aa2:	7dfb      	ldrb	r3, [r7, #23]
 8105aa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105aae:	2b00      	cmp	r3, #0
 8105ab0:	d049      	beq.n	8105b46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105abc:	d030      	beq.n	8105b20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105abe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105ac2:	d82a      	bhi.n	8105b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105ac8:	d02c      	beq.n	8105b24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105aca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105ace:	d824      	bhi.n	8105b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105ad4:	d018      	beq.n	8105b08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105ada:	d81e      	bhi.n	8105b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105adc:	2b00      	cmp	r3, #0
 8105ade:	d003      	beq.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105ae4:	d007      	beq.n	8105af6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105ae6:	e018      	b.n	8105b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ae8:	4b3e      	ldr	r3, [pc, #248]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105aec:	4a3d      	ldr	r2, [pc, #244]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105af4:	e017      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	3304      	adds	r3, #4
 8105afa:	2100      	movs	r1, #0
 8105afc:	4618      	mov	r0, r3
 8105afe:	f001 ff49 	bl	8107994 <RCCEx_PLL2_Config>
 8105b02:	4603      	mov	r3, r0
 8105b04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105b06:	e00e      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	3324      	adds	r3, #36	; 0x24
 8105b0c:	2100      	movs	r1, #0
 8105b0e:	4618      	mov	r0, r3
 8105b10:	f001 fff2 	bl	8107af8 <RCCEx_PLL3_Config>
 8105b14:	4603      	mov	r3, r0
 8105b16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b18:	e005      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105b1a:	2301      	movs	r3, #1
 8105b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8105b1e:	e002      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105b20:	bf00      	nop
 8105b22:	e000      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b26:	7dfb      	ldrb	r3, [r7, #23]
 8105b28:	2b00      	cmp	r3, #0
 8105b2a:	d10a      	bne.n	8105b42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105b2c:	4b2d      	ldr	r3, [pc, #180]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105b3a:	492a      	ldr	r1, [pc, #168]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105b3c:	4313      	orrs	r3, r2
 8105b3e:	658b      	str	r3, [r1, #88]	; 0x58
 8105b40:	e001      	b.n	8105b46 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b42:	7dfb      	ldrb	r3, [r7, #23]
 8105b44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105b4e:	2b00      	cmp	r3, #0
 8105b50:	d04c      	beq.n	8105bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105b5c:	d030      	beq.n	8105bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105b62:	d82a      	bhi.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105b68:	d02c      	beq.n	8105bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8105b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105b6e:	d824      	bhi.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105b74:	d018      	beq.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105b7a:	d81e      	bhi.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105b7c:	2b00      	cmp	r3, #0
 8105b7e:	d003      	beq.n	8105b88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105b84:	d007      	beq.n	8105b96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105b86:	e018      	b.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b88:	4b16      	ldr	r3, [pc, #88]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b8c:	4a15      	ldr	r2, [pc, #84]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b94:	e017      	b.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	3304      	adds	r3, #4
 8105b9a:	2100      	movs	r1, #0
 8105b9c:	4618      	mov	r0, r3
 8105b9e:	f001 fef9 	bl	8107994 <RCCEx_PLL2_Config>
 8105ba2:	4603      	mov	r3, r0
 8105ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105ba6:	e00e      	b.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	3324      	adds	r3, #36	; 0x24
 8105bac:	2100      	movs	r1, #0
 8105bae:	4618      	mov	r0, r3
 8105bb0:	f001 ffa2 	bl	8107af8 <RCCEx_PLL3_Config>
 8105bb4:	4603      	mov	r3, r0
 8105bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105bb8:	e005      	b.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105bba:	2301      	movs	r3, #1
 8105bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8105bbe:	e002      	b.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8105bc0:	bf00      	nop
 8105bc2:	e000      	b.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8105bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bc6:	7dfb      	ldrb	r3, [r7, #23]
 8105bc8:	2b00      	cmp	r3, #0
 8105bca:	d10d      	bne.n	8105be8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105bcc:	4b05      	ldr	r3, [pc, #20]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bd0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105bda:	4902      	ldr	r1, [pc, #8]	; (8105be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105bdc:	4313      	orrs	r3, r2
 8105bde:	658b      	str	r3, [r1, #88]	; 0x58
 8105be0:	e004      	b.n	8105bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8105be2:	bf00      	nop
 8105be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105be8:	7dfb      	ldrb	r3, [r7, #23]
 8105bea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d032      	beq.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105bfc:	2b30      	cmp	r3, #48	; 0x30
 8105bfe:	d01c      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105c00:	2b30      	cmp	r3, #48	; 0x30
 8105c02:	d817      	bhi.n	8105c34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8105c04:	2b20      	cmp	r3, #32
 8105c06:	d00c      	beq.n	8105c22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8105c08:	2b20      	cmp	r3, #32
 8105c0a:	d813      	bhi.n	8105c34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d016      	beq.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8105c10:	2b10      	cmp	r3, #16
 8105c12:	d10f      	bne.n	8105c34 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c14:	4bb1      	ldr	r3, [pc, #708]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c18:	4ab0      	ldr	r2, [pc, #704]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105c20:	e00e      	b.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	3304      	adds	r3, #4
 8105c26:	2102      	movs	r1, #2
 8105c28:	4618      	mov	r0, r3
 8105c2a:	f001 feb3 	bl	8107994 <RCCEx_PLL2_Config>
 8105c2e:	4603      	mov	r3, r0
 8105c30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105c32:	e005      	b.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105c34:	2301      	movs	r3, #1
 8105c36:	75fb      	strb	r3, [r7, #23]
      break;
 8105c38:	e002      	b.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8105c3a:	bf00      	nop
 8105c3c:	e000      	b.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8105c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c40:	7dfb      	ldrb	r3, [r7, #23]
 8105c42:	2b00      	cmp	r3, #0
 8105c44:	d109      	bne.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105c46:	4ba5      	ldr	r3, [pc, #660]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105c4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105c52:	49a2      	ldr	r1, [pc, #648]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c54:	4313      	orrs	r3, r2
 8105c56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105c58:	e001      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c5a:	7dfb      	ldrb	r3, [r7, #23]
 8105c5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d047      	beq.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c72:	d030      	beq.n	8105cd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8105c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c78:	d82a      	bhi.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8105c7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105c7e:	d02c      	beq.n	8105cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8105c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105c84:	d824      	bhi.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8105c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c8a:	d018      	beq.n	8105cbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8105c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c90:	d81e      	bhi.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8105c92:	2b00      	cmp	r3, #0
 8105c94:	d003      	beq.n	8105c9e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8105c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105c9a:	d007      	beq.n	8105cac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8105c9c:	e018      	b.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c9e:	4b8f      	ldr	r3, [pc, #572]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ca2:	4a8e      	ldr	r2, [pc, #568]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105caa:	e017      	b.n	8105cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	3304      	adds	r3, #4
 8105cb0:	2100      	movs	r1, #0
 8105cb2:	4618      	mov	r0, r3
 8105cb4:	f001 fe6e 	bl	8107994 <RCCEx_PLL2_Config>
 8105cb8:	4603      	mov	r3, r0
 8105cba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105cbc:	e00e      	b.n	8105cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	3324      	adds	r3, #36	; 0x24
 8105cc2:	2100      	movs	r1, #0
 8105cc4:	4618      	mov	r0, r3
 8105cc6:	f001 ff17 	bl	8107af8 <RCCEx_PLL3_Config>
 8105cca:	4603      	mov	r3, r0
 8105ccc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105cce:	e005      	b.n	8105cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105cd0:	2301      	movs	r3, #1
 8105cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8105cd4:	e002      	b.n	8105cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8105cd6:	bf00      	nop
 8105cd8:	e000      	b.n	8105cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8105cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105cdc:	7dfb      	ldrb	r3, [r7, #23]
 8105cde:	2b00      	cmp	r3, #0
 8105ce0:	d109      	bne.n	8105cf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105ce2:	4b7e      	ldr	r3, [pc, #504]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ce6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105cee:	497b      	ldr	r1, [pc, #492]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105cf0:	4313      	orrs	r3, r2
 8105cf2:	650b      	str	r3, [r1, #80]	; 0x50
 8105cf4:	e001      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cf6:	7dfb      	ldrb	r3, [r7, #23]
 8105cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	681b      	ldr	r3, [r3, #0]
 8105cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105d02:	2b00      	cmp	r3, #0
 8105d04:	d049      	beq.n	8105d9a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105d0e:	d02e      	beq.n	8105d6e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8105d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105d14:	d828      	bhi.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105d16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105d1a:	d02a      	beq.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8105d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105d20:	d822      	bhi.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105d26:	d026      	beq.n	8105d76 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8105d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105d2c:	d81c      	bhi.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d32:	d010      	beq.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8105d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d38:	d816      	bhi.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105d3a:	2b00      	cmp	r3, #0
 8105d3c:	d01d      	beq.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8105d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d42:	d111      	bne.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	3304      	adds	r3, #4
 8105d48:	2101      	movs	r1, #1
 8105d4a:	4618      	mov	r0, r3
 8105d4c:	f001 fe22 	bl	8107994 <RCCEx_PLL2_Config>
 8105d50:	4603      	mov	r3, r0
 8105d52:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105d54:	e012      	b.n	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	3324      	adds	r3, #36	; 0x24
 8105d5a:	2101      	movs	r1, #1
 8105d5c:	4618      	mov	r0, r3
 8105d5e:	f001 fecb 	bl	8107af8 <RCCEx_PLL3_Config>
 8105d62:	4603      	mov	r3, r0
 8105d64:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105d66:	e009      	b.n	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105d68:	2301      	movs	r3, #1
 8105d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8105d6c:	e006      	b.n	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105d6e:	bf00      	nop
 8105d70:	e004      	b.n	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105d72:	bf00      	nop
 8105d74:	e002      	b.n	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105d76:	bf00      	nop
 8105d78:	e000      	b.n	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d7c:	7dfb      	ldrb	r3, [r7, #23]
 8105d7e:	2b00      	cmp	r3, #0
 8105d80:	d109      	bne.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105d82:	4b56      	ldr	r3, [pc, #344]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d8e:	4953      	ldr	r1, [pc, #332]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105d90:	4313      	orrs	r3, r2
 8105d92:	650b      	str	r3, [r1, #80]	; 0x50
 8105d94:	e001      	b.n	8105d9a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d96:	7dfb      	ldrb	r3, [r7, #23]
 8105d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	d04b      	beq.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105db0:	d02e      	beq.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8105db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105db6:	d828      	bhi.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105dbc:	d02a      	beq.n	8105e14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8105dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105dc2:	d822      	bhi.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105dc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105dc8:	d026      	beq.n	8105e18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8105dca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105dce:	d81c      	bhi.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105dd4:	d010      	beq.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8105dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105dda:	d816      	bhi.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105ddc:	2b00      	cmp	r3, #0
 8105dde:	d01d      	beq.n	8105e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8105de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105de4:	d111      	bne.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	3304      	adds	r3, #4
 8105dea:	2101      	movs	r1, #1
 8105dec:	4618      	mov	r0, r3
 8105dee:	f001 fdd1 	bl	8107994 <RCCEx_PLL2_Config>
 8105df2:	4603      	mov	r3, r0
 8105df4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105df6:	e012      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	3324      	adds	r3, #36	; 0x24
 8105dfc:	2101      	movs	r1, #1
 8105dfe:	4618      	mov	r0, r3
 8105e00:	f001 fe7a 	bl	8107af8 <RCCEx_PLL3_Config>
 8105e04:	4603      	mov	r3, r0
 8105e06:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105e08:	e009      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105e0a:	2301      	movs	r3, #1
 8105e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8105e0e:	e006      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105e10:	bf00      	nop
 8105e12:	e004      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105e14:	bf00      	nop
 8105e16:	e002      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105e18:	bf00      	nop
 8105e1a:	e000      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e1e:	7dfb      	ldrb	r3, [r7, #23]
 8105e20:	2b00      	cmp	r3, #0
 8105e22:	d10a      	bne.n	8105e3a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105e24:	4b2d      	ldr	r3, [pc, #180]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e28:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105e32:	492a      	ldr	r1, [pc, #168]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105e34:	4313      	orrs	r3, r2
 8105e36:	658b      	str	r3, [r1, #88]	; 0x58
 8105e38:	e001      	b.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e3a:	7dfb      	ldrb	r3, [r7, #23]
 8105e3c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8105e46:	2b00      	cmp	r3, #0
 8105e48:	d022      	beq.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e4e:	2b00      	cmp	r3, #0
 8105e50:	d00e      	beq.n	8105e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8105e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105e56:	d108      	bne.n	8105e6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	3304      	adds	r3, #4
 8105e5c:	2101      	movs	r1, #1
 8105e5e:	4618      	mov	r0, r3
 8105e60:	f001 fd98 	bl	8107994 <RCCEx_PLL2_Config>
 8105e64:	4603      	mov	r3, r0
 8105e66:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8105e68:	e003      	b.n	8105e72 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105e6a:	2301      	movs	r3, #1
 8105e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8105e6e:	e000      	b.n	8105e72 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8105e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e72:	7dfb      	ldrb	r3, [r7, #23]
 8105e74:	2b00      	cmp	r3, #0
 8105e76:	d109      	bne.n	8105e8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8105e78:	4b18      	ldr	r3, [pc, #96]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e84:	4915      	ldr	r1, [pc, #84]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105e86:	4313      	orrs	r3, r2
 8105e88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105e8a:	e001      	b.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e8c:	7dfb      	ldrb	r3, [r7, #23]
 8105e8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105e98:	2b00      	cmp	r3, #0
 8105e9a:	d031      	beq.n	8105f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105e9c:	687b      	ldr	r3, [r7, #4]
 8105e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ea4:	d00e      	beq.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105eaa:	d814      	bhi.n	8105ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8105eac:	2b00      	cmp	r3, #0
 8105eae:	d017      	beq.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8105eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105eb4:	d10f      	bne.n	8105ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105eb6:	4b09      	ldr	r3, [pc, #36]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105eba:	4a08      	ldr	r2, [pc, #32]	; (8105edc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105ec2:	e00e      	b.n	8105ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	3304      	adds	r3, #4
 8105ec8:	2101      	movs	r1, #1
 8105eca:	4618      	mov	r0, r3
 8105ecc:	f001 fd62 	bl	8107994 <RCCEx_PLL2_Config>
 8105ed0:	4603      	mov	r3, r0
 8105ed2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105ed4:	e005      	b.n	8105ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105ed6:	2301      	movs	r3, #1
 8105ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8105eda:	e002      	b.n	8105ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8105edc:	58024400 	.word	0x58024400
      break;
 8105ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ee2:	7dfb      	ldrb	r3, [r7, #23]
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	d109      	bne.n	8105efc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105ee8:	4bb8      	ldr	r3, [pc, #736]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105eec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ef4:	49b5      	ldr	r1, [pc, #724]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105ef6:	4313      	orrs	r3, r2
 8105ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8105efa:	e001      	b.n	8105f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105efc:	7dfb      	ldrb	r3, [r7, #23]
 8105efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105f08:	2b00      	cmp	r3, #0
 8105f0a:	d032      	beq.n	8105f72 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f10:	2b03      	cmp	r3, #3
 8105f12:	d81b      	bhi.n	8105f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8105f14:	a201      	add	r2, pc, #4	; (adr r2, 8105f1c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8105f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f1a:	bf00      	nop
 8105f1c:	08105f53 	.word	0x08105f53
 8105f20:	08105f2d 	.word	0x08105f2d
 8105f24:	08105f3b 	.word	0x08105f3b
 8105f28:	08105f53 	.word	0x08105f53
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f2c:	4ba7      	ldr	r3, [pc, #668]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f30:	4aa6      	ldr	r2, [pc, #664]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105f38:	e00c      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	3304      	adds	r3, #4
 8105f3e:	2102      	movs	r1, #2
 8105f40:	4618      	mov	r0, r3
 8105f42:	f001 fd27 	bl	8107994 <RCCEx_PLL2_Config>
 8105f46:	4603      	mov	r3, r0
 8105f48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105f4a:	e003      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105f4c:	2301      	movs	r3, #1
 8105f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8105f50:	e000      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8105f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105f54:	7dfb      	ldrb	r3, [r7, #23]
 8105f56:	2b00      	cmp	r3, #0
 8105f58:	d109      	bne.n	8105f6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105f5a:	4b9c      	ldr	r3, [pc, #624]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f5e:	f023 0203 	bic.w	r2, r3, #3
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f66:	4999      	ldr	r1, [pc, #612]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f68:	4313      	orrs	r3, r2
 8105f6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105f6c:	e001      	b.n	8105f72 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f6e:	7dfb      	ldrb	r3, [r7, #23]
 8105f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	681b      	ldr	r3, [r3, #0]
 8105f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105f7a:	2b00      	cmp	r3, #0
 8105f7c:	f000 8088 	beq.w	8106090 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105f80:	4b93      	ldr	r3, [pc, #588]	; (81061d0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	4a92      	ldr	r2, [pc, #584]	; (81061d0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8105f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105f8c:	f7fc fddc 	bl	8102b48 <HAL_GetTick>
 8105f90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105f92:	e009      	b.n	8105fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105f94:	f7fc fdd8 	bl	8102b48 <HAL_GetTick>
 8105f98:	4602      	mov	r2, r0
 8105f9a:	693b      	ldr	r3, [r7, #16]
 8105f9c:	1ad3      	subs	r3, r2, r3
 8105f9e:	2b64      	cmp	r3, #100	; 0x64
 8105fa0:	d902      	bls.n	8105fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8105fa2:	2303      	movs	r3, #3
 8105fa4:	75fb      	strb	r3, [r7, #23]
        break;
 8105fa6:	e005      	b.n	8105fb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105fa8:	4b89      	ldr	r3, [pc, #548]	; (81061d0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105fb0:	2b00      	cmp	r3, #0
 8105fb2:	d0ef      	beq.n	8105f94 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8105fb4:	7dfb      	ldrb	r3, [r7, #23]
 8105fb6:	2b00      	cmp	r3, #0
 8105fb8:	d168      	bne.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105fba:	4b84      	ldr	r3, [pc, #528]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105fc4:	4053      	eors	r3, r2
 8105fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105fca:	2b00      	cmp	r3, #0
 8105fcc:	d013      	beq.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105fce:	4b7f      	ldr	r3, [pc, #508]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105fd6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105fd8:	4b7c      	ldr	r3, [pc, #496]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105fdc:	4a7b      	ldr	r2, [pc, #492]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105fe2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105fe4:	4b79      	ldr	r3, [pc, #484]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105fe8:	4a78      	ldr	r2, [pc, #480]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105fee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105ff0:	4a76      	ldr	r2, [pc, #472]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105ff2:	68fb      	ldr	r3, [r7, #12]
 8105ff4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106000:	d115      	bne.n	810602e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106002:	f7fc fda1 	bl	8102b48 <HAL_GetTick>
 8106006:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106008:	e00b      	b.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810600a:	f7fc fd9d 	bl	8102b48 <HAL_GetTick>
 810600e:	4602      	mov	r2, r0
 8106010:	693b      	ldr	r3, [r7, #16]
 8106012:	1ad3      	subs	r3, r2, r3
 8106014:	f241 3288 	movw	r2, #5000	; 0x1388
 8106018:	4293      	cmp	r3, r2
 810601a:	d902      	bls.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 810601c:	2303      	movs	r3, #3
 810601e:	75fb      	strb	r3, [r7, #23]
            break;
 8106020:	e005      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106022:	4b6a      	ldr	r3, [pc, #424]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106026:	f003 0302 	and.w	r3, r3, #2
 810602a:	2b00      	cmp	r3, #0
 810602c:	d0ed      	beq.n	810600a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 810602e:	7dfb      	ldrb	r3, [r7, #23]
 8106030:	2b00      	cmp	r3, #0
 8106032:	d128      	bne.n	8106086 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810603e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106042:	d10f      	bne.n	8106064 <HAL_RCCEx_PeriphCLKConfig+0x774>
 8106044:	4b61      	ldr	r3, [pc, #388]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106046:	691b      	ldr	r3, [r3, #16]
 8106048:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106052:	091b      	lsrs	r3, r3, #4
 8106054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106058:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810605c:	495b      	ldr	r1, [pc, #364]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 810605e:	4313      	orrs	r3, r2
 8106060:	610b      	str	r3, [r1, #16]
 8106062:	e005      	b.n	8106070 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8106064:	4b59      	ldr	r3, [pc, #356]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106066:	691b      	ldr	r3, [r3, #16]
 8106068:	4a58      	ldr	r2, [pc, #352]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 810606a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810606e:	6113      	str	r3, [r2, #16]
 8106070:	4b56      	ldr	r3, [pc, #344]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810607a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810607e:	4953      	ldr	r1, [pc, #332]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106080:	4313      	orrs	r3, r2
 8106082:	670b      	str	r3, [r1, #112]	; 0x70
 8106084:	e004      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106086:	7dfb      	ldrb	r3, [r7, #23]
 8106088:	75bb      	strb	r3, [r7, #22]
 810608a:	e001      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810608c:	7dfb      	ldrb	r3, [r7, #23]
 810608e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	f003 0301 	and.w	r3, r3, #1
 8106098:	2b00      	cmp	r3, #0
 810609a:	d07e      	beq.n	810619a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81060a0:	2b28      	cmp	r3, #40	; 0x28
 81060a2:	d867      	bhi.n	8106174 <HAL_RCCEx_PeriphCLKConfig+0x884>
 81060a4:	a201      	add	r2, pc, #4	; (adr r2, 81060ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 81060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060aa:	bf00      	nop
 81060ac:	0810617b 	.word	0x0810617b
 81060b0:	08106175 	.word	0x08106175
 81060b4:	08106175 	.word	0x08106175
 81060b8:	08106175 	.word	0x08106175
 81060bc:	08106175 	.word	0x08106175
 81060c0:	08106175 	.word	0x08106175
 81060c4:	08106175 	.word	0x08106175
 81060c8:	08106175 	.word	0x08106175
 81060cc:	08106151 	.word	0x08106151
 81060d0:	08106175 	.word	0x08106175
 81060d4:	08106175 	.word	0x08106175
 81060d8:	08106175 	.word	0x08106175
 81060dc:	08106175 	.word	0x08106175
 81060e0:	08106175 	.word	0x08106175
 81060e4:	08106175 	.word	0x08106175
 81060e8:	08106175 	.word	0x08106175
 81060ec:	08106163 	.word	0x08106163
 81060f0:	08106175 	.word	0x08106175
 81060f4:	08106175 	.word	0x08106175
 81060f8:	08106175 	.word	0x08106175
 81060fc:	08106175 	.word	0x08106175
 8106100:	08106175 	.word	0x08106175
 8106104:	08106175 	.word	0x08106175
 8106108:	08106175 	.word	0x08106175
 810610c:	0810617b 	.word	0x0810617b
 8106110:	08106175 	.word	0x08106175
 8106114:	08106175 	.word	0x08106175
 8106118:	08106175 	.word	0x08106175
 810611c:	08106175 	.word	0x08106175
 8106120:	08106175 	.word	0x08106175
 8106124:	08106175 	.word	0x08106175
 8106128:	08106175 	.word	0x08106175
 810612c:	0810617b 	.word	0x0810617b
 8106130:	08106175 	.word	0x08106175
 8106134:	08106175 	.word	0x08106175
 8106138:	08106175 	.word	0x08106175
 810613c:	08106175 	.word	0x08106175
 8106140:	08106175 	.word	0x08106175
 8106144:	08106175 	.word	0x08106175
 8106148:	08106175 	.word	0x08106175
 810614c:	0810617b 	.word	0x0810617b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	3304      	adds	r3, #4
 8106154:	2101      	movs	r1, #1
 8106156:	4618      	mov	r0, r3
 8106158:	f001 fc1c 	bl	8107994 <RCCEx_PLL2_Config>
 810615c:	4603      	mov	r3, r0
 810615e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106160:	e00c      	b.n	810617c <HAL_RCCEx_PeriphCLKConfig+0x88c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	3324      	adds	r3, #36	; 0x24
 8106166:	2101      	movs	r1, #1
 8106168:	4618      	mov	r0, r3
 810616a:	f001 fcc5 	bl	8107af8 <RCCEx_PLL3_Config>
 810616e:	4603      	mov	r3, r0
 8106170:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106172:	e003      	b.n	810617c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106174:	2301      	movs	r3, #1
 8106176:	75fb      	strb	r3, [r7, #23]
      break;
 8106178:	e000      	b.n	810617c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      break;
 810617a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810617c:	7dfb      	ldrb	r3, [r7, #23]
 810617e:	2b00      	cmp	r3, #0
 8106180:	d109      	bne.n	8106196 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106182:	4b12      	ldr	r3, [pc, #72]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106186:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810618e:	490f      	ldr	r1, [pc, #60]	; (81061cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106190:	4313      	orrs	r3, r2
 8106192:	654b      	str	r3, [r1, #84]	; 0x54
 8106194:	e001      	b.n	810619a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106196:	7dfb      	ldrb	r3, [r7, #23]
 8106198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	f003 0302 	and.w	r3, r3, #2
 81061a2:	2b00      	cmp	r3, #0
 81061a4:	d03b      	beq.n	810621e <HAL_RCCEx_PeriphCLKConfig+0x92e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061aa:	2b05      	cmp	r3, #5
 81061ac:	d824      	bhi.n	81061f8 <HAL_RCCEx_PeriphCLKConfig+0x908>
 81061ae:	a201      	add	r2, pc, #4	; (adr r2, 81061b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 81061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061b4:	081061ff 	.word	0x081061ff
 81061b8:	081061d5 	.word	0x081061d5
 81061bc:	081061e7 	.word	0x081061e7
 81061c0:	081061ff 	.word	0x081061ff
 81061c4:	081061ff 	.word	0x081061ff
 81061c8:	081061ff 	.word	0x081061ff
 81061cc:	58024400 	.word	0x58024400
 81061d0:	58024800 	.word	0x58024800
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	3304      	adds	r3, #4
 81061d8:	2101      	movs	r1, #1
 81061da:	4618      	mov	r0, r3
 81061dc:	f001 fbda 	bl	8107994 <RCCEx_PLL2_Config>
 81061e0:	4603      	mov	r3, r0
 81061e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81061e4:	e00c      	b.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0x910>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	3324      	adds	r3, #36	; 0x24
 81061ea:	2101      	movs	r1, #1
 81061ec:	4618      	mov	r0, r3
 81061ee:	f001 fc83 	bl	8107af8 <RCCEx_PLL3_Config>
 81061f2:	4603      	mov	r3, r0
 81061f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81061f6:	e003      	b.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0x910>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81061f8:	2301      	movs	r3, #1
 81061fa:	75fb      	strb	r3, [r7, #23]
      break;
 81061fc:	e000      	b.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0x910>
      break;
 81061fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106200:	7dfb      	ldrb	r3, [r7, #23]
 8106202:	2b00      	cmp	r3, #0
 8106204:	d109      	bne.n	810621a <HAL_RCCEx_PeriphCLKConfig+0x92a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106206:	4ba0      	ldr	r3, [pc, #640]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810620a:	f023 0207 	bic.w	r2, r3, #7
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106212:	499d      	ldr	r1, [pc, #628]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106214:	4313      	orrs	r3, r2
 8106216:	654b      	str	r3, [r1, #84]	; 0x54
 8106218:	e001      	b.n	810621e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810621a:	7dfb      	ldrb	r3, [r7, #23]
 810621c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	f003 0304 	and.w	r3, r3, #4
 8106226:	2b00      	cmp	r3, #0
 8106228:	d03a      	beq.n	81062a0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106230:	2b05      	cmp	r3, #5
 8106232:	d821      	bhi.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8106234:	a201      	add	r2, pc, #4	; (adr r2, 810623c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8106236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810623a:	bf00      	nop
 810623c:	0810627f 	.word	0x0810627f
 8106240:	08106255 	.word	0x08106255
 8106244:	08106267 	.word	0x08106267
 8106248:	0810627f 	.word	0x0810627f
 810624c:	0810627f 	.word	0x0810627f
 8106250:	0810627f 	.word	0x0810627f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106254:	687b      	ldr	r3, [r7, #4]
 8106256:	3304      	adds	r3, #4
 8106258:	2101      	movs	r1, #1
 810625a:	4618      	mov	r0, r3
 810625c:	f001 fb9a 	bl	8107994 <RCCEx_PLL2_Config>
 8106260:	4603      	mov	r3, r0
 8106262:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106264:	e00c      	b.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	3324      	adds	r3, #36	; 0x24
 810626a:	2101      	movs	r1, #1
 810626c:	4618      	mov	r0, r3
 810626e:	f001 fc43 	bl	8107af8 <RCCEx_PLL3_Config>
 8106272:	4603      	mov	r3, r0
 8106274:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106276:	e003      	b.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106278:	2301      	movs	r3, #1
 810627a:	75fb      	strb	r3, [r7, #23]
      break;
 810627c:	e000      	b.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 810627e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106280:	7dfb      	ldrb	r3, [r7, #23]
 8106282:	2b00      	cmp	r3, #0
 8106284:	d10a      	bne.n	810629c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106286:	4b80      	ldr	r3, [pc, #512]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810628a:	f023 0207 	bic.w	r2, r3, #7
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106294:	497c      	ldr	r1, [pc, #496]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106296:	4313      	orrs	r3, r2
 8106298:	658b      	str	r3, [r1, #88]	; 0x58
 810629a:	e001      	b.n	81062a0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810629c:	7dfb      	ldrb	r3, [r7, #23]
 810629e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	f003 0320 	and.w	r3, r3, #32
 81062a8:	2b00      	cmp	r3, #0
 81062aa:	d04b      	beq.n	8106344 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81062b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81062b6:	d02e      	beq.n	8106316 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 81062b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81062bc:	d828      	bhi.n	8106310 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 81062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81062c2:	d02a      	beq.n	810631a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 81062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81062c8:	d822      	bhi.n	8106310 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 81062ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81062ce:	d026      	beq.n	810631e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 81062d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81062d4:	d81c      	bhi.n	8106310 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 81062d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062da:	d010      	beq.n	81062fe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 81062dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062e0:	d816      	bhi.n	8106310 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 81062e2:	2b00      	cmp	r3, #0
 81062e4:	d01d      	beq.n	8106322 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 81062e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81062ea:	d111      	bne.n	8106310 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	3304      	adds	r3, #4
 81062f0:	2100      	movs	r1, #0
 81062f2:	4618      	mov	r0, r3
 81062f4:	f001 fb4e 	bl	8107994 <RCCEx_PLL2_Config>
 81062f8:	4603      	mov	r3, r0
 81062fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81062fc:	e012      	b.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	3324      	adds	r3, #36	; 0x24
 8106302:	2102      	movs	r1, #2
 8106304:	4618      	mov	r0, r3
 8106306:	f001 fbf7 	bl	8107af8 <RCCEx_PLL3_Config>
 810630a:	4603      	mov	r3, r0
 810630c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810630e:	e009      	b.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106310:	2301      	movs	r3, #1
 8106312:	75fb      	strb	r3, [r7, #23]
      break;
 8106314:	e006      	b.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8106316:	bf00      	nop
 8106318:	e004      	b.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 810631a:	bf00      	nop
 810631c:	e002      	b.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 810631e:	bf00      	nop
 8106320:	e000      	b.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8106322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106324:	7dfb      	ldrb	r3, [r7, #23]
 8106326:	2b00      	cmp	r3, #0
 8106328:	d10a      	bne.n	8106340 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810632a:	4b57      	ldr	r3, [pc, #348]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 810632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810632e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106338:	4953      	ldr	r1, [pc, #332]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 810633a:	4313      	orrs	r3, r2
 810633c:	654b      	str	r3, [r1, #84]	; 0x54
 810633e:	e001      	b.n	8106344 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106340:	7dfb      	ldrb	r3, [r7, #23]
 8106342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810634c:	2b00      	cmp	r3, #0
 810634e:	d04b      	beq.n	81063e8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106356:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810635a:	d02e      	beq.n	81063ba <HAL_RCCEx_PeriphCLKConfig+0xaca>
 810635c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106360:	d828      	bhi.n	81063b4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8106362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106366:	d02a      	beq.n	81063be <HAL_RCCEx_PeriphCLKConfig+0xace>
 8106368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810636c:	d822      	bhi.n	81063b4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 810636e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106372:	d026      	beq.n	81063c2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8106374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106378:	d81c      	bhi.n	81063b4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 810637a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810637e:	d010      	beq.n	81063a2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8106380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106384:	d816      	bhi.n	81063b4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8106386:	2b00      	cmp	r3, #0
 8106388:	d01d      	beq.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 810638a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810638e:	d111      	bne.n	81063b4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	3304      	adds	r3, #4
 8106394:	2100      	movs	r1, #0
 8106396:	4618      	mov	r0, r3
 8106398:	f001 fafc 	bl	8107994 <RCCEx_PLL2_Config>
 810639c:	4603      	mov	r3, r0
 810639e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81063a0:	e012      	b.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	3324      	adds	r3, #36	; 0x24
 81063a6:	2102      	movs	r1, #2
 81063a8:	4618      	mov	r0, r3
 81063aa:	f001 fba5 	bl	8107af8 <RCCEx_PLL3_Config>
 81063ae:	4603      	mov	r3, r0
 81063b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81063b2:	e009      	b.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81063b4:	2301      	movs	r3, #1
 81063b6:	75fb      	strb	r3, [r7, #23]
      break;
 81063b8:	e006      	b.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 81063ba:	bf00      	nop
 81063bc:	e004      	b.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 81063be:	bf00      	nop
 81063c0:	e002      	b.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 81063c2:	bf00      	nop
 81063c4:	e000      	b.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 81063c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063c8:	7dfb      	ldrb	r3, [r7, #23]
 81063ca:	2b00      	cmp	r3, #0
 81063cc:	d10a      	bne.n	81063e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81063ce:	4b2e      	ldr	r3, [pc, #184]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 81063d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81063dc:	492a      	ldr	r1, [pc, #168]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 81063de:	4313      	orrs	r3, r2
 81063e0:	658b      	str	r3, [r1, #88]	; 0x58
 81063e2:	e001      	b.n	81063e8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063e4:	7dfb      	ldrb	r3, [r7, #23]
 81063e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81063f0:	2b00      	cmp	r3, #0
 81063f2:	d04d      	beq.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81063fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81063fe:	d02e      	beq.n	810645e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8106400:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106404:	d828      	bhi.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8106406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810640a:	d02a      	beq.n	8106462 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 810640c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106410:	d822      	bhi.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8106412:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106416:	d026      	beq.n	8106466 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8106418:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810641c:	d81c      	bhi.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 810641e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106422:	d010      	beq.n	8106446 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8106424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106428:	d816      	bhi.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 810642a:	2b00      	cmp	r3, #0
 810642c:	d01d      	beq.n	810646a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 810642e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106432:	d111      	bne.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	3304      	adds	r3, #4
 8106438:	2100      	movs	r1, #0
 810643a:	4618      	mov	r0, r3
 810643c:	f001 faaa 	bl	8107994 <RCCEx_PLL2_Config>
 8106440:	4603      	mov	r3, r0
 8106442:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106444:	e012      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	3324      	adds	r3, #36	; 0x24
 810644a:	2102      	movs	r1, #2
 810644c:	4618      	mov	r0, r3
 810644e:	f001 fb53 	bl	8107af8 <RCCEx_PLL3_Config>
 8106452:	4603      	mov	r3, r0
 8106454:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106456:	e009      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106458:	2301      	movs	r3, #1
 810645a:	75fb      	strb	r3, [r7, #23]
      break;
 810645c:	e006      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 810645e:	bf00      	nop
 8106460:	e004      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8106462:	bf00      	nop
 8106464:	e002      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8106466:	bf00      	nop
 8106468:	e000      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 810646a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810646c:	7dfb      	ldrb	r3, [r7, #23]
 810646e:	2b00      	cmp	r3, #0
 8106470:	d10c      	bne.n	810648c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106472:	4b05      	ldr	r3, [pc, #20]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106480:	4901      	ldr	r1, [pc, #4]	; (8106488 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106482:	4313      	orrs	r3, r2
 8106484:	658b      	str	r3, [r1, #88]	; 0x58
 8106486:	e003      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8106488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810648c:	7dfb      	ldrb	r3, [r7, #23]
 810648e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	f003 0308 	and.w	r3, r3, #8
 8106498:	2b00      	cmp	r3, #0
 810649a:	d01a      	beq.n	81064d2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81064a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81064a6:	d10a      	bne.n	81064be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	3324      	adds	r3, #36	; 0x24
 81064ac:	2102      	movs	r1, #2
 81064ae:	4618      	mov	r0, r3
 81064b0:	f001 fb22 	bl	8107af8 <RCCEx_PLL3_Config>
 81064b4:	4603      	mov	r3, r0
 81064b6:	2b00      	cmp	r3, #0
 81064b8:	d001      	beq.n	81064be <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 81064ba:	2301      	movs	r3, #1
 81064bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81064be:	4b8c      	ldr	r3, [pc, #560]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81064cc:	4988      	ldr	r1, [pc, #544]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81064ce:	4313      	orrs	r3, r2
 81064d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	f003 0310 	and.w	r3, r3, #16
 81064da:	2b00      	cmp	r3, #0
 81064dc:	d01a      	beq.n	8106514 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81064e8:	d10a      	bne.n	8106500 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	3324      	adds	r3, #36	; 0x24
 81064ee:	2102      	movs	r1, #2
 81064f0:	4618      	mov	r0, r3
 81064f2:	f001 fb01 	bl	8107af8 <RCCEx_PLL3_Config>
 81064f6:	4603      	mov	r3, r0
 81064f8:	2b00      	cmp	r3, #0
 81064fa:	d001      	beq.n	8106500 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 81064fc:	2301      	movs	r3, #1
 81064fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106500:	4b7b      	ldr	r3, [pc, #492]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810650e:	4978      	ldr	r1, [pc, #480]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106510:	4313      	orrs	r3, r2
 8106512:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810651c:	2b00      	cmp	r3, #0
 810651e:	d034      	beq.n	810658a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810652a:	d01d      	beq.n	8106568 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 810652c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106530:	d817      	bhi.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8106532:	2b00      	cmp	r3, #0
 8106534:	d003      	beq.n	810653e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8106536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810653a:	d009      	beq.n	8106550 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 810653c:	e011      	b.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	3304      	adds	r3, #4
 8106542:	2100      	movs	r1, #0
 8106544:	4618      	mov	r0, r3
 8106546:	f001 fa25 	bl	8107994 <RCCEx_PLL2_Config>
 810654a:	4603      	mov	r3, r0
 810654c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810654e:	e00c      	b.n	810656a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	3324      	adds	r3, #36	; 0x24
 8106554:	2102      	movs	r1, #2
 8106556:	4618      	mov	r0, r3
 8106558:	f001 face 	bl	8107af8 <RCCEx_PLL3_Config>
 810655c:	4603      	mov	r3, r0
 810655e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106560:	e003      	b.n	810656a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106562:	2301      	movs	r3, #1
 8106564:	75fb      	strb	r3, [r7, #23]
      break;
 8106566:	e000      	b.n	810656a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8106568:	bf00      	nop
    }

    if(ret == HAL_OK)
 810656a:	7dfb      	ldrb	r3, [r7, #23]
 810656c:	2b00      	cmp	r3, #0
 810656e:	d10a      	bne.n	8106586 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106570:	4b5f      	ldr	r3, [pc, #380]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810657e:	495c      	ldr	r1, [pc, #368]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106580:	4313      	orrs	r3, r2
 8106582:	658b      	str	r3, [r1, #88]	; 0x58
 8106584:	e001      	b.n	810658a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106586:	7dfb      	ldrb	r3, [r7, #23]
 8106588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106592:	2b00      	cmp	r3, #0
 8106594:	d033      	beq.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810659c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81065a0:	d01c      	beq.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 81065a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81065a6:	d816      	bhi.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 81065a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81065ac:	d003      	beq.n	81065b6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 81065ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81065b2:	d007      	beq.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 81065b4:	e00f      	b.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065b6:	4b4e      	ldr	r3, [pc, #312]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065ba:	4a4d      	ldr	r2, [pc, #308]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81065bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81065c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81065c2:	e00c      	b.n	81065de <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	3324      	adds	r3, #36	; 0x24
 81065c8:	2101      	movs	r1, #1
 81065ca:	4618      	mov	r0, r3
 81065cc:	f001 fa94 	bl	8107af8 <RCCEx_PLL3_Config>
 81065d0:	4603      	mov	r3, r0
 81065d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81065d4:	e003      	b.n	81065de <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81065d6:	2301      	movs	r3, #1
 81065d8:	75fb      	strb	r3, [r7, #23]
      break;
 81065da:	e000      	b.n	81065de <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 81065dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81065de:	7dfb      	ldrb	r3, [r7, #23]
 81065e0:	2b00      	cmp	r3, #0
 81065e2:	d10a      	bne.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81065e4:	4b42      	ldr	r3, [pc, #264]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81065e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81065f2:	493f      	ldr	r1, [pc, #252]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81065f4:	4313      	orrs	r3, r2
 81065f6:	654b      	str	r3, [r1, #84]	; 0x54
 81065f8:	e001      	b.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065fa:	7dfb      	ldrb	r3, [r7, #23]
 81065fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	681b      	ldr	r3, [r3, #0]
 8106602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106606:	2b00      	cmp	r3, #0
 8106608:	d029      	beq.n	810665e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810660e:	2b00      	cmp	r3, #0
 8106610:	d003      	beq.n	810661a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8106612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106616:	d007      	beq.n	8106628 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8106618:	e00f      	b.n	810663a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810661a:	4b35      	ldr	r3, [pc, #212]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 810661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810661e:	4a34      	ldr	r2, [pc, #208]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106626:	e00b      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	3304      	adds	r3, #4
 810662c:	2102      	movs	r1, #2
 810662e:	4618      	mov	r0, r3
 8106630:	f001 f9b0 	bl	8107994 <RCCEx_PLL2_Config>
 8106634:	4603      	mov	r3, r0
 8106636:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106638:	e002      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 810663a:	2301      	movs	r3, #1
 810663c:	75fb      	strb	r3, [r7, #23]
      break;
 810663e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106640:	7dfb      	ldrb	r3, [r7, #23]
 8106642:	2b00      	cmp	r3, #0
 8106644:	d109      	bne.n	810665a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106646:	4b2a      	ldr	r3, [pc, #168]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810664a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106652:	4927      	ldr	r1, [pc, #156]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106654:	4313      	orrs	r3, r2
 8106656:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106658:	e001      	b.n	810665e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810665a:	7dfb      	ldrb	r3, [r7, #23]
 810665c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106666:	2b00      	cmp	r3, #0
 8106668:	d00a      	beq.n	8106680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	3324      	adds	r3, #36	; 0x24
 810666e:	2102      	movs	r1, #2
 8106670:	4618      	mov	r0, r3
 8106672:	f001 fa41 	bl	8107af8 <RCCEx_PLL3_Config>
 8106676:	4603      	mov	r3, r0
 8106678:	2b00      	cmp	r3, #0
 810667a:	d001      	beq.n	8106680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 810667c:	2301      	movs	r3, #1
 810667e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106688:	2b00      	cmp	r3, #0
 810668a:	d035      	beq.n	81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106696:	d017      	beq.n	81066c8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8106698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810669c:	d811      	bhi.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810669e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81066a2:	d013      	beq.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0xddc>
 81066a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81066a8:	d80b      	bhi.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81066aa:	2b00      	cmp	r3, #0
 81066ac:	d010      	beq.n	81066d0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 81066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066b2:	d106      	bne.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81066b4:	4b0e      	ldr	r3, [pc, #56]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066b8:	4a0d      	ldr	r2, [pc, #52]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81066ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81066be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81066c0:	e007      	b.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81066c2:	2301      	movs	r3, #1
 81066c4:	75fb      	strb	r3, [r7, #23]
      break;
 81066c6:	e004      	b.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 81066c8:	bf00      	nop
 81066ca:	e002      	b.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 81066cc:	bf00      	nop
 81066ce:	e000      	b.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 81066d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81066d2:	7dfb      	ldrb	r3, [r7, #23]
 81066d4:	2b00      	cmp	r3, #0
 81066d6:	d10d      	bne.n	81066f4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81066d8:	4b05      	ldr	r3, [pc, #20]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81066e6:	4902      	ldr	r1, [pc, #8]	; (81066f0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81066e8:	4313      	orrs	r3, r2
 81066ea:	654b      	str	r3, [r1, #84]	; 0x54
 81066ec:	e004      	b.n	81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 81066ee:	bf00      	nop
 81066f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066f4:	7dfb      	ldrb	r3, [r7, #23]
 81066f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	681b      	ldr	r3, [r3, #0]
 81066fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106700:	2b00      	cmp	r3, #0
 8106702:	d008      	beq.n	8106716 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106704:	4b31      	ldr	r3, [pc, #196]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106710:	492e      	ldr	r1, [pc, #184]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106712:	4313      	orrs	r3, r2
 8106714:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106716:	687b      	ldr	r3, [r7, #4]
 8106718:	681b      	ldr	r3, [r3, #0]
 810671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810671e:	2b00      	cmp	r3, #0
 8106720:	d009      	beq.n	8106736 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106722:	4b2a      	ldr	r3, [pc, #168]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106724:	691b      	ldr	r3, [r3, #16]
 8106726:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106730:	4926      	ldr	r1, [pc, #152]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106732:	4313      	orrs	r3, r2
 8106734:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	681b      	ldr	r3, [r3, #0]
 810673a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810673e:	2b00      	cmp	r3, #0
 8106740:	d008      	beq.n	8106754 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106742:	4b22      	ldr	r3, [pc, #136]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106746:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810674e:	491f      	ldr	r1, [pc, #124]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106750:	4313      	orrs	r3, r2
 8106752:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810675c:	2b00      	cmp	r3, #0
 810675e:	d00d      	beq.n	810677c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106760:	4b1a      	ldr	r3, [pc, #104]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106762:	691b      	ldr	r3, [r3, #16]
 8106764:	4a19      	ldr	r2, [pc, #100]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810676a:	6113      	str	r3, [r2, #16]
 810676c:	4b17      	ldr	r3, [pc, #92]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 810676e:	691a      	ldr	r2, [r3, #16]
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8106776:	4915      	ldr	r1, [pc, #84]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106778:	4313      	orrs	r3, r2
 810677a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	681b      	ldr	r3, [r3, #0]
 8106780:	2b00      	cmp	r3, #0
 8106782:	da08      	bge.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106784:	4b11      	ldr	r3, [pc, #68]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106788:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810678c:	687b      	ldr	r3, [r7, #4]
 810678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106790:	490e      	ldr	r1, [pc, #56]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106792:	4313      	orrs	r3, r2
 8106794:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	681b      	ldr	r3, [r3, #0]
 810679a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810679e:	2b00      	cmp	r3, #0
 81067a0:	d009      	beq.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81067a2:	4b0a      	ldr	r3, [pc, #40]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81067b0:	4906      	ldr	r1, [pc, #24]	; (81067cc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81067b2:	4313      	orrs	r3, r2
 81067b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81067b6:	7dbb      	ldrb	r3, [r7, #22]
 81067b8:	2b00      	cmp	r3, #0
 81067ba:	d101      	bne.n	81067c0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 81067bc:	2300      	movs	r3, #0
 81067be:	e000      	b.n	81067c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 81067c0:	2301      	movs	r3, #1
}
 81067c2:	4618      	mov	r0, r3
 81067c4:	3718      	adds	r7, #24
 81067c6:	46bd      	mov	sp, r7
 81067c8:	bd80      	pop	{r7, pc}
 81067ca:	bf00      	nop
 81067cc:	58024400 	.word	0x58024400

081067d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 81067d0:	b580      	push	{r7, lr}
 81067d2:	b090      	sub	sp, #64	; 0x40
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81067de:	f040 8095 	bne.w	810690c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 81067e2:	4bae      	ldr	r3, [pc, #696]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81067e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067e6:	f003 0307 	and.w	r3, r3, #7
 81067ea:	633b      	str	r3, [r7, #48]	; 0x30
 81067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067ee:	2b04      	cmp	r3, #4
 81067f0:	f200 8088 	bhi.w	8106904 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 81067f4:	a201      	add	r2, pc, #4	; (adr r2, 81067fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 81067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067fa:	bf00      	nop
 81067fc:	08106811 	.word	0x08106811
 8106800:	08106839 	.word	0x08106839
 8106804:	08106861 	.word	0x08106861
 8106808:	081068fd 	.word	0x081068fd
 810680c:	08106889 	.word	0x08106889

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106810:	4ba2      	ldr	r3, [pc, #648]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106812:	681b      	ldr	r3, [r3, #0]
 8106814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810681c:	d108      	bne.n	8106830 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810681e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106822:	4618      	mov	r0, r3
 8106824:	f000 ff64 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8106828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810682a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810682c:	f000 bc95 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106830:	2300      	movs	r3, #0
 8106832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106834:	f000 bc91 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106838:	4b98      	ldr	r3, [pc, #608]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106844:	d108      	bne.n	8106858 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106846:	f107 0318 	add.w	r3, r7, #24
 810684a:	4618      	mov	r0, r3
 810684c:	f000 fca8 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106850:	69bb      	ldr	r3, [r7, #24]
 8106852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106854:	f000 bc81 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106858:	2300      	movs	r3, #0
 810685a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810685c:	f000 bc7d 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106860:	4b8e      	ldr	r3, [pc, #568]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810686c:	d108      	bne.n	8106880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810686e:	f107 030c 	add.w	r3, r7, #12
 8106872:	4618      	mov	r0, r3
 8106874:	f000 fde8 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106878:	68fb      	ldr	r3, [r7, #12]
 810687a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810687c:	f000 bc6d 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106880:	2300      	movs	r3, #0
 8106882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106884:	f000 bc69 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106888:	4b84      	ldr	r3, [pc, #528]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810688a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810688c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106890:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106892:	4b82      	ldr	r3, [pc, #520]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106894:	681b      	ldr	r3, [r3, #0]
 8106896:	f003 0304 	and.w	r3, r3, #4
 810689a:	2b04      	cmp	r3, #4
 810689c:	d10c      	bne.n	81068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068a0:	2b00      	cmp	r3, #0
 81068a2:	d109      	bne.n	81068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81068a4:	4b7d      	ldr	r3, [pc, #500]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81068a6:	681b      	ldr	r3, [r3, #0]
 81068a8:	08db      	lsrs	r3, r3, #3
 81068aa:	f003 0303 	and.w	r3, r3, #3
 81068ae:	4a7c      	ldr	r2, [pc, #496]	; (8106aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 81068b0:	fa22 f303 	lsr.w	r3, r2, r3
 81068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068b6:	e01f      	b.n	81068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81068b8:	4b78      	ldr	r3, [pc, #480]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81068ba:	681b      	ldr	r3, [r3, #0]
 81068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81068c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81068c4:	d106      	bne.n	81068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 81068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81068cc:	d102      	bne.n	81068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81068ce:	4b75      	ldr	r3, [pc, #468]	; (8106aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 81068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068d2:	e011      	b.n	81068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81068d4:	4b71      	ldr	r3, [pc, #452]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81068dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81068e0:	d106      	bne.n	81068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 81068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81068e8:	d102      	bne.n	81068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81068ea:	4b6f      	ldr	r3, [pc, #444]	; (8106aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 81068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068ee:	e003      	b.n	81068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81068f0:	2300      	movs	r3, #0
 81068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81068f4:	f000 bc31 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81068f8:	f000 bc2f 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81068fc:	4b6b      	ldr	r3, [pc, #428]	; (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 81068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106900:	f000 bc2b 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8106904:	2300      	movs	r3, #0
 8106906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106908:	f000 bc27 	b.w	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106912:	f040 8095 	bne.w	8106a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8106916:	4b61      	ldr	r3, [pc, #388]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810691a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810691e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106926:	d04d      	beq.n	81069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8106928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810692a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810692e:	f200 8084 	bhi.w	8106a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106934:	2bc0      	cmp	r3, #192	; 0xc0
 8106936:	d07d      	beq.n	8106a34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8106938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810693a:	2bc0      	cmp	r3, #192	; 0xc0
 810693c:	d87d      	bhi.n	8106a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106940:	2b80      	cmp	r3, #128	; 0x80
 8106942:	d02d      	beq.n	81069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8106944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106946:	2b80      	cmp	r3, #128	; 0x80
 8106948:	d877      	bhi.n	8106a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810694c:	2b00      	cmp	r3, #0
 810694e:	d003      	beq.n	8106958 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8106950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106952:	2b40      	cmp	r3, #64	; 0x40
 8106954:	d012      	beq.n	810697c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8106956:	e070      	b.n	8106a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106958:	4b50      	ldr	r3, [pc, #320]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810695a:	681b      	ldr	r3, [r3, #0]
 810695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106964:	d107      	bne.n	8106976 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810696a:	4618      	mov	r0, r3
 810696c:	f000 fec0 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106974:	e3f1      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106976:	2300      	movs	r3, #0
 8106978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810697a:	e3ee      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810697c:	4b47      	ldr	r3, [pc, #284]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106988:	d107      	bne.n	810699a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810698a:	f107 0318 	add.w	r3, r7, #24
 810698e:	4618      	mov	r0, r3
 8106990:	f000 fc06 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106994:	69bb      	ldr	r3, [r7, #24]
 8106996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106998:	e3df      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810699a:	2300      	movs	r3, #0
 810699c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810699e:	e3dc      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81069a0:	4b3e      	ldr	r3, [pc, #248]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81069a2:	681b      	ldr	r3, [r3, #0]
 81069a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81069ac:	d107      	bne.n	81069be <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81069ae:	f107 030c 	add.w	r3, r7, #12
 81069b2:	4618      	mov	r0, r3
 81069b4:	f000 fd48 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81069b8:	68fb      	ldr	r3, [r7, #12]
 81069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81069bc:	e3cd      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81069be:	2300      	movs	r3, #0
 81069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069c2:	e3ca      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81069c4:	4b35      	ldr	r3, [pc, #212]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81069c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81069cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81069ce:	4b33      	ldr	r3, [pc, #204]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81069d0:	681b      	ldr	r3, [r3, #0]
 81069d2:	f003 0304 	and.w	r3, r3, #4
 81069d6:	2b04      	cmp	r3, #4
 81069d8:	d10c      	bne.n	81069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 81069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d109      	bne.n	81069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81069e0:	4b2e      	ldr	r3, [pc, #184]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	08db      	lsrs	r3, r3, #3
 81069e6:	f003 0303 	and.w	r3, r3, #3
 81069ea:	4a2d      	ldr	r2, [pc, #180]	; (8106aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 81069ec:	fa22 f303 	lsr.w	r3, r2, r3
 81069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81069f2:	e01e      	b.n	8106a32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81069f4:	4b29      	ldr	r3, [pc, #164]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81069fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106a00:	d106      	bne.n	8106a10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8106a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106a08:	d102      	bne.n	8106a10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106a0a:	4b26      	ldr	r3, [pc, #152]	; (8106aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8106a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a0e:	e010      	b.n	8106a32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106a10:	4b22      	ldr	r3, [pc, #136]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106a12:	681b      	ldr	r3, [r3, #0]
 8106a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a1c:	d106      	bne.n	8106a2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8106a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a24:	d102      	bne.n	8106a2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106a26:	4b20      	ldr	r3, [pc, #128]	; (8106aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8106a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a2a:	e002      	b.n	8106a32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106a2c:	2300      	movs	r3, #0
 8106a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106a30:	e393      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106a32:	e392      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106a34:	4b1d      	ldr	r3, [pc, #116]	; (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8106a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a38:	e38f      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8106a3a:	2300      	movs	r3, #0
 8106a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a3e:	e38c      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106a46:	f040 80a7 	bne.w	8106b98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8106a4a:	4b14      	ldr	r3, [pc, #80]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106a4e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8106a52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106a5a:	d05f      	beq.n	8106b1c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8106a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106a62:	f200 8096 	bhi.w	8106b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8106a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106a6c:	f000 808e 	beq.w	8106b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8106a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106a76:	f200 808c 	bhi.w	8106b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8106a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106a80:	d03a      	beq.n	8106af8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8106a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106a88:	f200 8083 	bhi.w	8106b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8106a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a8e:	2b00      	cmp	r3, #0
 8106a90:	d00e      	beq.n	8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8106a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106a98:	d01c      	beq.n	8106ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8106a9a:	e07a      	b.n	8106b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8106a9c:	58024400 	.word	0x58024400
 8106aa0:	03d09000 	.word	0x03d09000
 8106aa4:	003d0900 	.word	0x003d0900
 8106aa8:	017d7840 	.word	0x017d7840
 8106aac:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106ab0:	4baa      	ldr	r3, [pc, #680]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106abc:	d107      	bne.n	8106ace <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106ac2:	4618      	mov	r0, r3
 8106ac4:	f000 fe14 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106aca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106acc:	e345      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106ace:	2300      	movs	r3, #0
 8106ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ad2:	e342      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ad4:	4ba1      	ldr	r3, [pc, #644]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106ae0:	d107      	bne.n	8106af2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ae2:	f107 0318 	add.w	r3, r7, #24
 8106ae6:	4618      	mov	r0, r3
 8106ae8:	f000 fb5a 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106aec:	69bb      	ldr	r3, [r7, #24]
 8106aee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106af0:	e333      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106af2:	2300      	movs	r3, #0
 8106af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106af6:	e330      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106af8:	4b98      	ldr	r3, [pc, #608]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106afa:	681b      	ldr	r3, [r3, #0]
 8106afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b04:	d107      	bne.n	8106b16 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106b06:	f107 030c 	add.w	r3, r7, #12
 8106b0a:	4618      	mov	r0, r3
 8106b0c:	f000 fc9c 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106b10:	68fb      	ldr	r3, [r7, #12]
 8106b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b14:	e321      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106b16:	2300      	movs	r3, #0
 8106b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b1a:	e31e      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106b1c:	4b8f      	ldr	r3, [pc, #572]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106b24:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106b26:	4b8d      	ldr	r3, [pc, #564]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b28:	681b      	ldr	r3, [r3, #0]
 8106b2a:	f003 0304 	and.w	r3, r3, #4
 8106b2e:	2b04      	cmp	r3, #4
 8106b30:	d10c      	bne.n	8106b4c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8106b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b34:	2b00      	cmp	r3, #0
 8106b36:	d109      	bne.n	8106b4c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106b38:	4b88      	ldr	r3, [pc, #544]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b3a:	681b      	ldr	r3, [r3, #0]
 8106b3c:	08db      	lsrs	r3, r3, #3
 8106b3e:	f003 0303 	and.w	r3, r3, #3
 8106b42:	4a87      	ldr	r2, [pc, #540]	; (8106d60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8106b44:	fa22 f303 	lsr.w	r3, r2, r3
 8106b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b4a:	e01e      	b.n	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106b4c:	4b83      	ldr	r3, [pc, #524]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b4e:	681b      	ldr	r3, [r3, #0]
 8106b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b58:	d106      	bne.n	8106b68 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8106b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106b60:	d102      	bne.n	8106b68 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106b62:	4b80      	ldr	r3, [pc, #512]	; (8106d64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8106b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b66:	e010      	b.n	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106b68:	4b7c      	ldr	r3, [pc, #496]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106b74:	d106      	bne.n	8106b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8106b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b7c:	d102      	bne.n	8106b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106b7e:	4b7a      	ldr	r3, [pc, #488]	; (8106d68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8106b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b82:	e002      	b.n	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106b84:	2300      	movs	r3, #0
 8106b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106b88:	e2e7      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106b8a:	e2e6      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106b8c:	4b77      	ldr	r3, [pc, #476]	; (8106d6c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8106b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b90:	e2e3      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106b92:	2300      	movs	r3, #0
 8106b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b96:	e2e0      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106b9e:	f040 809c 	bne.w	8106cda <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106ba2:	4b6e      	ldr	r3, [pc, #440]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106ba6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106baa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106bb2:	d054      	beq.n	8106c5e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8106bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106bba:	f200 808b 	bhi.w	8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8106bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106bc4:	f000 8083 	beq.w	8106cce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106bce:	f200 8081 	bhi.w	8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8106bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106bd8:	d02f      	beq.n	8106c3a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106be0:	d878      	bhi.n	8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8106be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106be4:	2b00      	cmp	r3, #0
 8106be6:	d004      	beq.n	8106bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106bea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106bee:	d012      	beq.n	8106c16 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8106bf0:	e070      	b.n	8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106bf2:	4b5a      	ldr	r3, [pc, #360]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106bf4:	681b      	ldr	r3, [r3, #0]
 8106bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106bfe:	d107      	bne.n	8106c10 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106c04:	4618      	mov	r0, r3
 8106c06:	f000 fd73 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106c0e:	e2a4      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106c10:	2300      	movs	r3, #0
 8106c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c14:	e2a1      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c16:	4b51      	ldr	r3, [pc, #324]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106c22:	d107      	bne.n	8106c34 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c24:	f107 0318 	add.w	r3, r7, #24
 8106c28:	4618      	mov	r0, r3
 8106c2a:	f000 fab9 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106c2e:	69bb      	ldr	r3, [r7, #24]
 8106c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8106c32:	e292      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106c34:	2300      	movs	r3, #0
 8106c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c38:	e28f      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106c3a:	4b48      	ldr	r3, [pc, #288]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c3c:	681b      	ldr	r3, [r3, #0]
 8106c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c46:	d107      	bne.n	8106c58 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106c48:	f107 030c 	add.w	r3, r7, #12
 8106c4c:	4618      	mov	r0, r3
 8106c4e:	f000 fbfb 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106c56:	e280      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106c58:	2300      	movs	r3, #0
 8106c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c5c:	e27d      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106c5e:	4b3f      	ldr	r3, [pc, #252]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106c66:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106c68:	4b3c      	ldr	r3, [pc, #240]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c6a:	681b      	ldr	r3, [r3, #0]
 8106c6c:	f003 0304 	and.w	r3, r3, #4
 8106c70:	2b04      	cmp	r3, #4
 8106c72:	d10c      	bne.n	8106c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c76:	2b00      	cmp	r3, #0
 8106c78:	d109      	bne.n	8106c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106c7a:	4b38      	ldr	r3, [pc, #224]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c7c:	681b      	ldr	r3, [r3, #0]
 8106c7e:	08db      	lsrs	r3, r3, #3
 8106c80:	f003 0303 	and.w	r3, r3, #3
 8106c84:	4a36      	ldr	r2, [pc, #216]	; (8106d60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8106c86:	fa22 f303 	lsr.w	r3, r2, r3
 8106c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c8c:	e01e      	b.n	8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106c8e:	4b33      	ldr	r3, [pc, #204]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c90:	681b      	ldr	r3, [r3, #0]
 8106c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c9a:	d106      	bne.n	8106caa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8106c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ca2:	d102      	bne.n	8106caa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106ca4:	4b2f      	ldr	r3, [pc, #188]	; (8106d64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8106ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ca8:	e010      	b.n	8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106caa:	4b2c      	ldr	r3, [pc, #176]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106cac:	681b      	ldr	r3, [r3, #0]
 8106cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106cb6:	d106      	bne.n	8106cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8106cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106cbe:	d102      	bne.n	8106cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106cc0:	4b29      	ldr	r3, [pc, #164]	; (8106d68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8106cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106cc4:	e002      	b.n	8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106cc6:	2300      	movs	r3, #0
 8106cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106cca:	e246      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106ccc:	e245      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106cce:	4b27      	ldr	r3, [pc, #156]	; (8106d6c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8106cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cd2:	e242      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106cd4:	2300      	movs	r3, #0
 8106cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cd8:	e23f      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106ce0:	f040 80a8 	bne.w	8106e34 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8106ce4:	4b1d      	ldr	r3, [pc, #116]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ce8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8106cec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106cf4:	d060      	beq.n	8106db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8106cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106cfc:	f200 8097 	bhi.w	8106e2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8106d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106d06:	f000 808f 	beq.w	8106e28 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8106d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106d10:	f200 808d 	bhi.w	8106e2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8106d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106d1a:	d03b      	beq.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8106d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106d22:	f200 8084 	bhi.w	8106e2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8106d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d28:	2b00      	cmp	r3, #0
 8106d2a:	d004      	beq.n	8106d36 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8106d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106d32:	d01d      	beq.n	8106d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8106d34:	e07b      	b.n	8106e2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106d36:	4b09      	ldr	r3, [pc, #36]	; (8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106d42:	d107      	bne.n	8106d54 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106d48:	4618      	mov	r0, r3
 8106d4a:	f000 fcd1 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106d52:	e202      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106d54:	2300      	movs	r3, #0
 8106d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d58:	e1ff      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106d5a:	bf00      	nop
 8106d5c:	58024400 	.word	0x58024400
 8106d60:	03d09000 	.word	0x03d09000
 8106d64:	003d0900 	.word	0x003d0900
 8106d68:	017d7840 	.word	0x017d7840
 8106d6c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106d70:	4ba3      	ldr	r3, [pc, #652]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d72:	681b      	ldr	r3, [r3, #0]
 8106d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106d7c:	d107      	bne.n	8106d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d7e:	f107 0318 	add.w	r3, r7, #24
 8106d82:	4618      	mov	r0, r3
 8106d84:	f000 fa0c 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106d88:	69bb      	ldr	r3, [r7, #24]
 8106d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106d8c:	e1e5      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106d8e:	2300      	movs	r3, #0
 8106d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d92:	e1e2      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106d94:	4b9a      	ldr	r3, [pc, #616]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106da0:	d107      	bne.n	8106db2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106da2:	f107 030c 	add.w	r3, r7, #12
 8106da6:	4618      	mov	r0, r3
 8106da8:	f000 fb4e 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106db0:	e1d3      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106db2:	2300      	movs	r3, #0
 8106db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106db6:	e1d0      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106db8:	4b91      	ldr	r3, [pc, #580]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106dc0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106dc2:	4b8f      	ldr	r3, [pc, #572]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dc4:	681b      	ldr	r3, [r3, #0]
 8106dc6:	f003 0304 	and.w	r3, r3, #4
 8106dca:	2b04      	cmp	r3, #4
 8106dcc:	d10c      	bne.n	8106de8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8106dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106dd0:	2b00      	cmp	r3, #0
 8106dd2:	d109      	bne.n	8106de8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106dd4:	4b8a      	ldr	r3, [pc, #552]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dd6:	681b      	ldr	r3, [r3, #0]
 8106dd8:	08db      	lsrs	r3, r3, #3
 8106dda:	f003 0303 	and.w	r3, r3, #3
 8106dde:	4a89      	ldr	r2, [pc, #548]	; (8107004 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8106de0:	fa22 f303 	lsr.w	r3, r2, r3
 8106de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106de6:	e01e      	b.n	8106e26 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106de8:	4b85      	ldr	r3, [pc, #532]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106df4:	d106      	bne.n	8106e04 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8106df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106dfc:	d102      	bne.n	8106e04 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106dfe:	4b82      	ldr	r3, [pc, #520]	; (8107008 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8106e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e02:	e010      	b.n	8106e26 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106e04:	4b7e      	ldr	r3, [pc, #504]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e06:	681b      	ldr	r3, [r3, #0]
 8106e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106e10:	d106      	bne.n	8106e20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8106e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e18:	d102      	bne.n	8106e20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106e1a:	4b7c      	ldr	r3, [pc, #496]	; (810700c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8106e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e1e:	e002      	b.n	8106e26 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106e20:	2300      	movs	r3, #0
 8106e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106e24:	e199      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106e26:	e198      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106e28:	4b79      	ldr	r3, [pc, #484]	; (8107010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8106e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e2c:	e195      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8106e2e:	2300      	movs	r3, #0
 8106e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e32:	e192      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106e3a:	d173      	bne.n	8106f24 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8106e3c:	4b70      	ldr	r3, [pc, #448]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106e44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106e4c:	d02f      	beq.n	8106eae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8106e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106e54:	d863      	bhi.n	8106f1e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8106e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106e58:	2b00      	cmp	r3, #0
 8106e5a:	d004      	beq.n	8106e66 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8106e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106e62:	d012      	beq.n	8106e8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8106e64:	e05b      	b.n	8106f1e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106e66:	4b66      	ldr	r3, [pc, #408]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e68:	681b      	ldr	r3, [r3, #0]
 8106e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106e72:	d107      	bne.n	8106e84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e74:	f107 0318 	add.w	r3, r7, #24
 8106e78:	4618      	mov	r0, r3
 8106e7a:	f000 f991 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106e7e:	69bb      	ldr	r3, [r7, #24]
 8106e80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e82:	e16a      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106e84:	2300      	movs	r3, #0
 8106e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e88:	e167      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106e8a:	4b5d      	ldr	r3, [pc, #372]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e8c:	681b      	ldr	r3, [r3, #0]
 8106e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e96:	d107      	bne.n	8106ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e98:	f107 030c 	add.w	r3, r7, #12
 8106e9c:	4618      	mov	r0, r3
 8106e9e:	f000 fad3 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106ea2:	697b      	ldr	r3, [r7, #20]
 8106ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106ea6:	e158      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106ea8:	2300      	movs	r3, #0
 8106eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106eac:	e155      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106eae:	4b54      	ldr	r3, [pc, #336]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106eb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106eb6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106eb8:	4b51      	ldr	r3, [pc, #324]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	f003 0304 	and.w	r3, r3, #4
 8106ec0:	2b04      	cmp	r3, #4
 8106ec2:	d10c      	bne.n	8106ede <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8106ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ec6:	2b00      	cmp	r3, #0
 8106ec8:	d109      	bne.n	8106ede <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106eca:	4b4d      	ldr	r3, [pc, #308]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	08db      	lsrs	r3, r3, #3
 8106ed0:	f003 0303 	and.w	r3, r3, #3
 8106ed4:	4a4b      	ldr	r2, [pc, #300]	; (8107004 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8106ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8106eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106edc:	e01e      	b.n	8106f1c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ede:	4b48      	ldr	r3, [pc, #288]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106eea:	d106      	bne.n	8106efa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8106eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ef2:	d102      	bne.n	8106efa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106ef4:	4b44      	ldr	r3, [pc, #272]	; (8107008 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8106ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ef8:	e010      	b.n	8106f1c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106efa:	4b41      	ldr	r3, [pc, #260]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106efc:	681b      	ldr	r3, [r3, #0]
 8106efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106f06:	d106      	bne.n	8106f16 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8106f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f0e:	d102      	bne.n	8106f16 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106f10:	4b3e      	ldr	r3, [pc, #248]	; (810700c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8106f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f14:	e002      	b.n	8106f1c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106f16:	2300      	movs	r3, #0
 8106f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106f1a:	e11e      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106f1c:	e11d      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106f1e:	2300      	movs	r3, #0
 8106f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f22:	e11a      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106f2a:	d133      	bne.n	8106f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8106f2c:	4b34      	ldr	r3, [pc, #208]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106f34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f38:	2b00      	cmp	r3, #0
 8106f3a:	d004      	beq.n	8106f46 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8106f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106f42:	d012      	beq.n	8106f6a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8106f44:	e023      	b.n	8106f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106f46:	4b2e      	ldr	r3, [pc, #184]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106f48:	681b      	ldr	r3, [r3, #0]
 8106f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106f52:	d107      	bne.n	8106f64 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106f58:	4618      	mov	r0, r3
 8106f5a:	f000 fbc9 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106f62:	e0fa      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106f64:	2300      	movs	r3, #0
 8106f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f68:	e0f7      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f6a:	4b25      	ldr	r3, [pc, #148]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106f76:	d107      	bne.n	8106f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f78:	f107 0318 	add.w	r3, r7, #24
 8106f7c:	4618      	mov	r0, r3
 8106f7e:	f000 f90f 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106f82:	6a3b      	ldr	r3, [r7, #32]
 8106f84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106f86:	e0e8      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106f88:	2300      	movs	r3, #0
 8106f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f8c:	e0e5      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106f8e:	2300      	movs	r3, #0
 8106f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f92:	e0e2      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f9a:	f040 808f 	bne.w	81070bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8106f9e:	4b18      	ldr	r3, [pc, #96]	; (8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106fa2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8106fa6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106fae:	d075      	beq.n	810709c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8106fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106fb6:	d87e      	bhi.n	81070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fbe:	d060      	beq.n	8107082 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8106fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fc6:	d876      	bhi.n	81070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106fce:	d045      	beq.n	810705c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8106fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106fd6:	d86e      	bhi.n	81070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fde:	d02b      	beq.n	8107038 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8106fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fe6:	d866      	bhi.n	81070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fea:	2b00      	cmp	r3, #0
 8106fec:	d004      	beq.n	8106ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8106fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ff4:	d00e      	beq.n	8107014 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8106ff6:	e05e      	b.n	81070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106ff8:	f000 f8bc 	bl	8107174 <HAL_RCCEx_GetD3PCLK1Freq>
 8106ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8106ffe:	e0ac      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107000:	58024400 	.word	0x58024400
 8107004:	03d09000 	.word	0x03d09000
 8107008:	003d0900 	.word	0x003d0900
 810700c:	017d7840 	.word	0x017d7840
 8107010:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107014:	4b53      	ldr	r3, [pc, #332]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810701c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107020:	d107      	bne.n	8107032 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107022:	f107 0318 	add.w	r3, r7, #24
 8107026:	4618      	mov	r0, r3
 8107028:	f000 f8ba 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810702c:	69fb      	ldr	r3, [r7, #28]
 810702e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107030:	e093      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107032:	2300      	movs	r3, #0
 8107034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107036:	e090      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107038:	4b4a      	ldr	r3, [pc, #296]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810703a:	681b      	ldr	r3, [r3, #0]
 810703c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107044:	d107      	bne.n	8107056 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107046:	f107 030c 	add.w	r3, r7, #12
 810704a:	4618      	mov	r0, r3
 810704c:	f000 f9fc 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107050:	693b      	ldr	r3, [r7, #16]
 8107052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107054:	e081      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107056:	2300      	movs	r3, #0
 8107058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810705a:	e07e      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810705c:	4b41      	ldr	r3, [pc, #260]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810705e:	681b      	ldr	r3, [r3, #0]
 8107060:	f003 0304 	and.w	r3, r3, #4
 8107064:	2b04      	cmp	r3, #4
 8107066:	d109      	bne.n	810707c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107068:	4b3e      	ldr	r3, [pc, #248]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	08db      	lsrs	r3, r3, #3
 810706e:	f003 0303 	and.w	r3, r3, #3
 8107072:	4a3d      	ldr	r2, [pc, #244]	; (8107168 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8107074:	fa22 f303 	lsr.w	r3, r2, r3
 8107078:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810707a:	e06e      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810707c:	2300      	movs	r3, #0
 810707e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107080:	e06b      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107082:	4b38      	ldr	r3, [pc, #224]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107084:	681b      	ldr	r3, [r3, #0]
 8107086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810708a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810708e:	d102      	bne.n	8107096 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8107090:	4b36      	ldr	r3, [pc, #216]	; (810716c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8107092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107094:	e061      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107096:	2300      	movs	r3, #0
 8107098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810709a:	e05e      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810709c:	4b31      	ldr	r3, [pc, #196]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81070a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81070a8:	d102      	bne.n	81070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 81070aa:	4b31      	ldr	r3, [pc, #196]	; (8107170 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81070ae:	e054      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81070b0:	2300      	movs	r3, #0
 81070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070b4:	e051      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 81070b6:	2300      	movs	r3, #0
 81070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070ba:	e04e      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81070c2:	d148      	bne.n	8107156 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 81070c4:	4b27      	ldr	r3, [pc, #156]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81070c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81070cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81070d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070d4:	d02a      	beq.n	810712c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 81070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81070d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070dc:	d838      	bhi.n	8107150 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 81070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81070e0:	2b00      	cmp	r3, #0
 81070e2:	d004      	beq.n	81070ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 81070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81070e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81070ea:	d00d      	beq.n	8107108 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 81070ec:	e030      	b.n	8107150 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81070ee:	4b1d      	ldr	r3, [pc, #116]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81070f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81070fa:	d102      	bne.n	8107102 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 81070fc:	4b1c      	ldr	r3, [pc, #112]	; (8107170 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107100:	e02b      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107102:	2300      	movs	r3, #0
 8107104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107106:	e028      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107108:	4b16      	ldr	r3, [pc, #88]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107114:	d107      	bne.n	8107126 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810711a:	4618      	mov	r0, r3
 810711c:	f000 fae8 	bl	81076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107122:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107124:	e019      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107126:	2300      	movs	r3, #0
 8107128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810712a:	e016      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810712c:	4b0d      	ldr	r3, [pc, #52]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810712e:	681b      	ldr	r3, [r3, #0]
 8107130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107138:	d107      	bne.n	810714a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810713a:	f107 0318 	add.w	r3, r7, #24
 810713e:	4618      	mov	r0, r3
 8107140:	f000 f82e 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107144:	69fb      	ldr	r3, [r7, #28]
 8107146:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107148:	e007      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810714a:	2300      	movs	r3, #0
 810714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810714e:	e004      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8107150:	2300      	movs	r3, #0
 8107152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107154:	e001      	b.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8107156:	2300      	movs	r3, #0
 8107158:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810715c:	4618      	mov	r0, r3
 810715e:	3740      	adds	r7, #64	; 0x40
 8107160:	46bd      	mov	sp, r7
 8107162:	bd80      	pop	{r7, pc}
 8107164:	58024400 	.word	0x58024400
 8107168:	03d09000 	.word	0x03d09000
 810716c:	003d0900 	.word	0x003d0900
 8107170:	017d7840 	.word	0x017d7840

08107174 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107174:	b580      	push	{r7, lr}
 8107176:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107178:	f7fe fb5c 	bl	8105834 <HAL_RCC_GetHCLKFreq>
 810717c:	4602      	mov	r2, r0
 810717e:	4b06      	ldr	r3, [pc, #24]	; (8107198 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107180:	6a1b      	ldr	r3, [r3, #32]
 8107182:	091b      	lsrs	r3, r3, #4
 8107184:	f003 0307 	and.w	r3, r3, #7
 8107188:	4904      	ldr	r1, [pc, #16]	; (810719c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810718a:	5ccb      	ldrb	r3, [r1, r3]
 810718c:	f003 031f 	and.w	r3, r3, #31
 8107190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107194:	4618      	mov	r0, r3
 8107196:	bd80      	pop	{r7, pc}
 8107198:	58024400 	.word	0x58024400
 810719c:	0810cc9c 	.word	0x0810cc9c

081071a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81071a0:	b480      	push	{r7}
 81071a2:	b089      	sub	sp, #36	; 0x24
 81071a4:	af00      	add	r7, sp, #0
 81071a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81071a8:	4ba1      	ldr	r3, [pc, #644]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81071ac:	f003 0303 	and.w	r3, r3, #3
 81071b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81071b2:	4b9f      	ldr	r3, [pc, #636]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81071b6:	0b1b      	lsrs	r3, r3, #12
 81071b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81071bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81071be:	4b9c      	ldr	r3, [pc, #624]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81071c2:	091b      	lsrs	r3, r3, #4
 81071c4:	f003 0301 	and.w	r3, r3, #1
 81071c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81071ca:	4b99      	ldr	r3, [pc, #612]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81071ce:	08db      	lsrs	r3, r3, #3
 81071d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81071d4:	693a      	ldr	r2, [r7, #16]
 81071d6:	fb02 f303 	mul.w	r3, r2, r3
 81071da:	ee07 3a90 	vmov	s15, r3
 81071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81071e6:	697b      	ldr	r3, [r7, #20]
 81071e8:	2b00      	cmp	r3, #0
 81071ea:	f000 8111 	beq.w	8107410 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81071ee:	69bb      	ldr	r3, [r7, #24]
 81071f0:	2b02      	cmp	r3, #2
 81071f2:	f000 8083 	beq.w	81072fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81071f6:	69bb      	ldr	r3, [r7, #24]
 81071f8:	2b02      	cmp	r3, #2
 81071fa:	f200 80a1 	bhi.w	8107340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81071fe:	69bb      	ldr	r3, [r7, #24]
 8107200:	2b00      	cmp	r3, #0
 8107202:	d003      	beq.n	810720c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107204:	69bb      	ldr	r3, [r7, #24]
 8107206:	2b01      	cmp	r3, #1
 8107208:	d056      	beq.n	81072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810720a:	e099      	b.n	8107340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810720c:	4b88      	ldr	r3, [pc, #544]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	f003 0320 	and.w	r3, r3, #32
 8107214:	2b00      	cmp	r3, #0
 8107216:	d02d      	beq.n	8107274 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107218:	4b85      	ldr	r3, [pc, #532]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810721a:	681b      	ldr	r3, [r3, #0]
 810721c:	08db      	lsrs	r3, r3, #3
 810721e:	f003 0303 	and.w	r3, r3, #3
 8107222:	4a84      	ldr	r2, [pc, #528]	; (8107434 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107224:	fa22 f303 	lsr.w	r3, r2, r3
 8107228:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810722a:	68bb      	ldr	r3, [r7, #8]
 810722c:	ee07 3a90 	vmov	s15, r3
 8107230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107234:	697b      	ldr	r3, [r7, #20]
 8107236:	ee07 3a90 	vmov	s15, r3
 810723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107242:	4b7b      	ldr	r3, [pc, #492]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810724a:	ee07 3a90 	vmov	s15, r3
 810724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107252:	ed97 6a03 	vldr	s12, [r7, #12]
 8107256:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810726e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107272:	e087      	b.n	8107384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107274:	697b      	ldr	r3, [r7, #20]
 8107276:	ee07 3a90 	vmov	s15, r3
 810727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810727e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810743c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107286:	4b6a      	ldr	r3, [pc, #424]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810728e:	ee07 3a90 	vmov	s15, r3
 8107292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107296:	ed97 6a03 	vldr	s12, [r7, #12]
 810729a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81072a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81072b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81072b6:	e065      	b.n	8107384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81072b8:	697b      	ldr	r3, [r7, #20]
 81072ba:	ee07 3a90 	vmov	s15, r3
 81072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072ca:	4b59      	ldr	r3, [pc, #356]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81072d2:	ee07 3a90 	vmov	s15, r3
 81072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072da:	ed97 6a03 	vldr	s12, [r7, #12]
 81072de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81072ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81072f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81072fa:	e043      	b.n	8107384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81072fc:	697b      	ldr	r3, [r7, #20]
 81072fe:	ee07 3a90 	vmov	s15, r3
 8107302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107306:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810730e:	4b48      	ldr	r3, [pc, #288]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107316:	ee07 3a90 	vmov	s15, r3
 810731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810731e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107322:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107336:	ee67 7a27 	vmul.f32	s15, s14, s15
 810733a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810733e:	e021      	b.n	8107384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107340:	697b      	ldr	r3, [r7, #20]
 8107342:	ee07 3a90 	vmov	s15, r3
 8107346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810734a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107352:	4b37      	ldr	r3, [pc, #220]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810735a:	ee07 3a90 	vmov	s15, r3
 810735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107362:	ed97 6a03 	vldr	s12, [r7, #12]
 8107366:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810737e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107382:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8107384:	4b2a      	ldr	r3, [pc, #168]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107388:	0a5b      	lsrs	r3, r3, #9
 810738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810738e:	ee07 3a90 	vmov	s15, r3
 8107392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810739a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810739e:	edd7 6a07 	vldr	s13, [r7, #28]
 81073a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81073a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81073aa:	ee17 2a90 	vmov	r2, s15
 81073ae:	687b      	ldr	r3, [r7, #4]
 81073b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81073b2:	4b1f      	ldr	r3, [pc, #124]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073b6:	0c1b      	lsrs	r3, r3, #16
 81073b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81073bc:	ee07 3a90 	vmov	s15, r3
 81073c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81073c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81073cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81073d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81073d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81073d8:	ee17 2a90 	vmov	r2, s15
 81073dc:	687b      	ldr	r3, [r7, #4]
 81073de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81073e0:	4b13      	ldr	r3, [pc, #76]	; (8107430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073e4:	0e1b      	lsrs	r3, r3, #24
 81073e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81073ea:	ee07 3a90 	vmov	s15, r3
 81073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81073f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81073fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81073fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107406:	ee17 2a90 	vmov	r2, s15
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810740e:	e008      	b.n	8107422 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	2200      	movs	r2, #0
 8107414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107416:	687b      	ldr	r3, [r7, #4]
 8107418:	2200      	movs	r2, #0
 810741a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810741c:	687b      	ldr	r3, [r7, #4]
 810741e:	2200      	movs	r2, #0
 8107420:	609a      	str	r2, [r3, #8]
}
 8107422:	bf00      	nop
 8107424:	3724      	adds	r7, #36	; 0x24
 8107426:	46bd      	mov	sp, r7
 8107428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810742c:	4770      	bx	lr
 810742e:	bf00      	nop
 8107430:	58024400 	.word	0x58024400
 8107434:	03d09000 	.word	0x03d09000
 8107438:	46000000 	.word	0x46000000
 810743c:	4c742400 	.word	0x4c742400
 8107440:	4a742400 	.word	0x4a742400
 8107444:	4bbebc20 	.word	0x4bbebc20

08107448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8107448:	b480      	push	{r7}
 810744a:	b089      	sub	sp, #36	; 0x24
 810744c:	af00      	add	r7, sp, #0
 810744e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107450:	4ba1      	ldr	r3, [pc, #644]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107454:	f003 0303 	and.w	r3, r3, #3
 8107458:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810745a:	4b9f      	ldr	r3, [pc, #636]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810745e:	0d1b      	lsrs	r3, r3, #20
 8107460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107464:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107466:	4b9c      	ldr	r3, [pc, #624]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810746a:	0a1b      	lsrs	r3, r3, #8
 810746c:	f003 0301 	and.w	r3, r3, #1
 8107470:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8107472:	4b99      	ldr	r3, [pc, #612]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107476:	08db      	lsrs	r3, r3, #3
 8107478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810747c:	693a      	ldr	r2, [r7, #16]
 810747e:	fb02 f303 	mul.w	r3, r2, r3
 8107482:	ee07 3a90 	vmov	s15, r3
 8107486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810748a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810748e:	697b      	ldr	r3, [r7, #20]
 8107490:	2b00      	cmp	r3, #0
 8107492:	f000 8111 	beq.w	81076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107496:	69bb      	ldr	r3, [r7, #24]
 8107498:	2b02      	cmp	r3, #2
 810749a:	f000 8083 	beq.w	81075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810749e:	69bb      	ldr	r3, [r7, #24]
 81074a0:	2b02      	cmp	r3, #2
 81074a2:	f200 80a1 	bhi.w	81075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81074a6:	69bb      	ldr	r3, [r7, #24]
 81074a8:	2b00      	cmp	r3, #0
 81074aa:	d003      	beq.n	81074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81074ac:	69bb      	ldr	r3, [r7, #24]
 81074ae:	2b01      	cmp	r3, #1
 81074b0:	d056      	beq.n	8107560 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81074b2:	e099      	b.n	81075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81074b4:	4b88      	ldr	r3, [pc, #544]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074b6:	681b      	ldr	r3, [r3, #0]
 81074b8:	f003 0320 	and.w	r3, r3, #32
 81074bc:	2b00      	cmp	r3, #0
 81074be:	d02d      	beq.n	810751c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81074c0:	4b85      	ldr	r3, [pc, #532]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	08db      	lsrs	r3, r3, #3
 81074c6:	f003 0303 	and.w	r3, r3, #3
 81074ca:	4a84      	ldr	r2, [pc, #528]	; (81076dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81074cc:	fa22 f303 	lsr.w	r3, r2, r3
 81074d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81074d2:	68bb      	ldr	r3, [r7, #8]
 81074d4:	ee07 3a90 	vmov	s15, r3
 81074d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074dc:	697b      	ldr	r3, [r7, #20]
 81074de:	ee07 3a90 	vmov	s15, r3
 81074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074ea:	4b7b      	ldr	r3, [pc, #492]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074f2:	ee07 3a90 	vmov	s15, r3
 81074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074fa:	ed97 6a03 	vldr	s12, [r7, #12]
 81074fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 81076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810750a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810750e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107516:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810751a:	e087      	b.n	810762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810751c:	697b      	ldr	r3, [r7, #20]
 810751e:	ee07 3a90 	vmov	s15, r3
 8107522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107526:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810752a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810752e:	4b6a      	ldr	r3, [pc, #424]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107536:	ee07 3a90 	vmov	s15, r3
 810753a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810753e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107542:	eddf 5a67 	vldr	s11, [pc, #412]	; 81076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810754a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810754e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107556:	ee67 7a27 	vmul.f32	s15, s14, s15
 810755a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810755e:	e065      	b.n	810762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107560:	697b      	ldr	r3, [r7, #20]
 8107562:	ee07 3a90 	vmov	s15, r3
 8107566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810756a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107572:	4b59      	ldr	r3, [pc, #356]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810757a:	ee07 3a90 	vmov	s15, r3
 810757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107582:	ed97 6a03 	vldr	s12, [r7, #12]
 8107586:	eddf 5a56 	vldr	s11, [pc, #344]	; 81076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810759e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81075a2:	e043      	b.n	810762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81075a4:	697b      	ldr	r3, [r7, #20]
 81075a6:	ee07 3a90 	vmov	s15, r3
 81075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81076ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075b6:	4b48      	ldr	r3, [pc, #288]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075be:	ee07 3a90 	vmov	s15, r3
 81075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81075ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 81076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81075ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81075da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81075de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81075e6:	e021      	b.n	810762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81075e8:	697b      	ldr	r3, [r7, #20]
 81075ea:	ee07 3a90 	vmov	s15, r3
 81075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075fa:	4b37      	ldr	r3, [pc, #220]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107602:	ee07 3a90 	vmov	s15, r3
 8107606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810760a:	ed97 6a03 	vldr	s12, [r7, #12]
 810760e:	eddf 5a34 	vldr	s11, [pc, #208]	; 81076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810761a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810762a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810762c:	4b2a      	ldr	r3, [pc, #168]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107630:	0a5b      	lsrs	r3, r3, #9
 8107632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107636:	ee07 3a90 	vmov	s15, r3
 810763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810763e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107646:	edd7 6a07 	vldr	s13, [r7, #28]
 810764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107652:	ee17 2a90 	vmov	r2, s15
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810765a:	4b1f      	ldr	r3, [pc, #124]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810765e:	0c1b      	lsrs	r3, r3, #16
 8107660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107664:	ee07 3a90 	vmov	s15, r3
 8107668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810766c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107674:	edd7 6a07 	vldr	s13, [r7, #28]
 8107678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810767c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107680:	ee17 2a90 	vmov	r2, s15
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8107688:	4b13      	ldr	r3, [pc, #76]	; (81076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810768c:	0e1b      	lsrs	r3, r3, #24
 810768e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107692:	ee07 3a90 	vmov	s15, r3
 8107696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810769a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810769e:	ee37 7a87 	vadd.f32	s14, s15, s14
 81076a2:	edd7 6a07 	vldr	s13, [r7, #28]
 81076a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81076aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81076ae:	ee17 2a90 	vmov	r2, s15
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81076b6:	e008      	b.n	81076ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81076b8:	687b      	ldr	r3, [r7, #4]
 81076ba:	2200      	movs	r2, #0
 81076bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	2200      	movs	r2, #0
 81076c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	2200      	movs	r2, #0
 81076c8:	609a      	str	r2, [r3, #8]
}
 81076ca:	bf00      	nop
 81076cc:	3724      	adds	r7, #36	; 0x24
 81076ce:	46bd      	mov	sp, r7
 81076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076d4:	4770      	bx	lr
 81076d6:	bf00      	nop
 81076d8:	58024400 	.word	0x58024400
 81076dc:	03d09000 	.word	0x03d09000
 81076e0:	46000000 	.word	0x46000000
 81076e4:	4c742400 	.word	0x4c742400
 81076e8:	4a742400 	.word	0x4a742400
 81076ec:	4bbebc20 	.word	0x4bbebc20

081076f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 81076f0:	b480      	push	{r7}
 81076f2:	b089      	sub	sp, #36	; 0x24
 81076f4:	af00      	add	r7, sp, #0
 81076f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81076f8:	4ba0      	ldr	r3, [pc, #640]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81076fc:	f003 0303 	and.w	r3, r3, #3
 8107700:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8107702:	4b9e      	ldr	r3, [pc, #632]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107706:	091b      	lsrs	r3, r3, #4
 8107708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810770c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810770e:	4b9b      	ldr	r3, [pc, #620]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107712:	f003 0301 	and.w	r3, r3, #1
 8107716:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8107718:	4b98      	ldr	r3, [pc, #608]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810771a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810771c:	08db      	lsrs	r3, r3, #3
 810771e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107722:	693a      	ldr	r2, [r7, #16]
 8107724:	fb02 f303 	mul.w	r3, r2, r3
 8107728:	ee07 3a90 	vmov	s15, r3
 810772c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107730:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107734:	697b      	ldr	r3, [r7, #20]
 8107736:	2b00      	cmp	r3, #0
 8107738:	f000 8111 	beq.w	810795e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810773c:	69bb      	ldr	r3, [r7, #24]
 810773e:	2b02      	cmp	r3, #2
 8107740:	f000 8083 	beq.w	810784a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107744:	69bb      	ldr	r3, [r7, #24]
 8107746:	2b02      	cmp	r3, #2
 8107748:	f200 80a1 	bhi.w	810788e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810774c:	69bb      	ldr	r3, [r7, #24]
 810774e:	2b00      	cmp	r3, #0
 8107750:	d003      	beq.n	810775a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107752:	69bb      	ldr	r3, [r7, #24]
 8107754:	2b01      	cmp	r3, #1
 8107756:	d056      	beq.n	8107806 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107758:	e099      	b.n	810788e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810775a:	4b88      	ldr	r3, [pc, #544]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	f003 0320 	and.w	r3, r3, #32
 8107762:	2b00      	cmp	r3, #0
 8107764:	d02d      	beq.n	81077c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107766:	4b85      	ldr	r3, [pc, #532]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107768:	681b      	ldr	r3, [r3, #0]
 810776a:	08db      	lsrs	r3, r3, #3
 810776c:	f003 0303 	and.w	r3, r3, #3
 8107770:	4a83      	ldr	r2, [pc, #524]	; (8107980 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107772:	fa22 f303 	lsr.w	r3, r2, r3
 8107776:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107778:	68bb      	ldr	r3, [r7, #8]
 810777a:	ee07 3a90 	vmov	s15, r3
 810777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107782:	697b      	ldr	r3, [r7, #20]
 8107784:	ee07 3a90 	vmov	s15, r3
 8107788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810778c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107790:	4b7a      	ldr	r3, [pc, #488]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107798:	ee07 3a90 	vmov	s15, r3
 810779c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81077a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8107984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81077a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81077c0:	e087      	b.n	81078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81077c2:	697b      	ldr	r3, [r7, #20]
 81077c4:	ee07 3a90 	vmov	s15, r3
 81077c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8107988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81077d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077d4:	4b69      	ldr	r3, [pc, #420]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81077d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077dc:	ee07 3a90 	vmov	s15, r3
 81077e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81077e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8107984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81077ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107800:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107804:	e065      	b.n	81078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107806:	697b      	ldr	r3, [r7, #20]
 8107808:	ee07 3a90 	vmov	s15, r3
 810780c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107810:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810798c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107818:	4b58      	ldr	r3, [pc, #352]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107820:	ee07 3a90 	vmov	s15, r3
 8107824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107828:	ed97 6a03 	vldr	s12, [r7, #12]
 810782c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8107984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810783c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107844:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107848:	e043      	b.n	81078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810784a:	697b      	ldr	r3, [r7, #20]
 810784c:	ee07 3a90 	vmov	s15, r3
 8107850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107854:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107990 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810785c:	4b47      	ldr	r3, [pc, #284]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107864:	ee07 3a90 	vmov	s15, r3
 8107868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810786c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107870:	eddf 5a44 	vldr	s11, [pc, #272]	; 8107984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810787c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810788c:	e021      	b.n	81078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810788e:	697b      	ldr	r3, [r7, #20]
 8107890:	ee07 3a90 	vmov	s15, r3
 8107894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107898:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8107988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810789c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078a0:	4b36      	ldr	r3, [pc, #216]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078a8:	ee07 3a90 	vmov	s15, r3
 81078ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81078b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8107984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81078b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81078d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 81078d2:	4b2a      	ldr	r3, [pc, #168]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078d6:	0a5b      	lsrs	r3, r3, #9
 81078d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81078dc:	ee07 3a90 	vmov	s15, r3
 81078e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81078e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81078ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078f8:	ee17 2a90 	vmov	r2, s15
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8107900:	4b1e      	ldr	r3, [pc, #120]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107904:	0c1b      	lsrs	r3, r3, #16
 8107906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810790a:	ee07 3a90 	vmov	s15, r3
 810790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107916:	ee37 7a87 	vadd.f32	s14, s15, s14
 810791a:	edd7 6a07 	vldr	s13, [r7, #28]
 810791e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107926:	ee17 2a90 	vmov	r2, s15
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810792e:	4b13      	ldr	r3, [pc, #76]	; (810797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107932:	0e1b      	lsrs	r3, r3, #24
 8107934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107938:	ee07 3a90 	vmov	s15, r3
 810793c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107948:	edd7 6a07 	vldr	s13, [r7, #28]
 810794c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107954:	ee17 2a90 	vmov	r2, s15
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810795c:	e008      	b.n	8107970 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810795e:	687b      	ldr	r3, [r7, #4]
 8107960:	2200      	movs	r2, #0
 8107962:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	2200      	movs	r2, #0
 8107968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	2200      	movs	r2, #0
 810796e:	609a      	str	r2, [r3, #8]
}
 8107970:	bf00      	nop
 8107972:	3724      	adds	r7, #36	; 0x24
 8107974:	46bd      	mov	sp, r7
 8107976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810797a:	4770      	bx	lr
 810797c:	58024400 	.word	0x58024400
 8107980:	03d09000 	.word	0x03d09000
 8107984:	46000000 	.word	0x46000000
 8107988:	4c742400 	.word	0x4c742400
 810798c:	4a742400 	.word	0x4a742400
 8107990:	4bbebc20 	.word	0x4bbebc20

08107994 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107994:	b580      	push	{r7, lr}
 8107996:	b084      	sub	sp, #16
 8107998:	af00      	add	r7, sp, #0
 810799a:	6078      	str	r0, [r7, #4]
 810799c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810799e:	2300      	movs	r3, #0
 81079a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81079a2:	4b54      	ldr	r3, [pc, #336]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 81079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079a6:	f003 0303 	and.w	r3, r3, #3
 81079aa:	2b03      	cmp	r3, #3
 81079ac:	d101      	bne.n	81079b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81079ae:	2301      	movs	r3, #1
 81079b0:	e09b      	b.n	8107aea <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81079b2:	4b50      	ldr	r3, [pc, #320]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 81079b4:	681b      	ldr	r3, [r3, #0]
 81079b6:	4a4f      	ldr	r2, [pc, #316]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 81079b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81079bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81079be:	f7fb f8c3 	bl	8102b48 <HAL_GetTick>
 81079c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81079c4:	e008      	b.n	81079d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81079c6:	f7fb f8bf 	bl	8102b48 <HAL_GetTick>
 81079ca:	4602      	mov	r2, r0
 81079cc:	68bb      	ldr	r3, [r7, #8]
 81079ce:	1ad3      	subs	r3, r2, r3
 81079d0:	2b02      	cmp	r3, #2
 81079d2:	d901      	bls.n	81079d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81079d4:	2303      	movs	r3, #3
 81079d6:	e088      	b.n	8107aea <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81079d8:	4b46      	ldr	r3, [pc, #280]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	d1f0      	bne.n	81079c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81079e4:	4b43      	ldr	r3, [pc, #268]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 81079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	031b      	lsls	r3, r3, #12
 81079f2:	4940      	ldr	r1, [pc, #256]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 81079f4:	4313      	orrs	r3, r2
 81079f6:	628b      	str	r3, [r1, #40]	; 0x28
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	685b      	ldr	r3, [r3, #4]
 81079fc:	3b01      	subs	r3, #1
 81079fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	689b      	ldr	r3, [r3, #8]
 8107a06:	3b01      	subs	r3, #1
 8107a08:	025b      	lsls	r3, r3, #9
 8107a0a:	b29b      	uxth	r3, r3
 8107a0c:	431a      	orrs	r2, r3
 8107a0e:	687b      	ldr	r3, [r7, #4]
 8107a10:	68db      	ldr	r3, [r3, #12]
 8107a12:	3b01      	subs	r3, #1
 8107a14:	041b      	lsls	r3, r3, #16
 8107a16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107a1a:	431a      	orrs	r2, r3
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	691b      	ldr	r3, [r3, #16]
 8107a20:	3b01      	subs	r3, #1
 8107a22:	061b      	lsls	r3, r3, #24
 8107a24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107a28:	4932      	ldr	r1, [pc, #200]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a2a:	4313      	orrs	r3, r2
 8107a2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107a2e:	4b31      	ldr	r3, [pc, #196]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	695b      	ldr	r3, [r3, #20]
 8107a3a:	492e      	ldr	r1, [pc, #184]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a3c:	4313      	orrs	r3, r2
 8107a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107a40:	4b2c      	ldr	r3, [pc, #176]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a44:	f023 0220 	bic.w	r2, r3, #32
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	699b      	ldr	r3, [r3, #24]
 8107a4c:	4929      	ldr	r1, [pc, #164]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a4e:	4313      	orrs	r3, r2
 8107a50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107a52:	4b28      	ldr	r3, [pc, #160]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a56:	4a27      	ldr	r2, [pc, #156]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a58:	f023 0310 	bic.w	r3, r3, #16
 8107a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107a5e:	4b25      	ldr	r3, [pc, #148]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107a66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107a6a:	687a      	ldr	r2, [r7, #4]
 8107a6c:	69d2      	ldr	r2, [r2, #28]
 8107a6e:	00d2      	lsls	r2, r2, #3
 8107a70:	4920      	ldr	r1, [pc, #128]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a72:	4313      	orrs	r3, r2
 8107a74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107a76:	4b1f      	ldr	r3, [pc, #124]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a7a:	4a1e      	ldr	r2, [pc, #120]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a7c:	f043 0310 	orr.w	r3, r3, #16
 8107a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107a82:	683b      	ldr	r3, [r7, #0]
 8107a84:	2b00      	cmp	r3, #0
 8107a86:	d106      	bne.n	8107a96 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107a88:	4b1a      	ldr	r3, [pc, #104]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a8c:	4a19      	ldr	r2, [pc, #100]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107a94:	e00f      	b.n	8107ab6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107a96:	683b      	ldr	r3, [r7, #0]
 8107a98:	2b01      	cmp	r3, #1
 8107a9a:	d106      	bne.n	8107aaa <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107a9c:	4b15      	ldr	r3, [pc, #84]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aa0:	4a14      	ldr	r2, [pc, #80]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107aa8:	e005      	b.n	8107ab6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107aaa:	4b12      	ldr	r3, [pc, #72]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aae:	4a11      	ldr	r2, [pc, #68]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107ab6:	4b0f      	ldr	r3, [pc, #60]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	4a0e      	ldr	r2, [pc, #56]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107ac2:	f7fb f841 	bl	8102b48 <HAL_GetTick>
 8107ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107ac8:	e008      	b.n	8107adc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107aca:	f7fb f83d 	bl	8102b48 <HAL_GetTick>
 8107ace:	4602      	mov	r2, r0
 8107ad0:	68bb      	ldr	r3, [r7, #8]
 8107ad2:	1ad3      	subs	r3, r2, r3
 8107ad4:	2b02      	cmp	r3, #2
 8107ad6:	d901      	bls.n	8107adc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107ad8:	2303      	movs	r3, #3
 8107ada:	e006      	b.n	8107aea <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107adc:	4b05      	ldr	r3, [pc, #20]	; (8107af4 <RCCEx_PLL2_Config+0x160>)
 8107ade:	681b      	ldr	r3, [r3, #0]
 8107ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107ae4:	2b00      	cmp	r3, #0
 8107ae6:	d0f0      	beq.n	8107aca <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8107aea:	4618      	mov	r0, r3
 8107aec:	3710      	adds	r7, #16
 8107aee:	46bd      	mov	sp, r7
 8107af0:	bd80      	pop	{r7, pc}
 8107af2:	bf00      	nop
 8107af4:	58024400 	.word	0x58024400

08107af8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107af8:	b580      	push	{r7, lr}
 8107afa:	b084      	sub	sp, #16
 8107afc:	af00      	add	r7, sp, #0
 8107afe:	6078      	str	r0, [r7, #4]
 8107b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107b02:	2300      	movs	r3, #0
 8107b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107b06:	4b54      	ldr	r3, [pc, #336]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b0a:	f003 0303 	and.w	r3, r3, #3
 8107b0e:	2b03      	cmp	r3, #3
 8107b10:	d101      	bne.n	8107b16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107b12:	2301      	movs	r3, #1
 8107b14:	e09b      	b.n	8107c4e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107b16:	4b50      	ldr	r3, [pc, #320]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b18:	681b      	ldr	r3, [r3, #0]
 8107b1a:	4a4f      	ldr	r2, [pc, #316]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b22:	f7fb f811 	bl	8102b48 <HAL_GetTick>
 8107b26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107b28:	e008      	b.n	8107b3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107b2a:	f7fb f80d 	bl	8102b48 <HAL_GetTick>
 8107b2e:	4602      	mov	r2, r0
 8107b30:	68bb      	ldr	r3, [r7, #8]
 8107b32:	1ad3      	subs	r3, r2, r3
 8107b34:	2b02      	cmp	r3, #2
 8107b36:	d901      	bls.n	8107b3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107b38:	2303      	movs	r3, #3
 8107b3a:	e088      	b.n	8107c4e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107b3c:	4b46      	ldr	r3, [pc, #280]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b3e:	681b      	ldr	r3, [r3, #0]
 8107b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107b44:	2b00      	cmp	r3, #0
 8107b46:	d1f0      	bne.n	8107b2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107b48:	4b43      	ldr	r3, [pc, #268]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	051b      	lsls	r3, r3, #20
 8107b56:	4940      	ldr	r1, [pc, #256]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b58:	4313      	orrs	r3, r2
 8107b5a:	628b      	str	r3, [r1, #40]	; 0x28
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	685b      	ldr	r3, [r3, #4]
 8107b60:	3b01      	subs	r3, #1
 8107b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	689b      	ldr	r3, [r3, #8]
 8107b6a:	3b01      	subs	r3, #1
 8107b6c:	025b      	lsls	r3, r3, #9
 8107b6e:	b29b      	uxth	r3, r3
 8107b70:	431a      	orrs	r2, r3
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	68db      	ldr	r3, [r3, #12]
 8107b76:	3b01      	subs	r3, #1
 8107b78:	041b      	lsls	r3, r3, #16
 8107b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107b7e:	431a      	orrs	r2, r3
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	691b      	ldr	r3, [r3, #16]
 8107b84:	3b01      	subs	r3, #1
 8107b86:	061b      	lsls	r3, r3, #24
 8107b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107b8c:	4932      	ldr	r1, [pc, #200]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b8e:	4313      	orrs	r3, r2
 8107b90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107b92:	4b31      	ldr	r3, [pc, #196]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	695b      	ldr	r3, [r3, #20]
 8107b9e:	492e      	ldr	r1, [pc, #184]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107ba0:	4313      	orrs	r3, r2
 8107ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107ba4:	4b2c      	ldr	r3, [pc, #176]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ba8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	699b      	ldr	r3, [r3, #24]
 8107bb0:	4929      	ldr	r1, [pc, #164]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bb2:	4313      	orrs	r3, r2
 8107bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107bb6:	4b28      	ldr	r3, [pc, #160]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bba:	4a27      	ldr	r2, [pc, #156]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107bc2:	4b25      	ldr	r3, [pc, #148]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107bca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107bce:	687a      	ldr	r2, [r7, #4]
 8107bd0:	69d2      	ldr	r2, [r2, #28]
 8107bd2:	00d2      	lsls	r2, r2, #3
 8107bd4:	4920      	ldr	r1, [pc, #128]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bd6:	4313      	orrs	r3, r2
 8107bd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107bda:	4b1f      	ldr	r3, [pc, #124]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bde:	4a1e      	ldr	r2, [pc, #120]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107be6:	683b      	ldr	r3, [r7, #0]
 8107be8:	2b00      	cmp	r3, #0
 8107bea:	d106      	bne.n	8107bfa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107bec:	4b1a      	ldr	r3, [pc, #104]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bf0:	4a19      	ldr	r2, [pc, #100]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107bf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107bf8:	e00f      	b.n	8107c1a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107bfa:	683b      	ldr	r3, [r7, #0]
 8107bfc:	2b01      	cmp	r3, #1
 8107bfe:	d106      	bne.n	8107c0e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107c00:	4b15      	ldr	r3, [pc, #84]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c04:	4a14      	ldr	r2, [pc, #80]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c0c:	e005      	b.n	8107c1a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107c0e:	4b12      	ldr	r3, [pc, #72]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c12:	4a11      	ldr	r2, [pc, #68]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107c18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107c1a:	4b0f      	ldr	r3, [pc, #60]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	4a0e      	ldr	r2, [pc, #56]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107c26:	f7fa ff8f 	bl	8102b48 <HAL_GetTick>
 8107c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107c2c:	e008      	b.n	8107c40 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107c2e:	f7fa ff8b 	bl	8102b48 <HAL_GetTick>
 8107c32:	4602      	mov	r2, r0
 8107c34:	68bb      	ldr	r3, [r7, #8]
 8107c36:	1ad3      	subs	r3, r2, r3
 8107c38:	2b02      	cmp	r3, #2
 8107c3a:	d901      	bls.n	8107c40 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107c3c:	2303      	movs	r3, #3
 8107c3e:	e006      	b.n	8107c4e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107c40:	4b05      	ldr	r3, [pc, #20]	; (8107c58 <RCCEx_PLL3_Config+0x160>)
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107c48:	2b00      	cmp	r3, #0
 8107c4a:	d0f0      	beq.n	8107c2e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107c4e:	4618      	mov	r0, r3
 8107c50:	3710      	adds	r7, #16
 8107c52:	46bd      	mov	sp, r7
 8107c54:	bd80      	pop	{r7, pc}
 8107c56:	bf00      	nop
 8107c58:	58024400 	.word	0x58024400

08107c5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8107c5c:	b580      	push	{r7, lr}
 8107c5e:	b084      	sub	sp, #16
 8107c60:	af00      	add	r7, sp, #0
 8107c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8107c64:	2301      	movs	r3, #1
 8107c66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	2b00      	cmp	r3, #0
 8107c6c:	d069      	beq.n	8107d42 <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8107c6e:	687b      	ldr	r3, [r7, #4]
 8107c70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8107c74:	b2db      	uxtb	r3, r3
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	d106      	bne.n	8107c88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	2200      	movs	r2, #0
 8107c7e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8107c82:	6878      	ldr	r0, [r7, #4]
 8107c84:	f7f9 ffd6 	bl	8101c34 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8107c88:	687b      	ldr	r3, [r7, #4]
 8107c8a:	2202      	movs	r2, #2
 8107c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	681b      	ldr	r3, [r3, #0]
 8107c94:	22ca      	movs	r2, #202	; 0xca
 8107c96:	625a      	str	r2, [r3, #36]	; 0x24
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	681b      	ldr	r3, [r3, #0]
 8107c9c:	2253      	movs	r2, #83	; 0x53
 8107c9e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8107ca0:	6878      	ldr	r0, [r7, #4]
 8107ca2:	f000 f879 	bl	8107d98 <RTC_EnterInitMode>
 8107ca6:	4603      	mov	r3, r0
 8107ca8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8107caa:	7bfb      	ldrb	r3, [r7, #15]
 8107cac:	2b00      	cmp	r3, #0
 8107cae:	d13d      	bne.n	8107d2c <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	689b      	ldr	r3, [r3, #8]
 8107cb6:	687a      	ldr	r2, [r7, #4]
 8107cb8:	6812      	ldr	r2, [r2, #0]
 8107cba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8107cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107cc2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	681b      	ldr	r3, [r3, #0]
 8107cc8:	6899      	ldr	r1, [r3, #8]
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	685a      	ldr	r2, [r3, #4]
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	691b      	ldr	r3, [r3, #16]
 8107cd2:	431a      	orrs	r2, r3
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	699b      	ldr	r3, [r3, #24]
 8107cd8:	431a      	orrs	r2, r3
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	430a      	orrs	r2, r1
 8107ce0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	689b      	ldr	r3, [r3, #8]
 8107ce6:	0419      	lsls	r1, r3, #16
 8107ce8:	687b      	ldr	r3, [r7, #4]
 8107cea:	68da      	ldr	r2, [r3, #12]
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	681b      	ldr	r3, [r3, #0]
 8107cf0:	430a      	orrs	r2, r1
 8107cf2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8107cf4:	6878      	ldr	r0, [r7, #4]
 8107cf6:	f000 f883 	bl	8107e00 <RTC_ExitInitMode>
 8107cfa:	4603      	mov	r3, r0
 8107cfc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8107cfe:	7bfb      	ldrb	r3, [r7, #15]
 8107d00:	2b00      	cmp	r3, #0
 8107d02:	d113      	bne.n	8107d2c <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	681b      	ldr	r3, [r3, #0]
 8107d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107d0a:	687b      	ldr	r3, [r7, #4]
 8107d0c:	681b      	ldr	r3, [r3, #0]
 8107d0e:	f022 0203 	bic.w	r2, r2, #3
 8107d12:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	681b      	ldr	r3, [r3, #0]
 8107d18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8107d1a:	687b      	ldr	r3, [r7, #4]
 8107d1c:	69da      	ldr	r2, [r3, #28]
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	695b      	ldr	r3, [r3, #20]
 8107d22:	431a      	orrs	r2, r3
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	681b      	ldr	r3, [r3, #0]
 8107d28:	430a      	orrs	r2, r1
 8107d2a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	681b      	ldr	r3, [r3, #0]
 8107d30:	22ff      	movs	r2, #255	; 0xff
 8107d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8107d34:	7bfb      	ldrb	r3, [r7, #15]
 8107d36:	2b00      	cmp	r3, #0
 8107d38:	d103      	bne.n	8107d42 <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	2201      	movs	r2, #1
 8107d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8107d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8107d44:	4618      	mov	r0, r3
 8107d46:	3710      	adds	r7, #16
 8107d48:	46bd      	mov	sp, r7
 8107d4a:	bd80      	pop	{r7, pc}

08107d4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8107d4c:	b580      	push	{r7, lr}
 8107d4e:	b084      	sub	sp, #16
 8107d50:	af00      	add	r7, sp, #0
 8107d52:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	68da      	ldr	r2, [r3, #12]
 8107d5a:	687b      	ldr	r3, [r7, #4]
 8107d5c:	681b      	ldr	r3, [r3, #0]
 8107d5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8107d62:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8107d64:	f7fa fef0 	bl	8102b48 <HAL_GetTick>
 8107d68:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8107d6a:	e009      	b.n	8107d80 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8107d6c:	f7fa feec 	bl	8102b48 <HAL_GetTick>
 8107d70:	4602      	mov	r2, r0
 8107d72:	68fb      	ldr	r3, [r7, #12]
 8107d74:	1ad3      	subs	r3, r2, r3
 8107d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8107d7a:	d901      	bls.n	8107d80 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8107d7c:	2303      	movs	r3, #3
 8107d7e:	e007      	b.n	8107d90 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	68db      	ldr	r3, [r3, #12]
 8107d86:	f003 0320 	and.w	r3, r3, #32
 8107d8a:	2b00      	cmp	r3, #0
 8107d8c:	d0ee      	beq.n	8107d6c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8107d8e:	2300      	movs	r3, #0
}
 8107d90:	4618      	mov	r0, r3
 8107d92:	3710      	adds	r7, #16
 8107d94:	46bd      	mov	sp, r7
 8107d96:	bd80      	pop	{r7, pc}

08107d98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8107d98:	b580      	push	{r7, lr}
 8107d9a:	b084      	sub	sp, #16
 8107d9c:	af00      	add	r7, sp, #0
 8107d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107da0:	2300      	movs	r3, #0
 8107da2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	68db      	ldr	r3, [r3, #12]
 8107daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107dae:	2b00      	cmp	r3, #0
 8107db0:	d120      	bne.n	8107df4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	681b      	ldr	r3, [r3, #0]
 8107db6:	f04f 32ff 	mov.w	r2, #4294967295
 8107dba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8107dbc:	f7fa fec4 	bl	8102b48 <HAL_GetTick>
 8107dc0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8107dc2:	e00d      	b.n	8107de0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8107dc4:	f7fa fec0 	bl	8102b48 <HAL_GetTick>
 8107dc8:	4602      	mov	r2, r0
 8107dca:	68bb      	ldr	r3, [r7, #8]
 8107dcc:	1ad3      	subs	r3, r2, r3
 8107dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8107dd2:	d905      	bls.n	8107de0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8107dd4:	2303      	movs	r3, #3
 8107dd6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	2203      	movs	r2, #3
 8107ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8107de0:	687b      	ldr	r3, [r7, #4]
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	68db      	ldr	r3, [r3, #12]
 8107de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107dea:	2b00      	cmp	r3, #0
 8107dec:	d102      	bne.n	8107df4 <RTC_EnterInitMode+0x5c>
 8107dee:	7bfb      	ldrb	r3, [r7, #15]
 8107df0:	2b03      	cmp	r3, #3
 8107df2:	d1e7      	bne.n	8107dc4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8107df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8107df6:	4618      	mov	r0, r3
 8107df8:	3710      	adds	r7, #16
 8107dfa:	46bd      	mov	sp, r7
 8107dfc:	bd80      	pop	{r7, pc}
	...

08107e00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8107e00:	b580      	push	{r7, lr}
 8107e02:	b084      	sub	sp, #16
 8107e04:	af00      	add	r7, sp, #0
 8107e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107e08:	2300      	movs	r3, #0
 8107e0a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8107e0c:	4b1a      	ldr	r3, [pc, #104]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e0e:	68db      	ldr	r3, [r3, #12]
 8107e10:	4a19      	ldr	r2, [pc, #100]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107e16:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8107e18:	4b17      	ldr	r3, [pc, #92]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e1a:	689b      	ldr	r3, [r3, #8]
 8107e1c:	f003 0320 	and.w	r3, r3, #32
 8107e20:	2b00      	cmp	r3, #0
 8107e22:	d10c      	bne.n	8107e3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8107e24:	6878      	ldr	r0, [r7, #4]
 8107e26:	f7ff ff91 	bl	8107d4c <HAL_RTC_WaitForSynchro>
 8107e2a:	4603      	mov	r3, r0
 8107e2c:	2b00      	cmp	r3, #0
 8107e2e:	d01e      	beq.n	8107e6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	2203      	movs	r2, #3
 8107e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8107e38:	2303      	movs	r3, #3
 8107e3a:	73fb      	strb	r3, [r7, #15]
 8107e3c:	e017      	b.n	8107e6e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8107e3e:	4b0e      	ldr	r3, [pc, #56]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e40:	689b      	ldr	r3, [r3, #8]
 8107e42:	4a0d      	ldr	r2, [pc, #52]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e44:	f023 0320 	bic.w	r3, r3, #32
 8107e48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8107e4a:	6878      	ldr	r0, [r7, #4]
 8107e4c:	f7ff ff7e 	bl	8107d4c <HAL_RTC_WaitForSynchro>
 8107e50:	4603      	mov	r3, r0
 8107e52:	2b00      	cmp	r3, #0
 8107e54:	d005      	beq.n	8107e62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	2203      	movs	r2, #3
 8107e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8107e5e:	2303      	movs	r3, #3
 8107e60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8107e62:	4b05      	ldr	r3, [pc, #20]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e64:	689b      	ldr	r3, [r3, #8]
 8107e66:	4a04      	ldr	r2, [pc, #16]	; (8107e78 <RTC_ExitInitMode+0x78>)
 8107e68:	f043 0320 	orr.w	r3, r3, #32
 8107e6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8107e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8107e70:	4618      	mov	r0, r3
 8107e72:	3710      	adds	r7, #16
 8107e74:	46bd      	mov	sp, r7
 8107e76:	bd80      	pop	{r7, pc}
 8107e78:	58004000 	.word	0x58004000

08107e7c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8107e7c:	b480      	push	{r7}
 8107e7e:	b085      	sub	sp, #20
 8107e80:	af00      	add	r7, sp, #0
 8107e82:	6078      	str	r0, [r7, #4]
 8107e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8107e8c:	2b01      	cmp	r3, #1
 8107e8e:	d101      	bne.n	8107e94 <HAL_RTCEx_SetTamper+0x18>
 8107e90:	2302      	movs	r3, #2
 8107e92:	e0cc      	b.n	810802e <HAL_RTCEx_SetTamper+0x1b2>
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	2201      	movs	r2, #1
 8107e98:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8107e9c:	687b      	ldr	r3, [r7, #4]
 8107e9e:	2202      	movs	r2, #2
 8107ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	681b      	ldr	r3, [r3, #0]
 8107ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107eaa:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8107eac:	683b      	ldr	r3, [r7, #0]
 8107eae:	681b      	ldr	r3, [r3, #0]
 8107eb0:	68fa      	ldr	r2, [r7, #12]
 8107eb2:	4313      	orrs	r3, r2
 8107eb4:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8107eb6:	683b      	ldr	r3, [r7, #0]
 8107eb8:	689b      	ldr	r3, [r3, #8]
 8107eba:	2b08      	cmp	r3, #8
 8107ebc:	d003      	beq.n	8107ec6 <HAL_RTCEx_SetTamper+0x4a>
 8107ebe:	683b      	ldr	r3, [r7, #0]
 8107ec0:	689b      	ldr	r3, [r3, #8]
 8107ec2:	2b02      	cmp	r3, #2
 8107ec4:	d106      	bne.n	8107ed4 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8107ec6:	683b      	ldr	r3, [r7, #0]
 8107ec8:	681b      	ldr	r3, [r3, #0]
 8107eca:	005b      	lsls	r3, r3, #1
 8107ecc:	68fa      	ldr	r2, [r7, #12]
 8107ece:	4313      	orrs	r3, r2
 8107ed0:	60fb      	str	r3, [r7, #12]
 8107ed2:	e006      	b.n	8107ee2 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8107ed4:	683b      	ldr	r3, [r7, #0]
 8107ed6:	681b      	ldr	r3, [r3, #0]
 8107ed8:	005b      	lsls	r3, r3, #1
 8107eda:	43db      	mvns	r3, r3
 8107edc:	68fa      	ldr	r2, [r7, #12]
 8107ede:	4013      	ands	r3, r2
 8107ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8107ee2:	683b      	ldr	r3, [r7, #0]
 8107ee4:	68db      	ldr	r3, [r3, #12]
 8107ee6:	2b00      	cmp	r3, #0
 8107ee8:	d01e      	beq.n	8107f28 <HAL_RTCEx_SetTamper+0xac>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107eea:	683b      	ldr	r3, [r7, #0]
 8107eec:	681b      	ldr	r3, [r3, #0]
 8107eee:	f003 0301 	and.w	r3, r3, #1
 8107ef2:	2b00      	cmp	r3, #0
 8107ef4:	d003      	beq.n	8107efe <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8107ef6:	68fb      	ldr	r3, [r7, #12]
 8107ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107efc:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107efe:	683b      	ldr	r3, [r7, #0]
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	f003 0308 	and.w	r3, r3, #8
 8107f06:	2b00      	cmp	r3, #0
 8107f08:	d003      	beq.n	8107f12 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8107f0a:	68fb      	ldr	r3, [r7, #12]
 8107f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107f10:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107f12:	683b      	ldr	r3, [r7, #0]
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	f003 0320 	and.w	r3, r3, #32
 8107f1a:	2b00      	cmp	r3, #0
 8107f1c:	d022      	beq.n	8107f64 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107f24:	60fb      	str	r3, [r7, #12]
 8107f26:	e01d      	b.n	8107f64 <HAL_RTCEx_SetTamper+0xe8>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107f28:	683b      	ldr	r3, [r7, #0]
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	f003 0301 	and.w	r3, r3, #1
 8107f30:	2b00      	cmp	r3, #0
 8107f32:	d003      	beq.n	8107f3c <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8107f34:	68fb      	ldr	r3, [r7, #12]
 8107f36:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107f3a:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107f3c:	683b      	ldr	r3, [r7, #0]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	f003 0308 	and.w	r3, r3, #8
 8107f44:	2b00      	cmp	r3, #0
 8107f46:	d003      	beq.n	8107f50 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8107f48:	68fb      	ldr	r3, [r7, #12]
 8107f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8107f4e:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107f50:	683b      	ldr	r3, [r7, #0]
 8107f52:	681b      	ldr	r3, [r3, #0]
 8107f54:	f003 0320 	and.w	r3, r3, #32
 8107f58:	2b00      	cmp	r3, #0
 8107f5a:	d003      	beq.n	8107f64 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8107f5c:	68fb      	ldr	r3, [r7, #12]
 8107f5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8107f62:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8107f64:	683b      	ldr	r3, [r7, #0]
 8107f66:	691b      	ldr	r3, [r3, #16]
 8107f68:	2b00      	cmp	r3, #0
 8107f6a:	d01e      	beq.n	8107faa <HAL_RTCEx_SetTamper+0x12e>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107f6c:	683b      	ldr	r3, [r7, #0]
 8107f6e:	681b      	ldr	r3, [r3, #0]
 8107f70:	f003 0301 	and.w	r3, r3, #1
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	d003      	beq.n	8107f80 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8107f78:	68fb      	ldr	r3, [r7, #12]
 8107f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8107f7e:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107f80:	683b      	ldr	r3, [r7, #0]
 8107f82:	681b      	ldr	r3, [r3, #0]
 8107f84:	f003 0308 	and.w	r3, r3, #8
 8107f88:	2b00      	cmp	r3, #0
 8107f8a:	d003      	beq.n	8107f94 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8107f8c:	68fb      	ldr	r3, [r7, #12]
 8107f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107f92:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107f94:	683b      	ldr	r3, [r7, #0]
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	f003 0320 	and.w	r3, r3, #32
 8107f9c:	2b00      	cmp	r3, #0
 8107f9e:	d022      	beq.n	8107fe6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8107fa0:	68fb      	ldr	r3, [r7, #12]
 8107fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107fa6:	60fb      	str	r3, [r7, #12]
 8107fa8:	e01d      	b.n	8107fe6 <HAL_RTCEx_SetTamper+0x16a>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107faa:	683b      	ldr	r3, [r7, #0]
 8107fac:	681b      	ldr	r3, [r3, #0]
 8107fae:	f003 0301 	and.w	r3, r3, #1
 8107fb2:	2b00      	cmp	r3, #0
 8107fb4:	d003      	beq.n	8107fbe <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8107fb6:	68fb      	ldr	r3, [r7, #12]
 8107fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107fbc:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107fbe:	683b      	ldr	r3, [r7, #0]
 8107fc0:	681b      	ldr	r3, [r3, #0]
 8107fc2:	f003 0308 	and.w	r3, r3, #8
 8107fc6:	2b00      	cmp	r3, #0
 8107fc8:	d003      	beq.n	8107fd2 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8107fca:	68fb      	ldr	r3, [r7, #12]
 8107fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107fd0:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107fd2:	683b      	ldr	r3, [r7, #0]
 8107fd4:	681b      	ldr	r3, [r3, #0]
 8107fd6:	f003 0320 	and.w	r3, r3, #32
 8107fda:	2b00      	cmp	r3, #0
 8107fdc:	d003      	beq.n	8107fe6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8107fde:	68fb      	ldr	r3, [r7, #12]
 8107fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107fe4:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8107fe6:	68fb      	ldr	r3, [r7, #12]
 8107fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107ff0:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107ff2:	683b      	ldr	r3, [r7, #0]
 8107ff4:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8107ff6:	683b      	ldr	r3, [r7, #0]
 8107ff8:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107ffa:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8107ffc:	683b      	ldr	r3, [r7, #0]
 8107ffe:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8108000:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8108002:	683b      	ldr	r3, [r7, #0]
 8108004:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8108006:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8108008:	683b      	ldr	r3, [r7, #0]
 810800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 810800c:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810800e:	68fa      	ldr	r2, [r7, #12]
 8108010:	4313      	orrs	r3, r2
 8108012:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	68fa      	ldr	r2, [r7, #12]
 810801a:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	2201      	movs	r2, #1
 8108020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	2200      	movs	r2, #0
 8108028:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 810802c:	2300      	movs	r3, #0
}
 810802e:	4618      	mov	r0, r3
 8108030:	3714      	adds	r7, #20
 8108032:	46bd      	mov	sp, r7
 8108034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108038:	4770      	bx	lr
	...

0810803c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 810803c:	b580      	push	{r7, lr}
 810803e:	b08a      	sub	sp, #40	; 0x28
 8108040:	af00      	add	r7, sp, #0
 8108042:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	2b00      	cmp	r3, #0
 8108048:	d101      	bne.n	810804e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810804a:	2301      	movs	r3, #1
 810804c:	e285      	b.n	810855a <HAL_SAI_Init+0x51e>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810804e:	f7fa fdab 	bl	8102ba8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8108052:	687b      	ldr	r3, [r7, #4]
 8108054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8108058:	2b01      	cmp	r3, #1
 810805a:	d113      	bne.n	8108084 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	4a94      	ldr	r2, [pc, #592]	; (81082b4 <HAL_SAI_Init+0x278>)
 8108062:	4293      	cmp	r3, r2
 8108064:	d004      	beq.n	8108070 <HAL_SAI_Init+0x34>
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	681b      	ldr	r3, [r3, #0]
 810806a:	4a93      	ldr	r2, [pc, #588]	; (81082b8 <HAL_SAI_Init+0x27c>)
 810806c:	4293      	cmp	r3, r2
 810806e:	d107      	bne.n	8108080 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8108074:	2b01      	cmp	r3, #1
 8108076:	d103      	bne.n	8108080 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810807c:	2b00      	cmp	r3, #0
 810807e:	d001      	beq.n	8108084 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8108080:	2301      	movs	r3, #1
 8108082:	e26a      	b.n	810855a <HAL_SAI_Init+0x51e>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8108084:	687b      	ldr	r3, [r7, #4]
 8108086:	681b      	ldr	r3, [r3, #0]
 8108088:	4a8a      	ldr	r2, [pc, #552]	; (81082b4 <HAL_SAI_Init+0x278>)
 810808a:	4293      	cmp	r3, r2
 810808c:	d004      	beq.n	8108098 <HAL_SAI_Init+0x5c>
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	681b      	ldr	r3, [r3, #0]
 8108092:	4a8a      	ldr	r2, [pc, #552]	; (81082bc <HAL_SAI_Init+0x280>)
 8108094:	4293      	cmp	r3, r2
 8108096:	d102      	bne.n	810809e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8108098:	4b89      	ldr	r3, [pc, #548]	; (81082c0 <HAL_SAI_Init+0x284>)
 810809a:	61bb      	str	r3, [r7, #24]
 810809c:	e028      	b.n	81080f0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	681b      	ldr	r3, [r3, #0]
 81080a2:	4a88      	ldr	r2, [pc, #544]	; (81082c4 <HAL_SAI_Init+0x288>)
 81080a4:	4293      	cmp	r3, r2
 81080a6:	d004      	beq.n	81080b2 <HAL_SAI_Init+0x76>
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	681b      	ldr	r3, [r3, #0]
 81080ac:	4a86      	ldr	r2, [pc, #536]	; (81082c8 <HAL_SAI_Init+0x28c>)
 81080ae:	4293      	cmp	r3, r2
 81080b0:	d102      	bne.n	81080b8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81080b2:	4b86      	ldr	r3, [pc, #536]	; (81082cc <HAL_SAI_Init+0x290>)
 81080b4:	61bb      	str	r3, [r7, #24]
 81080b6:	e01b      	b.n	81080f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	4a84      	ldr	r2, [pc, #528]	; (81082d0 <HAL_SAI_Init+0x294>)
 81080be:	4293      	cmp	r3, r2
 81080c0:	d004      	beq.n	81080cc <HAL_SAI_Init+0x90>
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	681b      	ldr	r3, [r3, #0]
 81080c6:	4a83      	ldr	r2, [pc, #524]	; (81082d4 <HAL_SAI_Init+0x298>)
 81080c8:	4293      	cmp	r3, r2
 81080ca:	d102      	bne.n	81080d2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81080cc:	4b82      	ldr	r3, [pc, #520]	; (81082d8 <HAL_SAI_Init+0x29c>)
 81080ce:	61bb      	str	r3, [r7, #24]
 81080d0:	e00e      	b.n	81080f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	4a78      	ldr	r2, [pc, #480]	; (81082b8 <HAL_SAI_Init+0x27c>)
 81080d8:	4293      	cmp	r3, r2
 81080da:	d004      	beq.n	81080e6 <HAL_SAI_Init+0xaa>
 81080dc:	687b      	ldr	r3, [r7, #4]
 81080de:	681b      	ldr	r3, [r3, #0]
 81080e0:	4a7e      	ldr	r2, [pc, #504]	; (81082dc <HAL_SAI_Init+0x2a0>)
 81080e2:	4293      	cmp	r3, r2
 81080e4:	d102      	bne.n	81080ec <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 81080e6:	4b7e      	ldr	r3, [pc, #504]	; (81082e0 <HAL_SAI_Init+0x2a4>)
 81080e8:	61bb      	str	r3, [r7, #24]
 81080ea:	e001      	b.n	81080f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 81080ec:	2301      	movs	r3, #1
 81080ee:	e234      	b.n	810855a <HAL_SAI_Init+0x51e>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 81080f0:	687b      	ldr	r3, [r7, #4]
 81080f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 81080f6:	b2db      	uxtb	r3, r3
 81080f8:	2b00      	cmp	r3, #0
 81080fa:	d106      	bne.n	810810a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	2200      	movs	r2, #0
 8108100:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8108104:	6878      	ldr	r0, [r7, #4]
 8108106:	f7fa fb67 	bl	81027d8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 810810a:	6878      	ldr	r0, [r7, #4]
 810810c:	f000 fa36 	bl	810857c <SAI_Disable>
 8108110:	4603      	mov	r3, r0
 8108112:	2b00      	cmp	r3, #0
 8108114:	d001      	beq.n	810811a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8108116:	2301      	movs	r3, #1
 8108118:	e21f      	b.n	810855a <HAL_SAI_Init+0x51e>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	2202      	movs	r2, #2
 810811e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	68db      	ldr	r3, [r3, #12]
 8108126:	2b02      	cmp	r3, #2
 8108128:	d00c      	beq.n	8108144 <HAL_SAI_Init+0x108>
 810812a:	2b02      	cmp	r3, #2
 810812c:	d80d      	bhi.n	810814a <HAL_SAI_Init+0x10e>
 810812e:	2b00      	cmp	r3, #0
 8108130:	d002      	beq.n	8108138 <HAL_SAI_Init+0xfc>
 8108132:	2b01      	cmp	r3, #1
 8108134:	d003      	beq.n	810813e <HAL_SAI_Init+0x102>
 8108136:	e008      	b.n	810814a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8108138:	2300      	movs	r3, #0
 810813a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810813c:	e008      	b.n	8108150 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 810813e:	2310      	movs	r3, #16
 8108140:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108142:	e005      	b.n	8108150 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8108144:	2320      	movs	r3, #32
 8108146:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108148:	e002      	b.n	8108150 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 810814a:	2300      	movs	r3, #0
 810814c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810814e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	689b      	ldr	r3, [r3, #8]
 8108154:	2b05      	cmp	r3, #5
 8108156:	d832      	bhi.n	81081be <HAL_SAI_Init+0x182>
 8108158:	a201      	add	r2, pc, #4	; (adr r2, 8108160 <HAL_SAI_Init+0x124>)
 810815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810815e:	bf00      	nop
 8108160:	08108179 	.word	0x08108179
 8108164:	0810817f 	.word	0x0810817f
 8108168:	08108187 	.word	0x08108187
 810816c:	0810818f 	.word	0x0810818f
 8108170:	0810819f 	.word	0x0810819f
 8108174:	081081af 	.word	0x081081af
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8108178:	2300      	movs	r3, #0
 810817a:	61fb      	str	r3, [r7, #28]
      break;
 810817c:	e022      	b.n	81081c4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810817e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8108182:	61fb      	str	r3, [r7, #28]
      break;
 8108184:	e01e      	b.n	81081c4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8108186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810818a:	61fb      	str	r3, [r7, #28]
      break;
 810818c:	e01a      	b.n	81081c4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810818e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8108192:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8108194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108196:	f043 0301 	orr.w	r3, r3, #1
 810819a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810819c:	e012      	b.n	81081c4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810819e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81081a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 81081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081a6:	f043 0302 	orr.w	r3, r3, #2
 81081aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81081ac:	e00a      	b.n	81081c4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81081ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81081b2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 81081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081b6:	f043 0303 	orr.w	r3, r3, #3
 81081ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81081bc:	e002      	b.n	81081c4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 81081be:	2300      	movs	r3, #0
 81081c0:	61fb      	str	r3, [r7, #28]
      break;
 81081c2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 81081c4:	69bb      	ldr	r3, [r7, #24]
 81081c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81081c8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	6a1b      	ldr	r3, [r3, #32]
 81081ce:	2b00      	cmp	r3, #0
 81081d0:	f000 80ba 	beq.w	8108348 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 81081d4:	2300      	movs	r3, #0
 81081d6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	681b      	ldr	r3, [r3, #0]
 81081dc:	4a35      	ldr	r2, [pc, #212]	; (81082b4 <HAL_SAI_Init+0x278>)
 81081de:	4293      	cmp	r3, r2
 81081e0:	d004      	beq.n	81081ec <HAL_SAI_Init+0x1b0>
 81081e2:	687b      	ldr	r3, [r7, #4]
 81081e4:	681b      	ldr	r3, [r3, #0]
 81081e6:	4a35      	ldr	r2, [pc, #212]	; (81082bc <HAL_SAI_Init+0x280>)
 81081e8:	4293      	cmp	r3, r2
 81081ea:	d104      	bne.n	81081f6 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 81081ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 81081f0:	f7fe faee 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 81081f4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	681b      	ldr	r3, [r3, #0]
 81081fa:	4a32      	ldr	r2, [pc, #200]	; (81082c4 <HAL_SAI_Init+0x288>)
 81081fc:	4293      	cmp	r3, r2
 81081fe:	d004      	beq.n	810820a <HAL_SAI_Init+0x1ce>
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	681b      	ldr	r3, [r3, #0]
 8108204:	4a30      	ldr	r2, [pc, #192]	; (81082c8 <HAL_SAI_Init+0x28c>)
 8108206:	4293      	cmp	r3, r2
 8108208:	d104      	bne.n	8108214 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 810820a:	f44f 7000 	mov.w	r0, #512	; 0x200
 810820e:	f7fe fadf 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8108212:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	681b      	ldr	r3, [r3, #0]
 8108218:	4a2d      	ldr	r2, [pc, #180]	; (81082d0 <HAL_SAI_Init+0x294>)
 810821a:	4293      	cmp	r3, r2
 810821c:	d004      	beq.n	8108228 <HAL_SAI_Init+0x1ec>
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	681b      	ldr	r3, [r3, #0]
 8108222:	4a2c      	ldr	r2, [pc, #176]	; (81082d4 <HAL_SAI_Init+0x298>)
 8108224:	4293      	cmp	r3, r2
 8108226:	d104      	bne.n	8108232 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8108228:	f44f 7000 	mov.w	r0, #512	; 0x200
 810822c:	f7fe fad0 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8108230:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	681b      	ldr	r3, [r3, #0]
 8108236:	4a20      	ldr	r2, [pc, #128]	; (81082b8 <HAL_SAI_Init+0x27c>)
 8108238:	4293      	cmp	r3, r2
 810823a:	d104      	bne.n	8108246 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 810823c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8108240:	f7fe fac6 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8108244:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	4a24      	ldr	r2, [pc, #144]	; (81082dc <HAL_SAI_Init+0x2a0>)
 810824c:	4293      	cmp	r3, r2
 810824e:	d104      	bne.n	810825a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8108250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8108254:	f7fe fabc 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8108258:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	699b      	ldr	r3, [r3, #24]
 810825e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8108262:	d120      	bne.n	81082a6 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108264:	687b      	ldr	r3, [r7, #4]
 8108266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108268:	2b04      	cmp	r3, #4
 810826a:	d102      	bne.n	8108272 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 810826c:	2340      	movs	r3, #64	; 0x40
 810826e:	60fb      	str	r3, [r7, #12]
 8108270:	e00a      	b.n	8108288 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8108272:	687b      	ldr	r3, [r7, #4]
 8108274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108276:	2b08      	cmp	r3, #8
 8108278:	d103      	bne.n	8108282 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 810827a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810827e:	60fb      	str	r3, [r7, #12]
 8108280:	e002      	b.n	8108288 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108286:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8108288:	697a      	ldr	r2, [r7, #20]
 810828a:	4613      	mov	r3, r2
 810828c:	009b      	lsls	r3, r3, #2
 810828e:	4413      	add	r3, r2
 8108290:	005b      	lsls	r3, r3, #1
 8108292:	4619      	mov	r1, r3
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	6a1b      	ldr	r3, [r3, #32]
 8108298:	68fa      	ldr	r2, [r7, #12]
 810829a:	fb02 f303 	mul.w	r3, r2, r3
 810829e:	fbb1 f3f3 	udiv	r3, r1, r3
 81082a2:	613b      	str	r3, [r7, #16]
 81082a4:	e02f      	b.n	8108306 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 81082a6:	687b      	ldr	r3, [r7, #4]
 81082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81082aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81082ae:	d119      	bne.n	81082e4 <HAL_SAI_Init+0x2a8>
 81082b0:	2302      	movs	r3, #2
 81082b2:	e018      	b.n	81082e6 <HAL_SAI_Init+0x2aa>
 81082b4:	40015804 	.word	0x40015804
 81082b8:	58005404 	.word	0x58005404
 81082bc:	40015824 	.word	0x40015824
 81082c0:	40015800 	.word	0x40015800
 81082c4:	40015c04 	.word	0x40015c04
 81082c8:	40015c24 	.word	0x40015c24
 81082cc:	40015c00 	.word	0x40015c00
 81082d0:	40016004 	.word	0x40016004
 81082d4:	40016024 	.word	0x40016024
 81082d8:	40016000 	.word	0x40016000
 81082dc:	58005424 	.word	0x58005424
 81082e0:	58005400 	.word	0x58005400
 81082e4:	2301      	movs	r3, #1
 81082e6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 81082e8:	697a      	ldr	r2, [r7, #20]
 81082ea:	4613      	mov	r3, r2
 81082ec:	009b      	lsls	r3, r3, #2
 81082ee:	4413      	add	r3, r2
 81082f0:	005b      	lsls	r3, r3, #1
 81082f2:	4619      	mov	r1, r3
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	6a1b      	ldr	r3, [r3, #32]
 81082f8:	68ba      	ldr	r2, [r7, #8]
 81082fa:	fb02 f303 	mul.w	r3, r2, r3
 81082fe:	021b      	lsls	r3, r3, #8
 8108300:	fbb1 f3f3 	udiv	r3, r1, r3
 8108304:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8108306:	693b      	ldr	r3, [r7, #16]
 8108308:	4a96      	ldr	r2, [pc, #600]	; (8108564 <HAL_SAI_Init+0x528>)
 810830a:	fba2 2303 	umull	r2, r3, r2, r3
 810830e:	08da      	lsrs	r2, r3, #3
 8108310:	687b      	ldr	r3, [r7, #4]
 8108312:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8108314:	6939      	ldr	r1, [r7, #16]
 8108316:	4b93      	ldr	r3, [pc, #588]	; (8108564 <HAL_SAI_Init+0x528>)
 8108318:	fba3 2301 	umull	r2, r3, r3, r1
 810831c:	08da      	lsrs	r2, r3, #3
 810831e:	4613      	mov	r3, r2
 8108320:	009b      	lsls	r3, r3, #2
 8108322:	4413      	add	r3, r2
 8108324:	005b      	lsls	r3, r3, #1
 8108326:	1aca      	subs	r2, r1, r3
 8108328:	2a08      	cmp	r2, #8
 810832a:	d904      	bls.n	8108336 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108330:	1c5a      	adds	r2, r3, #1
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810833a:	2b04      	cmp	r3, #4
 810833c:	d104      	bne.n	8108348 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108342:	085a      	lsrs	r2, r3, #1
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	685b      	ldr	r3, [r3, #4]
 810834c:	2b00      	cmp	r3, #0
 810834e:	d003      	beq.n	8108358 <HAL_SAI_Init+0x31c>
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	685b      	ldr	r3, [r3, #4]
 8108354:	2b02      	cmp	r3, #2
 8108356:	d109      	bne.n	810836c <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810835c:	2b01      	cmp	r3, #1
 810835e:	d101      	bne.n	8108364 <HAL_SAI_Init+0x328>
 8108360:	2300      	movs	r3, #0
 8108362:	e001      	b.n	8108368 <HAL_SAI_Init+0x32c>
 8108364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8108368:	623b      	str	r3, [r7, #32]
 810836a:	e008      	b.n	810837e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810836c:	687b      	ldr	r3, [r7, #4]
 810836e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108370:	2b01      	cmp	r3, #1
 8108372:	d102      	bne.n	810837a <HAL_SAI_Init+0x33e>
 8108374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8108378:	e000      	b.n	810837c <HAL_SAI_Init+0x340>
 810837a:	2300      	movs	r3, #0
 810837c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810837e:	f7fa fc13 	bl	8102ba8 <HAL_GetREVID>
 8108382:	4603      	mov	r3, r0
 8108384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108388:	d331      	bcc.n	81083ee <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810838a:	687b      	ldr	r3, [r7, #4]
 810838c:	681b      	ldr	r3, [r3, #0]
 810838e:	6819      	ldr	r1, [r3, #0]
 8108390:	687b      	ldr	r3, [r7, #4]
 8108392:	681a      	ldr	r2, [r3, #0]
 8108394:	4b74      	ldr	r3, [pc, #464]	; (8108568 <HAL_SAI_Init+0x52c>)
 8108396:	400b      	ands	r3, r1
 8108398:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	681b      	ldr	r3, [r3, #0]
 810839e:	6819      	ldr	r1, [r3, #0]
 81083a0:	687b      	ldr	r3, [r7, #4]
 81083a2:	685a      	ldr	r2, [r3, #4]
 81083a4:	687b      	ldr	r3, [r7, #4]
 81083a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81083a8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81083aa:	687b      	ldr	r3, [r7, #4]
 81083ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81083ae:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81083b0:	687b      	ldr	r3, [r7, #4]
 81083b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81083b4:	431a      	orrs	r2, r3
 81083b6:	6a3b      	ldr	r3, [r7, #32]
 81083b8:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81083ba:	69fb      	ldr	r3, [r7, #28]
 81083bc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81083c2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81083c4:	687b      	ldr	r3, [r7, #4]
 81083c6:	695b      	ldr	r3, [r3, #20]
 81083c8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81083ce:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81083d0:	687b      	ldr	r3, [r7, #4]
 81083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81083d4:	051b      	lsls	r3, r3, #20
 81083d6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81083dc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81083de:	687b      	ldr	r3, [r7, #4]
 81083e0:	691b      	ldr	r3, [r3, #16]
 81083e2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	681b      	ldr	r3, [r3, #0]
 81083e8:	430a      	orrs	r2, r1
 81083ea:	601a      	str	r2, [r3, #0]
 81083ec:	e02d      	b.n	810844a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	681b      	ldr	r3, [r3, #0]
 81083f2:	6819      	ldr	r1, [r3, #0]
 81083f4:	687b      	ldr	r3, [r7, #4]
 81083f6:	681a      	ldr	r2, [r3, #0]
 81083f8:	4b5c      	ldr	r3, [pc, #368]	; (810856c <HAL_SAI_Init+0x530>)
 81083fa:	400b      	ands	r3, r1
 81083fc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81083fe:	687b      	ldr	r3, [r7, #4]
 8108400:	681b      	ldr	r3, [r3, #0]
 8108402:	6819      	ldr	r1, [r3, #0]
 8108404:	687b      	ldr	r3, [r7, #4]
 8108406:	685a      	ldr	r2, [r3, #4]
 8108408:	687b      	ldr	r3, [r7, #4]
 810840a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810840c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810840e:	687b      	ldr	r3, [r7, #4]
 8108410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108412:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108414:	687b      	ldr	r3, [r7, #4]
 8108416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108418:	431a      	orrs	r2, r3
 810841a:	6a3b      	ldr	r3, [r7, #32]
 810841c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810841e:	69fb      	ldr	r3, [r7, #28]
 8108420:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108426:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108428:	687b      	ldr	r3, [r7, #4]
 810842a:	695b      	ldr	r3, [r3, #20]
 810842c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108432:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108438:	051b      	lsls	r3, r3, #20
 810843a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108440:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108442:	687b      	ldr	r3, [r7, #4]
 8108444:	681b      	ldr	r3, [r3, #0]
 8108446:	430a      	orrs	r2, r1
 8108448:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 810844a:	687b      	ldr	r3, [r7, #4]
 810844c:	681b      	ldr	r3, [r3, #0]
 810844e:	685b      	ldr	r3, [r3, #4]
 8108450:	687a      	ldr	r2, [r7, #4]
 8108452:	6812      	ldr	r2, [r2, #0]
 8108454:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8108458:	f023 030f 	bic.w	r3, r3, #15
 810845c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 810845e:	687b      	ldr	r3, [r7, #4]
 8108460:	681b      	ldr	r3, [r3, #0]
 8108462:	6859      	ldr	r1, [r3, #4]
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	69da      	ldr	r2, [r3, #28]
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810846c:	431a      	orrs	r2, r3
 810846e:	687b      	ldr	r3, [r7, #4]
 8108470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108472:	431a      	orrs	r2, r3
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	430a      	orrs	r2, r1
 810847a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	6899      	ldr	r1, [r3, #8]
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	681a      	ldr	r2, [r3, #0]
 8108486:	4b3a      	ldr	r3, [pc, #232]	; (8108570 <HAL_SAI_Init+0x534>)
 8108488:	400b      	ands	r3, r1
 810848a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	6899      	ldr	r1, [r3, #8]
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108496:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8108498:	687b      	ldr	r3, [r7, #4]
 810849a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810849c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 810849e:	687b      	ldr	r3, [r7, #4]
 81084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 81084a2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 81084a4:	687b      	ldr	r3, [r7, #4]
 81084a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 81084a8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084ae:	3b01      	subs	r3, #1
 81084b0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81084b2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	430a      	orrs	r2, r1
 81084ba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	68d9      	ldr	r1, [r3, #12]
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	681a      	ldr	r2, [r3, #0]
 81084c6:	f24f 0320 	movw	r3, #61472	; 0xf020
 81084ca:	400b      	ands	r3, r1
 81084cc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	681b      	ldr	r3, [r3, #0]
 81084d2:	68d9      	ldr	r1, [r3, #12]
 81084d4:	687b      	ldr	r3, [r7, #4]
 81084d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81084dc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81084de:	687b      	ldr	r3, [r7, #4]
 81084e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81084e2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81084e4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81084e6:	687b      	ldr	r3, [r7, #4]
 81084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81084ea:	3b01      	subs	r3, #1
 81084ec:	021b      	lsls	r3, r3, #8
 81084ee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	430a      	orrs	r2, r1
 81084f6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	681b      	ldr	r3, [r3, #0]
 81084fc:	4a1d      	ldr	r2, [pc, #116]	; (8108574 <HAL_SAI_Init+0x538>)
 81084fe:	4293      	cmp	r3, r2
 8108500:	d004      	beq.n	810850c <HAL_SAI_Init+0x4d0>
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	681b      	ldr	r3, [r3, #0]
 8108506:	4a1c      	ldr	r2, [pc, #112]	; (8108578 <HAL_SAI_Init+0x53c>)
 8108508:	4293      	cmp	r3, r2
 810850a:	d119      	bne.n	8108540 <HAL_SAI_Init+0x504>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810850c:	69bb      	ldr	r3, [r7, #24]
 810850e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108510:	f023 0201 	bic.w	r2, r3, #1
 8108514:	69bb      	ldr	r3, [r7, #24]
 8108516:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810851e:	2b01      	cmp	r3, #1
 8108520:	d10e      	bne.n	8108540 <HAL_SAI_Init+0x504>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8108522:	687b      	ldr	r3, [r7, #4]
 8108524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8108526:	687b      	ldr	r3, [r7, #4]
 8108528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810852a:	3b01      	subs	r3, #1
 810852c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810852e:	431a      	orrs	r2, r3
 8108530:	69bb      	ldr	r3, [r7, #24]
 8108532:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8108534:	69bb      	ldr	r3, [r7, #24]
 8108536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108538:	f043 0201 	orr.w	r2, r3, #1
 810853c:	69bb      	ldr	r3, [r7, #24]
 810853e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8108540:	687b      	ldr	r3, [r7, #4]
 8108542:	2200      	movs	r2, #0
 8108544:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	2201      	movs	r2, #1
 810854c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	2200      	movs	r2, #0
 8108554:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8108558:	2300      	movs	r3, #0
}
 810855a:	4618      	mov	r0, r3
 810855c:	3728      	adds	r7, #40	; 0x28
 810855e:	46bd      	mov	sp, r7
 8108560:	bd80      	pop	{r7, pc}
 8108562:	bf00      	nop
 8108564:	cccccccd 	.word	0xcccccccd
 8108568:	f005c010 	.word	0xf005c010
 810856c:	f805c010 	.word	0xf805c010
 8108570:	fff88000 	.word	0xfff88000
 8108574:	40015804 	.word	0x40015804
 8108578:	58005404 	.word	0x58005404

0810857c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 810857c:	b480      	push	{r7}
 810857e:	b085      	sub	sp, #20
 8108580:	af00      	add	r7, sp, #0
 8108582:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8108584:	4b18      	ldr	r3, [pc, #96]	; (81085e8 <SAI_Disable+0x6c>)
 8108586:	681b      	ldr	r3, [r3, #0]
 8108588:	4a18      	ldr	r2, [pc, #96]	; (81085ec <SAI_Disable+0x70>)
 810858a:	fba2 2303 	umull	r2, r3, r2, r3
 810858e:	0b1b      	lsrs	r3, r3, #12
 8108590:	009b      	lsls	r3, r3, #2
 8108592:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8108594:	2300      	movs	r3, #0
 8108596:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8108598:	687b      	ldr	r3, [r7, #4]
 810859a:	681b      	ldr	r3, [r3, #0]
 810859c:	681a      	ldr	r2, [r3, #0]
 810859e:	687b      	ldr	r3, [r7, #4]
 81085a0:	681b      	ldr	r3, [r3, #0]
 81085a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81085a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 81085a8:	68fb      	ldr	r3, [r7, #12]
 81085aa:	2b00      	cmp	r3, #0
 81085ac:	d10a      	bne.n	81085c4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81085b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 81085be:	2303      	movs	r3, #3
 81085c0:	72fb      	strb	r3, [r7, #11]
      break;
 81085c2:	e009      	b.n	81085d8 <SAI_Disable+0x5c>
    }
    count--;
 81085c4:	68fb      	ldr	r3, [r7, #12]
 81085c6:	3b01      	subs	r3, #1
 81085c8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 81085ca:	687b      	ldr	r3, [r7, #4]
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81085d4:	2b00      	cmp	r3, #0
 81085d6:	d1e7      	bne.n	81085a8 <SAI_Disable+0x2c>

  return status;
 81085d8:	7afb      	ldrb	r3, [r7, #11]
}
 81085da:	4618      	mov	r0, r3
 81085dc:	3714      	adds	r7, #20
 81085de:	46bd      	mov	sp, r7
 81085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085e4:	4770      	bx	lr
 81085e6:	bf00      	nop
 81085e8:	10000000 	.word	0x10000000
 81085ec:	95cbec1b 	.word	0x95cbec1b

081085f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 81085f0:	b580      	push	{r7, lr}
 81085f2:	b08a      	sub	sp, #40	; 0x28
 81085f4:	af00      	add	r7, sp, #0
 81085f6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	2b00      	cmp	r3, #0
 81085fc:	d101      	bne.n	8108602 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 81085fe:	2301      	movs	r3, #1
 8108600:	e075      	b.n	81086ee <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8108602:	687b      	ldr	r3, [r7, #4]
 8108604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8108608:	b2db      	uxtb	r3, r3
 810860a:	2b00      	cmp	r3, #0
 810860c:	d105      	bne.n	810861a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810860e:	687b      	ldr	r3, [r7, #4]
 8108610:	2200      	movs	r2, #0
 8108612:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8108614:	6878      	ldr	r0, [r7, #4]
 8108616:	f7f9 fb3d 	bl	8101c94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 810861a:	687b      	ldr	r3, [r7, #4]
 810861c:	2204      	movs	r2, #4
 810861e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8108622:	6878      	ldr	r0, [r7, #4]
 8108624:	f000 f868 	bl	81086f8 <HAL_SD_InitCard>
 8108628:	4603      	mov	r3, r0
 810862a:	2b00      	cmp	r3, #0
 810862c:	d001      	beq.n	8108632 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 810862e:	2301      	movs	r3, #1
 8108630:	e05d      	b.n	81086ee <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8108632:	f107 0308 	add.w	r3, r7, #8
 8108636:	4619      	mov	r1, r3
 8108638:	6878      	ldr	r0, [r7, #4]
 810863a:	f000 fa97 	bl	8108b6c <HAL_SD_GetCardStatus>
 810863e:	4603      	mov	r3, r0
 8108640:	2b00      	cmp	r3, #0
 8108642:	d001      	beq.n	8108648 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8108644:	2301      	movs	r3, #1
 8108646:	e052      	b.n	81086ee <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8108648:	7e3b      	ldrb	r3, [r7, #24]
 810864a:	b2db      	uxtb	r3, r3
 810864c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810864e:	7e7b      	ldrb	r3, [r7, #25]
 8108650:	b2db      	uxtb	r3, r3
 8108652:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108654:	687b      	ldr	r3, [r7, #4]
 8108656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108658:	2b01      	cmp	r3, #1
 810865a:	d10a      	bne.n	8108672 <HAL_SD_Init+0x82>
 810865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810865e:	2b00      	cmp	r3, #0
 8108660:	d102      	bne.n	8108668 <HAL_SD_Init+0x78>
 8108662:	6a3b      	ldr	r3, [r7, #32]
 8108664:	2b00      	cmp	r3, #0
 8108666:	d004      	beq.n	8108672 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8108668:	687b      	ldr	r3, [r7, #4]
 810866a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810866e:	659a      	str	r2, [r3, #88]	; 0x58
 8108670:	e00b      	b.n	810868a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108672:	687b      	ldr	r3, [r7, #4]
 8108674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108676:	2b01      	cmp	r3, #1
 8108678:	d104      	bne.n	8108684 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810867a:	687b      	ldr	r3, [r7, #4]
 810867c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8108680:	659a      	str	r2, [r3, #88]	; 0x58
 8108682:	e002      	b.n	810868a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	2200      	movs	r2, #0
 8108688:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810868a:	687b      	ldr	r3, [r7, #4]
 810868c:	68db      	ldr	r3, [r3, #12]
 810868e:	4619      	mov	r1, r3
 8108690:	6878      	ldr	r0, [r7, #4]
 8108692:	f000 fb29 	bl	8108ce8 <HAL_SD_ConfigWideBusOperation>
 8108696:	4603      	mov	r3, r0
 8108698:	2b00      	cmp	r3, #0
 810869a:	d001      	beq.n	81086a0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 810869c:	2301      	movs	r3, #1
 810869e:	e026      	b.n	81086ee <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 81086a0:	f7fa fa52 	bl	8102b48 <HAL_GetTick>
 81086a4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 81086a6:	e011      	b.n	81086cc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81086a8:	f7fa fa4e 	bl	8102b48 <HAL_GetTick>
 81086ac:	4602      	mov	r2, r0
 81086ae:	69fb      	ldr	r3, [r7, #28]
 81086b0:	1ad3      	subs	r3, r2, r3
 81086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81086b6:	d109      	bne.n	81086cc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 81086b8:	687b      	ldr	r3, [r7, #4]
 81086ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81086be:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	2201      	movs	r2, #1
 81086c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 81086c8:	2303      	movs	r3, #3
 81086ca:	e010      	b.n	81086ee <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 81086cc:	6878      	ldr	r0, [r7, #4]
 81086ce:	f000 fc1d 	bl	8108f0c <HAL_SD_GetCardState>
 81086d2:	4603      	mov	r3, r0
 81086d4:	2b04      	cmp	r3, #4
 81086d6:	d1e7      	bne.n	81086a8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81086d8:	687b      	ldr	r3, [r7, #4]
 81086da:	2200      	movs	r2, #0
 81086dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	2200      	movs	r2, #0
 81086e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	2201      	movs	r2, #1
 81086e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 81086ec:	2300      	movs	r3, #0
}
 81086ee:	4618      	mov	r0, r3
 81086f0:	3728      	adds	r7, #40	; 0x28
 81086f2:	46bd      	mov	sp, r7
 81086f4:	bd80      	pop	{r7, pc}
	...

081086f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 81086f8:	b590      	push	{r4, r7, lr}
 81086fa:	b08d      	sub	sp, #52	; 0x34
 81086fc:	af02      	add	r7, sp, #8
 81086fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8108700:	2300      	movs	r3, #0
 8108702:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8108704:	2300      	movs	r3, #0
 8108706:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8108708:	2300      	movs	r3, #0
 810870a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810870c:	2300      	movs	r3, #0
 810870e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8108710:	2300      	movs	r3, #0
 8108712:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8108718:	f7fe f85a 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 810871c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108720:	2b00      	cmp	r3, #0
 8108722:	d109      	bne.n	8108738 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	2201      	movs	r2, #1
 8108728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8108732:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108734:	2301      	movs	r3, #1
 8108736:	e06a      	b.n	810880e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8108738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810873a:	0a1b      	lsrs	r3, r3, #8
 810873c:	4a36      	ldr	r2, [pc, #216]	; (8108818 <HAL_SD_InitCard+0x120>)
 810873e:	fba2 2303 	umull	r2, r3, r2, r3
 8108742:	091b      	lsrs	r3, r3, #4
 8108744:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8108746:	687b      	ldr	r3, [r7, #4]
 8108748:	681c      	ldr	r4, [r3, #0]
 810874a:	466a      	mov	r2, sp
 810874c:	f107 0318 	add.w	r3, r7, #24
 8108750:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108754:	e882 0003 	stmia.w	r2, {r0, r1}
 8108758:	f107 030c 	add.w	r3, r7, #12
 810875c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810875e:	4620      	mov	r0, r4
 8108760:	f003 fa72 	bl	810bc48 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8108764:	687b      	ldr	r3, [r7, #4]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	4618      	mov	r0, r3
 810876a:	f003 faa4 	bl	810bcb6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 810876e:	69fb      	ldr	r3, [r7, #28]
 8108770:	005b      	lsls	r3, r3, #1
 8108772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108774:	fbb2 f3f3 	udiv	r3, r2, r3
 8108778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810877a:	4a28      	ldr	r2, [pc, #160]	; (810881c <HAL_SD_InitCard+0x124>)
 810877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108782:	3301      	adds	r3, #1
 8108784:	4618      	mov	r0, r3
 8108786:	f7fa f9eb 	bl	8102b60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810878a:	6878      	ldr	r0, [r7, #4]
 810878c:	f000 fcac 	bl	81090e8 <SD_PowerON>
 8108790:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108792:	6a3b      	ldr	r3, [r7, #32]
 8108794:	2b00      	cmp	r3, #0
 8108796:	d00b      	beq.n	81087b0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	2201      	movs	r2, #1
 810879c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 81087a0:	687b      	ldr	r3, [r7, #4]
 81087a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81087a4:	6a3b      	ldr	r3, [r7, #32]
 81087a6:	431a      	orrs	r2, r3
 81087a8:	687b      	ldr	r3, [r7, #4]
 81087aa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81087ac:	2301      	movs	r3, #1
 81087ae:	e02e      	b.n	810880e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 81087b0:	6878      	ldr	r0, [r7, #4]
 81087b2:	f000 fbcb 	bl	8108f4c <SD_InitCard>
 81087b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81087b8:	6a3b      	ldr	r3, [r7, #32]
 81087ba:	2b00      	cmp	r3, #0
 81087bc:	d00b      	beq.n	81087d6 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 81087be:	687b      	ldr	r3, [r7, #4]
 81087c0:	2201      	movs	r2, #1
 81087c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81087ca:	6a3b      	ldr	r3, [r7, #32]
 81087cc:	431a      	orrs	r2, r3
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81087d2:	2301      	movs	r3, #1
 81087d4:	e01b      	b.n	810880e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 81087d6:	687b      	ldr	r3, [r7, #4]
 81087d8:	681b      	ldr	r3, [r3, #0]
 81087da:	f44f 7100 	mov.w	r1, #512	; 0x200
 81087de:	4618      	mov	r0, r3
 81087e0:	f003 fafe 	bl	810bde0 <SDMMC_CmdBlockLength>
 81087e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81087e6:	6a3b      	ldr	r3, [r7, #32]
 81087e8:	2b00      	cmp	r3, #0
 81087ea:	d00f      	beq.n	810880c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	681b      	ldr	r3, [r3, #0]
 81087f0:	4a0b      	ldr	r2, [pc, #44]	; (8108820 <HAL_SD_InitCard+0x128>)
 81087f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81087f8:	6a3b      	ldr	r3, [r7, #32]
 81087fa:	431a      	orrs	r2, r3
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	2201      	movs	r2, #1
 8108804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8108808:	2301      	movs	r3, #1
 810880a:	e000      	b.n	810880e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 810880c:	2300      	movs	r3, #0
}
 810880e:	4618      	mov	r0, r3
 8108810:	372c      	adds	r7, #44	; 0x2c
 8108812:	46bd      	mov	sp, r7
 8108814:	bd90      	pop	{r4, r7, pc}
 8108816:	bf00      	nop
 8108818:	014f8b59 	.word	0x014f8b59
 810881c:	00012110 	.word	0x00012110
 8108820:	1fe00fff 	.word	0x1fe00fff

08108824 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8108824:	b480      	push	{r7}
 8108826:	b083      	sub	sp, #12
 8108828:	af00      	add	r7, sp, #0
 810882a:	6078      	str	r0, [r7, #4]
 810882c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108832:	0f9b      	lsrs	r3, r3, #30
 8108834:	b2da      	uxtb	r2, r3
 8108836:	683b      	ldr	r3, [r7, #0]
 8108838:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810883a:	687b      	ldr	r3, [r7, #4]
 810883c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810883e:	0e9b      	lsrs	r3, r3, #26
 8108840:	b2db      	uxtb	r3, r3
 8108842:	f003 030f 	and.w	r3, r3, #15
 8108846:	b2da      	uxtb	r2, r3
 8108848:	683b      	ldr	r3, [r7, #0]
 810884a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108850:	0e1b      	lsrs	r3, r3, #24
 8108852:	b2db      	uxtb	r3, r3
 8108854:	f003 0303 	and.w	r3, r3, #3
 8108858:	b2da      	uxtb	r2, r3
 810885a:	683b      	ldr	r3, [r7, #0]
 810885c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108862:	0c1b      	lsrs	r3, r3, #16
 8108864:	b2da      	uxtb	r2, r3
 8108866:	683b      	ldr	r3, [r7, #0]
 8108868:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810886a:	687b      	ldr	r3, [r7, #4]
 810886c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810886e:	0a1b      	lsrs	r3, r3, #8
 8108870:	b2da      	uxtb	r2, r3
 8108872:	683b      	ldr	r3, [r7, #0]
 8108874:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810887a:	b2da      	uxtb	r2, r3
 810887c:	683b      	ldr	r3, [r7, #0]
 810887e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108884:	0d1b      	lsrs	r3, r3, #20
 8108886:	b29a      	uxth	r2, r3
 8108888:	683b      	ldr	r3, [r7, #0]
 810888a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108890:	0c1b      	lsrs	r3, r3, #16
 8108892:	b2db      	uxtb	r3, r3
 8108894:	f003 030f 	and.w	r3, r3, #15
 8108898:	b2da      	uxtb	r2, r3
 810889a:	683b      	ldr	r3, [r7, #0]
 810889c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81088a2:	0bdb      	lsrs	r3, r3, #15
 81088a4:	b2db      	uxtb	r3, r3
 81088a6:	f003 0301 	and.w	r3, r3, #1
 81088aa:	b2da      	uxtb	r2, r3
 81088ac:	683b      	ldr	r3, [r7, #0]
 81088ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81088b4:	0b9b      	lsrs	r3, r3, #14
 81088b6:	b2db      	uxtb	r3, r3
 81088b8:	f003 0301 	and.w	r3, r3, #1
 81088bc:	b2da      	uxtb	r2, r3
 81088be:	683b      	ldr	r3, [r7, #0]
 81088c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 81088c2:	687b      	ldr	r3, [r7, #4]
 81088c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81088c6:	0b5b      	lsrs	r3, r3, #13
 81088c8:	b2db      	uxtb	r3, r3
 81088ca:	f003 0301 	and.w	r3, r3, #1
 81088ce:	b2da      	uxtb	r2, r3
 81088d0:	683b      	ldr	r3, [r7, #0]
 81088d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81088d8:	0b1b      	lsrs	r3, r3, #12
 81088da:	b2db      	uxtb	r3, r3
 81088dc:	f003 0301 	and.w	r3, r3, #1
 81088e0:	b2da      	uxtb	r2, r3
 81088e2:	683b      	ldr	r3, [r7, #0]
 81088e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 81088e6:	683b      	ldr	r3, [r7, #0]
 81088e8:	2200      	movs	r2, #0
 81088ea:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 81088ec:	687b      	ldr	r3, [r7, #4]
 81088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d163      	bne.n	81089bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81088f8:	009a      	lsls	r2, r3, #2
 81088fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 81088fe:	4013      	ands	r3, r2
 8108900:	687a      	ldr	r2, [r7, #4]
 8108902:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8108904:	0f92      	lsrs	r2, r2, #30
 8108906:	431a      	orrs	r2, r3
 8108908:	683b      	ldr	r3, [r7, #0]
 810890a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 810890c:	687b      	ldr	r3, [r7, #4]
 810890e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108910:	0edb      	lsrs	r3, r3, #27
 8108912:	b2db      	uxtb	r3, r3
 8108914:	f003 0307 	and.w	r3, r3, #7
 8108918:	b2da      	uxtb	r2, r3
 810891a:	683b      	ldr	r3, [r7, #0]
 810891c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108922:	0e1b      	lsrs	r3, r3, #24
 8108924:	b2db      	uxtb	r3, r3
 8108926:	f003 0307 	and.w	r3, r3, #7
 810892a:	b2da      	uxtb	r2, r3
 810892c:	683b      	ldr	r3, [r7, #0]
 810892e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108934:	0d5b      	lsrs	r3, r3, #21
 8108936:	b2db      	uxtb	r3, r3
 8108938:	f003 0307 	and.w	r3, r3, #7
 810893c:	b2da      	uxtb	r2, r3
 810893e:	683b      	ldr	r3, [r7, #0]
 8108940:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108946:	0c9b      	lsrs	r3, r3, #18
 8108948:	b2db      	uxtb	r3, r3
 810894a:	f003 0307 	and.w	r3, r3, #7
 810894e:	b2da      	uxtb	r2, r3
 8108950:	683b      	ldr	r3, [r7, #0]
 8108952:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108958:	0bdb      	lsrs	r3, r3, #15
 810895a:	b2db      	uxtb	r3, r3
 810895c:	f003 0307 	and.w	r3, r3, #7
 8108960:	b2da      	uxtb	r2, r3
 8108962:	683b      	ldr	r3, [r7, #0]
 8108964:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8108966:	683b      	ldr	r3, [r7, #0]
 8108968:	691b      	ldr	r3, [r3, #16]
 810896a:	1c5a      	adds	r2, r3, #1
 810896c:	687b      	ldr	r3, [r7, #4]
 810896e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8108970:	683b      	ldr	r3, [r7, #0]
 8108972:	7e1b      	ldrb	r3, [r3, #24]
 8108974:	b2db      	uxtb	r3, r3
 8108976:	f003 0307 	and.w	r3, r3, #7
 810897a:	3302      	adds	r3, #2
 810897c:	2201      	movs	r2, #1
 810897e:	fa02 f303 	lsl.w	r3, r2, r3
 8108982:	687a      	ldr	r2, [r7, #4]
 8108984:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8108986:	fb02 f203 	mul.w	r2, r2, r3
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 810898e:	683b      	ldr	r3, [r7, #0]
 8108990:	7a1b      	ldrb	r3, [r3, #8]
 8108992:	b2db      	uxtb	r3, r3
 8108994:	f003 030f 	and.w	r3, r3, #15
 8108998:	2201      	movs	r2, #1
 810899a:	409a      	lsls	r2, r3
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81089a4:	687a      	ldr	r2, [r7, #4]
 81089a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 81089a8:	0a52      	lsrs	r2, r2, #9
 81089aa:	fb02 f203 	mul.w	r2, r2, r3
 81089ae:	687b      	ldr	r3, [r7, #4]
 81089b0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 81089b8:	655a      	str	r2, [r3, #84]	; 0x54
 81089ba:	e031      	b.n	8108a20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81089c0:	2b01      	cmp	r3, #1
 81089c2:	d11d      	bne.n	8108a00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 81089c4:	687b      	ldr	r3, [r7, #4]
 81089c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81089c8:	041b      	lsls	r3, r3, #16
 81089ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 81089ce:	687b      	ldr	r3, [r7, #4]
 81089d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81089d2:	0c1b      	lsrs	r3, r3, #16
 81089d4:	431a      	orrs	r2, r3
 81089d6:	683b      	ldr	r3, [r7, #0]
 81089d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 81089da:	683b      	ldr	r3, [r7, #0]
 81089dc:	691b      	ldr	r3, [r3, #16]
 81089de:	3301      	adds	r3, #1
 81089e0:	029a      	lsls	r2, r3, #10
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 81089e6:	687b      	ldr	r3, [r7, #4]
 81089e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81089ea:	687b      	ldr	r3, [r7, #4]
 81089ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 81089ee:	687b      	ldr	r3, [r7, #4]
 81089f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 81089f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	655a      	str	r2, [r3, #84]	; 0x54
 81089fe:	e00f      	b.n	8108a20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108a00:	687b      	ldr	r3, [r7, #4]
 8108a02:	681b      	ldr	r3, [r3, #0]
 8108a04:	4a58      	ldr	r2, [pc, #352]	; (8108b68 <HAL_SD_GetCardCSD+0x344>)
 8108a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108a08:	687b      	ldr	r3, [r7, #4]
 8108a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108a10:	687b      	ldr	r3, [r7, #4]
 8108a12:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	2201      	movs	r2, #1
 8108a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8108a1c:	2301      	movs	r3, #1
 8108a1e:	e09d      	b.n	8108b5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108a24:	0b9b      	lsrs	r3, r3, #14
 8108a26:	b2db      	uxtb	r3, r3
 8108a28:	f003 0301 	and.w	r3, r3, #1
 8108a2c:	b2da      	uxtb	r2, r3
 8108a2e:	683b      	ldr	r3, [r7, #0]
 8108a30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108a36:	09db      	lsrs	r3, r3, #7
 8108a38:	b2db      	uxtb	r3, r3
 8108a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108a3e:	b2da      	uxtb	r2, r3
 8108a40:	683b      	ldr	r3, [r7, #0]
 8108a42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108a48:	b2db      	uxtb	r3, r3
 8108a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108a4e:	b2da      	uxtb	r2, r3
 8108a50:	683b      	ldr	r3, [r7, #0]
 8108a52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108a58:	0fdb      	lsrs	r3, r3, #31
 8108a5a:	b2da      	uxtb	r2, r3
 8108a5c:	683b      	ldr	r3, [r7, #0]
 8108a5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108a64:	0f5b      	lsrs	r3, r3, #29
 8108a66:	b2db      	uxtb	r3, r3
 8108a68:	f003 0303 	and.w	r3, r3, #3
 8108a6c:	b2da      	uxtb	r2, r3
 8108a6e:	683b      	ldr	r3, [r7, #0]
 8108a70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8108a72:	687b      	ldr	r3, [r7, #4]
 8108a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108a76:	0e9b      	lsrs	r3, r3, #26
 8108a78:	b2db      	uxtb	r3, r3
 8108a7a:	f003 0307 	and.w	r3, r3, #7
 8108a7e:	b2da      	uxtb	r2, r3
 8108a80:	683b      	ldr	r3, [r7, #0]
 8108a82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108a88:	0d9b      	lsrs	r3, r3, #22
 8108a8a:	b2db      	uxtb	r3, r3
 8108a8c:	f003 030f 	and.w	r3, r3, #15
 8108a90:	b2da      	uxtb	r2, r3
 8108a92:	683b      	ldr	r3, [r7, #0]
 8108a94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108a9a:	0d5b      	lsrs	r3, r3, #21
 8108a9c:	b2db      	uxtb	r3, r3
 8108a9e:	f003 0301 	and.w	r3, r3, #1
 8108aa2:	b2da      	uxtb	r2, r3
 8108aa4:	683b      	ldr	r3, [r7, #0]
 8108aa6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8108aaa:	683b      	ldr	r3, [r7, #0]
 8108aac:	2200      	movs	r2, #0
 8108aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8108ab2:	687b      	ldr	r3, [r7, #4]
 8108ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108ab6:	0c1b      	lsrs	r3, r3, #16
 8108ab8:	b2db      	uxtb	r3, r3
 8108aba:	f003 0301 	and.w	r3, r3, #1
 8108abe:	b2da      	uxtb	r2, r3
 8108ac0:	683b      	ldr	r3, [r7, #0]
 8108ac2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108aca:	0bdb      	lsrs	r3, r3, #15
 8108acc:	b2db      	uxtb	r3, r3
 8108ace:	f003 0301 	and.w	r3, r3, #1
 8108ad2:	b2da      	uxtb	r2, r3
 8108ad4:	683b      	ldr	r3, [r7, #0]
 8108ad6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108ade:	0b9b      	lsrs	r3, r3, #14
 8108ae0:	b2db      	uxtb	r3, r3
 8108ae2:	f003 0301 	and.w	r3, r3, #1
 8108ae6:	b2da      	uxtb	r2, r3
 8108ae8:	683b      	ldr	r3, [r7, #0]
 8108aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108af2:	0b5b      	lsrs	r3, r3, #13
 8108af4:	b2db      	uxtb	r3, r3
 8108af6:	f003 0301 	and.w	r3, r3, #1
 8108afa:	b2da      	uxtb	r2, r3
 8108afc:	683b      	ldr	r3, [r7, #0]
 8108afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108b06:	0b1b      	lsrs	r3, r3, #12
 8108b08:	b2db      	uxtb	r3, r3
 8108b0a:	f003 0301 	and.w	r3, r3, #1
 8108b0e:	b2da      	uxtb	r2, r3
 8108b10:	683b      	ldr	r3, [r7, #0]
 8108b12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108b1a:	0a9b      	lsrs	r3, r3, #10
 8108b1c:	b2db      	uxtb	r3, r3
 8108b1e:	f003 0303 	and.w	r3, r3, #3
 8108b22:	b2da      	uxtb	r2, r3
 8108b24:	683b      	ldr	r3, [r7, #0]
 8108b26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108b2e:	0a1b      	lsrs	r3, r3, #8
 8108b30:	b2db      	uxtb	r3, r3
 8108b32:	f003 0303 	and.w	r3, r3, #3
 8108b36:	b2da      	uxtb	r2, r3
 8108b38:	683b      	ldr	r3, [r7, #0]
 8108b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108b42:	085b      	lsrs	r3, r3, #1
 8108b44:	b2db      	uxtb	r3, r3
 8108b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108b4a:	b2da      	uxtb	r2, r3
 8108b4c:	683b      	ldr	r3, [r7, #0]
 8108b4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8108b52:	683b      	ldr	r3, [r7, #0]
 8108b54:	2201      	movs	r2, #1
 8108b56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8108b5a:	2300      	movs	r3, #0
}
 8108b5c:	4618      	mov	r0, r3
 8108b5e:	370c      	adds	r7, #12
 8108b60:	46bd      	mov	sp, r7
 8108b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b66:	4770      	bx	lr
 8108b68:	1fe00fff 	.word	0x1fe00fff

08108b6c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8108b6c:	b580      	push	{r7, lr}
 8108b6e:	b094      	sub	sp, #80	; 0x50
 8108b70:	af00      	add	r7, sp, #0
 8108b72:	6078      	str	r0, [r7, #4]
 8108b74:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8108b76:	2300      	movs	r3, #0
 8108b78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8108b82:	b2db      	uxtb	r3, r3
 8108b84:	2b03      	cmp	r3, #3
 8108b86:	d101      	bne.n	8108b8c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8108b88:	2301      	movs	r3, #1
 8108b8a:	e0a7      	b.n	8108cdc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8108b8c:	f107 0308 	add.w	r3, r7, #8
 8108b90:	4619      	mov	r1, r3
 8108b92:	6878      	ldr	r0, [r7, #4]
 8108b94:	f000 fb36 	bl	8109204 <SD_SendSDStatus>
 8108b98:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108b9c:	2b00      	cmp	r3, #0
 8108b9e:	d011      	beq.n	8108bc4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	681b      	ldr	r3, [r3, #0]
 8108ba4:	4a4f      	ldr	r2, [pc, #316]	; (8108ce4 <HAL_SD_GetCardStatus+0x178>)
 8108ba6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108ba8:	687b      	ldr	r3, [r7, #4]
 8108baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108bae:	431a      	orrs	r2, r3
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108bb4:	687b      	ldr	r3, [r7, #4]
 8108bb6:	2201      	movs	r2, #1
 8108bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8108bbc:	2301      	movs	r3, #1
 8108bbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8108bc2:	e070      	b.n	8108ca6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8108bc4:	68bb      	ldr	r3, [r7, #8]
 8108bc6:	099b      	lsrs	r3, r3, #6
 8108bc8:	b2db      	uxtb	r3, r3
 8108bca:	f003 0303 	and.w	r3, r3, #3
 8108bce:	b2da      	uxtb	r2, r3
 8108bd0:	683b      	ldr	r3, [r7, #0]
 8108bd2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8108bd4:	68bb      	ldr	r3, [r7, #8]
 8108bd6:	095b      	lsrs	r3, r3, #5
 8108bd8:	b2db      	uxtb	r3, r3
 8108bda:	f003 0301 	and.w	r3, r3, #1
 8108bde:	b2da      	uxtb	r2, r3
 8108be0:	683b      	ldr	r3, [r7, #0]
 8108be2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8108be4:	68bb      	ldr	r3, [r7, #8]
 8108be6:	0a1b      	lsrs	r3, r3, #8
 8108be8:	b29b      	uxth	r3, r3
 8108bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8108bee:	b29a      	uxth	r2, r3
 8108bf0:	68bb      	ldr	r3, [r7, #8]
 8108bf2:	0e1b      	lsrs	r3, r3, #24
 8108bf4:	b29b      	uxth	r3, r3
 8108bf6:	4313      	orrs	r3, r2
 8108bf8:	b29a      	uxth	r2, r3
 8108bfa:	683b      	ldr	r3, [r7, #0]
 8108bfc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108bfe:	68fb      	ldr	r3, [r7, #12]
 8108c00:	061a      	lsls	r2, r3, #24
 8108c02:	68fb      	ldr	r3, [r7, #12]
 8108c04:	021b      	lsls	r3, r3, #8
 8108c06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8108c0a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108c0c:	68fb      	ldr	r3, [r7, #12]
 8108c0e:	0a1b      	lsrs	r3, r3, #8
 8108c10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108c14:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108c16:	68fb      	ldr	r3, [r7, #12]
 8108c18:	0e1b      	lsrs	r3, r3, #24
 8108c1a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108c1c:	683b      	ldr	r3, [r7, #0]
 8108c1e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8108c20:	693b      	ldr	r3, [r7, #16]
 8108c22:	b2da      	uxtb	r2, r3
 8108c24:	683b      	ldr	r3, [r7, #0]
 8108c26:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8108c28:	693b      	ldr	r3, [r7, #16]
 8108c2a:	0a1b      	lsrs	r3, r3, #8
 8108c2c:	b2da      	uxtb	r2, r3
 8108c2e:	683b      	ldr	r3, [r7, #0]
 8108c30:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8108c32:	693b      	ldr	r3, [r7, #16]
 8108c34:	0d1b      	lsrs	r3, r3, #20
 8108c36:	b2db      	uxtb	r3, r3
 8108c38:	f003 030f 	and.w	r3, r3, #15
 8108c3c:	b2da      	uxtb	r2, r3
 8108c3e:	683b      	ldr	r3, [r7, #0]
 8108c40:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8108c42:	693b      	ldr	r3, [r7, #16]
 8108c44:	0c1b      	lsrs	r3, r3, #16
 8108c46:	b29b      	uxth	r3, r3
 8108c48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8108c4c:	b29a      	uxth	r2, r3
 8108c4e:	697b      	ldr	r3, [r7, #20]
 8108c50:	b29b      	uxth	r3, r3
 8108c52:	b2db      	uxtb	r3, r3
 8108c54:	b29b      	uxth	r3, r3
 8108c56:	4313      	orrs	r3, r2
 8108c58:	b29a      	uxth	r2, r3
 8108c5a:	683b      	ldr	r3, [r7, #0]
 8108c5c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8108c5e:	697b      	ldr	r3, [r7, #20]
 8108c60:	0a9b      	lsrs	r3, r3, #10
 8108c62:	b2db      	uxtb	r3, r3
 8108c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108c68:	b2da      	uxtb	r2, r3
 8108c6a:	683b      	ldr	r3, [r7, #0]
 8108c6c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8108c6e:	697b      	ldr	r3, [r7, #20]
 8108c70:	0a1b      	lsrs	r3, r3, #8
 8108c72:	b2db      	uxtb	r3, r3
 8108c74:	f003 0303 	and.w	r3, r3, #3
 8108c78:	b2da      	uxtb	r2, r3
 8108c7a:	683b      	ldr	r3, [r7, #0]
 8108c7c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8108c7e:	697b      	ldr	r3, [r7, #20]
 8108c80:	091b      	lsrs	r3, r3, #4
 8108c82:	b2db      	uxtb	r3, r3
 8108c84:	f003 030f 	and.w	r3, r3, #15
 8108c88:	b2da      	uxtb	r2, r3
 8108c8a:	683b      	ldr	r3, [r7, #0]
 8108c8c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8108c8e:	697b      	ldr	r3, [r7, #20]
 8108c90:	b2db      	uxtb	r3, r3
 8108c92:	f003 030f 	and.w	r3, r3, #15
 8108c96:	b2da      	uxtb	r2, r3
 8108c98:	683b      	ldr	r3, [r7, #0]
 8108c9a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8108c9c:	69bb      	ldr	r3, [r7, #24]
 8108c9e:	0e1b      	lsrs	r3, r3, #24
 8108ca0:	b2da      	uxtb	r2, r3
 8108ca2:	683b      	ldr	r3, [r7, #0]
 8108ca4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	681b      	ldr	r3, [r3, #0]
 8108caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8108cae:	4618      	mov	r0, r3
 8108cb0:	f003 f896 	bl	810bde0 <SDMMC_CmdBlockLength>
 8108cb4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108cb8:	2b00      	cmp	r3, #0
 8108cba:	d00d      	beq.n	8108cd8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	681b      	ldr	r3, [r3, #0]
 8108cc0:	4a08      	ldr	r2, [pc, #32]	; (8108ce4 <HAL_SD_GetCardStatus+0x178>)
 8108cc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108cc8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	2201      	movs	r2, #1
 8108cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8108cd2:	2301      	movs	r3, #1
 8108cd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8108cd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8108cdc:	4618      	mov	r0, r3
 8108cde:	3750      	adds	r7, #80	; 0x50
 8108ce0:	46bd      	mov	sp, r7
 8108ce2:	bd80      	pop	{r7, pc}
 8108ce4:	1fe00fff 	.word	0x1fe00fff

08108ce8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8108ce8:	b590      	push	{r4, r7, lr}
 8108cea:	b08d      	sub	sp, #52	; 0x34
 8108cec:	af02      	add	r7, sp, #8
 8108cee:	6078      	str	r0, [r7, #4]
 8108cf0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8108cf2:	2300      	movs	r3, #0
 8108cf4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8108cf6:	2300      	movs	r3, #0
 8108cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8108cfc:	687b      	ldr	r3, [r7, #4]
 8108cfe:	2203      	movs	r2, #3
 8108d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108d08:	2b03      	cmp	r3, #3
 8108d0a:	d02e      	beq.n	8108d6a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8108d0c:	683b      	ldr	r3, [r7, #0]
 8108d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108d12:	d106      	bne.n	8108d22 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108d18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8108d20:	e029      	b.n	8108d76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8108d22:	683b      	ldr	r3, [r7, #0]
 8108d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108d28:	d10a      	bne.n	8108d40 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8108d2a:	6878      	ldr	r0, [r7, #4]
 8108d2c:	f000 fb62 	bl	81093f4 <SD_WideBus_Enable>
 8108d30:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108d36:	69fb      	ldr	r3, [r7, #28]
 8108d38:	431a      	orrs	r2, r3
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8108d3e:	e01a      	b.n	8108d76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8108d40:	683b      	ldr	r3, [r7, #0]
 8108d42:	2b00      	cmp	r3, #0
 8108d44:	d10a      	bne.n	8108d5c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8108d46:	6878      	ldr	r0, [r7, #4]
 8108d48:	f000 fb9f 	bl	810948a <SD_WideBus_Disable>
 8108d4c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108d52:	69fb      	ldr	r3, [r7, #28]
 8108d54:	431a      	orrs	r2, r3
 8108d56:	687b      	ldr	r3, [r7, #4]
 8108d58:	635a      	str	r2, [r3, #52]	; 0x34
 8108d5a:	e00c      	b.n	8108d76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108d60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	635a      	str	r2, [r3, #52]	; 0x34
 8108d68:	e005      	b.n	8108d76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108d6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108d72:	687b      	ldr	r3, [r7, #4]
 8108d74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108d7a:	2b00      	cmp	r3, #0
 8108d7c:	d007      	beq.n	8108d8e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	681b      	ldr	r3, [r3, #0]
 8108d82:	4a5e      	ldr	r2, [pc, #376]	; (8108efc <HAL_SD_ConfigWideBusOperation+0x214>)
 8108d84:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8108d86:	2301      	movs	r3, #1
 8108d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8108d8c:	e094      	b.n	8108eb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108d8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8108d92:	f7fd fd1d 	bl	81067d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8108d96:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8108d98:	6a3b      	ldr	r3, [r7, #32]
 8108d9a:	2b00      	cmp	r3, #0
 8108d9c:	f000 8083 	beq.w	8108ea6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8108da0:	687b      	ldr	r3, [r7, #4]
 8108da2:	685b      	ldr	r3, [r3, #4]
 8108da4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8108da6:	687b      	ldr	r3, [r7, #4]
 8108da8:	689b      	ldr	r3, [r3, #8]
 8108daa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8108dac:	683b      	ldr	r3, [r7, #0]
 8108dae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	691b      	ldr	r3, [r3, #16]
 8108db4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8108db6:	687b      	ldr	r3, [r7, #4]
 8108db8:	695a      	ldr	r2, [r3, #20]
 8108dba:	6a3b      	ldr	r3, [r7, #32]
 8108dbc:	4950      	ldr	r1, [pc, #320]	; (8108f00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108dbe:	fba1 1303 	umull	r1, r3, r1, r3
 8108dc2:	0e1b      	lsrs	r3, r3, #24
 8108dc4:	429a      	cmp	r2, r3
 8108dc6:	d303      	bcc.n	8108dd0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108dc8:	687b      	ldr	r3, [r7, #4]
 8108dca:	695b      	ldr	r3, [r3, #20]
 8108dcc:	61bb      	str	r3, [r7, #24]
 8108dce:	e05a      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108dd8:	d103      	bne.n	8108de2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108dda:	687b      	ldr	r3, [r7, #4]
 8108ddc:	695b      	ldr	r3, [r3, #20]
 8108dde:	61bb      	str	r3, [r7, #24]
 8108de0:	e051      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8108de2:	687b      	ldr	r3, [r7, #4]
 8108de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108dea:	d126      	bne.n	8108e3a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	695b      	ldr	r3, [r3, #20]
 8108df0:	2b00      	cmp	r3, #0
 8108df2:	d10e      	bne.n	8108e12 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8108df4:	6a3b      	ldr	r3, [r7, #32]
 8108df6:	4a43      	ldr	r2, [pc, #268]	; (8108f04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108df8:	4293      	cmp	r3, r2
 8108dfa:	d906      	bls.n	8108e0a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108dfc:	6a3b      	ldr	r3, [r7, #32]
 8108dfe:	4a40      	ldr	r2, [pc, #256]	; (8108f00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108e00:	fba2 2303 	umull	r2, r3, r2, r3
 8108e04:	0e5b      	lsrs	r3, r3, #25
 8108e06:	61bb      	str	r3, [r7, #24]
 8108e08:	e03d      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	695b      	ldr	r3, [r3, #20]
 8108e0e:	61bb      	str	r3, [r7, #24]
 8108e10:	e039      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8108e12:	687b      	ldr	r3, [r7, #4]
 8108e14:	695b      	ldr	r3, [r3, #20]
 8108e16:	005b      	lsls	r3, r3, #1
 8108e18:	6a3a      	ldr	r2, [r7, #32]
 8108e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8108e1e:	4a39      	ldr	r2, [pc, #228]	; (8108f04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108e20:	4293      	cmp	r3, r2
 8108e22:	d906      	bls.n	8108e32 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108e24:	6a3b      	ldr	r3, [r7, #32]
 8108e26:	4a36      	ldr	r2, [pc, #216]	; (8108f00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108e28:	fba2 2303 	umull	r2, r3, r2, r3
 8108e2c:	0e5b      	lsrs	r3, r3, #25
 8108e2e:	61bb      	str	r3, [r7, #24]
 8108e30:	e029      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	695b      	ldr	r3, [r3, #20]
 8108e36:	61bb      	str	r3, [r7, #24]
 8108e38:	e025      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	695b      	ldr	r3, [r3, #20]
 8108e3e:	2b00      	cmp	r3, #0
 8108e40:	d10e      	bne.n	8108e60 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8108e42:	6a3b      	ldr	r3, [r7, #32]
 8108e44:	4a30      	ldr	r2, [pc, #192]	; (8108f08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8108e46:	4293      	cmp	r3, r2
 8108e48:	d906      	bls.n	8108e58 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108e4a:	6a3b      	ldr	r3, [r7, #32]
 8108e4c:	4a2c      	ldr	r2, [pc, #176]	; (8108f00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8108e52:	0e1b      	lsrs	r3, r3, #24
 8108e54:	61bb      	str	r3, [r7, #24]
 8108e56:	e016      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	695b      	ldr	r3, [r3, #20]
 8108e5c:	61bb      	str	r3, [r7, #24]
 8108e5e:	e012      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	695b      	ldr	r3, [r3, #20]
 8108e64:	005b      	lsls	r3, r3, #1
 8108e66:	6a3a      	ldr	r2, [r7, #32]
 8108e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8108e6c:	4a26      	ldr	r2, [pc, #152]	; (8108f08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8108e6e:	4293      	cmp	r3, r2
 8108e70:	d906      	bls.n	8108e80 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108e72:	6a3b      	ldr	r3, [r7, #32]
 8108e74:	4a22      	ldr	r2, [pc, #136]	; (8108f00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108e76:	fba2 2303 	umull	r2, r3, r2, r3
 8108e7a:	0e1b      	lsrs	r3, r3, #24
 8108e7c:	61bb      	str	r3, [r7, #24]
 8108e7e:	e002      	b.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108e80:	687b      	ldr	r3, [r7, #4]
 8108e82:	695b      	ldr	r3, [r3, #20]
 8108e84:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8108e86:	687b      	ldr	r3, [r7, #4]
 8108e88:	681c      	ldr	r4, [r3, #0]
 8108e8a:	466a      	mov	r2, sp
 8108e8c:	f107 0314 	add.w	r3, r7, #20
 8108e90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108e94:	e882 0003 	stmia.w	r2, {r0, r1}
 8108e98:	f107 0308 	add.w	r3, r7, #8
 8108e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108e9e:	4620      	mov	r0, r4
 8108ea0:	f002 fed2 	bl	810bc48 <SDMMC_Init>
 8108ea4:	e008      	b.n	8108eb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8108ea6:	687b      	ldr	r3, [r7, #4]
 8108ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108eaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108eae:	687b      	ldr	r3, [r7, #4]
 8108eb0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8108eb2:	2301      	movs	r3, #1
 8108eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108eb8:	687b      	ldr	r3, [r7, #4]
 8108eba:	681b      	ldr	r3, [r3, #0]
 8108ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8108ec0:	4618      	mov	r0, r3
 8108ec2:	f002 ff8d 	bl	810bde0 <SDMMC_CmdBlockLength>
 8108ec6:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108ec8:	69fb      	ldr	r3, [r7, #28]
 8108eca:	2b00      	cmp	r3, #0
 8108ecc:	d00c      	beq.n	8108ee8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	681b      	ldr	r3, [r3, #0]
 8108ed2:	4a0a      	ldr	r2, [pc, #40]	; (8108efc <HAL_SD_ConfigWideBusOperation+0x214>)
 8108ed4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108ed6:	687b      	ldr	r3, [r7, #4]
 8108ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108eda:	69fb      	ldr	r3, [r7, #28]
 8108edc:	431a      	orrs	r2, r3
 8108ede:	687b      	ldr	r3, [r7, #4]
 8108ee0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8108ee2:	2301      	movs	r3, #1
 8108ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	2201      	movs	r2, #1
 8108eec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8108ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8108ef4:	4618      	mov	r0, r3
 8108ef6:	372c      	adds	r7, #44	; 0x2c
 8108ef8:	46bd      	mov	sp, r7
 8108efa:	bd90      	pop	{r4, r7, pc}
 8108efc:	1fe00fff 	.word	0x1fe00fff
 8108f00:	55e63b89 	.word	0x55e63b89
 8108f04:	02faf080 	.word	0x02faf080
 8108f08:	017d7840 	.word	0x017d7840

08108f0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8108f0c:	b580      	push	{r7, lr}
 8108f0e:	b086      	sub	sp, #24
 8108f10:	af00      	add	r7, sp, #0
 8108f12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8108f14:	2300      	movs	r3, #0
 8108f16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8108f18:	f107 030c 	add.w	r3, r7, #12
 8108f1c:	4619      	mov	r1, r3
 8108f1e:	6878      	ldr	r0, [r7, #4]
 8108f20:	f000 fa40 	bl	81093a4 <SD_SendStatus>
 8108f24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108f26:	697b      	ldr	r3, [r7, #20]
 8108f28:	2b00      	cmp	r3, #0
 8108f2a:	d005      	beq.n	8108f38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108f30:	697b      	ldr	r3, [r7, #20]
 8108f32:	431a      	orrs	r2, r3
 8108f34:	687b      	ldr	r3, [r7, #4]
 8108f36:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8108f38:	68fb      	ldr	r3, [r7, #12]
 8108f3a:	0a5b      	lsrs	r3, r3, #9
 8108f3c:	f003 030f 	and.w	r3, r3, #15
 8108f40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8108f42:	693b      	ldr	r3, [r7, #16]
}
 8108f44:	4618      	mov	r0, r3
 8108f46:	3718      	adds	r7, #24
 8108f48:	46bd      	mov	sp, r7
 8108f4a:	bd80      	pop	{r7, pc}

08108f4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8108f4c:	b580      	push	{r7, lr}
 8108f4e:	b090      	sub	sp, #64	; 0x40
 8108f50:	af00      	add	r7, sp, #0
 8108f52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8108f54:	2300      	movs	r3, #0
 8108f56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8108f58:	f7f9 fdf6 	bl	8102b48 <HAL_GetTick>
 8108f5c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	681b      	ldr	r3, [r3, #0]
 8108f62:	4618      	mov	r0, r3
 8108f64:	f002 feb8 	bl	810bcd8 <SDMMC_GetPowerState>
 8108f68:	4603      	mov	r3, r0
 8108f6a:	2b00      	cmp	r3, #0
 8108f6c:	d102      	bne.n	8108f74 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8108f6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8108f72:	e0b5      	b.n	81090e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108f74:	687b      	ldr	r3, [r7, #4]
 8108f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108f78:	2b03      	cmp	r3, #3
 8108f7a:	d02e      	beq.n	8108fda <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	681b      	ldr	r3, [r3, #0]
 8108f80:	4618      	mov	r0, r3
 8108f82:	f003 f839 	bl	810bff8 <SDMMC_CmdSendCID>
 8108f86:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8108f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f8a:	2b00      	cmp	r3, #0
 8108f8c:	d001      	beq.n	8108f92 <SD_InitCard+0x46>
    {
      return errorstate;
 8108f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f90:	e0a6      	b.n	81090e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108f92:	687b      	ldr	r3, [r7, #4]
 8108f94:	681b      	ldr	r3, [r3, #0]
 8108f96:	2100      	movs	r1, #0
 8108f98:	4618      	mov	r0, r3
 8108f9a:	f002 fee2 	bl	810bd62 <SDMMC_GetResponse>
 8108f9e:	4602      	mov	r2, r0
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	681b      	ldr	r3, [r3, #0]
 8108fa8:	2104      	movs	r1, #4
 8108faa:	4618      	mov	r0, r3
 8108fac:	f002 fed9 	bl	810bd62 <SDMMC_GetResponse>
 8108fb0:	4602      	mov	r2, r0
 8108fb2:	687b      	ldr	r3, [r7, #4]
 8108fb4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	681b      	ldr	r3, [r3, #0]
 8108fba:	2108      	movs	r1, #8
 8108fbc:	4618      	mov	r0, r3
 8108fbe:	f002 fed0 	bl	810bd62 <SDMMC_GetResponse>
 8108fc2:	4602      	mov	r2, r0
 8108fc4:	687b      	ldr	r3, [r7, #4]
 8108fc6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	681b      	ldr	r3, [r3, #0]
 8108fcc:	210c      	movs	r1, #12
 8108fce:	4618      	mov	r0, r3
 8108fd0:	f002 fec7 	bl	810bd62 <SDMMC_GetResponse>
 8108fd4:	4602      	mov	r2, r0
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108fde:	2b03      	cmp	r3, #3
 8108fe0:	d01d      	beq.n	810901e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8108fe2:	e019      	b.n	8109018 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	681b      	ldr	r3, [r3, #0]
 8108fe8:	f107 020a 	add.w	r2, r7, #10
 8108fec:	4611      	mov	r1, r2
 8108fee:	4618      	mov	r0, r3
 8108ff0:	f003 f841 	bl	810c076 <SDMMC_CmdSetRelAdd>
 8108ff4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8108ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ff8:	2b00      	cmp	r3, #0
 8108ffa:	d001      	beq.n	8109000 <SD_InitCard+0xb4>
      {
        return errorstate;
 8108ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ffe:	e06f      	b.n	81090e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8109000:	f7f9 fda2 	bl	8102b48 <HAL_GetTick>
 8109004:	4602      	mov	r2, r0
 8109006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109008:	1ad3      	subs	r3, r2, r3
 810900a:	f241 3287 	movw	r2, #4999	; 0x1387
 810900e:	4293      	cmp	r3, r2
 8109010:	d902      	bls.n	8109018 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8109012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109016:	e063      	b.n	81090e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8109018:	897b      	ldrh	r3, [r7, #10]
 810901a:	2b00      	cmp	r3, #0
 810901c:	d0e2      	beq.n	8108fe4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810901e:	687b      	ldr	r3, [r7, #4]
 8109020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109022:	2b03      	cmp	r3, #3
 8109024:	d036      	beq.n	8109094 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8109026:	897b      	ldrh	r3, [r7, #10]
 8109028:	461a      	mov	r2, r3
 810902a:	687b      	ldr	r3, [r7, #4]
 810902c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	681a      	ldr	r2, [r3, #0]
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109036:	041b      	lsls	r3, r3, #16
 8109038:	4619      	mov	r1, r3
 810903a:	4610      	mov	r0, r2
 810903c:	f002 fffb 	bl	810c036 <SDMMC_CmdSendCSD>
 8109040:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8109042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109044:	2b00      	cmp	r3, #0
 8109046:	d001      	beq.n	810904c <SD_InitCard+0x100>
    {
      return errorstate;
 8109048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810904a:	e049      	b.n	81090e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810904c:	687b      	ldr	r3, [r7, #4]
 810904e:	681b      	ldr	r3, [r3, #0]
 8109050:	2100      	movs	r1, #0
 8109052:	4618      	mov	r0, r3
 8109054:	f002 fe85 	bl	810bd62 <SDMMC_GetResponse>
 8109058:	4602      	mov	r2, r0
 810905a:	687b      	ldr	r3, [r7, #4]
 810905c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	681b      	ldr	r3, [r3, #0]
 8109062:	2104      	movs	r1, #4
 8109064:	4618      	mov	r0, r3
 8109066:	f002 fe7c 	bl	810bd62 <SDMMC_GetResponse>
 810906a:	4602      	mov	r2, r0
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8109070:	687b      	ldr	r3, [r7, #4]
 8109072:	681b      	ldr	r3, [r3, #0]
 8109074:	2108      	movs	r1, #8
 8109076:	4618      	mov	r0, r3
 8109078:	f002 fe73 	bl	810bd62 <SDMMC_GetResponse>
 810907c:	4602      	mov	r2, r0
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	681b      	ldr	r3, [r3, #0]
 8109086:	210c      	movs	r1, #12
 8109088:	4618      	mov	r0, r3
 810908a:	f002 fe6a 	bl	810bd62 <SDMMC_GetResponse>
 810908e:	4602      	mov	r2, r0
 8109090:	687b      	ldr	r3, [r7, #4]
 8109092:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	2104      	movs	r1, #4
 810909a:	4618      	mov	r0, r3
 810909c:	f002 fe61 	bl	810bd62 <SDMMC_GetResponse>
 81090a0:	4603      	mov	r3, r0
 81090a2:	0d1a      	lsrs	r2, r3, #20
 81090a4:	687b      	ldr	r3, [r7, #4]
 81090a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 81090a8:	f107 030c 	add.w	r3, r7, #12
 81090ac:	4619      	mov	r1, r3
 81090ae:	6878      	ldr	r0, [r7, #4]
 81090b0:	f7ff fbb8 	bl	8108824 <HAL_SD_GetCardCSD>
 81090b4:	4603      	mov	r3, r0
 81090b6:	2b00      	cmp	r3, #0
 81090b8:	d002      	beq.n	81090c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81090ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81090be:	e00f      	b.n	81090e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 81090c0:	687b      	ldr	r3, [r7, #4]
 81090c2:	681a      	ldr	r2, [r3, #0]
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81090c8:	041b      	lsls	r3, r3, #16
 81090ca:	4619      	mov	r1, r3
 81090cc:	4610      	mov	r0, r2
 81090ce:	f002 feaa 	bl	810be26 <SDMMC_CmdSelDesel>
 81090d2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 81090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090d6:	2b00      	cmp	r3, #0
 81090d8:	d001      	beq.n	81090de <SD_InitCard+0x192>
  {
    return errorstate;
 81090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090dc:	e000      	b.n	81090e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 81090de:	2300      	movs	r3, #0
}
 81090e0:	4618      	mov	r0, r3
 81090e2:	3740      	adds	r7, #64	; 0x40
 81090e4:	46bd      	mov	sp, r7
 81090e6:	bd80      	pop	{r7, pc}

081090e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 81090e8:	b580      	push	{r7, lr}
 81090ea:	b086      	sub	sp, #24
 81090ec:	af00      	add	r7, sp, #0
 81090ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81090f0:	2300      	movs	r3, #0
 81090f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 81090f4:	2300      	movs	r3, #0
 81090f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 81090f8:	2300      	movs	r3, #0
 81090fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	681b      	ldr	r3, [r3, #0]
 8109100:	4618      	mov	r0, r3
 8109102:	f002 feb3 	bl	810be6c <SDMMC_CmdGoIdleState>
 8109106:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109108:	68fb      	ldr	r3, [r7, #12]
 810910a:	2b00      	cmp	r3, #0
 810910c:	d001      	beq.n	8109112 <SD_PowerON+0x2a>
  {
    return errorstate;
 810910e:	68fb      	ldr	r3, [r7, #12]
 8109110:	e072      	b.n	81091f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8109112:	687b      	ldr	r3, [r7, #4]
 8109114:	681b      	ldr	r3, [r3, #0]
 8109116:	4618      	mov	r0, r3
 8109118:	f002 fec6 	bl	810bea8 <SDMMC_CmdOperCond>
 810911c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810911e:	68fb      	ldr	r3, [r7, #12]
 8109120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8109124:	d10d      	bne.n	8109142 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8109126:	687b      	ldr	r3, [r7, #4]
 8109128:	2200      	movs	r2, #0
 810912a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	681b      	ldr	r3, [r3, #0]
 8109130:	4618      	mov	r0, r3
 8109132:	f002 fe9b 	bl	810be6c <SDMMC_CmdGoIdleState>
 8109136:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109138:	68fb      	ldr	r3, [r7, #12]
 810913a:	2b00      	cmp	r3, #0
 810913c:	d004      	beq.n	8109148 <SD_PowerON+0x60>
    {
      return errorstate;
 810913e:	68fb      	ldr	r3, [r7, #12]
 8109140:	e05a      	b.n	81091f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	2201      	movs	r2, #1
 8109146:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8109148:	687b      	ldr	r3, [r7, #4]
 810914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810914c:	2b01      	cmp	r3, #1
 810914e:	d137      	bne.n	81091c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	681b      	ldr	r3, [r3, #0]
 8109154:	2100      	movs	r1, #0
 8109156:	4618      	mov	r0, r3
 8109158:	f002 fec6 	bl	810bee8 <SDMMC_CmdAppCommand>
 810915c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810915e:	68fb      	ldr	r3, [r7, #12]
 8109160:	2b00      	cmp	r3, #0
 8109162:	d02d      	beq.n	81091c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109168:	e046      	b.n	81091f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810916a:	687b      	ldr	r3, [r7, #4]
 810916c:	681b      	ldr	r3, [r3, #0]
 810916e:	2100      	movs	r1, #0
 8109170:	4618      	mov	r0, r3
 8109172:	f002 feb9 	bl	810bee8 <SDMMC_CmdAppCommand>
 8109176:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109178:	68fb      	ldr	r3, [r7, #12]
 810917a:	2b00      	cmp	r3, #0
 810917c:	d001      	beq.n	8109182 <SD_PowerON+0x9a>
    {
      return errorstate;
 810917e:	68fb      	ldr	r3, [r7, #12]
 8109180:	e03a      	b.n	81091f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	491e      	ldr	r1, [pc, #120]	; (8109200 <SD_PowerON+0x118>)
 8109188:	4618      	mov	r0, r3
 810918a:	f002 fed0 	bl	810bf2e <SDMMC_CmdAppOperCommand>
 810918e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8109190:	68fb      	ldr	r3, [r7, #12]
 8109192:	2b00      	cmp	r3, #0
 8109194:	d002      	beq.n	810919c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810919a:	e02d      	b.n	81091f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	681b      	ldr	r3, [r3, #0]
 81091a0:	2100      	movs	r1, #0
 81091a2:	4618      	mov	r0, r3
 81091a4:	f002 fddd 	bl	810bd62 <SDMMC_GetResponse>
 81091a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 81091aa:	697b      	ldr	r3, [r7, #20]
 81091ac:	0fdb      	lsrs	r3, r3, #31
 81091ae:	2b01      	cmp	r3, #1
 81091b0:	d101      	bne.n	81091b6 <SD_PowerON+0xce>
 81091b2:	2301      	movs	r3, #1
 81091b4:	e000      	b.n	81091b8 <SD_PowerON+0xd0>
 81091b6:	2300      	movs	r3, #0
 81091b8:	613b      	str	r3, [r7, #16]

    count++;
 81091ba:	68bb      	ldr	r3, [r7, #8]
 81091bc:	3301      	adds	r3, #1
 81091be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 81091c0:	68bb      	ldr	r3, [r7, #8]
 81091c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 81091c6:	4293      	cmp	r3, r2
 81091c8:	d802      	bhi.n	81091d0 <SD_PowerON+0xe8>
 81091ca:	693b      	ldr	r3, [r7, #16]
 81091cc:	2b00      	cmp	r3, #0
 81091ce:	d0cc      	beq.n	810916a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 81091d0:	68bb      	ldr	r3, [r7, #8]
 81091d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 81091d6:	4293      	cmp	r3, r2
 81091d8:	d902      	bls.n	81091e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 81091da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81091de:	e00b      	b.n	81091f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	2200      	movs	r2, #0
 81091e4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 81091e6:	697b      	ldr	r3, [r7, #20]
 81091e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81091ec:	2b00      	cmp	r3, #0
 81091ee:	d002      	beq.n	81091f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	2201      	movs	r2, #1
 81091f4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 81091f6:	2300      	movs	r3, #0
}
 81091f8:	4618      	mov	r0, r3
 81091fa:	3718      	adds	r7, #24
 81091fc:	46bd      	mov	sp, r7
 81091fe:	bd80      	pop	{r7, pc}
 8109200:	c1100000 	.word	0xc1100000

08109204 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8109204:	b580      	push	{r7, lr}
 8109206:	b08c      	sub	sp, #48	; 0x30
 8109208:	af00      	add	r7, sp, #0
 810920a:	6078      	str	r0, [r7, #4]
 810920c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810920e:	f7f9 fc9b 	bl	8102b48 <HAL_GetTick>
 8109212:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8109214:	683b      	ldr	r3, [r7, #0]
 8109216:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	681b      	ldr	r3, [r3, #0]
 810921c:	2100      	movs	r1, #0
 810921e:	4618      	mov	r0, r3
 8109220:	f002 fd9f 	bl	810bd62 <SDMMC_GetResponse>
 8109224:	4603      	mov	r3, r0
 8109226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810922a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810922e:	d102      	bne.n	8109236 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109234:	e0b0      	b.n	8109398 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	681b      	ldr	r3, [r3, #0]
 810923a:	2140      	movs	r1, #64	; 0x40
 810923c:	4618      	mov	r0, r3
 810923e:	f002 fdcf 	bl	810bde0 <SDMMC_CmdBlockLength>
 8109242:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109244:	6a3b      	ldr	r3, [r7, #32]
 8109246:	2b00      	cmp	r3, #0
 8109248:	d005      	beq.n	8109256 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8109252:	6a3b      	ldr	r3, [r7, #32]
 8109254:	e0a0      	b.n	8109398 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109256:	687b      	ldr	r3, [r7, #4]
 8109258:	681a      	ldr	r2, [r3, #0]
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810925e:	041b      	lsls	r3, r3, #16
 8109260:	4619      	mov	r1, r3
 8109262:	4610      	mov	r0, r2
 8109264:	f002 fe40 	bl	810bee8 <SDMMC_CmdAppCommand>
 8109268:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810926a:	6a3b      	ldr	r3, [r7, #32]
 810926c:	2b00      	cmp	r3, #0
 810926e:	d005      	beq.n	810927c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109274:	687b      	ldr	r3, [r7, #4]
 8109276:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8109278:	6a3b      	ldr	r3, [r7, #32]
 810927a:	e08d      	b.n	8109398 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810927c:	f04f 33ff 	mov.w	r3, #4294967295
 8109280:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8109282:	2340      	movs	r3, #64	; 0x40
 8109284:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8109286:	2360      	movs	r3, #96	; 0x60
 8109288:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810928a:	2302      	movs	r3, #2
 810928c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810928e:	2300      	movs	r3, #0
 8109290:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109292:	2301      	movs	r3, #1
 8109294:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109296:	687b      	ldr	r3, [r7, #4]
 8109298:	681b      	ldr	r3, [r3, #0]
 810929a:	f107 0208 	add.w	r2, r7, #8
 810929e:	4611      	mov	r1, r2
 81092a0:	4618      	mov	r0, r3
 81092a2:	f002 fd71 	bl	810bd88 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	681b      	ldr	r3, [r3, #0]
 81092aa:	4618      	mov	r0, r3
 81092ac:	f002 ff28 	bl	810c100 <SDMMC_CmdStatusRegister>
 81092b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81092b2:	6a3b      	ldr	r3, [r7, #32]
 81092b4:	2b00      	cmp	r3, #0
 81092b6:	d02b      	beq.n	8109310 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 81092c0:	6a3b      	ldr	r3, [r7, #32]
 81092c2:	e069      	b.n	8109398 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	681b      	ldr	r3, [r3, #0]
 81092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81092ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81092ce:	2b00      	cmp	r3, #0
 81092d0:	d013      	beq.n	81092fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 81092d2:	2300      	movs	r3, #0
 81092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 81092d6:	e00d      	b.n	81092f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	681b      	ldr	r3, [r3, #0]
 81092dc:	4618      	mov	r0, r3
 81092de:	f002 fcdd 	bl	810bc9c <SDMMC_ReadFIFO>
 81092e2:	4602      	mov	r2, r0
 81092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81092e6:	601a      	str	r2, [r3, #0]
        pData++;
 81092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81092ea:	3304      	adds	r3, #4
 81092ec:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 81092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81092f0:	3301      	adds	r3, #1
 81092f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 81092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81092f6:	2b07      	cmp	r3, #7
 81092f8:	d9ee      	bls.n	81092d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81092fa:	f7f9 fc25 	bl	8102b48 <HAL_GetTick>
 81092fe:	4602      	mov	r2, r0
 8109300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109302:	1ad3      	subs	r3, r2, r3
 8109304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109308:	d102      	bne.n	8109310 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810930a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810930e:	e043      	b.n	8109398 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	681b      	ldr	r3, [r3, #0]
 8109314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109316:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 810931a:	2b00      	cmp	r3, #0
 810931c:	d0d2      	beq.n	81092c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810931e:	687b      	ldr	r3, [r7, #4]
 8109320:	681b      	ldr	r3, [r3, #0]
 8109322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109324:	f003 0308 	and.w	r3, r3, #8
 8109328:	2b00      	cmp	r3, #0
 810932a:	d001      	beq.n	8109330 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810932c:	2308      	movs	r3, #8
 810932e:	e033      	b.n	8109398 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109330:	687b      	ldr	r3, [r7, #4]
 8109332:	681b      	ldr	r3, [r3, #0]
 8109334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109336:	f003 0302 	and.w	r3, r3, #2
 810933a:	2b00      	cmp	r3, #0
 810933c:	d001      	beq.n	8109342 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810933e:	2302      	movs	r3, #2
 8109340:	e02a      	b.n	8109398 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	681b      	ldr	r3, [r3, #0]
 8109346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109348:	f003 0320 	and.w	r3, r3, #32
 810934c:	2b00      	cmp	r3, #0
 810934e:	d017      	beq.n	8109380 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8109350:	2320      	movs	r3, #32
 8109352:	e021      	b.n	8109398 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109354:	687b      	ldr	r3, [r7, #4]
 8109356:	681b      	ldr	r3, [r3, #0]
 8109358:	4618      	mov	r0, r3
 810935a:	f002 fc9f 	bl	810bc9c <SDMMC_ReadFIFO>
 810935e:	4602      	mov	r2, r0
 8109360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109362:	601a      	str	r2, [r3, #0]
    pData++;
 8109364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109366:	3304      	adds	r3, #4
 8109368:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810936a:	f7f9 fbed 	bl	8102b48 <HAL_GetTick>
 810936e:	4602      	mov	r2, r0
 8109370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109372:	1ad3      	subs	r3, r2, r3
 8109374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109378:	d102      	bne.n	8109380 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810937a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810937e:	e00b      	b.n	8109398 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8109380:	687b      	ldr	r3, [r7, #4]
 8109382:	681b      	ldr	r3, [r3, #0]
 8109384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810938a:	2b00      	cmp	r3, #0
 810938c:	d1e2      	bne.n	8109354 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	681b      	ldr	r3, [r3, #0]
 8109392:	4a03      	ldr	r2, [pc, #12]	; (81093a0 <SD_SendSDStatus+0x19c>)
 8109394:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8109396:	2300      	movs	r3, #0
}
 8109398:	4618      	mov	r0, r3
 810939a:	3730      	adds	r7, #48	; 0x30
 810939c:	46bd      	mov	sp, r7
 810939e:	bd80      	pop	{r7, pc}
 81093a0:	18000f3a 	.word	0x18000f3a

081093a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 81093a4:	b580      	push	{r7, lr}
 81093a6:	b084      	sub	sp, #16
 81093a8:	af00      	add	r7, sp, #0
 81093aa:	6078      	str	r0, [r7, #4]
 81093ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 81093ae:	683b      	ldr	r3, [r7, #0]
 81093b0:	2b00      	cmp	r3, #0
 81093b2:	d102      	bne.n	81093ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 81093b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81093b8:	e018      	b.n	81093ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	681a      	ldr	r2, [r3, #0]
 81093be:	687b      	ldr	r3, [r7, #4]
 81093c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81093c2:	041b      	lsls	r3, r3, #16
 81093c4:	4619      	mov	r1, r3
 81093c6:	4610      	mov	r0, r2
 81093c8:	f002 fe77 	bl	810c0ba <SDMMC_CmdSendStatus>
 81093cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 81093ce:	68fb      	ldr	r3, [r7, #12]
 81093d0:	2b00      	cmp	r3, #0
 81093d2:	d001      	beq.n	81093d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 81093d4:	68fb      	ldr	r3, [r7, #12]
 81093d6:	e009      	b.n	81093ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	681b      	ldr	r3, [r3, #0]
 81093dc:	2100      	movs	r1, #0
 81093de:	4618      	mov	r0, r3
 81093e0:	f002 fcbf 	bl	810bd62 <SDMMC_GetResponse>
 81093e4:	4602      	mov	r2, r0
 81093e6:	683b      	ldr	r3, [r7, #0]
 81093e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 81093ea:	2300      	movs	r3, #0
}
 81093ec:	4618      	mov	r0, r3
 81093ee:	3710      	adds	r7, #16
 81093f0:	46bd      	mov	sp, r7
 81093f2:	bd80      	pop	{r7, pc}

081093f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 81093f4:	b580      	push	{r7, lr}
 81093f6:	b086      	sub	sp, #24
 81093f8:	af00      	add	r7, sp, #0
 81093fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81093fc:	2300      	movs	r3, #0
 81093fe:	60fb      	str	r3, [r7, #12]
 8109400:	2300      	movs	r3, #0
 8109402:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	681b      	ldr	r3, [r3, #0]
 8109408:	2100      	movs	r1, #0
 810940a:	4618      	mov	r0, r3
 810940c:	f002 fca9 	bl	810bd62 <SDMMC_GetResponse>
 8109410:	4603      	mov	r3, r0
 8109412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810941a:	d102      	bne.n	8109422 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810941c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109420:	e02f      	b.n	8109482 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109422:	f107 030c 	add.w	r3, r7, #12
 8109426:	4619      	mov	r1, r3
 8109428:	6878      	ldr	r0, [r7, #4]
 810942a:	f000 f879 	bl	8109520 <SD_FindSCR>
 810942e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109430:	697b      	ldr	r3, [r7, #20]
 8109432:	2b00      	cmp	r3, #0
 8109434:	d001      	beq.n	810943a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8109436:	697b      	ldr	r3, [r7, #20]
 8109438:	e023      	b.n	8109482 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810943a:	693b      	ldr	r3, [r7, #16]
 810943c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109440:	2b00      	cmp	r3, #0
 8109442:	d01c      	beq.n	810947e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	681a      	ldr	r2, [r3, #0]
 8109448:	687b      	ldr	r3, [r7, #4]
 810944a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810944c:	041b      	lsls	r3, r3, #16
 810944e:	4619      	mov	r1, r3
 8109450:	4610      	mov	r0, r2
 8109452:	f002 fd49 	bl	810bee8 <SDMMC_CmdAppCommand>
 8109456:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109458:	697b      	ldr	r3, [r7, #20]
 810945a:	2b00      	cmp	r3, #0
 810945c:	d001      	beq.n	8109462 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810945e:	697b      	ldr	r3, [r7, #20]
 8109460:	e00f      	b.n	8109482 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	681b      	ldr	r3, [r3, #0]
 8109466:	2102      	movs	r1, #2
 8109468:	4618      	mov	r0, r3
 810946a:	f002 fd80 	bl	810bf6e <SDMMC_CmdBusWidth>
 810946e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109470:	697b      	ldr	r3, [r7, #20]
 8109472:	2b00      	cmp	r3, #0
 8109474:	d001      	beq.n	810947a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8109476:	697b      	ldr	r3, [r7, #20]
 8109478:	e003      	b.n	8109482 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810947a:	2300      	movs	r3, #0
 810947c:	e001      	b.n	8109482 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810947e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8109482:	4618      	mov	r0, r3
 8109484:	3718      	adds	r7, #24
 8109486:	46bd      	mov	sp, r7
 8109488:	bd80      	pop	{r7, pc}

0810948a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810948a:	b580      	push	{r7, lr}
 810948c:	b086      	sub	sp, #24
 810948e:	af00      	add	r7, sp, #0
 8109490:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109492:	2300      	movs	r3, #0
 8109494:	60fb      	str	r3, [r7, #12]
 8109496:	2300      	movs	r3, #0
 8109498:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810949a:	687b      	ldr	r3, [r7, #4]
 810949c:	681b      	ldr	r3, [r3, #0]
 810949e:	2100      	movs	r1, #0
 81094a0:	4618      	mov	r0, r3
 81094a2:	f002 fc5e 	bl	810bd62 <SDMMC_GetResponse>
 81094a6:	4603      	mov	r3, r0
 81094a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81094ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81094b0:	d102      	bne.n	81094b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81094b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81094b6:	e02f      	b.n	8109518 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 81094b8:	f107 030c 	add.w	r3, r7, #12
 81094bc:	4619      	mov	r1, r3
 81094be:	6878      	ldr	r0, [r7, #4]
 81094c0:	f000 f82e 	bl	8109520 <SD_FindSCR>
 81094c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 81094c6:	697b      	ldr	r3, [r7, #20]
 81094c8:	2b00      	cmp	r3, #0
 81094ca:	d001      	beq.n	81094d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 81094cc:	697b      	ldr	r3, [r7, #20]
 81094ce:	e023      	b.n	8109518 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81094d0:	693b      	ldr	r3, [r7, #16]
 81094d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81094d6:	2b00      	cmp	r3, #0
 81094d8:	d01c      	beq.n	8109514 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81094da:	687b      	ldr	r3, [r7, #4]
 81094dc:	681a      	ldr	r2, [r3, #0]
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81094e2:	041b      	lsls	r3, r3, #16
 81094e4:	4619      	mov	r1, r3
 81094e6:	4610      	mov	r0, r2
 81094e8:	f002 fcfe 	bl	810bee8 <SDMMC_CmdAppCommand>
 81094ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81094ee:	697b      	ldr	r3, [r7, #20]
 81094f0:	2b00      	cmp	r3, #0
 81094f2:	d001      	beq.n	81094f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 81094f4:	697b      	ldr	r3, [r7, #20]
 81094f6:	e00f      	b.n	8109518 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 81094f8:	687b      	ldr	r3, [r7, #4]
 81094fa:	681b      	ldr	r3, [r3, #0]
 81094fc:	2100      	movs	r1, #0
 81094fe:	4618      	mov	r0, r3
 8109500:	f002 fd35 	bl	810bf6e <SDMMC_CmdBusWidth>
 8109504:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109506:	697b      	ldr	r3, [r7, #20]
 8109508:	2b00      	cmp	r3, #0
 810950a:	d001      	beq.n	8109510 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810950c:	697b      	ldr	r3, [r7, #20]
 810950e:	e003      	b.n	8109518 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109510:	2300      	movs	r3, #0
 8109512:	e001      	b.n	8109518 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8109518:	4618      	mov	r0, r3
 810951a:	3718      	adds	r7, #24
 810951c:	46bd      	mov	sp, r7
 810951e:	bd80      	pop	{r7, pc}

08109520 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8109520:	b580      	push	{r7, lr}
 8109522:	b08e      	sub	sp, #56	; 0x38
 8109524:	af00      	add	r7, sp, #0
 8109526:	6078      	str	r0, [r7, #4]
 8109528:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810952a:	f7f9 fb0d 	bl	8102b48 <HAL_GetTick>
 810952e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8109530:	2300      	movs	r3, #0
 8109532:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8109534:	2300      	movs	r3, #0
 8109536:	60bb      	str	r3, [r7, #8]
 8109538:	2300      	movs	r3, #0
 810953a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810953c:	683b      	ldr	r3, [r7, #0]
 810953e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	681b      	ldr	r3, [r3, #0]
 8109544:	2108      	movs	r1, #8
 8109546:	4618      	mov	r0, r3
 8109548:	f002 fc4a 	bl	810bde0 <SDMMC_CmdBlockLength>
 810954c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109550:	2b00      	cmp	r3, #0
 8109552:	d001      	beq.n	8109558 <SD_FindSCR+0x38>
  {
    return errorstate;
 8109554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109556:	e0ad      	b.n	81096b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	681a      	ldr	r2, [r3, #0]
 810955c:	687b      	ldr	r3, [r7, #4]
 810955e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109560:	041b      	lsls	r3, r3, #16
 8109562:	4619      	mov	r1, r3
 8109564:	4610      	mov	r0, r2
 8109566:	f002 fcbf 	bl	810bee8 <SDMMC_CmdAppCommand>
 810956a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810956e:	2b00      	cmp	r3, #0
 8109570:	d001      	beq.n	8109576 <SD_FindSCR+0x56>
  {
    return errorstate;
 8109572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109574:	e09e      	b.n	81096b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109576:	f04f 33ff 	mov.w	r3, #4294967295
 810957a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810957c:	2308      	movs	r3, #8
 810957e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8109580:	2330      	movs	r3, #48	; 0x30
 8109582:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109584:	2302      	movs	r3, #2
 8109586:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109588:	2300      	movs	r3, #0
 810958a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810958c:	2301      	movs	r3, #1
 810958e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109590:	687b      	ldr	r3, [r7, #4]
 8109592:	681b      	ldr	r3, [r3, #0]
 8109594:	f107 0210 	add.w	r2, r7, #16
 8109598:	4611      	mov	r1, r2
 810959a:	4618      	mov	r0, r3
 810959c:	f002 fbf4 	bl	810bd88 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	681b      	ldr	r3, [r3, #0]
 81095a4:	4618      	mov	r0, r3
 81095a6:	f002 fd05 	bl	810bfb4 <SDMMC_CmdSendSCR>
 81095aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095ae:	2b00      	cmp	r3, #0
 81095b0:	d027      	beq.n	8109602 <SD_FindSCR+0xe2>
  {
    return errorstate;
 81095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095b4:	e07e      	b.n	81096b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 81095b6:	687b      	ldr	r3, [r7, #4]
 81095b8:	681b      	ldr	r3, [r3, #0]
 81095ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81095bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81095c0:	2b00      	cmp	r3, #0
 81095c2:	d113      	bne.n	81095ec <SD_FindSCR+0xcc>
 81095c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d110      	bne.n	81095ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	4618      	mov	r0, r3
 81095d0:	f002 fb64 	bl	810bc9c <SDMMC_ReadFIFO>
 81095d4:	4603      	mov	r3, r0
 81095d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	681b      	ldr	r3, [r3, #0]
 81095dc:	4618      	mov	r0, r3
 81095de:	f002 fb5d 	bl	810bc9c <SDMMC_ReadFIFO>
 81095e2:	4603      	mov	r3, r0
 81095e4:	60fb      	str	r3, [r7, #12]
      index++;
 81095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81095e8:	3301      	adds	r3, #1
 81095ea:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81095ec:	f7f9 faac 	bl	8102b48 <HAL_GetTick>
 81095f0:	4602      	mov	r2, r0
 81095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095f4:	1ad3      	subs	r3, r2, r3
 81095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81095fa:	d102      	bne.n	8109602 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81095fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109600:	e058      	b.n	81096b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8109602:	687b      	ldr	r3, [r7, #4]
 8109604:	681b      	ldr	r3, [r3, #0]
 8109606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109608:	f240 532a 	movw	r3, #1322	; 0x52a
 810960c:	4013      	ands	r3, r2
 810960e:	2b00      	cmp	r3, #0
 8109610:	d0d1      	beq.n	81095b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109618:	f003 0308 	and.w	r3, r3, #8
 810961c:	2b00      	cmp	r3, #0
 810961e:	d005      	beq.n	810962c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	681b      	ldr	r3, [r3, #0]
 8109624:	2208      	movs	r2, #8
 8109626:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109628:	2308      	movs	r3, #8
 810962a:	e043      	b.n	81096b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	681b      	ldr	r3, [r3, #0]
 8109630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109632:	f003 0302 	and.w	r3, r3, #2
 8109636:	2b00      	cmp	r3, #0
 8109638:	d005      	beq.n	8109646 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	681b      	ldr	r3, [r3, #0]
 810963e:	2202      	movs	r2, #2
 8109640:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8109642:	2302      	movs	r3, #2
 8109644:	e036      	b.n	81096b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109646:	687b      	ldr	r3, [r7, #4]
 8109648:	681b      	ldr	r3, [r3, #0]
 810964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810964c:	f003 0320 	and.w	r3, r3, #32
 8109650:	2b00      	cmp	r3, #0
 8109652:	d005      	beq.n	8109660 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	681b      	ldr	r3, [r3, #0]
 8109658:	2220      	movs	r2, #32
 810965a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810965c:	2320      	movs	r3, #32
 810965e:	e029      	b.n	81096b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	681b      	ldr	r3, [r3, #0]
 8109664:	4a15      	ldr	r2, [pc, #84]	; (81096bc <SD_FindSCR+0x19c>)
 8109666:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8109668:	68fb      	ldr	r3, [r7, #12]
 810966a:	061a      	lsls	r2, r3, #24
 810966c:	68fb      	ldr	r3, [r7, #12]
 810966e:	021b      	lsls	r3, r3, #8
 8109670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8109674:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8109676:	68fb      	ldr	r3, [r7, #12]
 8109678:	0a1b      	lsrs	r3, r3, #8
 810967a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810967e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8109680:	68fb      	ldr	r3, [r7, #12]
 8109682:	0e1b      	lsrs	r3, r3, #24
 8109684:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8109686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109688:	601a      	str	r2, [r3, #0]
    scr++;
 810968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810968c:	3304      	adds	r3, #4
 810968e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8109690:	68bb      	ldr	r3, [r7, #8]
 8109692:	061a      	lsls	r2, r3, #24
 8109694:	68bb      	ldr	r3, [r7, #8]
 8109696:	021b      	lsls	r3, r3, #8
 8109698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810969c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810969e:	68bb      	ldr	r3, [r7, #8]
 81096a0:	0a1b      	lsrs	r3, r3, #8
 81096a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 81096a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 81096a8:	68bb      	ldr	r3, [r7, #8]
 81096aa:	0e1b      	lsrs	r3, r3, #24
 81096ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 81096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 81096b2:	2300      	movs	r3, #0
}
 81096b4:	4618      	mov	r0, r3
 81096b6:	3738      	adds	r7, #56	; 0x38
 81096b8:	46bd      	mov	sp, r7
 81096ba:	bd80      	pop	{r7, pc}
 81096bc:	18000f3a 	.word	0x18000f3a

081096c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 81096c0:	b580      	push	{r7, lr}
 81096c2:	b082      	sub	sp, #8
 81096c4:	af00      	add	r7, sp, #0
 81096c6:	6078      	str	r0, [r7, #4]
 81096c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	2b00      	cmp	r3, #0
 81096ce:	d101      	bne.n	81096d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 81096d0:	2301      	movs	r3, #1
 81096d2:	e02b      	b.n	810972c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 81096da:	b2db      	uxtb	r3, r3
 81096dc:	2b00      	cmp	r3, #0
 81096de:	d106      	bne.n	81096ee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	2200      	movs	r2, #0
 81096e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 81096e8:	6878      	ldr	r0, [r7, #4]
 81096ea:	f7f9 f86b 	bl	81027c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 81096ee:	687b      	ldr	r3, [r7, #4]
 81096f0:	2202      	movs	r2, #2
 81096f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 81096f6:	687b      	ldr	r3, [r7, #4]
 81096f8:	681a      	ldr	r2, [r3, #0]
 81096fa:	687b      	ldr	r3, [r7, #4]
 81096fc:	3304      	adds	r3, #4
 81096fe:	4619      	mov	r1, r3
 8109700:	4610      	mov	r0, r2
 8109702:	f002 f9db 	bl	810babc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	6818      	ldr	r0, [r3, #0]
 810970a:	687b      	ldr	r3, [r7, #4]
 810970c:	685b      	ldr	r3, [r3, #4]
 810970e:	461a      	mov	r2, r3
 8109710:	6839      	ldr	r1, [r7, #0]
 8109712:	f002 fa30 	bl	810bb76 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8109716:	4b07      	ldr	r3, [pc, #28]	; (8109734 <HAL_SDRAM_Init+0x74>)
 8109718:	681b      	ldr	r3, [r3, #0]
 810971a:	4a06      	ldr	r2, [pc, #24]	; (8109734 <HAL_SDRAM_Init+0x74>)
 810971c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8109720:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	2201      	movs	r2, #1
 8109726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810972a:	2300      	movs	r3, #0
}
 810972c:	4618      	mov	r0, r3
 810972e:	3708      	adds	r7, #8
 8109730:	46bd      	mov	sp, r7
 8109732:	bd80      	pop	{r7, pc}
 8109734:	52004000 	.word	0x52004000

08109738 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8109738:	b580      	push	{r7, lr}
 810973a:	b084      	sub	sp, #16
 810973c:	af00      	add	r7, sp, #0
 810973e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	2b00      	cmp	r3, #0
 8109744:	d101      	bne.n	810974a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8109746:	2301      	movs	r3, #1
 8109748:	e05e      	b.n	8109808 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8109750:	b2db      	uxtb	r3, r3
 8109752:	2b00      	cmp	r3, #0
 8109754:	d106      	bne.n	8109764 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8109756:	687b      	ldr	r3, [r7, #4]
 8109758:	2200      	movs	r2, #0
 810975a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 810975e:	6878      	ldr	r0, [r7, #4]
 8109760:	f7f8 fb24 	bl	8101dac <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	2202      	movs	r2, #2
 8109768:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	681b      	ldr	r3, [r3, #0]
 8109770:	681a      	ldr	r2, [r3, #0]
 8109772:	687b      	ldr	r3, [r7, #4]
 8109774:	681b      	ldr	r3, [r3, #0]
 8109776:	f022 0203 	bic.w	r2, r2, #3
 810977a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	681b      	ldr	r3, [r3, #0]
 8109780:	681b      	ldr	r3, [r3, #0]
 8109782:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8109784:	68fa      	ldr	r2, [r7, #12]
 8109786:	4b22      	ldr	r3, [pc, #136]	; (8109810 <HAL_SPDIFRX_Init+0xd8>)
 8109788:	4013      	ands	r3, r2
 810978a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8109790:	687b      	ldr	r3, [r7, #4]
 8109792:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8109794:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8109796:	687b      	ldr	r3, [r7, #4]
 8109798:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810979a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 81097a0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 81097a6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 81097a8:	687b      	ldr	r3, [r7, #4]
 81097aa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 81097ac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 81097ae:	687b      	ldr	r3, [r7, #4]
 81097b0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 81097b2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 81097b4:	687b      	ldr	r3, [r7, #4]
 81097b6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 81097b8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 81097be:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 81097c4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 81097c6:	68fa      	ldr	r2, [r7, #12]
 81097c8:	4313      	orrs	r3, r2
 81097ca:	60fb      	str	r3, [r7, #12]
             );

  if(hspdif->Init.SymbolClockGen == ENABLE)
 81097cc:	687b      	ldr	r3, [r7, #4]
 81097ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 81097d2:	2b01      	cmp	r3, #1
 81097d4:	d103      	bne.n	81097de <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 81097d6:	68fb      	ldr	r3, [r7, #12]
 81097d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81097dc:	60fb      	str	r3, [r7, #12]
  }

  if(hspdif->Init.BackupSymbolClockGen == ENABLE)
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81097e4:	2b01      	cmp	r3, #1
 81097e6:	d103      	bne.n	81097f0 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 81097e8:	68fb      	ldr	r3, [r7, #12]
 81097ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81097ee:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	681b      	ldr	r3, [r3, #0]
 81097f4:	68fa      	ldr	r2, [r7, #12]
 81097f6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	2200      	movs	r2, #0
 81097fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 81097fe:	687b      	ldr	r3, [r7, #4]
 8109800:	2201      	movs	r2, #1
 8109802:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8109806:	2300      	movs	r3, #0
}
 8109808:	4618      	mov	r0, r3
 810980a:	3710      	adds	r7, #16
 810980c:	46bd      	mov	sp, r7
 810980e:	bd80      	pop	{r7, pc}
 8109810:	ffc88407 	.word	0xffc88407

08109814 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109814:	b580      	push	{r7, lr}
 8109816:	b084      	sub	sp, #16
 8109818:	af00      	add	r7, sp, #0
 810981a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	2b00      	cmp	r3, #0
 8109820:	d101      	bne.n	8109826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8109822:	2301      	movs	r3, #1
 8109824:	e0f1      	b.n	8109a0a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109826:	687b      	ldr	r3, [r7, #4]
 8109828:	2200      	movs	r2, #0
 810982a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	681b      	ldr	r3, [r3, #0]
 8109830:	4a78      	ldr	r2, [pc, #480]	; (8109a14 <HAL_SPI_Init+0x200>)
 8109832:	4293      	cmp	r3, r2
 8109834:	d00f      	beq.n	8109856 <HAL_SPI_Init+0x42>
 8109836:	687b      	ldr	r3, [r7, #4]
 8109838:	681b      	ldr	r3, [r3, #0]
 810983a:	4a77      	ldr	r2, [pc, #476]	; (8109a18 <HAL_SPI_Init+0x204>)
 810983c:	4293      	cmp	r3, r2
 810983e:	d00a      	beq.n	8109856 <HAL_SPI_Init+0x42>
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	681b      	ldr	r3, [r3, #0]
 8109844:	4a75      	ldr	r2, [pc, #468]	; (8109a1c <HAL_SPI_Init+0x208>)
 8109846:	4293      	cmp	r3, r2
 8109848:	d005      	beq.n	8109856 <HAL_SPI_Init+0x42>
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	68db      	ldr	r3, [r3, #12]
 810984e:	2b0f      	cmp	r3, #15
 8109850:	d901      	bls.n	8109856 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8109852:	2301      	movs	r3, #1
 8109854:	e0d9      	b.n	8109a0a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109856:	6878      	ldr	r0, [r7, #4]
 8109858:	f000 f8e2 	bl	8109a20 <SPI_GetPacketSize>
 810985c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	681b      	ldr	r3, [r3, #0]
 8109862:	4a6c      	ldr	r2, [pc, #432]	; (8109a14 <HAL_SPI_Init+0x200>)
 8109864:	4293      	cmp	r3, r2
 8109866:	d00c      	beq.n	8109882 <HAL_SPI_Init+0x6e>
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	681b      	ldr	r3, [r3, #0]
 810986c:	4a6a      	ldr	r2, [pc, #424]	; (8109a18 <HAL_SPI_Init+0x204>)
 810986e:	4293      	cmp	r3, r2
 8109870:	d007      	beq.n	8109882 <HAL_SPI_Init+0x6e>
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	681b      	ldr	r3, [r3, #0]
 8109876:	4a69      	ldr	r2, [pc, #420]	; (8109a1c <HAL_SPI_Init+0x208>)
 8109878:	4293      	cmp	r3, r2
 810987a:	d002      	beq.n	8109882 <HAL_SPI_Init+0x6e>
 810987c:	68fb      	ldr	r3, [r7, #12]
 810987e:	2b08      	cmp	r3, #8
 8109880:	d811      	bhi.n	81098a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109886:	4a63      	ldr	r2, [pc, #396]	; (8109a14 <HAL_SPI_Init+0x200>)
 8109888:	4293      	cmp	r3, r2
 810988a:	d009      	beq.n	81098a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	681b      	ldr	r3, [r3, #0]
 8109890:	4a61      	ldr	r2, [pc, #388]	; (8109a18 <HAL_SPI_Init+0x204>)
 8109892:	4293      	cmp	r3, r2
 8109894:	d004      	beq.n	81098a0 <HAL_SPI_Init+0x8c>
 8109896:	687b      	ldr	r3, [r7, #4]
 8109898:	681b      	ldr	r3, [r3, #0]
 810989a:	4a60      	ldr	r2, [pc, #384]	; (8109a1c <HAL_SPI_Init+0x208>)
 810989c:	4293      	cmp	r3, r2
 810989e:	d104      	bne.n	81098aa <HAL_SPI_Init+0x96>
 81098a0:	68fb      	ldr	r3, [r7, #12]
 81098a2:	2b10      	cmp	r3, #16
 81098a4:	d901      	bls.n	81098aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81098a6:	2301      	movs	r3, #1
 81098a8:	e0af      	b.n	8109a0a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81098aa:	687b      	ldr	r3, [r7, #4]
 81098ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81098b0:	b2db      	uxtb	r3, r3
 81098b2:	2b00      	cmp	r3, #0
 81098b4:	d106      	bne.n	81098c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	2200      	movs	r2, #0
 81098ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81098be:	6878      	ldr	r0, [r7, #4]
 81098c0:	f7f8 fad6 	bl	8101e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	2202      	movs	r2, #2
 81098c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	681b      	ldr	r3, [r3, #0]
 81098d0:	681a      	ldr	r2, [r3, #0]
 81098d2:	687b      	ldr	r3, [r7, #4]
 81098d4:	681b      	ldr	r3, [r3, #0]
 81098d6:	f022 0201 	bic.w	r2, r2, #1
 81098da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	681b      	ldr	r3, [r3, #0]
 81098e0:	689b      	ldr	r3, [r3, #8]
 81098e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81098e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81098e8:	687b      	ldr	r3, [r7, #4]
 81098ea:	699b      	ldr	r3, [r3, #24]
 81098ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81098f0:	d119      	bne.n	8109926 <HAL_SPI_Init+0x112>
 81098f2:	687b      	ldr	r3, [r7, #4]
 81098f4:	685b      	ldr	r3, [r3, #4]
 81098f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81098fa:	d103      	bne.n	8109904 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109900:	2b00      	cmp	r3, #0
 8109902:	d008      	beq.n	8109916 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109904:	687b      	ldr	r3, [r7, #4]
 8109906:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109908:	2b00      	cmp	r3, #0
 810990a:	d10c      	bne.n	8109926 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810990c:	687b      	ldr	r3, [r7, #4]
 810990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109914:	d107      	bne.n	8109926 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109916:	687b      	ldr	r3, [r7, #4]
 8109918:	681b      	ldr	r3, [r3, #0]
 810991a:	681a      	ldr	r2, [r3, #0]
 810991c:	687b      	ldr	r3, [r7, #4]
 810991e:	681b      	ldr	r3, [r3, #0]
 8109920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8109924:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109926:	687b      	ldr	r3, [r7, #4]
 8109928:	69da      	ldr	r2, [r3, #28]
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810992e:	431a      	orrs	r2, r3
 8109930:	68bb      	ldr	r3, [r7, #8]
 8109932:	431a      	orrs	r2, r3
 8109934:	687b      	ldr	r3, [r7, #4]
 8109936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109938:	ea42 0103 	orr.w	r1, r2, r3
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	68da      	ldr	r2, [r3, #12]
 8109940:	687b      	ldr	r3, [r7, #4]
 8109942:	681b      	ldr	r3, [r3, #0]
 8109944:	430a      	orrs	r2, r1
 8109946:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8109948:	687b      	ldr	r3, [r7, #4]
 810994a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810994c:	687b      	ldr	r3, [r7, #4]
 810994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109950:	431a      	orrs	r2, r3
 8109952:	687b      	ldr	r3, [r7, #4]
 8109954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109956:	431a      	orrs	r2, r3
 8109958:	687b      	ldr	r3, [r7, #4]
 810995a:	699b      	ldr	r3, [r3, #24]
 810995c:	431a      	orrs	r2, r3
 810995e:	687b      	ldr	r3, [r7, #4]
 8109960:	691b      	ldr	r3, [r3, #16]
 8109962:	431a      	orrs	r2, r3
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	695b      	ldr	r3, [r3, #20]
 8109968:	431a      	orrs	r2, r3
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	6a1b      	ldr	r3, [r3, #32]
 810996e:	431a      	orrs	r2, r3
 8109970:	687b      	ldr	r3, [r7, #4]
 8109972:	685b      	ldr	r3, [r3, #4]
 8109974:	431a      	orrs	r2, r3
 8109976:	687b      	ldr	r3, [r7, #4]
 8109978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810997a:	431a      	orrs	r2, r3
 810997c:	687b      	ldr	r3, [r7, #4]
 810997e:	689b      	ldr	r3, [r3, #8]
 8109980:	431a      	orrs	r2, r3
 8109982:	687b      	ldr	r3, [r7, #4]
 8109984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109986:	ea42 0103 	orr.w	r1, r2, r3
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810998e:	687b      	ldr	r3, [r7, #4]
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	430a      	orrs	r2, r1
 8109994:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	685b      	ldr	r3, [r3, #4]
 810999a:	2b00      	cmp	r3, #0
 810999c:	d113      	bne.n	81099c6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810999e:	687b      	ldr	r3, [r7, #4]
 81099a0:	681b      	ldr	r3, [r3, #0]
 81099a2:	689b      	ldr	r3, [r3, #8]
 81099a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81099a8:	687b      	ldr	r3, [r7, #4]
 81099aa:	681b      	ldr	r3, [r3, #0]
 81099ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81099b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	681b      	ldr	r3, [r3, #0]
 81099b6:	689b      	ldr	r3, [r3, #8]
 81099b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81099bc:	687b      	ldr	r3, [r7, #4]
 81099be:	681b      	ldr	r3, [r3, #0]
 81099c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81099c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	681b      	ldr	r3, [r3, #0]
 81099ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	681b      	ldr	r3, [r3, #0]
 81099d0:	f022 0201 	bic.w	r2, r2, #1
 81099d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	685b      	ldr	r3, [r3, #4]
 81099da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81099de:	2b00      	cmp	r3, #0
 81099e0:	d00a      	beq.n	81099f8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81099e2:	687b      	ldr	r3, [r7, #4]
 81099e4:	681b      	ldr	r3, [r3, #0]
 81099e6:	68db      	ldr	r3, [r3, #12]
 81099e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81099ec:	687b      	ldr	r3, [r7, #4]
 81099ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81099f0:	687b      	ldr	r3, [r7, #4]
 81099f2:	681b      	ldr	r3, [r3, #0]
 81099f4:	430a      	orrs	r2, r1
 81099f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	2200      	movs	r2, #0
 81099fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8109a00:	687b      	ldr	r3, [r7, #4]
 8109a02:	2201      	movs	r2, #1
 8109a04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8109a08:	2300      	movs	r3, #0
}
 8109a0a:	4618      	mov	r0, r3
 8109a0c:	3710      	adds	r7, #16
 8109a0e:	46bd      	mov	sp, r7
 8109a10:	bd80      	pop	{r7, pc}
 8109a12:	bf00      	nop
 8109a14:	40013000 	.word	0x40013000
 8109a18:	40003800 	.word	0x40003800
 8109a1c:	40003c00 	.word	0x40003c00

08109a20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8109a20:	b480      	push	{r7}
 8109a22:	b085      	sub	sp, #20
 8109a24:	af00      	add	r7, sp, #0
 8109a26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109a2c:	095b      	lsrs	r3, r3, #5
 8109a2e:	3301      	adds	r3, #1
 8109a30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8109a32:	687b      	ldr	r3, [r7, #4]
 8109a34:	68db      	ldr	r3, [r3, #12]
 8109a36:	3301      	adds	r3, #1
 8109a38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8109a3a:	68bb      	ldr	r3, [r7, #8]
 8109a3c:	3307      	adds	r3, #7
 8109a3e:	08db      	lsrs	r3, r3, #3
 8109a40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8109a42:	68bb      	ldr	r3, [r7, #8]
 8109a44:	68fa      	ldr	r2, [r7, #12]
 8109a46:	fb02 f303 	mul.w	r3, r2, r3
}
 8109a4a:	4618      	mov	r0, r3
 8109a4c:	3714      	adds	r7, #20
 8109a4e:	46bd      	mov	sp, r7
 8109a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a54:	4770      	bx	lr

08109a56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109a56:	b580      	push	{r7, lr}
 8109a58:	b082      	sub	sp, #8
 8109a5a:	af00      	add	r7, sp, #0
 8109a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	2b00      	cmp	r3, #0
 8109a62:	d101      	bne.n	8109a68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8109a64:	2301      	movs	r3, #1
 8109a66:	e049      	b.n	8109afc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109a6e:	b2db      	uxtb	r3, r3
 8109a70:	2b00      	cmp	r3, #0
 8109a72:	d106      	bne.n	8109a82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109a74:	687b      	ldr	r3, [r7, #4]
 8109a76:	2200      	movs	r2, #0
 8109a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8109a7c:	6878      	ldr	r0, [r7, #4]
 8109a7e:	f7f8 fb19 	bl	81020b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109a82:	687b      	ldr	r3, [r7, #4]
 8109a84:	2202      	movs	r2, #2
 8109a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	681a      	ldr	r2, [r3, #0]
 8109a8e:	687b      	ldr	r3, [r7, #4]
 8109a90:	3304      	adds	r3, #4
 8109a92:	4619      	mov	r1, r3
 8109a94:	4610      	mov	r0, r2
 8109a96:	f000 fa03 	bl	8109ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109a9a:	687b      	ldr	r3, [r7, #4]
 8109a9c:	2201      	movs	r2, #1
 8109a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109aa2:	687b      	ldr	r3, [r7, #4]
 8109aa4:	2201      	movs	r2, #1
 8109aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	2201      	movs	r2, #1
 8109aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	2201      	movs	r2, #1
 8109ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109aba:	687b      	ldr	r3, [r7, #4]
 8109abc:	2201      	movs	r2, #1
 8109abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8109ac2:	687b      	ldr	r3, [r7, #4]
 8109ac4:	2201      	movs	r2, #1
 8109ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	2201      	movs	r2, #1
 8109ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	2201      	movs	r2, #1
 8109ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	2201      	movs	r2, #1
 8109ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	2201      	movs	r2, #1
 8109ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	2201      	movs	r2, #1
 8109aee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	2201      	movs	r2, #1
 8109af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109afa:	2300      	movs	r3, #0
}
 8109afc:	4618      	mov	r0, r3
 8109afe:	3708      	adds	r7, #8
 8109b00:	46bd      	mov	sp, r7
 8109b02:	bd80      	pop	{r7, pc}

08109b04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8109b04:	b580      	push	{r7, lr}
 8109b06:	b082      	sub	sp, #8
 8109b08:	af00      	add	r7, sp, #0
 8109b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109b0c:	687b      	ldr	r3, [r7, #4]
 8109b0e:	2b00      	cmp	r3, #0
 8109b10:	d101      	bne.n	8109b16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8109b12:	2301      	movs	r3, #1
 8109b14:	e049      	b.n	8109baa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109b16:	687b      	ldr	r3, [r7, #4]
 8109b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109b1c:	b2db      	uxtb	r3, r3
 8109b1e:	2b00      	cmp	r3, #0
 8109b20:	d106      	bne.n	8109b30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109b22:	687b      	ldr	r3, [r7, #4]
 8109b24:	2200      	movs	r2, #0
 8109b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8109b2a:	6878      	ldr	r0, [r7, #4]
 8109b2c:	f7f8 faa0 	bl	8102070 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	2202      	movs	r2, #2
 8109b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8109b38:	687b      	ldr	r3, [r7, #4]
 8109b3a:	681a      	ldr	r2, [r3, #0]
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	3304      	adds	r3, #4
 8109b40:	4619      	mov	r1, r3
 8109b42:	4610      	mov	r0, r2
 8109b44:	f000 f9ac 	bl	8109ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109b48:	687b      	ldr	r3, [r7, #4]
 8109b4a:	2201      	movs	r2, #1
 8109b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	2201      	movs	r2, #1
 8109b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109b58:	687b      	ldr	r3, [r7, #4]
 8109b5a:	2201      	movs	r2, #1
 8109b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	2201      	movs	r2, #1
 8109b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109b68:	687b      	ldr	r3, [r7, #4]
 8109b6a:	2201      	movs	r2, #1
 8109b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8109b70:	687b      	ldr	r3, [r7, #4]
 8109b72:	2201      	movs	r2, #1
 8109b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109b78:	687b      	ldr	r3, [r7, #4]
 8109b7a:	2201      	movs	r2, #1
 8109b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109b80:	687b      	ldr	r3, [r7, #4]
 8109b82:	2201      	movs	r2, #1
 8109b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	2201      	movs	r2, #1
 8109b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	2201      	movs	r2, #1
 8109b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109b98:	687b      	ldr	r3, [r7, #4]
 8109b9a:	2201      	movs	r2, #1
 8109b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109ba0:	687b      	ldr	r3, [r7, #4]
 8109ba2:	2201      	movs	r2, #1
 8109ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109ba8:	2300      	movs	r3, #0
}
 8109baa:	4618      	mov	r0, r3
 8109bac:	3708      	adds	r7, #8
 8109bae:	46bd      	mov	sp, r7
 8109bb0:	bd80      	pop	{r7, pc}

08109bb2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8109bb2:	b580      	push	{r7, lr}
 8109bb4:	b082      	sub	sp, #8
 8109bb6:	af00      	add	r7, sp, #0
 8109bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109bba:	687b      	ldr	r3, [r7, #4]
 8109bbc:	2b00      	cmp	r3, #0
 8109bbe:	d101      	bne.n	8109bc4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8109bc0:	2301      	movs	r3, #1
 8109bc2:	e049      	b.n	8109c58 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109bc4:	687b      	ldr	r3, [r7, #4]
 8109bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109bca:	b2db      	uxtb	r3, r3
 8109bcc:	2b00      	cmp	r3, #0
 8109bce:	d106      	bne.n	8109bde <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	2200      	movs	r2, #0
 8109bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8109bd8:	6878      	ldr	r0, [r7, #4]
 8109bda:	f000 f841 	bl	8109c60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	2202      	movs	r2, #2
 8109be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	681a      	ldr	r2, [r3, #0]
 8109bea:	687b      	ldr	r3, [r7, #4]
 8109bec:	3304      	adds	r3, #4
 8109bee:	4619      	mov	r1, r3
 8109bf0:	4610      	mov	r0, r2
 8109bf2:	f000 f955 	bl	8109ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109bf6:	687b      	ldr	r3, [r7, #4]
 8109bf8:	2201      	movs	r2, #1
 8109bfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109bfe:	687b      	ldr	r3, [r7, #4]
 8109c00:	2201      	movs	r2, #1
 8109c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	2201      	movs	r2, #1
 8109c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8109c0e:	687b      	ldr	r3, [r7, #4]
 8109c10:	2201      	movs	r2, #1
 8109c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	2201      	movs	r2, #1
 8109c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	2201      	movs	r2, #1
 8109c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109c26:	687b      	ldr	r3, [r7, #4]
 8109c28:	2201      	movs	r2, #1
 8109c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109c2e:	687b      	ldr	r3, [r7, #4]
 8109c30:	2201      	movs	r2, #1
 8109c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109c36:	687b      	ldr	r3, [r7, #4]
 8109c38:	2201      	movs	r2, #1
 8109c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	2201      	movs	r2, #1
 8109c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109c46:	687b      	ldr	r3, [r7, #4]
 8109c48:	2201      	movs	r2, #1
 8109c4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109c4e:	687b      	ldr	r3, [r7, #4]
 8109c50:	2201      	movs	r2, #1
 8109c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109c56:	2300      	movs	r3, #0
}
 8109c58:	4618      	mov	r0, r3
 8109c5a:	3708      	adds	r7, #8
 8109c5c:	46bd      	mov	sp, r7
 8109c5e:	bd80      	pop	{r7, pc}

08109c60 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8109c60:	b480      	push	{r7}
 8109c62:	b083      	sub	sp, #12
 8109c64:	af00      	add	r7, sp, #0
 8109c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8109c68:	bf00      	nop
 8109c6a:	370c      	adds	r7, #12
 8109c6c:	46bd      	mov	sp, r7
 8109c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c72:	4770      	bx	lr

08109c74 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8109c74:	b580      	push	{r7, lr}
 8109c76:	b086      	sub	sp, #24
 8109c78:	af00      	add	r7, sp, #0
 8109c7a:	60f8      	str	r0, [r7, #12]
 8109c7c:	60b9      	str	r1, [r7, #8]
 8109c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109c80:	2300      	movs	r3, #0
 8109c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109c84:	68fb      	ldr	r3, [r7, #12]
 8109c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109c8a:	2b01      	cmp	r3, #1
 8109c8c:	d101      	bne.n	8109c92 <HAL_TIM_OC_ConfigChannel+0x1e>
 8109c8e:	2302      	movs	r3, #2
 8109c90:	e066      	b.n	8109d60 <HAL_TIM_OC_ConfigChannel+0xec>
 8109c92:	68fb      	ldr	r3, [r7, #12]
 8109c94:	2201      	movs	r2, #1
 8109c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	2b14      	cmp	r3, #20
 8109c9e:	d857      	bhi.n	8109d50 <HAL_TIM_OC_ConfigChannel+0xdc>
 8109ca0:	a201      	add	r2, pc, #4	; (adr r2, 8109ca8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8109ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ca6:	bf00      	nop
 8109ca8:	08109cfd 	.word	0x08109cfd
 8109cac:	08109d51 	.word	0x08109d51
 8109cb0:	08109d51 	.word	0x08109d51
 8109cb4:	08109d51 	.word	0x08109d51
 8109cb8:	08109d0b 	.word	0x08109d0b
 8109cbc:	08109d51 	.word	0x08109d51
 8109cc0:	08109d51 	.word	0x08109d51
 8109cc4:	08109d51 	.word	0x08109d51
 8109cc8:	08109d19 	.word	0x08109d19
 8109ccc:	08109d51 	.word	0x08109d51
 8109cd0:	08109d51 	.word	0x08109d51
 8109cd4:	08109d51 	.word	0x08109d51
 8109cd8:	08109d27 	.word	0x08109d27
 8109cdc:	08109d51 	.word	0x08109d51
 8109ce0:	08109d51 	.word	0x08109d51
 8109ce4:	08109d51 	.word	0x08109d51
 8109ce8:	08109d35 	.word	0x08109d35
 8109cec:	08109d51 	.word	0x08109d51
 8109cf0:	08109d51 	.word	0x08109d51
 8109cf4:	08109d51 	.word	0x08109d51
 8109cf8:	08109d43 	.word	0x08109d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8109cfc:	68fb      	ldr	r3, [r7, #12]
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	68b9      	ldr	r1, [r7, #8]
 8109d02:	4618      	mov	r0, r3
 8109d04:	f000 f966 	bl	8109fd4 <TIM_OC1_SetConfig>
      break;
 8109d08:	e025      	b.n	8109d56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8109d0a:	68fb      	ldr	r3, [r7, #12]
 8109d0c:	681b      	ldr	r3, [r3, #0]
 8109d0e:	68b9      	ldr	r1, [r7, #8]
 8109d10:	4618      	mov	r0, r3
 8109d12:	f000 f9ef 	bl	810a0f4 <TIM_OC2_SetConfig>
      break;
 8109d16:	e01e      	b.n	8109d56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8109d18:	68fb      	ldr	r3, [r7, #12]
 8109d1a:	681b      	ldr	r3, [r3, #0]
 8109d1c:	68b9      	ldr	r1, [r7, #8]
 8109d1e:	4618      	mov	r0, r3
 8109d20:	f000 fa72 	bl	810a208 <TIM_OC3_SetConfig>
      break;
 8109d24:	e017      	b.n	8109d56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8109d26:	68fb      	ldr	r3, [r7, #12]
 8109d28:	681b      	ldr	r3, [r3, #0]
 8109d2a:	68b9      	ldr	r1, [r7, #8]
 8109d2c:	4618      	mov	r0, r3
 8109d2e:	f000 faf3 	bl	810a318 <TIM_OC4_SetConfig>
      break;
 8109d32:	e010      	b.n	8109d56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8109d34:	68fb      	ldr	r3, [r7, #12]
 8109d36:	681b      	ldr	r3, [r3, #0]
 8109d38:	68b9      	ldr	r1, [r7, #8]
 8109d3a:	4618      	mov	r0, r3
 8109d3c:	f000 fb56 	bl	810a3ec <TIM_OC5_SetConfig>
      break;
 8109d40:	e009      	b.n	8109d56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8109d42:	68fb      	ldr	r3, [r7, #12]
 8109d44:	681b      	ldr	r3, [r3, #0]
 8109d46:	68b9      	ldr	r1, [r7, #8]
 8109d48:	4618      	mov	r0, r3
 8109d4a:	f000 fbb3 	bl	810a4b4 <TIM_OC6_SetConfig>
      break;
 8109d4e:	e002      	b.n	8109d56 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8109d50:	2301      	movs	r3, #1
 8109d52:	75fb      	strb	r3, [r7, #23]
      break;
 8109d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8109d56:	68fb      	ldr	r3, [r7, #12]
 8109d58:	2200      	movs	r2, #0
 8109d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8109d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8109d60:	4618      	mov	r0, r3
 8109d62:	3718      	adds	r7, #24
 8109d64:	46bd      	mov	sp, r7
 8109d66:	bd80      	pop	{r7, pc}

08109d68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8109d68:	b580      	push	{r7, lr}
 8109d6a:	b086      	sub	sp, #24
 8109d6c:	af00      	add	r7, sp, #0
 8109d6e:	60f8      	str	r0, [r7, #12]
 8109d70:	60b9      	str	r1, [r7, #8]
 8109d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109d74:	2300      	movs	r3, #0
 8109d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109d78:	68fb      	ldr	r3, [r7, #12]
 8109d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109d7e:	2b01      	cmp	r3, #1
 8109d80:	d101      	bne.n	8109d86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8109d82:	2302      	movs	r3, #2
 8109d84:	e088      	b.n	8109e98 <HAL_TIM_IC_ConfigChannel+0x130>
 8109d86:	68fb      	ldr	r3, [r7, #12]
 8109d88:	2201      	movs	r2, #1
 8109d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	2b00      	cmp	r3, #0
 8109d92:	d11b      	bne.n	8109dcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8109d94:	68fb      	ldr	r3, [r7, #12]
 8109d96:	6818      	ldr	r0, [r3, #0]
 8109d98:	68bb      	ldr	r3, [r7, #8]
 8109d9a:	6819      	ldr	r1, [r3, #0]
 8109d9c:	68bb      	ldr	r3, [r7, #8]
 8109d9e:	685a      	ldr	r2, [r3, #4]
 8109da0:	68bb      	ldr	r3, [r7, #8]
 8109da2:	68db      	ldr	r3, [r3, #12]
 8109da4:	f000 fbec 	bl	810a580 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8109da8:	68fb      	ldr	r3, [r7, #12]
 8109daa:	681b      	ldr	r3, [r3, #0]
 8109dac:	699a      	ldr	r2, [r3, #24]
 8109dae:	68fb      	ldr	r3, [r7, #12]
 8109db0:	681b      	ldr	r3, [r3, #0]
 8109db2:	f022 020c 	bic.w	r2, r2, #12
 8109db6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8109db8:	68fb      	ldr	r3, [r7, #12]
 8109dba:	681b      	ldr	r3, [r3, #0]
 8109dbc:	6999      	ldr	r1, [r3, #24]
 8109dbe:	68bb      	ldr	r3, [r7, #8]
 8109dc0:	689a      	ldr	r2, [r3, #8]
 8109dc2:	68fb      	ldr	r3, [r7, #12]
 8109dc4:	681b      	ldr	r3, [r3, #0]
 8109dc6:	430a      	orrs	r2, r1
 8109dc8:	619a      	str	r2, [r3, #24]
 8109dca:	e060      	b.n	8109e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	2b04      	cmp	r3, #4
 8109dd0:	d11c      	bne.n	8109e0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8109dd2:	68fb      	ldr	r3, [r7, #12]
 8109dd4:	6818      	ldr	r0, [r3, #0]
 8109dd6:	68bb      	ldr	r3, [r7, #8]
 8109dd8:	6819      	ldr	r1, [r3, #0]
 8109dda:	68bb      	ldr	r3, [r7, #8]
 8109ddc:	685a      	ldr	r2, [r3, #4]
 8109dde:	68bb      	ldr	r3, [r7, #8]
 8109de0:	68db      	ldr	r3, [r3, #12]
 8109de2:	f000 fc41 	bl	810a668 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8109de6:	68fb      	ldr	r3, [r7, #12]
 8109de8:	681b      	ldr	r3, [r3, #0]
 8109dea:	699a      	ldr	r2, [r3, #24]
 8109dec:	68fb      	ldr	r3, [r7, #12]
 8109dee:	681b      	ldr	r3, [r3, #0]
 8109df0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8109df4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8109df6:	68fb      	ldr	r3, [r7, #12]
 8109df8:	681b      	ldr	r3, [r3, #0]
 8109dfa:	6999      	ldr	r1, [r3, #24]
 8109dfc:	68bb      	ldr	r3, [r7, #8]
 8109dfe:	689b      	ldr	r3, [r3, #8]
 8109e00:	021a      	lsls	r2, r3, #8
 8109e02:	68fb      	ldr	r3, [r7, #12]
 8109e04:	681b      	ldr	r3, [r3, #0]
 8109e06:	430a      	orrs	r2, r1
 8109e08:	619a      	str	r2, [r3, #24]
 8109e0a:	e040      	b.n	8109e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8109e0c:	687b      	ldr	r3, [r7, #4]
 8109e0e:	2b08      	cmp	r3, #8
 8109e10:	d11b      	bne.n	8109e4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8109e12:	68fb      	ldr	r3, [r7, #12]
 8109e14:	6818      	ldr	r0, [r3, #0]
 8109e16:	68bb      	ldr	r3, [r7, #8]
 8109e18:	6819      	ldr	r1, [r3, #0]
 8109e1a:	68bb      	ldr	r3, [r7, #8]
 8109e1c:	685a      	ldr	r2, [r3, #4]
 8109e1e:	68bb      	ldr	r3, [r7, #8]
 8109e20:	68db      	ldr	r3, [r3, #12]
 8109e22:	f000 fc5e 	bl	810a6e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8109e26:	68fb      	ldr	r3, [r7, #12]
 8109e28:	681b      	ldr	r3, [r3, #0]
 8109e2a:	69da      	ldr	r2, [r3, #28]
 8109e2c:	68fb      	ldr	r3, [r7, #12]
 8109e2e:	681b      	ldr	r3, [r3, #0]
 8109e30:	f022 020c 	bic.w	r2, r2, #12
 8109e34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8109e36:	68fb      	ldr	r3, [r7, #12]
 8109e38:	681b      	ldr	r3, [r3, #0]
 8109e3a:	69d9      	ldr	r1, [r3, #28]
 8109e3c:	68bb      	ldr	r3, [r7, #8]
 8109e3e:	689a      	ldr	r2, [r3, #8]
 8109e40:	68fb      	ldr	r3, [r7, #12]
 8109e42:	681b      	ldr	r3, [r3, #0]
 8109e44:	430a      	orrs	r2, r1
 8109e46:	61da      	str	r2, [r3, #28]
 8109e48:	e021      	b.n	8109e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8109e4a:	687b      	ldr	r3, [r7, #4]
 8109e4c:	2b0c      	cmp	r3, #12
 8109e4e:	d11c      	bne.n	8109e8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8109e50:	68fb      	ldr	r3, [r7, #12]
 8109e52:	6818      	ldr	r0, [r3, #0]
 8109e54:	68bb      	ldr	r3, [r7, #8]
 8109e56:	6819      	ldr	r1, [r3, #0]
 8109e58:	68bb      	ldr	r3, [r7, #8]
 8109e5a:	685a      	ldr	r2, [r3, #4]
 8109e5c:	68bb      	ldr	r3, [r7, #8]
 8109e5e:	68db      	ldr	r3, [r3, #12]
 8109e60:	f000 fc7b 	bl	810a75a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8109e64:	68fb      	ldr	r3, [r7, #12]
 8109e66:	681b      	ldr	r3, [r3, #0]
 8109e68:	69da      	ldr	r2, [r3, #28]
 8109e6a:	68fb      	ldr	r3, [r7, #12]
 8109e6c:	681b      	ldr	r3, [r3, #0]
 8109e6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8109e72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8109e74:	68fb      	ldr	r3, [r7, #12]
 8109e76:	681b      	ldr	r3, [r3, #0]
 8109e78:	69d9      	ldr	r1, [r3, #28]
 8109e7a:	68bb      	ldr	r3, [r7, #8]
 8109e7c:	689b      	ldr	r3, [r3, #8]
 8109e7e:	021a      	lsls	r2, r3, #8
 8109e80:	68fb      	ldr	r3, [r7, #12]
 8109e82:	681b      	ldr	r3, [r3, #0]
 8109e84:	430a      	orrs	r2, r1
 8109e86:	61da      	str	r2, [r3, #28]
 8109e88:	e001      	b.n	8109e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8109e8a:	2301      	movs	r3, #1
 8109e8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8109e8e:	68fb      	ldr	r3, [r7, #12]
 8109e90:	2200      	movs	r2, #0
 8109e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8109e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8109e98:	4618      	mov	r0, r3
 8109e9a:	3718      	adds	r7, #24
 8109e9c:	46bd      	mov	sp, r7
 8109e9e:	bd80      	pop	{r7, pc}

08109ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8109ea0:	b480      	push	{r7}
 8109ea2:	b085      	sub	sp, #20
 8109ea4:	af00      	add	r7, sp, #0
 8109ea6:	6078      	str	r0, [r7, #4]
 8109ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109eaa:	687b      	ldr	r3, [r7, #4]
 8109eac:	681b      	ldr	r3, [r3, #0]
 8109eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109eb0:	687b      	ldr	r3, [r7, #4]
 8109eb2:	4a40      	ldr	r2, [pc, #256]	; (8109fb4 <TIM_Base_SetConfig+0x114>)
 8109eb4:	4293      	cmp	r3, r2
 8109eb6:	d013      	beq.n	8109ee0 <TIM_Base_SetConfig+0x40>
 8109eb8:	687b      	ldr	r3, [r7, #4]
 8109eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109ebe:	d00f      	beq.n	8109ee0 <TIM_Base_SetConfig+0x40>
 8109ec0:	687b      	ldr	r3, [r7, #4]
 8109ec2:	4a3d      	ldr	r2, [pc, #244]	; (8109fb8 <TIM_Base_SetConfig+0x118>)
 8109ec4:	4293      	cmp	r3, r2
 8109ec6:	d00b      	beq.n	8109ee0 <TIM_Base_SetConfig+0x40>
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	4a3c      	ldr	r2, [pc, #240]	; (8109fbc <TIM_Base_SetConfig+0x11c>)
 8109ecc:	4293      	cmp	r3, r2
 8109ece:	d007      	beq.n	8109ee0 <TIM_Base_SetConfig+0x40>
 8109ed0:	687b      	ldr	r3, [r7, #4]
 8109ed2:	4a3b      	ldr	r2, [pc, #236]	; (8109fc0 <TIM_Base_SetConfig+0x120>)
 8109ed4:	4293      	cmp	r3, r2
 8109ed6:	d003      	beq.n	8109ee0 <TIM_Base_SetConfig+0x40>
 8109ed8:	687b      	ldr	r3, [r7, #4]
 8109eda:	4a3a      	ldr	r2, [pc, #232]	; (8109fc4 <TIM_Base_SetConfig+0x124>)
 8109edc:	4293      	cmp	r3, r2
 8109ede:	d108      	bne.n	8109ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109ee0:	68fb      	ldr	r3, [r7, #12]
 8109ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109ee8:	683b      	ldr	r3, [r7, #0]
 8109eea:	685b      	ldr	r3, [r3, #4]
 8109eec:	68fa      	ldr	r2, [r7, #12]
 8109eee:	4313      	orrs	r3, r2
 8109ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109ef2:	687b      	ldr	r3, [r7, #4]
 8109ef4:	4a2f      	ldr	r2, [pc, #188]	; (8109fb4 <TIM_Base_SetConfig+0x114>)
 8109ef6:	4293      	cmp	r3, r2
 8109ef8:	d01f      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109efa:	687b      	ldr	r3, [r7, #4]
 8109efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109f00:	d01b      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f02:	687b      	ldr	r3, [r7, #4]
 8109f04:	4a2c      	ldr	r2, [pc, #176]	; (8109fb8 <TIM_Base_SetConfig+0x118>)
 8109f06:	4293      	cmp	r3, r2
 8109f08:	d017      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f0a:	687b      	ldr	r3, [r7, #4]
 8109f0c:	4a2b      	ldr	r2, [pc, #172]	; (8109fbc <TIM_Base_SetConfig+0x11c>)
 8109f0e:	4293      	cmp	r3, r2
 8109f10:	d013      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f12:	687b      	ldr	r3, [r7, #4]
 8109f14:	4a2a      	ldr	r2, [pc, #168]	; (8109fc0 <TIM_Base_SetConfig+0x120>)
 8109f16:	4293      	cmp	r3, r2
 8109f18:	d00f      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f1a:	687b      	ldr	r3, [r7, #4]
 8109f1c:	4a29      	ldr	r2, [pc, #164]	; (8109fc4 <TIM_Base_SetConfig+0x124>)
 8109f1e:	4293      	cmp	r3, r2
 8109f20:	d00b      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f22:	687b      	ldr	r3, [r7, #4]
 8109f24:	4a28      	ldr	r2, [pc, #160]	; (8109fc8 <TIM_Base_SetConfig+0x128>)
 8109f26:	4293      	cmp	r3, r2
 8109f28:	d007      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f2a:	687b      	ldr	r3, [r7, #4]
 8109f2c:	4a27      	ldr	r2, [pc, #156]	; (8109fcc <TIM_Base_SetConfig+0x12c>)
 8109f2e:	4293      	cmp	r3, r2
 8109f30:	d003      	beq.n	8109f3a <TIM_Base_SetConfig+0x9a>
 8109f32:	687b      	ldr	r3, [r7, #4]
 8109f34:	4a26      	ldr	r2, [pc, #152]	; (8109fd0 <TIM_Base_SetConfig+0x130>)
 8109f36:	4293      	cmp	r3, r2
 8109f38:	d108      	bne.n	8109f4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109f3a:	68fb      	ldr	r3, [r7, #12]
 8109f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109f42:	683b      	ldr	r3, [r7, #0]
 8109f44:	68db      	ldr	r3, [r3, #12]
 8109f46:	68fa      	ldr	r2, [r7, #12]
 8109f48:	4313      	orrs	r3, r2
 8109f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109f4c:	68fb      	ldr	r3, [r7, #12]
 8109f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8109f52:	683b      	ldr	r3, [r7, #0]
 8109f54:	695b      	ldr	r3, [r3, #20]
 8109f56:	4313      	orrs	r3, r2
 8109f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109f5a:	687b      	ldr	r3, [r7, #4]
 8109f5c:	68fa      	ldr	r2, [r7, #12]
 8109f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109f60:	683b      	ldr	r3, [r7, #0]
 8109f62:	689a      	ldr	r2, [r3, #8]
 8109f64:	687b      	ldr	r3, [r7, #4]
 8109f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109f68:	683b      	ldr	r3, [r7, #0]
 8109f6a:	681a      	ldr	r2, [r3, #0]
 8109f6c:	687b      	ldr	r3, [r7, #4]
 8109f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109f70:	687b      	ldr	r3, [r7, #4]
 8109f72:	4a10      	ldr	r2, [pc, #64]	; (8109fb4 <TIM_Base_SetConfig+0x114>)
 8109f74:	4293      	cmp	r3, r2
 8109f76:	d00f      	beq.n	8109f98 <TIM_Base_SetConfig+0xf8>
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	4a12      	ldr	r2, [pc, #72]	; (8109fc4 <TIM_Base_SetConfig+0x124>)
 8109f7c:	4293      	cmp	r3, r2
 8109f7e:	d00b      	beq.n	8109f98 <TIM_Base_SetConfig+0xf8>
 8109f80:	687b      	ldr	r3, [r7, #4]
 8109f82:	4a11      	ldr	r2, [pc, #68]	; (8109fc8 <TIM_Base_SetConfig+0x128>)
 8109f84:	4293      	cmp	r3, r2
 8109f86:	d007      	beq.n	8109f98 <TIM_Base_SetConfig+0xf8>
 8109f88:	687b      	ldr	r3, [r7, #4]
 8109f8a:	4a10      	ldr	r2, [pc, #64]	; (8109fcc <TIM_Base_SetConfig+0x12c>)
 8109f8c:	4293      	cmp	r3, r2
 8109f8e:	d003      	beq.n	8109f98 <TIM_Base_SetConfig+0xf8>
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	4a0f      	ldr	r2, [pc, #60]	; (8109fd0 <TIM_Base_SetConfig+0x130>)
 8109f94:	4293      	cmp	r3, r2
 8109f96:	d103      	bne.n	8109fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109f98:	683b      	ldr	r3, [r7, #0]
 8109f9a:	691a      	ldr	r2, [r3, #16]
 8109f9c:	687b      	ldr	r3, [r7, #4]
 8109f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109fa0:	687b      	ldr	r3, [r7, #4]
 8109fa2:	2201      	movs	r2, #1
 8109fa4:	615a      	str	r2, [r3, #20]
}
 8109fa6:	bf00      	nop
 8109fa8:	3714      	adds	r7, #20
 8109faa:	46bd      	mov	sp, r7
 8109fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fb0:	4770      	bx	lr
 8109fb2:	bf00      	nop
 8109fb4:	40010000 	.word	0x40010000
 8109fb8:	40000400 	.word	0x40000400
 8109fbc:	40000800 	.word	0x40000800
 8109fc0:	40000c00 	.word	0x40000c00
 8109fc4:	40010400 	.word	0x40010400
 8109fc8:	40014000 	.word	0x40014000
 8109fcc:	40014400 	.word	0x40014400
 8109fd0:	40014800 	.word	0x40014800

08109fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8109fd4:	b480      	push	{r7}
 8109fd6:	b087      	sub	sp, #28
 8109fd8:	af00      	add	r7, sp, #0
 8109fda:	6078      	str	r0, [r7, #4]
 8109fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109fde:	687b      	ldr	r3, [r7, #4]
 8109fe0:	6a1b      	ldr	r3, [r3, #32]
 8109fe2:	f023 0201 	bic.w	r2, r3, #1
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	6a1b      	ldr	r3, [r3, #32]
 8109fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109ff0:	687b      	ldr	r3, [r7, #4]
 8109ff2:	685b      	ldr	r3, [r3, #4]
 8109ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	699b      	ldr	r3, [r3, #24]
 8109ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109ffc:	68fb      	ldr	r3, [r7, #12]
 8109ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810a008:	68fb      	ldr	r3, [r7, #12]
 810a00a:	f023 0303 	bic.w	r3, r3, #3
 810a00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a010:	683b      	ldr	r3, [r7, #0]
 810a012:	681b      	ldr	r3, [r3, #0]
 810a014:	68fa      	ldr	r2, [r7, #12]
 810a016:	4313      	orrs	r3, r2
 810a018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810a01a:	697b      	ldr	r3, [r7, #20]
 810a01c:	f023 0302 	bic.w	r3, r3, #2
 810a020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810a022:	683b      	ldr	r3, [r7, #0]
 810a024:	689b      	ldr	r3, [r3, #8]
 810a026:	697a      	ldr	r2, [r7, #20]
 810a028:	4313      	orrs	r3, r2
 810a02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	4a2c      	ldr	r2, [pc, #176]	; (810a0e0 <TIM_OC1_SetConfig+0x10c>)
 810a030:	4293      	cmp	r3, r2
 810a032:	d00f      	beq.n	810a054 <TIM_OC1_SetConfig+0x80>
 810a034:	687b      	ldr	r3, [r7, #4]
 810a036:	4a2b      	ldr	r2, [pc, #172]	; (810a0e4 <TIM_OC1_SetConfig+0x110>)
 810a038:	4293      	cmp	r3, r2
 810a03a:	d00b      	beq.n	810a054 <TIM_OC1_SetConfig+0x80>
 810a03c:	687b      	ldr	r3, [r7, #4]
 810a03e:	4a2a      	ldr	r2, [pc, #168]	; (810a0e8 <TIM_OC1_SetConfig+0x114>)
 810a040:	4293      	cmp	r3, r2
 810a042:	d007      	beq.n	810a054 <TIM_OC1_SetConfig+0x80>
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	4a29      	ldr	r2, [pc, #164]	; (810a0ec <TIM_OC1_SetConfig+0x118>)
 810a048:	4293      	cmp	r3, r2
 810a04a:	d003      	beq.n	810a054 <TIM_OC1_SetConfig+0x80>
 810a04c:	687b      	ldr	r3, [r7, #4]
 810a04e:	4a28      	ldr	r2, [pc, #160]	; (810a0f0 <TIM_OC1_SetConfig+0x11c>)
 810a050:	4293      	cmp	r3, r2
 810a052:	d10c      	bne.n	810a06e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a054:	697b      	ldr	r3, [r7, #20]
 810a056:	f023 0308 	bic.w	r3, r3, #8
 810a05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a05c:	683b      	ldr	r3, [r7, #0]
 810a05e:	68db      	ldr	r3, [r3, #12]
 810a060:	697a      	ldr	r2, [r7, #20]
 810a062:	4313      	orrs	r3, r2
 810a064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a066:	697b      	ldr	r3, [r7, #20]
 810a068:	f023 0304 	bic.w	r3, r3, #4
 810a06c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	4a1b      	ldr	r2, [pc, #108]	; (810a0e0 <TIM_OC1_SetConfig+0x10c>)
 810a072:	4293      	cmp	r3, r2
 810a074:	d00f      	beq.n	810a096 <TIM_OC1_SetConfig+0xc2>
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	4a1a      	ldr	r2, [pc, #104]	; (810a0e4 <TIM_OC1_SetConfig+0x110>)
 810a07a:	4293      	cmp	r3, r2
 810a07c:	d00b      	beq.n	810a096 <TIM_OC1_SetConfig+0xc2>
 810a07e:	687b      	ldr	r3, [r7, #4]
 810a080:	4a19      	ldr	r2, [pc, #100]	; (810a0e8 <TIM_OC1_SetConfig+0x114>)
 810a082:	4293      	cmp	r3, r2
 810a084:	d007      	beq.n	810a096 <TIM_OC1_SetConfig+0xc2>
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	4a18      	ldr	r2, [pc, #96]	; (810a0ec <TIM_OC1_SetConfig+0x118>)
 810a08a:	4293      	cmp	r3, r2
 810a08c:	d003      	beq.n	810a096 <TIM_OC1_SetConfig+0xc2>
 810a08e:	687b      	ldr	r3, [r7, #4]
 810a090:	4a17      	ldr	r2, [pc, #92]	; (810a0f0 <TIM_OC1_SetConfig+0x11c>)
 810a092:	4293      	cmp	r3, r2
 810a094:	d111      	bne.n	810a0ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a096:	693b      	ldr	r3, [r7, #16]
 810a098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a09e:	693b      	ldr	r3, [r7, #16]
 810a0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810a0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a0a6:	683b      	ldr	r3, [r7, #0]
 810a0a8:	695b      	ldr	r3, [r3, #20]
 810a0aa:	693a      	ldr	r2, [r7, #16]
 810a0ac:	4313      	orrs	r3, r2
 810a0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a0b0:	683b      	ldr	r3, [r7, #0]
 810a0b2:	699b      	ldr	r3, [r3, #24]
 810a0b4:	693a      	ldr	r2, [r7, #16]
 810a0b6:	4313      	orrs	r3, r2
 810a0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	693a      	ldr	r2, [r7, #16]
 810a0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a0c0:	687b      	ldr	r3, [r7, #4]
 810a0c2:	68fa      	ldr	r2, [r7, #12]
 810a0c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a0c6:	683b      	ldr	r3, [r7, #0]
 810a0c8:	685a      	ldr	r2, [r3, #4]
 810a0ca:	687b      	ldr	r3, [r7, #4]
 810a0cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	697a      	ldr	r2, [r7, #20]
 810a0d2:	621a      	str	r2, [r3, #32]
}
 810a0d4:	bf00      	nop
 810a0d6:	371c      	adds	r7, #28
 810a0d8:	46bd      	mov	sp, r7
 810a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0de:	4770      	bx	lr
 810a0e0:	40010000 	.word	0x40010000
 810a0e4:	40010400 	.word	0x40010400
 810a0e8:	40014000 	.word	0x40014000
 810a0ec:	40014400 	.word	0x40014400
 810a0f0:	40014800 	.word	0x40014800

0810a0f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a0f4:	b480      	push	{r7}
 810a0f6:	b087      	sub	sp, #28
 810a0f8:	af00      	add	r7, sp, #0
 810a0fa:	6078      	str	r0, [r7, #4]
 810a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a0fe:	687b      	ldr	r3, [r7, #4]
 810a100:	6a1b      	ldr	r3, [r3, #32]
 810a102:	f023 0210 	bic.w	r2, r3, #16
 810a106:	687b      	ldr	r3, [r7, #4]
 810a108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a10a:	687b      	ldr	r3, [r7, #4]
 810a10c:	6a1b      	ldr	r3, [r3, #32]
 810a10e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a110:	687b      	ldr	r3, [r7, #4]
 810a112:	685b      	ldr	r3, [r3, #4]
 810a114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	699b      	ldr	r3, [r3, #24]
 810a11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a11c:	68fb      	ldr	r3, [r7, #12]
 810a11e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a128:	68fb      	ldr	r3, [r7, #12]
 810a12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a12e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a130:	683b      	ldr	r3, [r7, #0]
 810a132:	681b      	ldr	r3, [r3, #0]
 810a134:	021b      	lsls	r3, r3, #8
 810a136:	68fa      	ldr	r2, [r7, #12]
 810a138:	4313      	orrs	r3, r2
 810a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a13c:	697b      	ldr	r3, [r7, #20]
 810a13e:	f023 0320 	bic.w	r3, r3, #32
 810a142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a144:	683b      	ldr	r3, [r7, #0]
 810a146:	689b      	ldr	r3, [r3, #8]
 810a148:	011b      	lsls	r3, r3, #4
 810a14a:	697a      	ldr	r2, [r7, #20]
 810a14c:	4313      	orrs	r3, r2
 810a14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	4a28      	ldr	r2, [pc, #160]	; (810a1f4 <TIM_OC2_SetConfig+0x100>)
 810a154:	4293      	cmp	r3, r2
 810a156:	d003      	beq.n	810a160 <TIM_OC2_SetConfig+0x6c>
 810a158:	687b      	ldr	r3, [r7, #4]
 810a15a:	4a27      	ldr	r2, [pc, #156]	; (810a1f8 <TIM_OC2_SetConfig+0x104>)
 810a15c:	4293      	cmp	r3, r2
 810a15e:	d10d      	bne.n	810a17c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810a160:	697b      	ldr	r3, [r7, #20]
 810a162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810a168:	683b      	ldr	r3, [r7, #0]
 810a16a:	68db      	ldr	r3, [r3, #12]
 810a16c:	011b      	lsls	r3, r3, #4
 810a16e:	697a      	ldr	r2, [r7, #20]
 810a170:	4313      	orrs	r3, r2
 810a172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810a174:	697b      	ldr	r3, [r7, #20]
 810a176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810a17a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	4a1d      	ldr	r2, [pc, #116]	; (810a1f4 <TIM_OC2_SetConfig+0x100>)
 810a180:	4293      	cmp	r3, r2
 810a182:	d00f      	beq.n	810a1a4 <TIM_OC2_SetConfig+0xb0>
 810a184:	687b      	ldr	r3, [r7, #4]
 810a186:	4a1c      	ldr	r2, [pc, #112]	; (810a1f8 <TIM_OC2_SetConfig+0x104>)
 810a188:	4293      	cmp	r3, r2
 810a18a:	d00b      	beq.n	810a1a4 <TIM_OC2_SetConfig+0xb0>
 810a18c:	687b      	ldr	r3, [r7, #4]
 810a18e:	4a1b      	ldr	r2, [pc, #108]	; (810a1fc <TIM_OC2_SetConfig+0x108>)
 810a190:	4293      	cmp	r3, r2
 810a192:	d007      	beq.n	810a1a4 <TIM_OC2_SetConfig+0xb0>
 810a194:	687b      	ldr	r3, [r7, #4]
 810a196:	4a1a      	ldr	r2, [pc, #104]	; (810a200 <TIM_OC2_SetConfig+0x10c>)
 810a198:	4293      	cmp	r3, r2
 810a19a:	d003      	beq.n	810a1a4 <TIM_OC2_SetConfig+0xb0>
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	4a19      	ldr	r2, [pc, #100]	; (810a204 <TIM_OC2_SetConfig+0x110>)
 810a1a0:	4293      	cmp	r3, r2
 810a1a2:	d113      	bne.n	810a1cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a1a4:	693b      	ldr	r3, [r7, #16]
 810a1a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810a1aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810a1ac:	693b      	ldr	r3, [r7, #16]
 810a1ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810a1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810a1b4:	683b      	ldr	r3, [r7, #0]
 810a1b6:	695b      	ldr	r3, [r3, #20]
 810a1b8:	009b      	lsls	r3, r3, #2
 810a1ba:	693a      	ldr	r2, [r7, #16]
 810a1bc:	4313      	orrs	r3, r2
 810a1be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810a1c0:	683b      	ldr	r3, [r7, #0]
 810a1c2:	699b      	ldr	r3, [r3, #24]
 810a1c4:	009b      	lsls	r3, r3, #2
 810a1c6:	693a      	ldr	r2, [r7, #16]
 810a1c8:	4313      	orrs	r3, r2
 810a1ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a1cc:	687b      	ldr	r3, [r7, #4]
 810a1ce:	693a      	ldr	r2, [r7, #16]
 810a1d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a1d2:	687b      	ldr	r3, [r7, #4]
 810a1d4:	68fa      	ldr	r2, [r7, #12]
 810a1d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810a1d8:	683b      	ldr	r3, [r7, #0]
 810a1da:	685a      	ldr	r2, [r3, #4]
 810a1dc:	687b      	ldr	r3, [r7, #4]
 810a1de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a1e0:	687b      	ldr	r3, [r7, #4]
 810a1e2:	697a      	ldr	r2, [r7, #20]
 810a1e4:	621a      	str	r2, [r3, #32]
}
 810a1e6:	bf00      	nop
 810a1e8:	371c      	adds	r7, #28
 810a1ea:	46bd      	mov	sp, r7
 810a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1f0:	4770      	bx	lr
 810a1f2:	bf00      	nop
 810a1f4:	40010000 	.word	0x40010000
 810a1f8:	40010400 	.word	0x40010400
 810a1fc:	40014000 	.word	0x40014000
 810a200:	40014400 	.word	0x40014400
 810a204:	40014800 	.word	0x40014800

0810a208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a208:	b480      	push	{r7}
 810a20a:	b087      	sub	sp, #28
 810a20c:	af00      	add	r7, sp, #0
 810a20e:	6078      	str	r0, [r7, #4]
 810a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a212:	687b      	ldr	r3, [r7, #4]
 810a214:	6a1b      	ldr	r3, [r3, #32]
 810a216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810a21a:	687b      	ldr	r3, [r7, #4]
 810a21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	6a1b      	ldr	r3, [r3, #32]
 810a222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a224:	687b      	ldr	r3, [r7, #4]
 810a226:	685b      	ldr	r3, [r3, #4]
 810a228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a22a:	687b      	ldr	r3, [r7, #4]
 810a22c:	69db      	ldr	r3, [r3, #28]
 810a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810a230:	68fb      	ldr	r3, [r7, #12]
 810a232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810a23c:	68fb      	ldr	r3, [r7, #12]
 810a23e:	f023 0303 	bic.w	r3, r3, #3
 810a242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a244:	683b      	ldr	r3, [r7, #0]
 810a246:	681b      	ldr	r3, [r3, #0]
 810a248:	68fa      	ldr	r2, [r7, #12]
 810a24a:	4313      	orrs	r3, r2
 810a24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810a24e:	697b      	ldr	r3, [r7, #20]
 810a250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810a254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810a256:	683b      	ldr	r3, [r7, #0]
 810a258:	689b      	ldr	r3, [r3, #8]
 810a25a:	021b      	lsls	r3, r3, #8
 810a25c:	697a      	ldr	r2, [r7, #20]
 810a25e:	4313      	orrs	r3, r2
 810a260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810a262:	687b      	ldr	r3, [r7, #4]
 810a264:	4a27      	ldr	r2, [pc, #156]	; (810a304 <TIM_OC3_SetConfig+0xfc>)
 810a266:	4293      	cmp	r3, r2
 810a268:	d003      	beq.n	810a272 <TIM_OC3_SetConfig+0x6a>
 810a26a:	687b      	ldr	r3, [r7, #4]
 810a26c:	4a26      	ldr	r2, [pc, #152]	; (810a308 <TIM_OC3_SetConfig+0x100>)
 810a26e:	4293      	cmp	r3, r2
 810a270:	d10d      	bne.n	810a28e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810a272:	697b      	ldr	r3, [r7, #20]
 810a274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810a278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810a27a:	683b      	ldr	r3, [r7, #0]
 810a27c:	68db      	ldr	r3, [r3, #12]
 810a27e:	021b      	lsls	r3, r3, #8
 810a280:	697a      	ldr	r2, [r7, #20]
 810a282:	4313      	orrs	r3, r2
 810a284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810a286:	697b      	ldr	r3, [r7, #20]
 810a288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810a28c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a28e:	687b      	ldr	r3, [r7, #4]
 810a290:	4a1c      	ldr	r2, [pc, #112]	; (810a304 <TIM_OC3_SetConfig+0xfc>)
 810a292:	4293      	cmp	r3, r2
 810a294:	d00f      	beq.n	810a2b6 <TIM_OC3_SetConfig+0xae>
 810a296:	687b      	ldr	r3, [r7, #4]
 810a298:	4a1b      	ldr	r2, [pc, #108]	; (810a308 <TIM_OC3_SetConfig+0x100>)
 810a29a:	4293      	cmp	r3, r2
 810a29c:	d00b      	beq.n	810a2b6 <TIM_OC3_SetConfig+0xae>
 810a29e:	687b      	ldr	r3, [r7, #4]
 810a2a0:	4a1a      	ldr	r2, [pc, #104]	; (810a30c <TIM_OC3_SetConfig+0x104>)
 810a2a2:	4293      	cmp	r3, r2
 810a2a4:	d007      	beq.n	810a2b6 <TIM_OC3_SetConfig+0xae>
 810a2a6:	687b      	ldr	r3, [r7, #4]
 810a2a8:	4a19      	ldr	r2, [pc, #100]	; (810a310 <TIM_OC3_SetConfig+0x108>)
 810a2aa:	4293      	cmp	r3, r2
 810a2ac:	d003      	beq.n	810a2b6 <TIM_OC3_SetConfig+0xae>
 810a2ae:	687b      	ldr	r3, [r7, #4]
 810a2b0:	4a18      	ldr	r2, [pc, #96]	; (810a314 <TIM_OC3_SetConfig+0x10c>)
 810a2b2:	4293      	cmp	r3, r2
 810a2b4:	d113      	bne.n	810a2de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810a2b6:	693b      	ldr	r3, [r7, #16]
 810a2b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810a2bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810a2be:	693b      	ldr	r3, [r7, #16]
 810a2c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810a2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810a2c6:	683b      	ldr	r3, [r7, #0]
 810a2c8:	695b      	ldr	r3, [r3, #20]
 810a2ca:	011b      	lsls	r3, r3, #4
 810a2cc:	693a      	ldr	r2, [r7, #16]
 810a2ce:	4313      	orrs	r3, r2
 810a2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a2d2:	683b      	ldr	r3, [r7, #0]
 810a2d4:	699b      	ldr	r3, [r3, #24]
 810a2d6:	011b      	lsls	r3, r3, #4
 810a2d8:	693a      	ldr	r2, [r7, #16]
 810a2da:	4313      	orrs	r3, r2
 810a2dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a2de:	687b      	ldr	r3, [r7, #4]
 810a2e0:	693a      	ldr	r2, [r7, #16]
 810a2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a2e4:	687b      	ldr	r3, [r7, #4]
 810a2e6:	68fa      	ldr	r2, [r7, #12]
 810a2e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a2ea:	683b      	ldr	r3, [r7, #0]
 810a2ec:	685a      	ldr	r2, [r3, #4]
 810a2ee:	687b      	ldr	r3, [r7, #4]
 810a2f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a2f2:	687b      	ldr	r3, [r7, #4]
 810a2f4:	697a      	ldr	r2, [r7, #20]
 810a2f6:	621a      	str	r2, [r3, #32]
}
 810a2f8:	bf00      	nop
 810a2fa:	371c      	adds	r7, #28
 810a2fc:	46bd      	mov	sp, r7
 810a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a302:	4770      	bx	lr
 810a304:	40010000 	.word	0x40010000
 810a308:	40010400 	.word	0x40010400
 810a30c:	40014000 	.word	0x40014000
 810a310:	40014400 	.word	0x40014400
 810a314:	40014800 	.word	0x40014800

0810a318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a318:	b480      	push	{r7}
 810a31a:	b087      	sub	sp, #28
 810a31c:	af00      	add	r7, sp, #0
 810a31e:	6078      	str	r0, [r7, #4]
 810a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a322:	687b      	ldr	r3, [r7, #4]
 810a324:	6a1b      	ldr	r3, [r3, #32]
 810a326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810a32a:	687b      	ldr	r3, [r7, #4]
 810a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	6a1b      	ldr	r3, [r3, #32]
 810a332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a334:	687b      	ldr	r3, [r7, #4]
 810a336:	685b      	ldr	r3, [r3, #4]
 810a338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a33a:	687b      	ldr	r3, [r7, #4]
 810a33c:	69db      	ldr	r3, [r3, #28]
 810a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a340:	68fb      	ldr	r3, [r7, #12]
 810a342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810a34c:	68fb      	ldr	r3, [r7, #12]
 810a34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a354:	683b      	ldr	r3, [r7, #0]
 810a356:	681b      	ldr	r3, [r3, #0]
 810a358:	021b      	lsls	r3, r3, #8
 810a35a:	68fa      	ldr	r2, [r7, #12]
 810a35c:	4313      	orrs	r3, r2
 810a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810a360:	693b      	ldr	r3, [r7, #16]
 810a362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810a366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810a368:	683b      	ldr	r3, [r7, #0]
 810a36a:	689b      	ldr	r3, [r3, #8]
 810a36c:	031b      	lsls	r3, r3, #12
 810a36e:	693a      	ldr	r2, [r7, #16]
 810a370:	4313      	orrs	r3, r2
 810a372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a374:	687b      	ldr	r3, [r7, #4]
 810a376:	4a18      	ldr	r2, [pc, #96]	; (810a3d8 <TIM_OC4_SetConfig+0xc0>)
 810a378:	4293      	cmp	r3, r2
 810a37a:	d00f      	beq.n	810a39c <TIM_OC4_SetConfig+0x84>
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	4a17      	ldr	r2, [pc, #92]	; (810a3dc <TIM_OC4_SetConfig+0xc4>)
 810a380:	4293      	cmp	r3, r2
 810a382:	d00b      	beq.n	810a39c <TIM_OC4_SetConfig+0x84>
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	4a16      	ldr	r2, [pc, #88]	; (810a3e0 <TIM_OC4_SetConfig+0xc8>)
 810a388:	4293      	cmp	r3, r2
 810a38a:	d007      	beq.n	810a39c <TIM_OC4_SetConfig+0x84>
 810a38c:	687b      	ldr	r3, [r7, #4]
 810a38e:	4a15      	ldr	r2, [pc, #84]	; (810a3e4 <TIM_OC4_SetConfig+0xcc>)
 810a390:	4293      	cmp	r3, r2
 810a392:	d003      	beq.n	810a39c <TIM_OC4_SetConfig+0x84>
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	4a14      	ldr	r2, [pc, #80]	; (810a3e8 <TIM_OC4_SetConfig+0xd0>)
 810a398:	4293      	cmp	r3, r2
 810a39a:	d109      	bne.n	810a3b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810a39c:	697b      	ldr	r3, [r7, #20]
 810a39e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810a3a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810a3a4:	683b      	ldr	r3, [r7, #0]
 810a3a6:	695b      	ldr	r3, [r3, #20]
 810a3a8:	019b      	lsls	r3, r3, #6
 810a3aa:	697a      	ldr	r2, [r7, #20]
 810a3ac:	4313      	orrs	r3, r2
 810a3ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a3b0:	687b      	ldr	r3, [r7, #4]
 810a3b2:	697a      	ldr	r2, [r7, #20]
 810a3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	68fa      	ldr	r2, [r7, #12]
 810a3ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810a3bc:	683b      	ldr	r3, [r7, #0]
 810a3be:	685a      	ldr	r2, [r3, #4]
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a3c4:	687b      	ldr	r3, [r7, #4]
 810a3c6:	693a      	ldr	r2, [r7, #16]
 810a3c8:	621a      	str	r2, [r3, #32]
}
 810a3ca:	bf00      	nop
 810a3cc:	371c      	adds	r7, #28
 810a3ce:	46bd      	mov	sp, r7
 810a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3d4:	4770      	bx	lr
 810a3d6:	bf00      	nop
 810a3d8:	40010000 	.word	0x40010000
 810a3dc:	40010400 	.word	0x40010400
 810a3e0:	40014000 	.word	0x40014000
 810a3e4:	40014400 	.word	0x40014400
 810a3e8:	40014800 	.word	0x40014800

0810a3ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810a3ec:	b480      	push	{r7}
 810a3ee:	b087      	sub	sp, #28
 810a3f0:	af00      	add	r7, sp, #0
 810a3f2:	6078      	str	r0, [r7, #4]
 810a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810a3f6:	687b      	ldr	r3, [r7, #4]
 810a3f8:	6a1b      	ldr	r3, [r3, #32]
 810a3fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a402:	687b      	ldr	r3, [r7, #4]
 810a404:	6a1b      	ldr	r3, [r3, #32]
 810a406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a408:	687b      	ldr	r3, [r7, #4]
 810a40a:	685b      	ldr	r3, [r3, #4]
 810a40c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a40e:	687b      	ldr	r3, [r7, #4]
 810a410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810a414:	68fb      	ldr	r3, [r7, #12]
 810a416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a420:	683b      	ldr	r3, [r7, #0]
 810a422:	681b      	ldr	r3, [r3, #0]
 810a424:	68fa      	ldr	r2, [r7, #12]
 810a426:	4313      	orrs	r3, r2
 810a428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810a42a:	693b      	ldr	r3, [r7, #16]
 810a42c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810a430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810a432:	683b      	ldr	r3, [r7, #0]
 810a434:	689b      	ldr	r3, [r3, #8]
 810a436:	041b      	lsls	r3, r3, #16
 810a438:	693a      	ldr	r2, [r7, #16]
 810a43a:	4313      	orrs	r3, r2
 810a43c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a43e:	687b      	ldr	r3, [r7, #4]
 810a440:	4a17      	ldr	r2, [pc, #92]	; (810a4a0 <TIM_OC5_SetConfig+0xb4>)
 810a442:	4293      	cmp	r3, r2
 810a444:	d00f      	beq.n	810a466 <TIM_OC5_SetConfig+0x7a>
 810a446:	687b      	ldr	r3, [r7, #4]
 810a448:	4a16      	ldr	r2, [pc, #88]	; (810a4a4 <TIM_OC5_SetConfig+0xb8>)
 810a44a:	4293      	cmp	r3, r2
 810a44c:	d00b      	beq.n	810a466 <TIM_OC5_SetConfig+0x7a>
 810a44e:	687b      	ldr	r3, [r7, #4]
 810a450:	4a15      	ldr	r2, [pc, #84]	; (810a4a8 <TIM_OC5_SetConfig+0xbc>)
 810a452:	4293      	cmp	r3, r2
 810a454:	d007      	beq.n	810a466 <TIM_OC5_SetConfig+0x7a>
 810a456:	687b      	ldr	r3, [r7, #4]
 810a458:	4a14      	ldr	r2, [pc, #80]	; (810a4ac <TIM_OC5_SetConfig+0xc0>)
 810a45a:	4293      	cmp	r3, r2
 810a45c:	d003      	beq.n	810a466 <TIM_OC5_SetConfig+0x7a>
 810a45e:	687b      	ldr	r3, [r7, #4]
 810a460:	4a13      	ldr	r2, [pc, #76]	; (810a4b0 <TIM_OC5_SetConfig+0xc4>)
 810a462:	4293      	cmp	r3, r2
 810a464:	d109      	bne.n	810a47a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810a466:	697b      	ldr	r3, [r7, #20]
 810a468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a46c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810a46e:	683b      	ldr	r3, [r7, #0]
 810a470:	695b      	ldr	r3, [r3, #20]
 810a472:	021b      	lsls	r3, r3, #8
 810a474:	697a      	ldr	r2, [r7, #20]
 810a476:	4313      	orrs	r3, r2
 810a478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	697a      	ldr	r2, [r7, #20]
 810a47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a480:	687b      	ldr	r3, [r7, #4]
 810a482:	68fa      	ldr	r2, [r7, #12]
 810a484:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810a486:	683b      	ldr	r3, [r7, #0]
 810a488:	685a      	ldr	r2, [r3, #4]
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a48e:	687b      	ldr	r3, [r7, #4]
 810a490:	693a      	ldr	r2, [r7, #16]
 810a492:	621a      	str	r2, [r3, #32]
}
 810a494:	bf00      	nop
 810a496:	371c      	adds	r7, #28
 810a498:	46bd      	mov	sp, r7
 810a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a49e:	4770      	bx	lr
 810a4a0:	40010000 	.word	0x40010000
 810a4a4:	40010400 	.word	0x40010400
 810a4a8:	40014000 	.word	0x40014000
 810a4ac:	40014400 	.word	0x40014400
 810a4b0:	40014800 	.word	0x40014800

0810a4b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810a4b4:	b480      	push	{r7}
 810a4b6:	b087      	sub	sp, #28
 810a4b8:	af00      	add	r7, sp, #0
 810a4ba:	6078      	str	r0, [r7, #4]
 810a4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810a4be:	687b      	ldr	r3, [r7, #4]
 810a4c0:	6a1b      	ldr	r3, [r3, #32]
 810a4c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810a4c6:	687b      	ldr	r3, [r7, #4]
 810a4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a4ca:	687b      	ldr	r3, [r7, #4]
 810a4cc:	6a1b      	ldr	r3, [r3, #32]
 810a4ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a4d0:	687b      	ldr	r3, [r7, #4]
 810a4d2:	685b      	ldr	r3, [r3, #4]
 810a4d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a4d6:	687b      	ldr	r3, [r7, #4]
 810a4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810a4dc:	68fb      	ldr	r3, [r7, #12]
 810a4de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a4e8:	683b      	ldr	r3, [r7, #0]
 810a4ea:	681b      	ldr	r3, [r3, #0]
 810a4ec:	021b      	lsls	r3, r3, #8
 810a4ee:	68fa      	ldr	r2, [r7, #12]
 810a4f0:	4313      	orrs	r3, r2
 810a4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810a4f4:	693b      	ldr	r3, [r7, #16]
 810a4f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810a4fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810a4fc:	683b      	ldr	r3, [r7, #0]
 810a4fe:	689b      	ldr	r3, [r3, #8]
 810a500:	051b      	lsls	r3, r3, #20
 810a502:	693a      	ldr	r2, [r7, #16]
 810a504:	4313      	orrs	r3, r2
 810a506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a508:	687b      	ldr	r3, [r7, #4]
 810a50a:	4a18      	ldr	r2, [pc, #96]	; (810a56c <TIM_OC6_SetConfig+0xb8>)
 810a50c:	4293      	cmp	r3, r2
 810a50e:	d00f      	beq.n	810a530 <TIM_OC6_SetConfig+0x7c>
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	4a17      	ldr	r2, [pc, #92]	; (810a570 <TIM_OC6_SetConfig+0xbc>)
 810a514:	4293      	cmp	r3, r2
 810a516:	d00b      	beq.n	810a530 <TIM_OC6_SetConfig+0x7c>
 810a518:	687b      	ldr	r3, [r7, #4]
 810a51a:	4a16      	ldr	r2, [pc, #88]	; (810a574 <TIM_OC6_SetConfig+0xc0>)
 810a51c:	4293      	cmp	r3, r2
 810a51e:	d007      	beq.n	810a530 <TIM_OC6_SetConfig+0x7c>
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	4a15      	ldr	r2, [pc, #84]	; (810a578 <TIM_OC6_SetConfig+0xc4>)
 810a524:	4293      	cmp	r3, r2
 810a526:	d003      	beq.n	810a530 <TIM_OC6_SetConfig+0x7c>
 810a528:	687b      	ldr	r3, [r7, #4]
 810a52a:	4a14      	ldr	r2, [pc, #80]	; (810a57c <TIM_OC6_SetConfig+0xc8>)
 810a52c:	4293      	cmp	r3, r2
 810a52e:	d109      	bne.n	810a544 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810a530:	697b      	ldr	r3, [r7, #20]
 810a532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810a536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810a538:	683b      	ldr	r3, [r7, #0]
 810a53a:	695b      	ldr	r3, [r3, #20]
 810a53c:	029b      	lsls	r3, r3, #10
 810a53e:	697a      	ldr	r2, [r7, #20]
 810a540:	4313      	orrs	r3, r2
 810a542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a544:	687b      	ldr	r3, [r7, #4]
 810a546:	697a      	ldr	r2, [r7, #20]
 810a548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a54a:	687b      	ldr	r3, [r7, #4]
 810a54c:	68fa      	ldr	r2, [r7, #12]
 810a54e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810a550:	683b      	ldr	r3, [r7, #0]
 810a552:	685a      	ldr	r2, [r3, #4]
 810a554:	687b      	ldr	r3, [r7, #4]
 810a556:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	693a      	ldr	r2, [r7, #16]
 810a55c:	621a      	str	r2, [r3, #32]
}
 810a55e:	bf00      	nop
 810a560:	371c      	adds	r7, #28
 810a562:	46bd      	mov	sp, r7
 810a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a568:	4770      	bx	lr
 810a56a:	bf00      	nop
 810a56c:	40010000 	.word	0x40010000
 810a570:	40010400 	.word	0x40010400
 810a574:	40014000 	.word	0x40014000
 810a578:	40014400 	.word	0x40014400
 810a57c:	40014800 	.word	0x40014800

0810a580 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810a580:	b480      	push	{r7}
 810a582:	b087      	sub	sp, #28
 810a584:	af00      	add	r7, sp, #0
 810a586:	60f8      	str	r0, [r7, #12]
 810a588:	60b9      	str	r1, [r7, #8]
 810a58a:	607a      	str	r2, [r7, #4]
 810a58c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a58e:	68fb      	ldr	r3, [r7, #12]
 810a590:	6a1b      	ldr	r3, [r3, #32]
 810a592:	f023 0201 	bic.w	r2, r3, #1
 810a596:	68fb      	ldr	r3, [r7, #12]
 810a598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a59a:	68fb      	ldr	r3, [r7, #12]
 810a59c:	699b      	ldr	r3, [r3, #24]
 810a59e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a5a0:	68fb      	ldr	r3, [r7, #12]
 810a5a2:	6a1b      	ldr	r3, [r3, #32]
 810a5a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810a5a6:	68fb      	ldr	r3, [r7, #12]
 810a5a8:	4a28      	ldr	r2, [pc, #160]	; (810a64c <TIM_TI1_SetConfig+0xcc>)
 810a5aa:	4293      	cmp	r3, r2
 810a5ac:	d01b      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5ae:	68fb      	ldr	r3, [r7, #12]
 810a5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a5b4:	d017      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5b6:	68fb      	ldr	r3, [r7, #12]
 810a5b8:	4a25      	ldr	r2, [pc, #148]	; (810a650 <TIM_TI1_SetConfig+0xd0>)
 810a5ba:	4293      	cmp	r3, r2
 810a5bc:	d013      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5be:	68fb      	ldr	r3, [r7, #12]
 810a5c0:	4a24      	ldr	r2, [pc, #144]	; (810a654 <TIM_TI1_SetConfig+0xd4>)
 810a5c2:	4293      	cmp	r3, r2
 810a5c4:	d00f      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5c6:	68fb      	ldr	r3, [r7, #12]
 810a5c8:	4a23      	ldr	r2, [pc, #140]	; (810a658 <TIM_TI1_SetConfig+0xd8>)
 810a5ca:	4293      	cmp	r3, r2
 810a5cc:	d00b      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5ce:	68fb      	ldr	r3, [r7, #12]
 810a5d0:	4a22      	ldr	r2, [pc, #136]	; (810a65c <TIM_TI1_SetConfig+0xdc>)
 810a5d2:	4293      	cmp	r3, r2
 810a5d4:	d007      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5d6:	68fb      	ldr	r3, [r7, #12]
 810a5d8:	4a21      	ldr	r2, [pc, #132]	; (810a660 <TIM_TI1_SetConfig+0xe0>)
 810a5da:	4293      	cmp	r3, r2
 810a5dc:	d003      	beq.n	810a5e6 <TIM_TI1_SetConfig+0x66>
 810a5de:	68fb      	ldr	r3, [r7, #12]
 810a5e0:	4a20      	ldr	r2, [pc, #128]	; (810a664 <TIM_TI1_SetConfig+0xe4>)
 810a5e2:	4293      	cmp	r3, r2
 810a5e4:	d101      	bne.n	810a5ea <TIM_TI1_SetConfig+0x6a>
 810a5e6:	2301      	movs	r3, #1
 810a5e8:	e000      	b.n	810a5ec <TIM_TI1_SetConfig+0x6c>
 810a5ea:	2300      	movs	r3, #0
 810a5ec:	2b00      	cmp	r3, #0
 810a5ee:	d008      	beq.n	810a602 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810a5f0:	697b      	ldr	r3, [r7, #20]
 810a5f2:	f023 0303 	bic.w	r3, r3, #3
 810a5f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810a5f8:	697a      	ldr	r2, [r7, #20]
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	4313      	orrs	r3, r2
 810a5fe:	617b      	str	r3, [r7, #20]
 810a600:	e003      	b.n	810a60a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810a602:	697b      	ldr	r3, [r7, #20]
 810a604:	f043 0301 	orr.w	r3, r3, #1
 810a608:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810a60a:	697b      	ldr	r3, [r7, #20]
 810a60c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810a610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810a612:	683b      	ldr	r3, [r7, #0]
 810a614:	011b      	lsls	r3, r3, #4
 810a616:	b2db      	uxtb	r3, r3
 810a618:	697a      	ldr	r2, [r7, #20]
 810a61a:	4313      	orrs	r3, r2
 810a61c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810a61e:	693b      	ldr	r3, [r7, #16]
 810a620:	f023 030a 	bic.w	r3, r3, #10
 810a624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810a626:	68bb      	ldr	r3, [r7, #8]
 810a628:	f003 030a 	and.w	r3, r3, #10
 810a62c:	693a      	ldr	r2, [r7, #16]
 810a62e:	4313      	orrs	r3, r2
 810a630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810a632:	68fb      	ldr	r3, [r7, #12]
 810a634:	697a      	ldr	r2, [r7, #20]
 810a636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a638:	68fb      	ldr	r3, [r7, #12]
 810a63a:	693a      	ldr	r2, [r7, #16]
 810a63c:	621a      	str	r2, [r3, #32]
}
 810a63e:	bf00      	nop
 810a640:	371c      	adds	r7, #28
 810a642:	46bd      	mov	sp, r7
 810a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a648:	4770      	bx	lr
 810a64a:	bf00      	nop
 810a64c:	40010000 	.word	0x40010000
 810a650:	40000400 	.word	0x40000400
 810a654:	40000800 	.word	0x40000800
 810a658:	40000c00 	.word	0x40000c00
 810a65c:	40010400 	.word	0x40010400
 810a660:	40001800 	.word	0x40001800
 810a664:	40014000 	.word	0x40014000

0810a668 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a668:	b480      	push	{r7}
 810a66a:	b087      	sub	sp, #28
 810a66c:	af00      	add	r7, sp, #0
 810a66e:	60f8      	str	r0, [r7, #12]
 810a670:	60b9      	str	r1, [r7, #8]
 810a672:	607a      	str	r2, [r7, #4]
 810a674:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a676:	68fb      	ldr	r3, [r7, #12]
 810a678:	6a1b      	ldr	r3, [r3, #32]
 810a67a:	f023 0210 	bic.w	r2, r3, #16
 810a67e:	68fb      	ldr	r3, [r7, #12]
 810a680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a682:	68fb      	ldr	r3, [r7, #12]
 810a684:	699b      	ldr	r3, [r3, #24]
 810a686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a688:	68fb      	ldr	r3, [r7, #12]
 810a68a:	6a1b      	ldr	r3, [r3, #32]
 810a68c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810a68e:	697b      	ldr	r3, [r7, #20]
 810a690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810a696:	687b      	ldr	r3, [r7, #4]
 810a698:	021b      	lsls	r3, r3, #8
 810a69a:	697a      	ldr	r2, [r7, #20]
 810a69c:	4313      	orrs	r3, r2
 810a69e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810a6a0:	697b      	ldr	r3, [r7, #20]
 810a6a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810a6a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810a6a8:	683b      	ldr	r3, [r7, #0]
 810a6aa:	031b      	lsls	r3, r3, #12
 810a6ac:	b29b      	uxth	r3, r3
 810a6ae:	697a      	ldr	r2, [r7, #20]
 810a6b0:	4313      	orrs	r3, r2
 810a6b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810a6b4:	693b      	ldr	r3, [r7, #16]
 810a6b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810a6ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810a6bc:	68bb      	ldr	r3, [r7, #8]
 810a6be:	011b      	lsls	r3, r3, #4
 810a6c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 810a6c4:	693a      	ldr	r2, [r7, #16]
 810a6c6:	4313      	orrs	r3, r2
 810a6c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810a6ca:	68fb      	ldr	r3, [r7, #12]
 810a6cc:	697a      	ldr	r2, [r7, #20]
 810a6ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a6d0:	68fb      	ldr	r3, [r7, #12]
 810a6d2:	693a      	ldr	r2, [r7, #16]
 810a6d4:	621a      	str	r2, [r3, #32]
}
 810a6d6:	bf00      	nop
 810a6d8:	371c      	adds	r7, #28
 810a6da:	46bd      	mov	sp, r7
 810a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6e0:	4770      	bx	lr

0810a6e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a6e2:	b480      	push	{r7}
 810a6e4:	b087      	sub	sp, #28
 810a6e6:	af00      	add	r7, sp, #0
 810a6e8:	60f8      	str	r0, [r7, #12]
 810a6ea:	60b9      	str	r1, [r7, #8]
 810a6ec:	607a      	str	r2, [r7, #4]
 810a6ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a6f0:	68fb      	ldr	r3, [r7, #12]
 810a6f2:	6a1b      	ldr	r3, [r3, #32]
 810a6f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810a6f8:	68fb      	ldr	r3, [r7, #12]
 810a6fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810a6fc:	68fb      	ldr	r3, [r7, #12]
 810a6fe:	69db      	ldr	r3, [r3, #28]
 810a700:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a702:	68fb      	ldr	r3, [r7, #12]
 810a704:	6a1b      	ldr	r3, [r3, #32]
 810a706:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810a708:	697b      	ldr	r3, [r7, #20]
 810a70a:	f023 0303 	bic.w	r3, r3, #3
 810a70e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 810a710:	697a      	ldr	r2, [r7, #20]
 810a712:	687b      	ldr	r3, [r7, #4]
 810a714:	4313      	orrs	r3, r2
 810a716:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810a718:	697b      	ldr	r3, [r7, #20]
 810a71a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810a71e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810a720:	683b      	ldr	r3, [r7, #0]
 810a722:	011b      	lsls	r3, r3, #4
 810a724:	b2db      	uxtb	r3, r3
 810a726:	697a      	ldr	r2, [r7, #20]
 810a728:	4313      	orrs	r3, r2
 810a72a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810a72c:	693b      	ldr	r3, [r7, #16]
 810a72e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 810a732:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810a734:	68bb      	ldr	r3, [r7, #8]
 810a736:	021b      	lsls	r3, r3, #8
 810a738:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 810a73c:	693a      	ldr	r2, [r7, #16]
 810a73e:	4313      	orrs	r3, r2
 810a740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810a742:	68fb      	ldr	r3, [r7, #12]
 810a744:	697a      	ldr	r2, [r7, #20]
 810a746:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810a748:	68fb      	ldr	r3, [r7, #12]
 810a74a:	693a      	ldr	r2, [r7, #16]
 810a74c:	621a      	str	r2, [r3, #32]
}
 810a74e:	bf00      	nop
 810a750:	371c      	adds	r7, #28
 810a752:	46bd      	mov	sp, r7
 810a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a758:	4770      	bx	lr

0810a75a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a75a:	b480      	push	{r7}
 810a75c:	b087      	sub	sp, #28
 810a75e:	af00      	add	r7, sp, #0
 810a760:	60f8      	str	r0, [r7, #12]
 810a762:	60b9      	str	r1, [r7, #8]
 810a764:	607a      	str	r2, [r7, #4]
 810a766:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a768:	68fb      	ldr	r3, [r7, #12]
 810a76a:	6a1b      	ldr	r3, [r3, #32]
 810a76c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810a770:	68fb      	ldr	r3, [r7, #12]
 810a772:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810a774:	68fb      	ldr	r3, [r7, #12]
 810a776:	69db      	ldr	r3, [r3, #28]
 810a778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a77a:	68fb      	ldr	r3, [r7, #12]
 810a77c:	6a1b      	ldr	r3, [r3, #32]
 810a77e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810a780:	697b      	ldr	r3, [r7, #20]
 810a782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a786:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	021b      	lsls	r3, r3, #8
 810a78c:	697a      	ldr	r2, [r7, #20]
 810a78e:	4313      	orrs	r3, r2
 810a790:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810a792:	697b      	ldr	r3, [r7, #20]
 810a794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810a798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810a79a:	683b      	ldr	r3, [r7, #0]
 810a79c:	031b      	lsls	r3, r3, #12
 810a79e:	b29b      	uxth	r3, r3
 810a7a0:	697a      	ldr	r2, [r7, #20]
 810a7a2:	4313      	orrs	r3, r2
 810a7a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810a7a6:	693b      	ldr	r3, [r7, #16]
 810a7a8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 810a7ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810a7ae:	68bb      	ldr	r3, [r7, #8]
 810a7b0:	031b      	lsls	r3, r3, #12
 810a7b2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 810a7b6:	693a      	ldr	r2, [r7, #16]
 810a7b8:	4313      	orrs	r3, r2
 810a7ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810a7bc:	68fb      	ldr	r3, [r7, #12]
 810a7be:	697a      	ldr	r2, [r7, #20]
 810a7c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810a7c2:	68fb      	ldr	r3, [r7, #12]
 810a7c4:	693a      	ldr	r2, [r7, #16]
 810a7c6:	621a      	str	r2, [r3, #32]
}
 810a7c8:	bf00      	nop
 810a7ca:	371c      	adds	r7, #28
 810a7cc:	46bd      	mov	sp, r7
 810a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7d2:	4770      	bx	lr

0810a7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810a7d4:	b480      	push	{r7}
 810a7d6:	b085      	sub	sp, #20
 810a7d8:	af00      	add	r7, sp, #0
 810a7da:	6078      	str	r0, [r7, #4]
 810a7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810a7de:	687b      	ldr	r3, [r7, #4]
 810a7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810a7e4:	2b01      	cmp	r3, #1
 810a7e6:	d101      	bne.n	810a7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810a7e8:	2302      	movs	r3, #2
 810a7ea:	e06d      	b.n	810a8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810a7ec:	687b      	ldr	r3, [r7, #4]
 810a7ee:	2201      	movs	r2, #1
 810a7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a7f4:	687b      	ldr	r3, [r7, #4]
 810a7f6:	2202      	movs	r2, #2
 810a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810a7fc:	687b      	ldr	r3, [r7, #4]
 810a7fe:	681b      	ldr	r3, [r3, #0]
 810a800:	685b      	ldr	r3, [r3, #4]
 810a802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810a804:	687b      	ldr	r3, [r7, #4]
 810a806:	681b      	ldr	r3, [r3, #0]
 810a808:	689b      	ldr	r3, [r3, #8]
 810a80a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810a80c:	687b      	ldr	r3, [r7, #4]
 810a80e:	681b      	ldr	r3, [r3, #0]
 810a810:	4a30      	ldr	r2, [pc, #192]	; (810a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a812:	4293      	cmp	r3, r2
 810a814:	d004      	beq.n	810a820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810a816:	687b      	ldr	r3, [r7, #4]
 810a818:	681b      	ldr	r3, [r3, #0]
 810a81a:	4a2f      	ldr	r2, [pc, #188]	; (810a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a81c:	4293      	cmp	r3, r2
 810a81e:	d108      	bne.n	810a832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810a820:	68fb      	ldr	r3, [r7, #12]
 810a822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810a826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810a828:	683b      	ldr	r3, [r7, #0]
 810a82a:	685b      	ldr	r3, [r3, #4]
 810a82c:	68fa      	ldr	r2, [r7, #12]
 810a82e:	4313      	orrs	r3, r2
 810a830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810a832:	68fb      	ldr	r3, [r7, #12]
 810a834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810a83a:	683b      	ldr	r3, [r7, #0]
 810a83c:	681b      	ldr	r3, [r3, #0]
 810a83e:	68fa      	ldr	r2, [r7, #12]
 810a840:	4313      	orrs	r3, r2
 810a842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	68fa      	ldr	r2, [r7, #12]
 810a84a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810a84c:	687b      	ldr	r3, [r7, #4]
 810a84e:	681b      	ldr	r3, [r3, #0]
 810a850:	4a20      	ldr	r2, [pc, #128]	; (810a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a852:	4293      	cmp	r3, r2
 810a854:	d022      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	681b      	ldr	r3, [r3, #0]
 810a85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a85e:	d01d      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	681b      	ldr	r3, [r3, #0]
 810a864:	4a1d      	ldr	r2, [pc, #116]	; (810a8dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810a866:	4293      	cmp	r3, r2
 810a868:	d018      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	4a1c      	ldr	r2, [pc, #112]	; (810a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810a870:	4293      	cmp	r3, r2
 810a872:	d013      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a874:	687b      	ldr	r3, [r7, #4]
 810a876:	681b      	ldr	r3, [r3, #0]
 810a878:	4a1a      	ldr	r2, [pc, #104]	; (810a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810a87a:	4293      	cmp	r3, r2
 810a87c:	d00e      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a87e:	687b      	ldr	r3, [r7, #4]
 810a880:	681b      	ldr	r3, [r3, #0]
 810a882:	4a15      	ldr	r2, [pc, #84]	; (810a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a884:	4293      	cmp	r3, r2
 810a886:	d009      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a888:	687b      	ldr	r3, [r7, #4]
 810a88a:	681b      	ldr	r3, [r3, #0]
 810a88c:	4a16      	ldr	r2, [pc, #88]	; (810a8e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810a88e:	4293      	cmp	r3, r2
 810a890:	d004      	beq.n	810a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a892:	687b      	ldr	r3, [r7, #4]
 810a894:	681b      	ldr	r3, [r3, #0]
 810a896:	4a15      	ldr	r2, [pc, #84]	; (810a8ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810a898:	4293      	cmp	r3, r2
 810a89a:	d10c      	bne.n	810a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810a89c:	68bb      	ldr	r3, [r7, #8]
 810a89e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a8a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810a8a4:	683b      	ldr	r3, [r7, #0]
 810a8a6:	689b      	ldr	r3, [r3, #8]
 810a8a8:	68ba      	ldr	r2, [r7, #8]
 810a8aa:	4313      	orrs	r3, r2
 810a8ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	681b      	ldr	r3, [r3, #0]
 810a8b2:	68ba      	ldr	r2, [r7, #8]
 810a8b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810a8b6:	687b      	ldr	r3, [r7, #4]
 810a8b8:	2201      	movs	r2, #1
 810a8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810a8be:	687b      	ldr	r3, [r7, #4]
 810a8c0:	2200      	movs	r2, #0
 810a8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810a8c6:	2300      	movs	r3, #0
}
 810a8c8:	4618      	mov	r0, r3
 810a8ca:	3714      	adds	r7, #20
 810a8cc:	46bd      	mov	sp, r7
 810a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8d2:	4770      	bx	lr
 810a8d4:	40010000 	.word	0x40010000
 810a8d8:	40010400 	.word	0x40010400
 810a8dc:	40000400 	.word	0x40000400
 810a8e0:	40000800 	.word	0x40000800
 810a8e4:	40000c00 	.word	0x40000c00
 810a8e8:	40001800 	.word	0x40001800
 810a8ec:	40014000 	.word	0x40014000

0810a8f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810a8f0:	b480      	push	{r7}
 810a8f2:	b085      	sub	sp, #20
 810a8f4:	af00      	add	r7, sp, #0
 810a8f6:	6078      	str	r0, [r7, #4]
 810a8f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810a8fa:	2300      	movs	r3, #0
 810a8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810a8fe:	687b      	ldr	r3, [r7, #4]
 810a900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810a904:	2b01      	cmp	r3, #1
 810a906:	d101      	bne.n	810a90c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810a908:	2302      	movs	r3, #2
 810a90a:	e065      	b.n	810a9d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810a90c:	687b      	ldr	r3, [r7, #4]
 810a90e:	2201      	movs	r2, #1
 810a910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810a914:	68fb      	ldr	r3, [r7, #12]
 810a916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810a91a:	683b      	ldr	r3, [r7, #0]
 810a91c:	68db      	ldr	r3, [r3, #12]
 810a91e:	4313      	orrs	r3, r2
 810a920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810a922:	68fb      	ldr	r3, [r7, #12]
 810a924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a928:	683b      	ldr	r3, [r7, #0]
 810a92a:	689b      	ldr	r3, [r3, #8]
 810a92c:	4313      	orrs	r3, r2
 810a92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810a930:	68fb      	ldr	r3, [r7, #12]
 810a932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810a936:	683b      	ldr	r3, [r7, #0]
 810a938:	685b      	ldr	r3, [r3, #4]
 810a93a:	4313      	orrs	r3, r2
 810a93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810a93e:	68fb      	ldr	r3, [r7, #12]
 810a940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810a944:	683b      	ldr	r3, [r7, #0]
 810a946:	681b      	ldr	r3, [r3, #0]
 810a948:	4313      	orrs	r3, r2
 810a94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810a94c:	68fb      	ldr	r3, [r7, #12]
 810a94e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810a952:	683b      	ldr	r3, [r7, #0]
 810a954:	691b      	ldr	r3, [r3, #16]
 810a956:	4313      	orrs	r3, r2
 810a958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810a95a:	68fb      	ldr	r3, [r7, #12]
 810a95c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810a960:	683b      	ldr	r3, [r7, #0]
 810a962:	695b      	ldr	r3, [r3, #20]
 810a964:	4313      	orrs	r3, r2
 810a966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810a968:	68fb      	ldr	r3, [r7, #12]
 810a96a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810a96e:	683b      	ldr	r3, [r7, #0]
 810a970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a972:	4313      	orrs	r3, r2
 810a974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810a976:	68fb      	ldr	r3, [r7, #12]
 810a978:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810a97c:	683b      	ldr	r3, [r7, #0]
 810a97e:	699b      	ldr	r3, [r3, #24]
 810a980:	041b      	lsls	r3, r3, #16
 810a982:	4313      	orrs	r3, r2
 810a984:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810a986:	687b      	ldr	r3, [r7, #4]
 810a988:	681b      	ldr	r3, [r3, #0]
 810a98a:	4a16      	ldr	r2, [pc, #88]	; (810a9e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810a98c:	4293      	cmp	r3, r2
 810a98e:	d004      	beq.n	810a99a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	681b      	ldr	r3, [r3, #0]
 810a994:	4a14      	ldr	r2, [pc, #80]	; (810a9e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810a996:	4293      	cmp	r3, r2
 810a998:	d115      	bne.n	810a9c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810a99a:	68fb      	ldr	r3, [r7, #12]
 810a99c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810a9a0:	683b      	ldr	r3, [r7, #0]
 810a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a9a4:	051b      	lsls	r3, r3, #20
 810a9a6:	4313      	orrs	r3, r2
 810a9a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810a9aa:	68fb      	ldr	r3, [r7, #12]
 810a9ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810a9b0:	683b      	ldr	r3, [r7, #0]
 810a9b2:	69db      	ldr	r3, [r3, #28]
 810a9b4:	4313      	orrs	r3, r2
 810a9b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810a9b8:	68fb      	ldr	r3, [r7, #12]
 810a9ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810a9be:	683b      	ldr	r3, [r7, #0]
 810a9c0:	6a1b      	ldr	r3, [r3, #32]
 810a9c2:	4313      	orrs	r3, r2
 810a9c4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810a9c6:	687b      	ldr	r3, [r7, #4]
 810a9c8:	681b      	ldr	r3, [r3, #0]
 810a9ca:	68fa      	ldr	r2, [r7, #12]
 810a9cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810a9ce:	687b      	ldr	r3, [r7, #4]
 810a9d0:	2200      	movs	r2, #0
 810a9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810a9d6:	2300      	movs	r3, #0
}
 810a9d8:	4618      	mov	r0, r3
 810a9da:	3714      	adds	r7, #20
 810a9dc:	46bd      	mov	sp, r7
 810a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9e2:	4770      	bx	lr
 810a9e4:	40010000 	.word	0x40010000
 810a9e8:	40010400 	.word	0x40010400

0810a9ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a9ec:	b580      	push	{r7, lr}
 810a9ee:	b082      	sub	sp, #8
 810a9f0:	af00      	add	r7, sp, #0
 810a9f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	2b00      	cmp	r3, #0
 810a9f8:	d101      	bne.n	810a9fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a9fa:	2301      	movs	r3, #1
 810a9fc:	e042      	b.n	810aa84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a9fe:	687b      	ldr	r3, [r7, #4]
 810aa00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aa04:	2b00      	cmp	r3, #0
 810aa06:	d106      	bne.n	810aa16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	2200      	movs	r2, #0
 810aa0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810aa10:	6878      	ldr	r0, [r7, #4]
 810aa12:	f7f7 fbd3 	bl	81021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	2224      	movs	r2, #36	; 0x24
 810aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810aa1e:	687b      	ldr	r3, [r7, #4]
 810aa20:	681b      	ldr	r3, [r3, #0]
 810aa22:	681a      	ldr	r2, [r3, #0]
 810aa24:	687b      	ldr	r3, [r7, #4]
 810aa26:	681b      	ldr	r3, [r3, #0]
 810aa28:	f022 0201 	bic.w	r2, r2, #1
 810aa2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810aa2e:	6878      	ldr	r0, [r7, #4]
 810aa30:	f000 f82c 	bl	810aa8c <UART_SetConfig>
 810aa34:	4603      	mov	r3, r0
 810aa36:	2b01      	cmp	r3, #1
 810aa38:	d101      	bne.n	810aa3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810aa3a:	2301      	movs	r3, #1
 810aa3c:	e022      	b.n	810aa84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810aa3e:	687b      	ldr	r3, [r7, #4]
 810aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa42:	2b00      	cmp	r3, #0
 810aa44:	d002      	beq.n	810aa4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810aa46:	6878      	ldr	r0, [r7, #4]
 810aa48:	f000 fd80 	bl	810b54c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810aa4c:	687b      	ldr	r3, [r7, #4]
 810aa4e:	681b      	ldr	r3, [r3, #0]
 810aa50:	685a      	ldr	r2, [r3, #4]
 810aa52:	687b      	ldr	r3, [r7, #4]
 810aa54:	681b      	ldr	r3, [r3, #0]
 810aa56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810aa5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810aa5c:	687b      	ldr	r3, [r7, #4]
 810aa5e:	681b      	ldr	r3, [r3, #0]
 810aa60:	689a      	ldr	r2, [r3, #8]
 810aa62:	687b      	ldr	r3, [r7, #4]
 810aa64:	681b      	ldr	r3, [r3, #0]
 810aa66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810aa6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	681b      	ldr	r3, [r3, #0]
 810aa70:	681a      	ldr	r2, [r3, #0]
 810aa72:	687b      	ldr	r3, [r7, #4]
 810aa74:	681b      	ldr	r3, [r3, #0]
 810aa76:	f042 0201 	orr.w	r2, r2, #1
 810aa7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810aa7c:	6878      	ldr	r0, [r7, #4]
 810aa7e:	f000 fe07 	bl	810b690 <UART_CheckIdleState>
 810aa82:	4603      	mov	r3, r0
}
 810aa84:	4618      	mov	r0, r3
 810aa86:	3708      	adds	r7, #8
 810aa88:	46bd      	mov	sp, r7
 810aa8a:	bd80      	pop	{r7, pc}

0810aa8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810aa8c:	b5b0      	push	{r4, r5, r7, lr}
 810aa8e:	b08e      	sub	sp, #56	; 0x38
 810aa90:	af00      	add	r7, sp, #0
 810aa92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810aa94:	2300      	movs	r3, #0
 810aa96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	689a      	ldr	r2, [r3, #8]
 810aa9e:	687b      	ldr	r3, [r7, #4]
 810aaa0:	691b      	ldr	r3, [r3, #16]
 810aaa2:	431a      	orrs	r2, r3
 810aaa4:	687b      	ldr	r3, [r7, #4]
 810aaa6:	695b      	ldr	r3, [r3, #20]
 810aaa8:	431a      	orrs	r2, r3
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	69db      	ldr	r3, [r3, #28]
 810aaae:	4313      	orrs	r3, r2
 810aab0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	681b      	ldr	r3, [r3, #0]
 810aab6:	681a      	ldr	r2, [r3, #0]
 810aab8:	4bc0      	ldr	r3, [pc, #768]	; (810adbc <UART_SetConfig+0x330>)
 810aaba:	4013      	ands	r3, r2
 810aabc:	687a      	ldr	r2, [r7, #4]
 810aabe:	6812      	ldr	r2, [r2, #0]
 810aac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810aac2:	430b      	orrs	r3, r1
 810aac4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810aac6:	687b      	ldr	r3, [r7, #4]
 810aac8:	681b      	ldr	r3, [r3, #0]
 810aaca:	685b      	ldr	r3, [r3, #4]
 810aacc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810aad0:	687b      	ldr	r3, [r7, #4]
 810aad2:	68da      	ldr	r2, [r3, #12]
 810aad4:	687b      	ldr	r3, [r7, #4]
 810aad6:	681b      	ldr	r3, [r3, #0]
 810aad8:	430a      	orrs	r2, r1
 810aada:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810aadc:	687b      	ldr	r3, [r7, #4]
 810aade:	699b      	ldr	r3, [r3, #24]
 810aae0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810aae2:	687b      	ldr	r3, [r7, #4]
 810aae4:	681b      	ldr	r3, [r3, #0]
 810aae6:	4ab6      	ldr	r2, [pc, #728]	; (810adc0 <UART_SetConfig+0x334>)
 810aae8:	4293      	cmp	r3, r2
 810aaea:	d004      	beq.n	810aaf6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810aaec:	687b      	ldr	r3, [r7, #4]
 810aaee:	6a1b      	ldr	r3, [r3, #32]
 810aaf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810aaf2:	4313      	orrs	r3, r2
 810aaf4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810aaf6:	687b      	ldr	r3, [r7, #4]
 810aaf8:	681b      	ldr	r3, [r3, #0]
 810aafa:	689b      	ldr	r3, [r3, #8]
 810aafc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810ab00:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810ab04:	687a      	ldr	r2, [r7, #4]
 810ab06:	6812      	ldr	r2, [r2, #0]
 810ab08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810ab0a:	430b      	orrs	r3, r1
 810ab0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	681b      	ldr	r3, [r3, #0]
 810ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ab14:	f023 010f 	bic.w	r1, r3, #15
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810ab1c:	687b      	ldr	r3, [r7, #4]
 810ab1e:	681b      	ldr	r3, [r3, #0]
 810ab20:	430a      	orrs	r2, r1
 810ab22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	4aa6      	ldr	r2, [pc, #664]	; (810adc4 <UART_SetConfig+0x338>)
 810ab2a:	4293      	cmp	r3, r2
 810ab2c:	d176      	bne.n	810ac1c <UART_SetConfig+0x190>
 810ab2e:	4ba6      	ldr	r3, [pc, #664]	; (810adc8 <UART_SetConfig+0x33c>)
 810ab30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ab32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810ab36:	2b28      	cmp	r3, #40	; 0x28
 810ab38:	d86c      	bhi.n	810ac14 <UART_SetConfig+0x188>
 810ab3a:	a201      	add	r2, pc, #4	; (adr r2, 810ab40 <UART_SetConfig+0xb4>)
 810ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab40:	0810abe5 	.word	0x0810abe5
 810ab44:	0810ac15 	.word	0x0810ac15
 810ab48:	0810ac15 	.word	0x0810ac15
 810ab4c:	0810ac15 	.word	0x0810ac15
 810ab50:	0810ac15 	.word	0x0810ac15
 810ab54:	0810ac15 	.word	0x0810ac15
 810ab58:	0810ac15 	.word	0x0810ac15
 810ab5c:	0810ac15 	.word	0x0810ac15
 810ab60:	0810abed 	.word	0x0810abed
 810ab64:	0810ac15 	.word	0x0810ac15
 810ab68:	0810ac15 	.word	0x0810ac15
 810ab6c:	0810ac15 	.word	0x0810ac15
 810ab70:	0810ac15 	.word	0x0810ac15
 810ab74:	0810ac15 	.word	0x0810ac15
 810ab78:	0810ac15 	.word	0x0810ac15
 810ab7c:	0810ac15 	.word	0x0810ac15
 810ab80:	0810abf5 	.word	0x0810abf5
 810ab84:	0810ac15 	.word	0x0810ac15
 810ab88:	0810ac15 	.word	0x0810ac15
 810ab8c:	0810ac15 	.word	0x0810ac15
 810ab90:	0810ac15 	.word	0x0810ac15
 810ab94:	0810ac15 	.word	0x0810ac15
 810ab98:	0810ac15 	.word	0x0810ac15
 810ab9c:	0810ac15 	.word	0x0810ac15
 810aba0:	0810abfd 	.word	0x0810abfd
 810aba4:	0810ac15 	.word	0x0810ac15
 810aba8:	0810ac15 	.word	0x0810ac15
 810abac:	0810ac15 	.word	0x0810ac15
 810abb0:	0810ac15 	.word	0x0810ac15
 810abb4:	0810ac15 	.word	0x0810ac15
 810abb8:	0810ac15 	.word	0x0810ac15
 810abbc:	0810ac15 	.word	0x0810ac15
 810abc0:	0810ac05 	.word	0x0810ac05
 810abc4:	0810ac15 	.word	0x0810ac15
 810abc8:	0810ac15 	.word	0x0810ac15
 810abcc:	0810ac15 	.word	0x0810ac15
 810abd0:	0810ac15 	.word	0x0810ac15
 810abd4:	0810ac15 	.word	0x0810ac15
 810abd8:	0810ac15 	.word	0x0810ac15
 810abdc:	0810ac15 	.word	0x0810ac15
 810abe0:	0810ac0d 	.word	0x0810ac0d
 810abe4:	2301      	movs	r3, #1
 810abe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810abea:	e220      	b.n	810b02e <UART_SetConfig+0x5a2>
 810abec:	2304      	movs	r3, #4
 810abee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810abf2:	e21c      	b.n	810b02e <UART_SetConfig+0x5a2>
 810abf4:	2308      	movs	r3, #8
 810abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810abfa:	e218      	b.n	810b02e <UART_SetConfig+0x5a2>
 810abfc:	2310      	movs	r3, #16
 810abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac02:	e214      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac04:	2320      	movs	r3, #32
 810ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac0a:	e210      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac0c:	2340      	movs	r3, #64	; 0x40
 810ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac12:	e20c      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac14:	2380      	movs	r3, #128	; 0x80
 810ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac1a:	e208      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac1c:	687b      	ldr	r3, [r7, #4]
 810ac1e:	681b      	ldr	r3, [r3, #0]
 810ac20:	4a6a      	ldr	r2, [pc, #424]	; (810adcc <UART_SetConfig+0x340>)
 810ac22:	4293      	cmp	r3, r2
 810ac24:	d130      	bne.n	810ac88 <UART_SetConfig+0x1fc>
 810ac26:	4b68      	ldr	r3, [pc, #416]	; (810adc8 <UART_SetConfig+0x33c>)
 810ac28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ac2a:	f003 0307 	and.w	r3, r3, #7
 810ac2e:	2b05      	cmp	r3, #5
 810ac30:	d826      	bhi.n	810ac80 <UART_SetConfig+0x1f4>
 810ac32:	a201      	add	r2, pc, #4	; (adr r2, 810ac38 <UART_SetConfig+0x1ac>)
 810ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac38:	0810ac51 	.word	0x0810ac51
 810ac3c:	0810ac59 	.word	0x0810ac59
 810ac40:	0810ac61 	.word	0x0810ac61
 810ac44:	0810ac69 	.word	0x0810ac69
 810ac48:	0810ac71 	.word	0x0810ac71
 810ac4c:	0810ac79 	.word	0x0810ac79
 810ac50:	2300      	movs	r3, #0
 810ac52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac56:	e1ea      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac58:	2304      	movs	r3, #4
 810ac5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac5e:	e1e6      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac60:	2308      	movs	r3, #8
 810ac62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac66:	e1e2      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac68:	2310      	movs	r3, #16
 810ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac6e:	e1de      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac70:	2320      	movs	r3, #32
 810ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac76:	e1da      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac78:	2340      	movs	r3, #64	; 0x40
 810ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac7e:	e1d6      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac80:	2380      	movs	r3, #128	; 0x80
 810ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ac86:	e1d2      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ac88:	687b      	ldr	r3, [r7, #4]
 810ac8a:	681b      	ldr	r3, [r3, #0]
 810ac8c:	4a50      	ldr	r2, [pc, #320]	; (810add0 <UART_SetConfig+0x344>)
 810ac8e:	4293      	cmp	r3, r2
 810ac90:	d130      	bne.n	810acf4 <UART_SetConfig+0x268>
 810ac92:	4b4d      	ldr	r3, [pc, #308]	; (810adc8 <UART_SetConfig+0x33c>)
 810ac94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ac96:	f003 0307 	and.w	r3, r3, #7
 810ac9a:	2b05      	cmp	r3, #5
 810ac9c:	d826      	bhi.n	810acec <UART_SetConfig+0x260>
 810ac9e:	a201      	add	r2, pc, #4	; (adr r2, 810aca4 <UART_SetConfig+0x218>)
 810aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aca4:	0810acbd 	.word	0x0810acbd
 810aca8:	0810acc5 	.word	0x0810acc5
 810acac:	0810accd 	.word	0x0810accd
 810acb0:	0810acd5 	.word	0x0810acd5
 810acb4:	0810acdd 	.word	0x0810acdd
 810acb8:	0810ace5 	.word	0x0810ace5
 810acbc:	2300      	movs	r3, #0
 810acbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810acc2:	e1b4      	b.n	810b02e <UART_SetConfig+0x5a2>
 810acc4:	2304      	movs	r3, #4
 810acc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810acca:	e1b0      	b.n	810b02e <UART_SetConfig+0x5a2>
 810accc:	2308      	movs	r3, #8
 810acce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810acd2:	e1ac      	b.n	810b02e <UART_SetConfig+0x5a2>
 810acd4:	2310      	movs	r3, #16
 810acd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810acda:	e1a8      	b.n	810b02e <UART_SetConfig+0x5a2>
 810acdc:	2320      	movs	r3, #32
 810acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ace2:	e1a4      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ace4:	2340      	movs	r3, #64	; 0x40
 810ace6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810acea:	e1a0      	b.n	810b02e <UART_SetConfig+0x5a2>
 810acec:	2380      	movs	r3, #128	; 0x80
 810acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810acf2:	e19c      	b.n	810b02e <UART_SetConfig+0x5a2>
 810acf4:	687b      	ldr	r3, [r7, #4]
 810acf6:	681b      	ldr	r3, [r3, #0]
 810acf8:	4a36      	ldr	r2, [pc, #216]	; (810add4 <UART_SetConfig+0x348>)
 810acfa:	4293      	cmp	r3, r2
 810acfc:	d130      	bne.n	810ad60 <UART_SetConfig+0x2d4>
 810acfe:	4b32      	ldr	r3, [pc, #200]	; (810adc8 <UART_SetConfig+0x33c>)
 810ad00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ad02:	f003 0307 	and.w	r3, r3, #7
 810ad06:	2b05      	cmp	r3, #5
 810ad08:	d826      	bhi.n	810ad58 <UART_SetConfig+0x2cc>
 810ad0a:	a201      	add	r2, pc, #4	; (adr r2, 810ad10 <UART_SetConfig+0x284>)
 810ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad10:	0810ad29 	.word	0x0810ad29
 810ad14:	0810ad31 	.word	0x0810ad31
 810ad18:	0810ad39 	.word	0x0810ad39
 810ad1c:	0810ad41 	.word	0x0810ad41
 810ad20:	0810ad49 	.word	0x0810ad49
 810ad24:	0810ad51 	.word	0x0810ad51
 810ad28:	2300      	movs	r3, #0
 810ad2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad2e:	e17e      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad30:	2304      	movs	r3, #4
 810ad32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad36:	e17a      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad38:	2308      	movs	r3, #8
 810ad3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad3e:	e176      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad40:	2310      	movs	r3, #16
 810ad42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad46:	e172      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad48:	2320      	movs	r3, #32
 810ad4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad4e:	e16e      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad50:	2340      	movs	r3, #64	; 0x40
 810ad52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad56:	e16a      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad58:	2380      	movs	r3, #128	; 0x80
 810ad5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad5e:	e166      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	681b      	ldr	r3, [r3, #0]
 810ad64:	4a1c      	ldr	r2, [pc, #112]	; (810add8 <UART_SetConfig+0x34c>)
 810ad66:	4293      	cmp	r3, r2
 810ad68:	d140      	bne.n	810adec <UART_SetConfig+0x360>
 810ad6a:	4b17      	ldr	r3, [pc, #92]	; (810adc8 <UART_SetConfig+0x33c>)
 810ad6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ad6e:	f003 0307 	and.w	r3, r3, #7
 810ad72:	2b05      	cmp	r3, #5
 810ad74:	d836      	bhi.n	810ade4 <UART_SetConfig+0x358>
 810ad76:	a201      	add	r2, pc, #4	; (adr r2, 810ad7c <UART_SetConfig+0x2f0>)
 810ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad7c:	0810ad95 	.word	0x0810ad95
 810ad80:	0810ad9d 	.word	0x0810ad9d
 810ad84:	0810ada5 	.word	0x0810ada5
 810ad88:	0810adad 	.word	0x0810adad
 810ad8c:	0810adb5 	.word	0x0810adb5
 810ad90:	0810addd 	.word	0x0810addd
 810ad94:	2300      	movs	r3, #0
 810ad96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ad9a:	e148      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ad9c:	2304      	movs	r3, #4
 810ad9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ada2:	e144      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ada4:	2308      	movs	r3, #8
 810ada6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810adaa:	e140      	b.n	810b02e <UART_SetConfig+0x5a2>
 810adac:	2310      	movs	r3, #16
 810adae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810adb2:	e13c      	b.n	810b02e <UART_SetConfig+0x5a2>
 810adb4:	2320      	movs	r3, #32
 810adb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810adba:	e138      	b.n	810b02e <UART_SetConfig+0x5a2>
 810adbc:	cfff69f3 	.word	0xcfff69f3
 810adc0:	58000c00 	.word	0x58000c00
 810adc4:	40011000 	.word	0x40011000
 810adc8:	58024400 	.word	0x58024400
 810adcc:	40004400 	.word	0x40004400
 810add0:	40004800 	.word	0x40004800
 810add4:	40004c00 	.word	0x40004c00
 810add8:	40005000 	.word	0x40005000
 810addc:	2340      	movs	r3, #64	; 0x40
 810adde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ade2:	e124      	b.n	810b02e <UART_SetConfig+0x5a2>
 810ade4:	2380      	movs	r3, #128	; 0x80
 810ade6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810adea:	e120      	b.n	810b02e <UART_SetConfig+0x5a2>
 810adec:	687b      	ldr	r3, [r7, #4]
 810adee:	681b      	ldr	r3, [r3, #0]
 810adf0:	4acc      	ldr	r2, [pc, #816]	; (810b124 <UART_SetConfig+0x698>)
 810adf2:	4293      	cmp	r3, r2
 810adf4:	d176      	bne.n	810aee4 <UART_SetConfig+0x458>
 810adf6:	4bcc      	ldr	r3, [pc, #816]	; (810b128 <UART_SetConfig+0x69c>)
 810adf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810adfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810adfe:	2b28      	cmp	r3, #40	; 0x28
 810ae00:	d86c      	bhi.n	810aedc <UART_SetConfig+0x450>
 810ae02:	a201      	add	r2, pc, #4	; (adr r2, 810ae08 <UART_SetConfig+0x37c>)
 810ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae08:	0810aead 	.word	0x0810aead
 810ae0c:	0810aedd 	.word	0x0810aedd
 810ae10:	0810aedd 	.word	0x0810aedd
 810ae14:	0810aedd 	.word	0x0810aedd
 810ae18:	0810aedd 	.word	0x0810aedd
 810ae1c:	0810aedd 	.word	0x0810aedd
 810ae20:	0810aedd 	.word	0x0810aedd
 810ae24:	0810aedd 	.word	0x0810aedd
 810ae28:	0810aeb5 	.word	0x0810aeb5
 810ae2c:	0810aedd 	.word	0x0810aedd
 810ae30:	0810aedd 	.word	0x0810aedd
 810ae34:	0810aedd 	.word	0x0810aedd
 810ae38:	0810aedd 	.word	0x0810aedd
 810ae3c:	0810aedd 	.word	0x0810aedd
 810ae40:	0810aedd 	.word	0x0810aedd
 810ae44:	0810aedd 	.word	0x0810aedd
 810ae48:	0810aebd 	.word	0x0810aebd
 810ae4c:	0810aedd 	.word	0x0810aedd
 810ae50:	0810aedd 	.word	0x0810aedd
 810ae54:	0810aedd 	.word	0x0810aedd
 810ae58:	0810aedd 	.word	0x0810aedd
 810ae5c:	0810aedd 	.word	0x0810aedd
 810ae60:	0810aedd 	.word	0x0810aedd
 810ae64:	0810aedd 	.word	0x0810aedd
 810ae68:	0810aec5 	.word	0x0810aec5
 810ae6c:	0810aedd 	.word	0x0810aedd
 810ae70:	0810aedd 	.word	0x0810aedd
 810ae74:	0810aedd 	.word	0x0810aedd
 810ae78:	0810aedd 	.word	0x0810aedd
 810ae7c:	0810aedd 	.word	0x0810aedd
 810ae80:	0810aedd 	.word	0x0810aedd
 810ae84:	0810aedd 	.word	0x0810aedd
 810ae88:	0810aecd 	.word	0x0810aecd
 810ae8c:	0810aedd 	.word	0x0810aedd
 810ae90:	0810aedd 	.word	0x0810aedd
 810ae94:	0810aedd 	.word	0x0810aedd
 810ae98:	0810aedd 	.word	0x0810aedd
 810ae9c:	0810aedd 	.word	0x0810aedd
 810aea0:	0810aedd 	.word	0x0810aedd
 810aea4:	0810aedd 	.word	0x0810aedd
 810aea8:	0810aed5 	.word	0x0810aed5
 810aeac:	2301      	movs	r3, #1
 810aeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aeb2:	e0bc      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aeb4:	2304      	movs	r3, #4
 810aeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aeba:	e0b8      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aebc:	2308      	movs	r3, #8
 810aebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aec2:	e0b4      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aec4:	2310      	movs	r3, #16
 810aec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aeca:	e0b0      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aecc:	2320      	movs	r3, #32
 810aece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aed2:	e0ac      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aed4:	2340      	movs	r3, #64	; 0x40
 810aed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aeda:	e0a8      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aedc:	2380      	movs	r3, #128	; 0x80
 810aede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aee2:	e0a4      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aee4:	687b      	ldr	r3, [r7, #4]
 810aee6:	681b      	ldr	r3, [r3, #0]
 810aee8:	4a90      	ldr	r2, [pc, #576]	; (810b12c <UART_SetConfig+0x6a0>)
 810aeea:	4293      	cmp	r3, r2
 810aeec:	d130      	bne.n	810af50 <UART_SetConfig+0x4c4>
 810aeee:	4b8e      	ldr	r3, [pc, #568]	; (810b128 <UART_SetConfig+0x69c>)
 810aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810aef2:	f003 0307 	and.w	r3, r3, #7
 810aef6:	2b05      	cmp	r3, #5
 810aef8:	d826      	bhi.n	810af48 <UART_SetConfig+0x4bc>
 810aefa:	a201      	add	r2, pc, #4	; (adr r2, 810af00 <UART_SetConfig+0x474>)
 810aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af00:	0810af19 	.word	0x0810af19
 810af04:	0810af21 	.word	0x0810af21
 810af08:	0810af29 	.word	0x0810af29
 810af0c:	0810af31 	.word	0x0810af31
 810af10:	0810af39 	.word	0x0810af39
 810af14:	0810af41 	.word	0x0810af41
 810af18:	2300      	movs	r3, #0
 810af1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af1e:	e086      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af20:	2304      	movs	r3, #4
 810af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af26:	e082      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af28:	2308      	movs	r3, #8
 810af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af2e:	e07e      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af30:	2310      	movs	r3, #16
 810af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af36:	e07a      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af38:	2320      	movs	r3, #32
 810af3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af3e:	e076      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af40:	2340      	movs	r3, #64	; 0x40
 810af42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af46:	e072      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af48:	2380      	movs	r3, #128	; 0x80
 810af4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af4e:	e06e      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af50:	687b      	ldr	r3, [r7, #4]
 810af52:	681b      	ldr	r3, [r3, #0]
 810af54:	4a76      	ldr	r2, [pc, #472]	; (810b130 <UART_SetConfig+0x6a4>)
 810af56:	4293      	cmp	r3, r2
 810af58:	d130      	bne.n	810afbc <UART_SetConfig+0x530>
 810af5a:	4b73      	ldr	r3, [pc, #460]	; (810b128 <UART_SetConfig+0x69c>)
 810af5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810af5e:	f003 0307 	and.w	r3, r3, #7
 810af62:	2b05      	cmp	r3, #5
 810af64:	d826      	bhi.n	810afb4 <UART_SetConfig+0x528>
 810af66:	a201      	add	r2, pc, #4	; (adr r2, 810af6c <UART_SetConfig+0x4e0>)
 810af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af6c:	0810af85 	.word	0x0810af85
 810af70:	0810af8d 	.word	0x0810af8d
 810af74:	0810af95 	.word	0x0810af95
 810af78:	0810af9d 	.word	0x0810af9d
 810af7c:	0810afa5 	.word	0x0810afa5
 810af80:	0810afad 	.word	0x0810afad
 810af84:	2300      	movs	r3, #0
 810af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af8a:	e050      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af8c:	2304      	movs	r3, #4
 810af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af92:	e04c      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af94:	2308      	movs	r3, #8
 810af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810af9a:	e048      	b.n	810b02e <UART_SetConfig+0x5a2>
 810af9c:	2310      	movs	r3, #16
 810af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810afa2:	e044      	b.n	810b02e <UART_SetConfig+0x5a2>
 810afa4:	2320      	movs	r3, #32
 810afa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810afaa:	e040      	b.n	810b02e <UART_SetConfig+0x5a2>
 810afac:	2340      	movs	r3, #64	; 0x40
 810afae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810afb2:	e03c      	b.n	810b02e <UART_SetConfig+0x5a2>
 810afb4:	2380      	movs	r3, #128	; 0x80
 810afb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810afba:	e038      	b.n	810b02e <UART_SetConfig+0x5a2>
 810afbc:	687b      	ldr	r3, [r7, #4]
 810afbe:	681b      	ldr	r3, [r3, #0]
 810afc0:	4a5c      	ldr	r2, [pc, #368]	; (810b134 <UART_SetConfig+0x6a8>)
 810afc2:	4293      	cmp	r3, r2
 810afc4:	d130      	bne.n	810b028 <UART_SetConfig+0x59c>
 810afc6:	4b58      	ldr	r3, [pc, #352]	; (810b128 <UART_SetConfig+0x69c>)
 810afc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810afca:	f003 0307 	and.w	r3, r3, #7
 810afce:	2b05      	cmp	r3, #5
 810afd0:	d826      	bhi.n	810b020 <UART_SetConfig+0x594>
 810afd2:	a201      	add	r2, pc, #4	; (adr r2, 810afd8 <UART_SetConfig+0x54c>)
 810afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810afd8:	0810aff1 	.word	0x0810aff1
 810afdc:	0810aff9 	.word	0x0810aff9
 810afe0:	0810b001 	.word	0x0810b001
 810afe4:	0810b009 	.word	0x0810b009
 810afe8:	0810b011 	.word	0x0810b011
 810afec:	0810b019 	.word	0x0810b019
 810aff0:	2302      	movs	r3, #2
 810aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810aff6:	e01a      	b.n	810b02e <UART_SetConfig+0x5a2>
 810aff8:	2304      	movs	r3, #4
 810affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810affe:	e016      	b.n	810b02e <UART_SetConfig+0x5a2>
 810b000:	2308      	movs	r3, #8
 810b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b006:	e012      	b.n	810b02e <UART_SetConfig+0x5a2>
 810b008:	2310      	movs	r3, #16
 810b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b00e:	e00e      	b.n	810b02e <UART_SetConfig+0x5a2>
 810b010:	2320      	movs	r3, #32
 810b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b016:	e00a      	b.n	810b02e <UART_SetConfig+0x5a2>
 810b018:	2340      	movs	r3, #64	; 0x40
 810b01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b01e:	e006      	b.n	810b02e <UART_SetConfig+0x5a2>
 810b020:	2380      	movs	r3, #128	; 0x80
 810b022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b026:	e002      	b.n	810b02e <UART_SetConfig+0x5a2>
 810b028:	2380      	movs	r3, #128	; 0x80
 810b02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b02e:	687b      	ldr	r3, [r7, #4]
 810b030:	681b      	ldr	r3, [r3, #0]
 810b032:	4a40      	ldr	r2, [pc, #256]	; (810b134 <UART_SetConfig+0x6a8>)
 810b034:	4293      	cmp	r3, r2
 810b036:	f040 80ef 	bne.w	810b218 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b03a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b03e:	2b20      	cmp	r3, #32
 810b040:	dc46      	bgt.n	810b0d0 <UART_SetConfig+0x644>
 810b042:	2b02      	cmp	r3, #2
 810b044:	f2c0 8081 	blt.w	810b14a <UART_SetConfig+0x6be>
 810b048:	3b02      	subs	r3, #2
 810b04a:	2b1e      	cmp	r3, #30
 810b04c:	d87d      	bhi.n	810b14a <UART_SetConfig+0x6be>
 810b04e:	a201      	add	r2, pc, #4	; (adr r2, 810b054 <UART_SetConfig+0x5c8>)
 810b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b054:	0810b0d7 	.word	0x0810b0d7
 810b058:	0810b14b 	.word	0x0810b14b
 810b05c:	0810b0df 	.word	0x0810b0df
 810b060:	0810b14b 	.word	0x0810b14b
 810b064:	0810b14b 	.word	0x0810b14b
 810b068:	0810b14b 	.word	0x0810b14b
 810b06c:	0810b0ef 	.word	0x0810b0ef
 810b070:	0810b14b 	.word	0x0810b14b
 810b074:	0810b14b 	.word	0x0810b14b
 810b078:	0810b14b 	.word	0x0810b14b
 810b07c:	0810b14b 	.word	0x0810b14b
 810b080:	0810b14b 	.word	0x0810b14b
 810b084:	0810b14b 	.word	0x0810b14b
 810b088:	0810b14b 	.word	0x0810b14b
 810b08c:	0810b0ff 	.word	0x0810b0ff
 810b090:	0810b14b 	.word	0x0810b14b
 810b094:	0810b14b 	.word	0x0810b14b
 810b098:	0810b14b 	.word	0x0810b14b
 810b09c:	0810b14b 	.word	0x0810b14b
 810b0a0:	0810b14b 	.word	0x0810b14b
 810b0a4:	0810b14b 	.word	0x0810b14b
 810b0a8:	0810b14b 	.word	0x0810b14b
 810b0ac:	0810b14b 	.word	0x0810b14b
 810b0b0:	0810b14b 	.word	0x0810b14b
 810b0b4:	0810b14b 	.word	0x0810b14b
 810b0b8:	0810b14b 	.word	0x0810b14b
 810b0bc:	0810b14b 	.word	0x0810b14b
 810b0c0:	0810b14b 	.word	0x0810b14b
 810b0c4:	0810b14b 	.word	0x0810b14b
 810b0c8:	0810b14b 	.word	0x0810b14b
 810b0cc:	0810b13d 	.word	0x0810b13d
 810b0d0:	2b40      	cmp	r3, #64	; 0x40
 810b0d2:	d036      	beq.n	810b142 <UART_SetConfig+0x6b6>
 810b0d4:	e039      	b.n	810b14a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b0d6:	f7fc f84d 	bl	8107174 <HAL_RCCEx_GetD3PCLK1Freq>
 810b0da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b0dc:	e03b      	b.n	810b156 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b0de:	f107 0314 	add.w	r3, r7, #20
 810b0e2:	4618      	mov	r0, r3
 810b0e4:	f7fc f85c 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b0e8:	69bb      	ldr	r3, [r7, #24]
 810b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b0ec:	e033      	b.n	810b156 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b0ee:	f107 0308 	add.w	r3, r7, #8
 810b0f2:	4618      	mov	r0, r3
 810b0f4:	f7fc f9a8 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b0f8:	68fb      	ldr	r3, [r7, #12]
 810b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b0fc:	e02b      	b.n	810b156 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b0fe:	4b0a      	ldr	r3, [pc, #40]	; (810b128 <UART_SetConfig+0x69c>)
 810b100:	681b      	ldr	r3, [r3, #0]
 810b102:	f003 0320 	and.w	r3, r3, #32
 810b106:	2b00      	cmp	r3, #0
 810b108:	d009      	beq.n	810b11e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b10a:	4b07      	ldr	r3, [pc, #28]	; (810b128 <UART_SetConfig+0x69c>)
 810b10c:	681b      	ldr	r3, [r3, #0]
 810b10e:	08db      	lsrs	r3, r3, #3
 810b110:	f003 0303 	and.w	r3, r3, #3
 810b114:	4a08      	ldr	r2, [pc, #32]	; (810b138 <UART_SetConfig+0x6ac>)
 810b116:	fa22 f303 	lsr.w	r3, r2, r3
 810b11a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b11c:	e01b      	b.n	810b156 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810b11e:	4b06      	ldr	r3, [pc, #24]	; (810b138 <UART_SetConfig+0x6ac>)
 810b120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b122:	e018      	b.n	810b156 <UART_SetConfig+0x6ca>
 810b124:	40011400 	.word	0x40011400
 810b128:	58024400 	.word	0x58024400
 810b12c:	40007800 	.word	0x40007800
 810b130:	40007c00 	.word	0x40007c00
 810b134:	58000c00 	.word	0x58000c00
 810b138:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b13c:	4bc4      	ldr	r3, [pc, #784]	; (810b450 <UART_SetConfig+0x9c4>)
 810b13e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b140:	e009      	b.n	810b156 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b148:	e005      	b.n	810b156 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810b14a:	2300      	movs	r3, #0
 810b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b14e:	2301      	movs	r3, #1
 810b150:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b158:	2b00      	cmp	r3, #0
 810b15a:	f000 81da 	beq.w	810b512 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b162:	4abc      	ldr	r2, [pc, #752]	; (810b454 <UART_SetConfig+0x9c8>)
 810b164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b168:	461a      	mov	r2, r3
 810b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b16c:	fbb3 f3f2 	udiv	r3, r3, r2
 810b170:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	685a      	ldr	r2, [r3, #4]
 810b176:	4613      	mov	r3, r2
 810b178:	005b      	lsls	r3, r3, #1
 810b17a:	4413      	add	r3, r2
 810b17c:	6a3a      	ldr	r2, [r7, #32]
 810b17e:	429a      	cmp	r2, r3
 810b180:	d305      	bcc.n	810b18e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b182:	687b      	ldr	r3, [r7, #4]
 810b184:	685b      	ldr	r3, [r3, #4]
 810b186:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b188:	6a3a      	ldr	r2, [r7, #32]
 810b18a:	429a      	cmp	r2, r3
 810b18c:	d903      	bls.n	810b196 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810b18e:	2301      	movs	r3, #1
 810b190:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b194:	e1bd      	b.n	810b512 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b198:	4618      	mov	r0, r3
 810b19a:	f04f 0100 	mov.w	r1, #0
 810b19e:	687b      	ldr	r3, [r7, #4]
 810b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b1a2:	4aac      	ldr	r2, [pc, #688]	; (810b454 <UART_SetConfig+0x9c8>)
 810b1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b1a8:	b29a      	uxth	r2, r3
 810b1aa:	f04f 0300 	mov.w	r3, #0
 810b1ae:	f7f5 f893 	bl	81002d8 <__aeabi_uldivmod>
 810b1b2:	4602      	mov	r2, r0
 810b1b4:	460b      	mov	r3, r1
 810b1b6:	4610      	mov	r0, r2
 810b1b8:	4619      	mov	r1, r3
 810b1ba:	f04f 0200 	mov.w	r2, #0
 810b1be:	f04f 0300 	mov.w	r3, #0
 810b1c2:	020b      	lsls	r3, r1, #8
 810b1c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b1c8:	0202      	lsls	r2, r0, #8
 810b1ca:	6879      	ldr	r1, [r7, #4]
 810b1cc:	6849      	ldr	r1, [r1, #4]
 810b1ce:	0849      	lsrs	r1, r1, #1
 810b1d0:	4608      	mov	r0, r1
 810b1d2:	f04f 0100 	mov.w	r1, #0
 810b1d6:	1814      	adds	r4, r2, r0
 810b1d8:	eb43 0501 	adc.w	r5, r3, r1
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	685b      	ldr	r3, [r3, #4]
 810b1e0:	461a      	mov	r2, r3
 810b1e2:	f04f 0300 	mov.w	r3, #0
 810b1e6:	4620      	mov	r0, r4
 810b1e8:	4629      	mov	r1, r5
 810b1ea:	f7f5 f875 	bl	81002d8 <__aeabi_uldivmod>
 810b1ee:	4602      	mov	r2, r0
 810b1f0:	460b      	mov	r3, r1
 810b1f2:	4613      	mov	r3, r2
 810b1f4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b1f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810b1fc:	d308      	bcc.n	810b210 <UART_SetConfig+0x784>
 810b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b204:	d204      	bcs.n	810b210 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	681b      	ldr	r3, [r3, #0]
 810b20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b20c:	60da      	str	r2, [r3, #12]
 810b20e:	e180      	b.n	810b512 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810b210:	2301      	movs	r3, #1
 810b212:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b216:	e17c      	b.n	810b512 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	69db      	ldr	r3, [r3, #28]
 810b21c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b220:	f040 80be 	bne.w	810b3a0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 810b224:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b228:	2b20      	cmp	r3, #32
 810b22a:	dc49      	bgt.n	810b2c0 <UART_SetConfig+0x834>
 810b22c:	2b00      	cmp	r3, #0
 810b22e:	db7c      	blt.n	810b32a <UART_SetConfig+0x89e>
 810b230:	2b20      	cmp	r3, #32
 810b232:	d87a      	bhi.n	810b32a <UART_SetConfig+0x89e>
 810b234:	a201      	add	r2, pc, #4	; (adr r2, 810b23c <UART_SetConfig+0x7b0>)
 810b236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b23a:	bf00      	nop
 810b23c:	0810b2c7 	.word	0x0810b2c7
 810b240:	0810b2cf 	.word	0x0810b2cf
 810b244:	0810b32b 	.word	0x0810b32b
 810b248:	0810b32b 	.word	0x0810b32b
 810b24c:	0810b2d7 	.word	0x0810b2d7
 810b250:	0810b32b 	.word	0x0810b32b
 810b254:	0810b32b 	.word	0x0810b32b
 810b258:	0810b32b 	.word	0x0810b32b
 810b25c:	0810b2e7 	.word	0x0810b2e7
 810b260:	0810b32b 	.word	0x0810b32b
 810b264:	0810b32b 	.word	0x0810b32b
 810b268:	0810b32b 	.word	0x0810b32b
 810b26c:	0810b32b 	.word	0x0810b32b
 810b270:	0810b32b 	.word	0x0810b32b
 810b274:	0810b32b 	.word	0x0810b32b
 810b278:	0810b32b 	.word	0x0810b32b
 810b27c:	0810b2f7 	.word	0x0810b2f7
 810b280:	0810b32b 	.word	0x0810b32b
 810b284:	0810b32b 	.word	0x0810b32b
 810b288:	0810b32b 	.word	0x0810b32b
 810b28c:	0810b32b 	.word	0x0810b32b
 810b290:	0810b32b 	.word	0x0810b32b
 810b294:	0810b32b 	.word	0x0810b32b
 810b298:	0810b32b 	.word	0x0810b32b
 810b29c:	0810b32b 	.word	0x0810b32b
 810b2a0:	0810b32b 	.word	0x0810b32b
 810b2a4:	0810b32b 	.word	0x0810b32b
 810b2a8:	0810b32b 	.word	0x0810b32b
 810b2ac:	0810b32b 	.word	0x0810b32b
 810b2b0:	0810b32b 	.word	0x0810b32b
 810b2b4:	0810b32b 	.word	0x0810b32b
 810b2b8:	0810b32b 	.word	0x0810b32b
 810b2bc:	0810b31d 	.word	0x0810b31d
 810b2c0:	2b40      	cmp	r3, #64	; 0x40
 810b2c2:	d02e      	beq.n	810b322 <UART_SetConfig+0x896>
 810b2c4:	e031      	b.n	810b32a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b2c6:	f7fa fae7 	bl	8105898 <HAL_RCC_GetPCLK1Freq>
 810b2ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b2cc:	e033      	b.n	810b336 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b2ce:	f7fa faf9 	bl	81058c4 <HAL_RCC_GetPCLK2Freq>
 810b2d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b2d4:	e02f      	b.n	810b336 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b2d6:	f107 0314 	add.w	r3, r7, #20
 810b2da:	4618      	mov	r0, r3
 810b2dc:	f7fb ff60 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b2e0:	69bb      	ldr	r3, [r7, #24]
 810b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b2e4:	e027      	b.n	810b336 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b2e6:	f107 0308 	add.w	r3, r7, #8
 810b2ea:	4618      	mov	r0, r3
 810b2ec:	f7fc f8ac 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b2f0:	68fb      	ldr	r3, [r7, #12]
 810b2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b2f4:	e01f      	b.n	810b336 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b2f6:	4b58      	ldr	r3, [pc, #352]	; (810b458 <UART_SetConfig+0x9cc>)
 810b2f8:	681b      	ldr	r3, [r3, #0]
 810b2fa:	f003 0320 	and.w	r3, r3, #32
 810b2fe:	2b00      	cmp	r3, #0
 810b300:	d009      	beq.n	810b316 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b302:	4b55      	ldr	r3, [pc, #340]	; (810b458 <UART_SetConfig+0x9cc>)
 810b304:	681b      	ldr	r3, [r3, #0]
 810b306:	08db      	lsrs	r3, r3, #3
 810b308:	f003 0303 	and.w	r3, r3, #3
 810b30c:	4a53      	ldr	r2, [pc, #332]	; (810b45c <UART_SetConfig+0x9d0>)
 810b30e:	fa22 f303 	lsr.w	r3, r2, r3
 810b312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b314:	e00f      	b.n	810b336 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810b316:	4b51      	ldr	r3, [pc, #324]	; (810b45c <UART_SetConfig+0x9d0>)
 810b318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b31a:	e00c      	b.n	810b336 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b31c:	4b4c      	ldr	r3, [pc, #304]	; (810b450 <UART_SetConfig+0x9c4>)
 810b31e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b320:	e009      	b.n	810b336 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b328:	e005      	b.n	810b336 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810b32a:	2300      	movs	r3, #0
 810b32c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b32e:	2301      	movs	r3, #1
 810b330:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b338:	2b00      	cmp	r3, #0
 810b33a:	f000 80ea 	beq.w	810b512 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b33e:	687b      	ldr	r3, [r7, #4]
 810b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b342:	4a44      	ldr	r2, [pc, #272]	; (810b454 <UART_SetConfig+0x9c8>)
 810b344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b348:	461a      	mov	r2, r3
 810b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b34c:	fbb3 f3f2 	udiv	r3, r3, r2
 810b350:	005a      	lsls	r2, r3, #1
 810b352:	687b      	ldr	r3, [r7, #4]
 810b354:	685b      	ldr	r3, [r3, #4]
 810b356:	085b      	lsrs	r3, r3, #1
 810b358:	441a      	add	r2, r3
 810b35a:	687b      	ldr	r3, [r7, #4]
 810b35c:	685b      	ldr	r3, [r3, #4]
 810b35e:	fbb2 f3f3 	udiv	r3, r2, r3
 810b362:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b366:	2b0f      	cmp	r3, #15
 810b368:	d916      	bls.n	810b398 <UART_SetConfig+0x90c>
 810b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b370:	d212      	bcs.n	810b398 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b374:	b29b      	uxth	r3, r3
 810b376:	f023 030f 	bic.w	r3, r3, #15
 810b37a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b37e:	085b      	lsrs	r3, r3, #1
 810b380:	b29b      	uxth	r3, r3
 810b382:	f003 0307 	and.w	r3, r3, #7
 810b386:	b29a      	uxth	r2, r3
 810b388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810b38a:	4313      	orrs	r3, r2
 810b38c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810b38e:	687b      	ldr	r3, [r7, #4]
 810b390:	681b      	ldr	r3, [r3, #0]
 810b392:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810b394:	60da      	str	r2, [r3, #12]
 810b396:	e0bc      	b.n	810b512 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810b398:	2301      	movs	r3, #1
 810b39a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b39e:	e0b8      	b.n	810b512 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810b3a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b3a4:	2b20      	cmp	r3, #32
 810b3a6:	dc4b      	bgt.n	810b440 <UART_SetConfig+0x9b4>
 810b3a8:	2b00      	cmp	r3, #0
 810b3aa:	f2c0 8087 	blt.w	810b4bc <UART_SetConfig+0xa30>
 810b3ae:	2b20      	cmp	r3, #32
 810b3b0:	f200 8084 	bhi.w	810b4bc <UART_SetConfig+0xa30>
 810b3b4:	a201      	add	r2, pc, #4	; (adr r2, 810b3bc <UART_SetConfig+0x930>)
 810b3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b3ba:	bf00      	nop
 810b3bc:	0810b447 	.word	0x0810b447
 810b3c0:	0810b461 	.word	0x0810b461
 810b3c4:	0810b4bd 	.word	0x0810b4bd
 810b3c8:	0810b4bd 	.word	0x0810b4bd
 810b3cc:	0810b469 	.word	0x0810b469
 810b3d0:	0810b4bd 	.word	0x0810b4bd
 810b3d4:	0810b4bd 	.word	0x0810b4bd
 810b3d8:	0810b4bd 	.word	0x0810b4bd
 810b3dc:	0810b479 	.word	0x0810b479
 810b3e0:	0810b4bd 	.word	0x0810b4bd
 810b3e4:	0810b4bd 	.word	0x0810b4bd
 810b3e8:	0810b4bd 	.word	0x0810b4bd
 810b3ec:	0810b4bd 	.word	0x0810b4bd
 810b3f0:	0810b4bd 	.word	0x0810b4bd
 810b3f4:	0810b4bd 	.word	0x0810b4bd
 810b3f8:	0810b4bd 	.word	0x0810b4bd
 810b3fc:	0810b489 	.word	0x0810b489
 810b400:	0810b4bd 	.word	0x0810b4bd
 810b404:	0810b4bd 	.word	0x0810b4bd
 810b408:	0810b4bd 	.word	0x0810b4bd
 810b40c:	0810b4bd 	.word	0x0810b4bd
 810b410:	0810b4bd 	.word	0x0810b4bd
 810b414:	0810b4bd 	.word	0x0810b4bd
 810b418:	0810b4bd 	.word	0x0810b4bd
 810b41c:	0810b4bd 	.word	0x0810b4bd
 810b420:	0810b4bd 	.word	0x0810b4bd
 810b424:	0810b4bd 	.word	0x0810b4bd
 810b428:	0810b4bd 	.word	0x0810b4bd
 810b42c:	0810b4bd 	.word	0x0810b4bd
 810b430:	0810b4bd 	.word	0x0810b4bd
 810b434:	0810b4bd 	.word	0x0810b4bd
 810b438:	0810b4bd 	.word	0x0810b4bd
 810b43c:	0810b4af 	.word	0x0810b4af
 810b440:	2b40      	cmp	r3, #64	; 0x40
 810b442:	d037      	beq.n	810b4b4 <UART_SetConfig+0xa28>
 810b444:	e03a      	b.n	810b4bc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b446:	f7fa fa27 	bl	8105898 <HAL_RCC_GetPCLK1Freq>
 810b44a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b44c:	e03c      	b.n	810b4c8 <UART_SetConfig+0xa3c>
 810b44e:	bf00      	nop
 810b450:	003d0900 	.word	0x003d0900
 810b454:	0810ccac 	.word	0x0810ccac
 810b458:	58024400 	.word	0x58024400
 810b45c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b460:	f7fa fa30 	bl	81058c4 <HAL_RCC_GetPCLK2Freq>
 810b464:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b466:	e02f      	b.n	810b4c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b468:	f107 0314 	add.w	r3, r7, #20
 810b46c:	4618      	mov	r0, r3
 810b46e:	f7fb fe97 	bl	81071a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b472:	69bb      	ldr	r3, [r7, #24]
 810b474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b476:	e027      	b.n	810b4c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b478:	f107 0308 	add.w	r3, r7, #8
 810b47c:	4618      	mov	r0, r3
 810b47e:	f7fb ffe3 	bl	8107448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b482:	68fb      	ldr	r3, [r7, #12]
 810b484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b486:	e01f      	b.n	810b4c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b488:	4b2c      	ldr	r3, [pc, #176]	; (810b53c <UART_SetConfig+0xab0>)
 810b48a:	681b      	ldr	r3, [r3, #0]
 810b48c:	f003 0320 	and.w	r3, r3, #32
 810b490:	2b00      	cmp	r3, #0
 810b492:	d009      	beq.n	810b4a8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b494:	4b29      	ldr	r3, [pc, #164]	; (810b53c <UART_SetConfig+0xab0>)
 810b496:	681b      	ldr	r3, [r3, #0]
 810b498:	08db      	lsrs	r3, r3, #3
 810b49a:	f003 0303 	and.w	r3, r3, #3
 810b49e:	4a28      	ldr	r2, [pc, #160]	; (810b540 <UART_SetConfig+0xab4>)
 810b4a0:	fa22 f303 	lsr.w	r3, r2, r3
 810b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b4a6:	e00f      	b.n	810b4c8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810b4a8:	4b25      	ldr	r3, [pc, #148]	; (810b540 <UART_SetConfig+0xab4>)
 810b4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b4ac:	e00c      	b.n	810b4c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b4ae:	4b25      	ldr	r3, [pc, #148]	; (810b544 <UART_SetConfig+0xab8>)
 810b4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b4b2:	e009      	b.n	810b4c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b4b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b4ba:	e005      	b.n	810b4c8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810b4bc:	2300      	movs	r3, #0
 810b4be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b4c0:	2301      	movs	r3, #1
 810b4c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b4c6:	bf00      	nop
    }

    if (pclk != 0U)
 810b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b4ca:	2b00      	cmp	r3, #0
 810b4cc:	d021      	beq.n	810b512 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b4ce:	687b      	ldr	r3, [r7, #4]
 810b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b4d2:	4a1d      	ldr	r2, [pc, #116]	; (810b548 <UART_SetConfig+0xabc>)
 810b4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b4d8:	461a      	mov	r2, r3
 810b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b4dc:	fbb3 f2f2 	udiv	r2, r3, r2
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	685b      	ldr	r3, [r3, #4]
 810b4e4:	085b      	lsrs	r3, r3, #1
 810b4e6:	441a      	add	r2, r3
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	685b      	ldr	r3, [r3, #4]
 810b4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 810b4f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b4f4:	2b0f      	cmp	r3, #15
 810b4f6:	d909      	bls.n	810b50c <UART_SetConfig+0xa80>
 810b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b4fe:	d205      	bcs.n	810b50c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b502:	b29a      	uxth	r2, r3
 810b504:	687b      	ldr	r3, [r7, #4]
 810b506:	681b      	ldr	r3, [r3, #0]
 810b508:	60da      	str	r2, [r3, #12]
 810b50a:	e002      	b.n	810b512 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810b50c:	2301      	movs	r3, #1
 810b50e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b512:	687b      	ldr	r3, [r7, #4]
 810b514:	2201      	movs	r2, #1
 810b516:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	2201      	movs	r2, #1
 810b51e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b522:	687b      	ldr	r3, [r7, #4]
 810b524:	2200      	movs	r2, #0
 810b526:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810b528:	687b      	ldr	r3, [r7, #4]
 810b52a:	2200      	movs	r2, #0
 810b52c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810b52e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810b532:	4618      	mov	r0, r3
 810b534:	3738      	adds	r7, #56	; 0x38
 810b536:	46bd      	mov	sp, r7
 810b538:	bdb0      	pop	{r4, r5, r7, pc}
 810b53a:	bf00      	nop
 810b53c:	58024400 	.word	0x58024400
 810b540:	03d09000 	.word	0x03d09000
 810b544:	003d0900 	.word	0x003d0900
 810b548:	0810ccac 	.word	0x0810ccac

0810b54c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b54c:	b480      	push	{r7}
 810b54e:	b083      	sub	sp, #12
 810b550:	af00      	add	r7, sp, #0
 810b552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b554:	687b      	ldr	r3, [r7, #4]
 810b556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b558:	f003 0301 	and.w	r3, r3, #1
 810b55c:	2b00      	cmp	r3, #0
 810b55e:	d00a      	beq.n	810b576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b560:	687b      	ldr	r3, [r7, #4]
 810b562:	681b      	ldr	r3, [r3, #0]
 810b564:	685b      	ldr	r3, [r3, #4]
 810b566:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810b56a:	687b      	ldr	r3, [r7, #4]
 810b56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	681b      	ldr	r3, [r3, #0]
 810b572:	430a      	orrs	r2, r1
 810b574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b57a:	f003 0302 	and.w	r3, r3, #2
 810b57e:	2b00      	cmp	r3, #0
 810b580:	d00a      	beq.n	810b598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b582:	687b      	ldr	r3, [r7, #4]
 810b584:	681b      	ldr	r3, [r3, #0]
 810b586:	685b      	ldr	r3, [r3, #4]
 810b588:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810b590:	687b      	ldr	r3, [r7, #4]
 810b592:	681b      	ldr	r3, [r3, #0]
 810b594:	430a      	orrs	r2, r1
 810b596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b598:	687b      	ldr	r3, [r7, #4]
 810b59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b59c:	f003 0304 	and.w	r3, r3, #4
 810b5a0:	2b00      	cmp	r3, #0
 810b5a2:	d00a      	beq.n	810b5ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b5a4:	687b      	ldr	r3, [r7, #4]
 810b5a6:	681b      	ldr	r3, [r3, #0]
 810b5a8:	685b      	ldr	r3, [r3, #4]
 810b5aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810b5ae:	687b      	ldr	r3, [r7, #4]
 810b5b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810b5b2:	687b      	ldr	r3, [r7, #4]
 810b5b4:	681b      	ldr	r3, [r3, #0]
 810b5b6:	430a      	orrs	r2, r1
 810b5b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b5be:	f003 0308 	and.w	r3, r3, #8
 810b5c2:	2b00      	cmp	r3, #0
 810b5c4:	d00a      	beq.n	810b5dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b5c6:	687b      	ldr	r3, [r7, #4]
 810b5c8:	681b      	ldr	r3, [r3, #0]
 810b5ca:	685b      	ldr	r3, [r3, #4]
 810b5cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810b5d0:	687b      	ldr	r3, [r7, #4]
 810b5d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810b5d4:	687b      	ldr	r3, [r7, #4]
 810b5d6:	681b      	ldr	r3, [r3, #0]
 810b5d8:	430a      	orrs	r2, r1
 810b5da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b5e0:	f003 0310 	and.w	r3, r3, #16
 810b5e4:	2b00      	cmp	r3, #0
 810b5e6:	d00a      	beq.n	810b5fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	681b      	ldr	r3, [r3, #0]
 810b5ec:	689b      	ldr	r3, [r3, #8]
 810b5ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810b5f2:	687b      	ldr	r3, [r7, #4]
 810b5f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810b5f6:	687b      	ldr	r3, [r7, #4]
 810b5f8:	681b      	ldr	r3, [r3, #0]
 810b5fa:	430a      	orrs	r2, r1
 810b5fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b5fe:	687b      	ldr	r3, [r7, #4]
 810b600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b602:	f003 0320 	and.w	r3, r3, #32
 810b606:	2b00      	cmp	r3, #0
 810b608:	d00a      	beq.n	810b620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b60a:	687b      	ldr	r3, [r7, #4]
 810b60c:	681b      	ldr	r3, [r3, #0]
 810b60e:	689b      	ldr	r3, [r3, #8]
 810b610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810b614:	687b      	ldr	r3, [r7, #4]
 810b616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810b618:	687b      	ldr	r3, [r7, #4]
 810b61a:	681b      	ldr	r3, [r3, #0]
 810b61c:	430a      	orrs	r2, r1
 810b61e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b620:	687b      	ldr	r3, [r7, #4]
 810b622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b628:	2b00      	cmp	r3, #0
 810b62a:	d01a      	beq.n	810b662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b62c:	687b      	ldr	r3, [r7, #4]
 810b62e:	681b      	ldr	r3, [r3, #0]
 810b630:	685b      	ldr	r3, [r3, #4]
 810b632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810b636:	687b      	ldr	r3, [r7, #4]
 810b638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b63a:	687b      	ldr	r3, [r7, #4]
 810b63c:	681b      	ldr	r3, [r3, #0]
 810b63e:	430a      	orrs	r2, r1
 810b640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b64a:	d10a      	bne.n	810b662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b64c:	687b      	ldr	r3, [r7, #4]
 810b64e:	681b      	ldr	r3, [r3, #0]
 810b650:	685b      	ldr	r3, [r3, #4]
 810b652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810b656:	687b      	ldr	r3, [r7, #4]
 810b658:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810b65a:	687b      	ldr	r3, [r7, #4]
 810b65c:	681b      	ldr	r3, [r3, #0]
 810b65e:	430a      	orrs	r2, r1
 810b660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b66a:	2b00      	cmp	r3, #0
 810b66c:	d00a      	beq.n	810b684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b66e:	687b      	ldr	r3, [r7, #4]
 810b670:	681b      	ldr	r3, [r3, #0]
 810b672:	685b      	ldr	r3, [r3, #4]
 810b674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810b678:	687b      	ldr	r3, [r7, #4]
 810b67a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810b67c:	687b      	ldr	r3, [r7, #4]
 810b67e:	681b      	ldr	r3, [r3, #0]
 810b680:	430a      	orrs	r2, r1
 810b682:	605a      	str	r2, [r3, #4]
  }
}
 810b684:	bf00      	nop
 810b686:	370c      	adds	r7, #12
 810b688:	46bd      	mov	sp, r7
 810b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b68e:	4770      	bx	lr

0810b690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b690:	b580      	push	{r7, lr}
 810b692:	b086      	sub	sp, #24
 810b694:	af02      	add	r7, sp, #8
 810b696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b698:	687b      	ldr	r3, [r7, #4]
 810b69a:	2200      	movs	r2, #0
 810b69c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b6a0:	f7f7 fa52 	bl	8102b48 <HAL_GetTick>
 810b6a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b6a6:	687b      	ldr	r3, [r7, #4]
 810b6a8:	681b      	ldr	r3, [r3, #0]
 810b6aa:	681b      	ldr	r3, [r3, #0]
 810b6ac:	f003 0308 	and.w	r3, r3, #8
 810b6b0:	2b08      	cmp	r3, #8
 810b6b2:	d10e      	bne.n	810b6d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b6b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b6b8:	9300      	str	r3, [sp, #0]
 810b6ba:	68fb      	ldr	r3, [r7, #12]
 810b6bc:	2200      	movs	r2, #0
 810b6be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810b6c2:	6878      	ldr	r0, [r7, #4]
 810b6c4:	f000 f82f 	bl	810b726 <UART_WaitOnFlagUntilTimeout>
 810b6c8:	4603      	mov	r3, r0
 810b6ca:	2b00      	cmp	r3, #0
 810b6cc:	d001      	beq.n	810b6d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b6ce:	2303      	movs	r3, #3
 810b6d0:	e025      	b.n	810b71e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b6d2:	687b      	ldr	r3, [r7, #4]
 810b6d4:	681b      	ldr	r3, [r3, #0]
 810b6d6:	681b      	ldr	r3, [r3, #0]
 810b6d8:	f003 0304 	and.w	r3, r3, #4
 810b6dc:	2b04      	cmp	r3, #4
 810b6de:	d10e      	bne.n	810b6fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b6e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b6e4:	9300      	str	r3, [sp, #0]
 810b6e6:	68fb      	ldr	r3, [r7, #12]
 810b6e8:	2200      	movs	r2, #0
 810b6ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810b6ee:	6878      	ldr	r0, [r7, #4]
 810b6f0:	f000 f819 	bl	810b726 <UART_WaitOnFlagUntilTimeout>
 810b6f4:	4603      	mov	r3, r0
 810b6f6:	2b00      	cmp	r3, #0
 810b6f8:	d001      	beq.n	810b6fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b6fa:	2303      	movs	r3, #3
 810b6fc:	e00f      	b.n	810b71e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	2220      	movs	r2, #32
 810b702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	2220      	movs	r2, #32
 810b70a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b70e:	687b      	ldr	r3, [r7, #4]
 810b710:	2200      	movs	r2, #0
 810b712:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	2200      	movs	r2, #0
 810b718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b71c:	2300      	movs	r3, #0
}
 810b71e:	4618      	mov	r0, r3
 810b720:	3710      	adds	r7, #16
 810b722:	46bd      	mov	sp, r7
 810b724:	bd80      	pop	{r7, pc}

0810b726 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b726:	b580      	push	{r7, lr}
 810b728:	b09c      	sub	sp, #112	; 0x70
 810b72a:	af00      	add	r7, sp, #0
 810b72c:	60f8      	str	r0, [r7, #12]
 810b72e:	60b9      	str	r1, [r7, #8]
 810b730:	603b      	str	r3, [r7, #0]
 810b732:	4613      	mov	r3, r2
 810b734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b736:	e0a9      	b.n	810b88c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b73e:	f000 80a5 	beq.w	810b88c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b742:	f7f7 fa01 	bl	8102b48 <HAL_GetTick>
 810b746:	4602      	mov	r2, r0
 810b748:	683b      	ldr	r3, [r7, #0]
 810b74a:	1ad3      	subs	r3, r2, r3
 810b74c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810b74e:	429a      	cmp	r2, r3
 810b750:	d302      	bcc.n	810b758 <UART_WaitOnFlagUntilTimeout+0x32>
 810b752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810b754:	2b00      	cmp	r3, #0
 810b756:	d140      	bne.n	810b7da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810b758:	68fb      	ldr	r3, [r7, #12]
 810b75a:	681b      	ldr	r3, [r3, #0]
 810b75c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810b760:	e853 3f00 	ldrex	r3, [r3]
 810b764:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810b766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b768:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810b76c:	667b      	str	r3, [r7, #100]	; 0x64
 810b76e:	68fb      	ldr	r3, [r7, #12]
 810b770:	681b      	ldr	r3, [r3, #0]
 810b772:	461a      	mov	r2, r3
 810b774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810b776:	65fb      	str	r3, [r7, #92]	; 0x5c
 810b778:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b77a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810b77c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810b77e:	e841 2300 	strex	r3, r2, [r1]
 810b782:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810b784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810b786:	2b00      	cmp	r3, #0
 810b788:	d1e6      	bne.n	810b758 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b78a:	68fb      	ldr	r3, [r7, #12]
 810b78c:	681b      	ldr	r3, [r3, #0]
 810b78e:	3308      	adds	r3, #8
 810b790:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b794:	e853 3f00 	ldrex	r3, [r3]
 810b798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b79c:	f023 0301 	bic.w	r3, r3, #1
 810b7a0:	663b      	str	r3, [r7, #96]	; 0x60
 810b7a2:	68fb      	ldr	r3, [r7, #12]
 810b7a4:	681b      	ldr	r3, [r3, #0]
 810b7a6:	3308      	adds	r3, #8
 810b7a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810b7aa:	64ba      	str	r2, [r7, #72]	; 0x48
 810b7ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b7ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810b7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810b7b2:	e841 2300 	strex	r3, r2, [r1]
 810b7b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810b7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810b7ba:	2b00      	cmp	r3, #0
 810b7bc:	d1e5      	bne.n	810b78a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810b7be:	68fb      	ldr	r3, [r7, #12]
 810b7c0:	2220      	movs	r2, #32
 810b7c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810b7c6:	68fb      	ldr	r3, [r7, #12]
 810b7c8:	2220      	movs	r2, #32
 810b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810b7ce:	68fb      	ldr	r3, [r7, #12]
 810b7d0:	2200      	movs	r2, #0
 810b7d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810b7d6:	2303      	movs	r3, #3
 810b7d8:	e069      	b.n	810b8ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810b7da:	68fb      	ldr	r3, [r7, #12]
 810b7dc:	681b      	ldr	r3, [r3, #0]
 810b7de:	681b      	ldr	r3, [r3, #0]
 810b7e0:	f003 0304 	and.w	r3, r3, #4
 810b7e4:	2b00      	cmp	r3, #0
 810b7e6:	d051      	beq.n	810b88c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b7e8:	68fb      	ldr	r3, [r7, #12]
 810b7ea:	681b      	ldr	r3, [r3, #0]
 810b7ec:	69db      	ldr	r3, [r3, #28]
 810b7ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b7f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810b7f6:	d149      	bne.n	810b88c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b7f8:	68fb      	ldr	r3, [r7, #12]
 810b7fa:	681b      	ldr	r3, [r3, #0]
 810b7fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b800:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810b802:	68fb      	ldr	r3, [r7, #12]
 810b804:	681b      	ldr	r3, [r3, #0]
 810b806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b80a:	e853 3f00 	ldrex	r3, [r3]
 810b80e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810b816:	66fb      	str	r3, [r7, #108]	; 0x6c
 810b818:	68fb      	ldr	r3, [r7, #12]
 810b81a:	681b      	ldr	r3, [r3, #0]
 810b81c:	461a      	mov	r2, r3
 810b81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810b820:	637b      	str	r3, [r7, #52]	; 0x34
 810b822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810b826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b828:	e841 2300 	strex	r3, r2, [r1]
 810b82c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b830:	2b00      	cmp	r3, #0
 810b832:	d1e6      	bne.n	810b802 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b834:	68fb      	ldr	r3, [r7, #12]
 810b836:	681b      	ldr	r3, [r3, #0]
 810b838:	3308      	adds	r3, #8
 810b83a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b83c:	697b      	ldr	r3, [r7, #20]
 810b83e:	e853 3f00 	ldrex	r3, [r3]
 810b842:	613b      	str	r3, [r7, #16]
   return(result);
 810b844:	693b      	ldr	r3, [r7, #16]
 810b846:	f023 0301 	bic.w	r3, r3, #1
 810b84a:	66bb      	str	r3, [r7, #104]	; 0x68
 810b84c:	68fb      	ldr	r3, [r7, #12]
 810b84e:	681b      	ldr	r3, [r3, #0]
 810b850:	3308      	adds	r3, #8
 810b852:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810b854:	623a      	str	r2, [r7, #32]
 810b856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b858:	69f9      	ldr	r1, [r7, #28]
 810b85a:	6a3a      	ldr	r2, [r7, #32]
 810b85c:	e841 2300 	strex	r3, r2, [r1]
 810b860:	61bb      	str	r3, [r7, #24]
   return(result);
 810b862:	69bb      	ldr	r3, [r7, #24]
 810b864:	2b00      	cmp	r3, #0
 810b866:	d1e5      	bne.n	810b834 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810b868:	68fb      	ldr	r3, [r7, #12]
 810b86a:	2220      	movs	r2, #32
 810b86c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810b870:	68fb      	ldr	r3, [r7, #12]
 810b872:	2220      	movs	r2, #32
 810b874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b878:	68fb      	ldr	r3, [r7, #12]
 810b87a:	2220      	movs	r2, #32
 810b87c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b880:	68fb      	ldr	r3, [r7, #12]
 810b882:	2200      	movs	r2, #0
 810b884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810b888:	2303      	movs	r3, #3
 810b88a:	e010      	b.n	810b8ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b88c:	68fb      	ldr	r3, [r7, #12]
 810b88e:	681b      	ldr	r3, [r3, #0]
 810b890:	69da      	ldr	r2, [r3, #28]
 810b892:	68bb      	ldr	r3, [r7, #8]
 810b894:	4013      	ands	r3, r2
 810b896:	68ba      	ldr	r2, [r7, #8]
 810b898:	429a      	cmp	r2, r3
 810b89a:	bf0c      	ite	eq
 810b89c:	2301      	moveq	r3, #1
 810b89e:	2300      	movne	r3, #0
 810b8a0:	b2db      	uxtb	r3, r3
 810b8a2:	461a      	mov	r2, r3
 810b8a4:	79fb      	ldrb	r3, [r7, #7]
 810b8a6:	429a      	cmp	r2, r3
 810b8a8:	f43f af46 	beq.w	810b738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b8ac:	2300      	movs	r3, #0
}
 810b8ae:	4618      	mov	r0, r3
 810b8b0:	3770      	adds	r7, #112	; 0x70
 810b8b2:	46bd      	mov	sp, r7
 810b8b4:	bd80      	pop	{r7, pc}

0810b8b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b8b6:	b480      	push	{r7}
 810b8b8:	b085      	sub	sp, #20
 810b8ba:	af00      	add	r7, sp, #0
 810b8bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b8be:	687b      	ldr	r3, [r7, #4]
 810b8c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b8c4:	2b01      	cmp	r3, #1
 810b8c6:	d101      	bne.n	810b8cc <HAL_UARTEx_DisableFifoMode+0x16>
 810b8c8:	2302      	movs	r3, #2
 810b8ca:	e027      	b.n	810b91c <HAL_UARTEx_DisableFifoMode+0x66>
 810b8cc:	687b      	ldr	r3, [r7, #4]
 810b8ce:	2201      	movs	r2, #1
 810b8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b8d4:	687b      	ldr	r3, [r7, #4]
 810b8d6:	2224      	movs	r2, #36	; 0x24
 810b8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b8dc:	687b      	ldr	r3, [r7, #4]
 810b8de:	681b      	ldr	r3, [r3, #0]
 810b8e0:	681b      	ldr	r3, [r3, #0]
 810b8e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b8e4:	687b      	ldr	r3, [r7, #4]
 810b8e6:	681b      	ldr	r3, [r3, #0]
 810b8e8:	681a      	ldr	r2, [r3, #0]
 810b8ea:	687b      	ldr	r3, [r7, #4]
 810b8ec:	681b      	ldr	r3, [r3, #0]
 810b8ee:	f022 0201 	bic.w	r2, r2, #1
 810b8f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b8f4:	68fb      	ldr	r3, [r7, #12]
 810b8f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810b8fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b8fc:	687b      	ldr	r3, [r7, #4]
 810b8fe:	2200      	movs	r2, #0
 810b900:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b902:	687b      	ldr	r3, [r7, #4]
 810b904:	681b      	ldr	r3, [r3, #0]
 810b906:	68fa      	ldr	r2, [r7, #12]
 810b908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b90a:	687b      	ldr	r3, [r7, #4]
 810b90c:	2220      	movs	r2, #32
 810b90e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b912:	687b      	ldr	r3, [r7, #4]
 810b914:	2200      	movs	r2, #0
 810b916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b91a:	2300      	movs	r3, #0
}
 810b91c:	4618      	mov	r0, r3
 810b91e:	3714      	adds	r7, #20
 810b920:	46bd      	mov	sp, r7
 810b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b926:	4770      	bx	lr

0810b928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b928:	b580      	push	{r7, lr}
 810b92a:	b084      	sub	sp, #16
 810b92c:	af00      	add	r7, sp, #0
 810b92e:	6078      	str	r0, [r7, #4]
 810b930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b932:	687b      	ldr	r3, [r7, #4]
 810b934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b938:	2b01      	cmp	r3, #1
 810b93a:	d101      	bne.n	810b940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b93c:	2302      	movs	r3, #2
 810b93e:	e02d      	b.n	810b99c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b940:	687b      	ldr	r3, [r7, #4]
 810b942:	2201      	movs	r2, #1
 810b944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b948:	687b      	ldr	r3, [r7, #4]
 810b94a:	2224      	movs	r2, #36	; 0x24
 810b94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b950:	687b      	ldr	r3, [r7, #4]
 810b952:	681b      	ldr	r3, [r3, #0]
 810b954:	681b      	ldr	r3, [r3, #0]
 810b956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b958:	687b      	ldr	r3, [r7, #4]
 810b95a:	681b      	ldr	r3, [r3, #0]
 810b95c:	681a      	ldr	r2, [r3, #0]
 810b95e:	687b      	ldr	r3, [r7, #4]
 810b960:	681b      	ldr	r3, [r3, #0]
 810b962:	f022 0201 	bic.w	r2, r2, #1
 810b966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b968:	687b      	ldr	r3, [r7, #4]
 810b96a:	681b      	ldr	r3, [r3, #0]
 810b96c:	689b      	ldr	r3, [r3, #8]
 810b96e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810b972:	687b      	ldr	r3, [r7, #4]
 810b974:	681b      	ldr	r3, [r3, #0]
 810b976:	683a      	ldr	r2, [r7, #0]
 810b978:	430a      	orrs	r2, r1
 810b97a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b97c:	6878      	ldr	r0, [r7, #4]
 810b97e:	f000 f84f 	bl	810ba20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b982:	687b      	ldr	r3, [r7, #4]
 810b984:	681b      	ldr	r3, [r3, #0]
 810b986:	68fa      	ldr	r2, [r7, #12]
 810b988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b98a:	687b      	ldr	r3, [r7, #4]
 810b98c:	2220      	movs	r2, #32
 810b98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b992:	687b      	ldr	r3, [r7, #4]
 810b994:	2200      	movs	r2, #0
 810b996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b99a:	2300      	movs	r3, #0
}
 810b99c:	4618      	mov	r0, r3
 810b99e:	3710      	adds	r7, #16
 810b9a0:	46bd      	mov	sp, r7
 810b9a2:	bd80      	pop	{r7, pc}

0810b9a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b9a4:	b580      	push	{r7, lr}
 810b9a6:	b084      	sub	sp, #16
 810b9a8:	af00      	add	r7, sp, #0
 810b9aa:	6078      	str	r0, [r7, #4]
 810b9ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b9ae:	687b      	ldr	r3, [r7, #4]
 810b9b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b9b4:	2b01      	cmp	r3, #1
 810b9b6:	d101      	bne.n	810b9bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b9b8:	2302      	movs	r3, #2
 810b9ba:	e02d      	b.n	810ba18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b9bc:	687b      	ldr	r3, [r7, #4]
 810b9be:	2201      	movs	r2, #1
 810b9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b9c4:	687b      	ldr	r3, [r7, #4]
 810b9c6:	2224      	movs	r2, #36	; 0x24
 810b9c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b9cc:	687b      	ldr	r3, [r7, #4]
 810b9ce:	681b      	ldr	r3, [r3, #0]
 810b9d0:	681b      	ldr	r3, [r3, #0]
 810b9d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b9d4:	687b      	ldr	r3, [r7, #4]
 810b9d6:	681b      	ldr	r3, [r3, #0]
 810b9d8:	681a      	ldr	r2, [r3, #0]
 810b9da:	687b      	ldr	r3, [r7, #4]
 810b9dc:	681b      	ldr	r3, [r3, #0]
 810b9de:	f022 0201 	bic.w	r2, r2, #1
 810b9e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b9e4:	687b      	ldr	r3, [r7, #4]
 810b9e6:	681b      	ldr	r3, [r3, #0]
 810b9e8:	689b      	ldr	r3, [r3, #8]
 810b9ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810b9ee:	687b      	ldr	r3, [r7, #4]
 810b9f0:	681b      	ldr	r3, [r3, #0]
 810b9f2:	683a      	ldr	r2, [r7, #0]
 810b9f4:	430a      	orrs	r2, r1
 810b9f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b9f8:	6878      	ldr	r0, [r7, #4]
 810b9fa:	f000 f811 	bl	810ba20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b9fe:	687b      	ldr	r3, [r7, #4]
 810ba00:	681b      	ldr	r3, [r3, #0]
 810ba02:	68fa      	ldr	r2, [r7, #12]
 810ba04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ba06:	687b      	ldr	r3, [r7, #4]
 810ba08:	2220      	movs	r2, #32
 810ba0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ba0e:	687b      	ldr	r3, [r7, #4]
 810ba10:	2200      	movs	r2, #0
 810ba12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ba16:	2300      	movs	r3, #0
}
 810ba18:	4618      	mov	r0, r3
 810ba1a:	3710      	adds	r7, #16
 810ba1c:	46bd      	mov	sp, r7
 810ba1e:	bd80      	pop	{r7, pc}

0810ba20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ba20:	b480      	push	{r7}
 810ba22:	b085      	sub	sp, #20
 810ba24:	af00      	add	r7, sp, #0
 810ba26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ba28:	687b      	ldr	r3, [r7, #4]
 810ba2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba2c:	2b00      	cmp	r3, #0
 810ba2e:	d108      	bne.n	810ba42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ba30:	687b      	ldr	r3, [r7, #4]
 810ba32:	2201      	movs	r2, #1
 810ba34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810ba38:	687b      	ldr	r3, [r7, #4]
 810ba3a:	2201      	movs	r2, #1
 810ba3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ba40:	e031      	b.n	810baa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ba42:	2310      	movs	r3, #16
 810ba44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ba46:	2310      	movs	r3, #16
 810ba48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ba4a:	687b      	ldr	r3, [r7, #4]
 810ba4c:	681b      	ldr	r3, [r3, #0]
 810ba4e:	689b      	ldr	r3, [r3, #8]
 810ba50:	0e5b      	lsrs	r3, r3, #25
 810ba52:	b2db      	uxtb	r3, r3
 810ba54:	f003 0307 	and.w	r3, r3, #7
 810ba58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ba5a:	687b      	ldr	r3, [r7, #4]
 810ba5c:	681b      	ldr	r3, [r3, #0]
 810ba5e:	689b      	ldr	r3, [r3, #8]
 810ba60:	0f5b      	lsrs	r3, r3, #29
 810ba62:	b2db      	uxtb	r3, r3
 810ba64:	f003 0307 	and.w	r3, r3, #7
 810ba68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba6a:	7bbb      	ldrb	r3, [r7, #14]
 810ba6c:	7b3a      	ldrb	r2, [r7, #12]
 810ba6e:	4911      	ldr	r1, [pc, #68]	; (810bab4 <UARTEx_SetNbDataToProcess+0x94>)
 810ba70:	5c8a      	ldrb	r2, [r1, r2]
 810ba72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ba76:	7b3a      	ldrb	r2, [r7, #12]
 810ba78:	490f      	ldr	r1, [pc, #60]	; (810bab8 <UARTEx_SetNbDataToProcess+0x98>)
 810ba7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba7c:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba80:	b29a      	uxth	r2, r3
 810ba82:	687b      	ldr	r3, [r7, #4]
 810ba84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ba88:	7bfb      	ldrb	r3, [r7, #15]
 810ba8a:	7b7a      	ldrb	r2, [r7, #13]
 810ba8c:	4909      	ldr	r1, [pc, #36]	; (810bab4 <UARTEx_SetNbDataToProcess+0x94>)
 810ba8e:	5c8a      	ldrb	r2, [r1, r2]
 810ba90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ba94:	7b7a      	ldrb	r2, [r7, #13]
 810ba96:	4908      	ldr	r1, [pc, #32]	; (810bab8 <UARTEx_SetNbDataToProcess+0x98>)
 810ba98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ba9a:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba9e:	b29a      	uxth	r2, r3
 810baa0:	687b      	ldr	r3, [r7, #4]
 810baa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810baa6:	bf00      	nop
 810baa8:	3714      	adds	r7, #20
 810baaa:	46bd      	mov	sp, r7
 810baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bab0:	4770      	bx	lr
 810bab2:	bf00      	nop
 810bab4:	0810ccc4 	.word	0x0810ccc4
 810bab8:	0810cccc 	.word	0x0810cccc

0810babc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 810babc:	b480      	push	{r7}
 810babe:	b083      	sub	sp, #12
 810bac0:	af00      	add	r7, sp, #0
 810bac2:	6078      	str	r0, [r7, #4]
 810bac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810bac6:	683b      	ldr	r3, [r7, #0]
 810bac8:	681b      	ldr	r3, [r3, #0]
 810baca:	2b00      	cmp	r3, #0
 810bacc:	d123      	bne.n	810bb16 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810bace:	687b      	ldr	r3, [r7, #4]
 810bad0:	681b      	ldr	r3, [r3, #0]
 810bad2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810bad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810bada:	683a      	ldr	r2, [r7, #0]
 810badc:	6851      	ldr	r1, [r2, #4]
 810bade:	683a      	ldr	r2, [r7, #0]
 810bae0:	6892      	ldr	r2, [r2, #8]
 810bae2:	4311      	orrs	r1, r2
 810bae4:	683a      	ldr	r2, [r7, #0]
 810bae6:	68d2      	ldr	r2, [r2, #12]
 810bae8:	4311      	orrs	r1, r2
 810baea:	683a      	ldr	r2, [r7, #0]
 810baec:	6912      	ldr	r2, [r2, #16]
 810baee:	4311      	orrs	r1, r2
 810baf0:	683a      	ldr	r2, [r7, #0]
 810baf2:	6952      	ldr	r2, [r2, #20]
 810baf4:	4311      	orrs	r1, r2
 810baf6:	683a      	ldr	r2, [r7, #0]
 810baf8:	6992      	ldr	r2, [r2, #24]
 810bafa:	4311      	orrs	r1, r2
 810bafc:	683a      	ldr	r2, [r7, #0]
 810bafe:	69d2      	ldr	r2, [r2, #28]
 810bb00:	4311      	orrs	r1, r2
 810bb02:	683a      	ldr	r2, [r7, #0]
 810bb04:	6a12      	ldr	r2, [r2, #32]
 810bb06:	4311      	orrs	r1, r2
 810bb08:	683a      	ldr	r2, [r7, #0]
 810bb0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810bb0c:	430a      	orrs	r2, r1
 810bb0e:	431a      	orrs	r2, r3
 810bb10:	687b      	ldr	r3, [r7, #4]
 810bb12:	601a      	str	r2, [r3, #0]
 810bb14:	e028      	b.n	810bb68 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810bb16:	687b      	ldr	r3, [r7, #4]
 810bb18:	681b      	ldr	r3, [r3, #0]
 810bb1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810bb1e:	683b      	ldr	r3, [r7, #0]
 810bb20:	69d9      	ldr	r1, [r3, #28]
 810bb22:	683b      	ldr	r3, [r7, #0]
 810bb24:	6a1b      	ldr	r3, [r3, #32]
 810bb26:	4319      	orrs	r1, r3
 810bb28:	683b      	ldr	r3, [r7, #0]
 810bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bb2c:	430b      	orrs	r3, r1
 810bb2e:	431a      	orrs	r2, r3
 810bb30:	687b      	ldr	r3, [r7, #4]
 810bb32:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	685b      	ldr	r3, [r3, #4]
 810bb38:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810bb3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810bb40:	683a      	ldr	r2, [r7, #0]
 810bb42:	6851      	ldr	r1, [r2, #4]
 810bb44:	683a      	ldr	r2, [r7, #0]
 810bb46:	6892      	ldr	r2, [r2, #8]
 810bb48:	4311      	orrs	r1, r2
 810bb4a:	683a      	ldr	r2, [r7, #0]
 810bb4c:	68d2      	ldr	r2, [r2, #12]
 810bb4e:	4311      	orrs	r1, r2
 810bb50:	683a      	ldr	r2, [r7, #0]
 810bb52:	6912      	ldr	r2, [r2, #16]
 810bb54:	4311      	orrs	r1, r2
 810bb56:	683a      	ldr	r2, [r7, #0]
 810bb58:	6952      	ldr	r2, [r2, #20]
 810bb5a:	4311      	orrs	r1, r2
 810bb5c:	683a      	ldr	r2, [r7, #0]
 810bb5e:	6992      	ldr	r2, [r2, #24]
 810bb60:	430a      	orrs	r2, r1
 810bb62:	431a      	orrs	r2, r3
 810bb64:	687b      	ldr	r3, [r7, #4]
 810bb66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810bb68:	2300      	movs	r3, #0
}
 810bb6a:	4618      	mov	r0, r3
 810bb6c:	370c      	adds	r7, #12
 810bb6e:	46bd      	mov	sp, r7
 810bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb74:	4770      	bx	lr

0810bb76 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810bb76:	b480      	push	{r7}
 810bb78:	b085      	sub	sp, #20
 810bb7a:	af00      	add	r7, sp, #0
 810bb7c:	60f8      	str	r0, [r7, #12]
 810bb7e:	60b9      	str	r1, [r7, #8]
 810bb80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810bb82:	687b      	ldr	r3, [r7, #4]
 810bb84:	2b00      	cmp	r3, #0
 810bb86:	d128      	bne.n	810bbda <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810bb88:	68fb      	ldr	r3, [r7, #12]
 810bb8a:	689b      	ldr	r3, [r3, #8]
 810bb8c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810bb90:	68bb      	ldr	r3, [r7, #8]
 810bb92:	681b      	ldr	r3, [r3, #0]
 810bb94:	1e59      	subs	r1, r3, #1
 810bb96:	68bb      	ldr	r3, [r7, #8]
 810bb98:	685b      	ldr	r3, [r3, #4]
 810bb9a:	3b01      	subs	r3, #1
 810bb9c:	011b      	lsls	r3, r3, #4
 810bb9e:	4319      	orrs	r1, r3
 810bba0:	68bb      	ldr	r3, [r7, #8]
 810bba2:	689b      	ldr	r3, [r3, #8]
 810bba4:	3b01      	subs	r3, #1
 810bba6:	021b      	lsls	r3, r3, #8
 810bba8:	4319      	orrs	r1, r3
 810bbaa:	68bb      	ldr	r3, [r7, #8]
 810bbac:	68db      	ldr	r3, [r3, #12]
 810bbae:	3b01      	subs	r3, #1
 810bbb0:	031b      	lsls	r3, r3, #12
 810bbb2:	4319      	orrs	r1, r3
 810bbb4:	68bb      	ldr	r3, [r7, #8]
 810bbb6:	691b      	ldr	r3, [r3, #16]
 810bbb8:	3b01      	subs	r3, #1
 810bbba:	041b      	lsls	r3, r3, #16
 810bbbc:	4319      	orrs	r1, r3
 810bbbe:	68bb      	ldr	r3, [r7, #8]
 810bbc0:	695b      	ldr	r3, [r3, #20]
 810bbc2:	3b01      	subs	r3, #1
 810bbc4:	051b      	lsls	r3, r3, #20
 810bbc6:	4319      	orrs	r1, r3
 810bbc8:	68bb      	ldr	r3, [r7, #8]
 810bbca:	699b      	ldr	r3, [r3, #24]
 810bbcc:	3b01      	subs	r3, #1
 810bbce:	061b      	lsls	r3, r3, #24
 810bbd0:	430b      	orrs	r3, r1
 810bbd2:	431a      	orrs	r2, r3
 810bbd4:	68fb      	ldr	r3, [r7, #12]
 810bbd6:	609a      	str	r2, [r3, #8]
 810bbd8:	e02f      	b.n	810bc3a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810bbda:	68fb      	ldr	r3, [r7, #12]
 810bbdc:	689b      	ldr	r3, [r3, #8]
 810bbde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810bbe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810bbe6:	68ba      	ldr	r2, [r7, #8]
 810bbe8:	68d2      	ldr	r2, [r2, #12]
 810bbea:	3a01      	subs	r2, #1
 810bbec:	0311      	lsls	r1, r2, #12
 810bbee:	68ba      	ldr	r2, [r7, #8]
 810bbf0:	6952      	ldr	r2, [r2, #20]
 810bbf2:	3a01      	subs	r2, #1
 810bbf4:	0512      	lsls	r2, r2, #20
 810bbf6:	430a      	orrs	r2, r1
 810bbf8:	431a      	orrs	r2, r3
 810bbfa:	68fb      	ldr	r3, [r7, #12]
 810bbfc:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810bbfe:	68fb      	ldr	r3, [r7, #12]
 810bc00:	68db      	ldr	r3, [r3, #12]
 810bc02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810bc06:	68bb      	ldr	r3, [r7, #8]
 810bc08:	681b      	ldr	r3, [r3, #0]
 810bc0a:	1e59      	subs	r1, r3, #1
 810bc0c:	68bb      	ldr	r3, [r7, #8]
 810bc0e:	685b      	ldr	r3, [r3, #4]
 810bc10:	3b01      	subs	r3, #1
 810bc12:	011b      	lsls	r3, r3, #4
 810bc14:	4319      	orrs	r1, r3
 810bc16:	68bb      	ldr	r3, [r7, #8]
 810bc18:	689b      	ldr	r3, [r3, #8]
 810bc1a:	3b01      	subs	r3, #1
 810bc1c:	021b      	lsls	r3, r3, #8
 810bc1e:	4319      	orrs	r1, r3
 810bc20:	68bb      	ldr	r3, [r7, #8]
 810bc22:	691b      	ldr	r3, [r3, #16]
 810bc24:	3b01      	subs	r3, #1
 810bc26:	041b      	lsls	r3, r3, #16
 810bc28:	4319      	orrs	r1, r3
 810bc2a:	68bb      	ldr	r3, [r7, #8]
 810bc2c:	699b      	ldr	r3, [r3, #24]
 810bc2e:	3b01      	subs	r3, #1
 810bc30:	061b      	lsls	r3, r3, #24
 810bc32:	430b      	orrs	r3, r1
 810bc34:	431a      	orrs	r2, r3
 810bc36:	68fb      	ldr	r3, [r7, #12]
 810bc38:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810bc3a:	2300      	movs	r3, #0
}
 810bc3c:	4618      	mov	r0, r3
 810bc3e:	3714      	adds	r7, #20
 810bc40:	46bd      	mov	sp, r7
 810bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc46:	4770      	bx	lr

0810bc48 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810bc48:	b084      	sub	sp, #16
 810bc4a:	b480      	push	{r7}
 810bc4c:	b085      	sub	sp, #20
 810bc4e:	af00      	add	r7, sp, #0
 810bc50:	6078      	str	r0, [r7, #4]
 810bc52:	f107 001c 	add.w	r0, r7, #28
 810bc56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810bc5a:	2300      	movs	r3, #0
 810bc5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810bc5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810bc60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810bc62:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 810bc66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 810bc6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 810bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 810bc6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810bc70:	68fa      	ldr	r2, [r7, #12]
 810bc72:	4313      	orrs	r3, r2
 810bc74:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	685a      	ldr	r2, [r3, #4]
 810bc7a:	4b07      	ldr	r3, [pc, #28]	; (810bc98 <SDMMC_Init+0x50>)
 810bc7c:	4013      	ands	r3, r2
 810bc7e:	68fa      	ldr	r2, [r7, #12]
 810bc80:	431a      	orrs	r2, r3
 810bc82:	687b      	ldr	r3, [r7, #4]
 810bc84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810bc86:	2300      	movs	r3, #0
}
 810bc88:	4618      	mov	r0, r3
 810bc8a:	3714      	adds	r7, #20
 810bc8c:	46bd      	mov	sp, r7
 810bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc92:	b004      	add	sp, #16
 810bc94:	4770      	bx	lr
 810bc96:	bf00      	nop
 810bc98:	ffc02c00 	.word	0xffc02c00

0810bc9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 810bc9c:	b480      	push	{r7}
 810bc9e:	b083      	sub	sp, #12
 810bca0:	af00      	add	r7, sp, #0
 810bca2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810bca4:	687b      	ldr	r3, [r7, #4]
 810bca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 810bcaa:	4618      	mov	r0, r3
 810bcac:	370c      	adds	r7, #12
 810bcae:	46bd      	mov	sp, r7
 810bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcb4:	4770      	bx	lr

0810bcb6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810bcb6:	b480      	push	{r7}
 810bcb8:	b083      	sub	sp, #12
 810bcba:	af00      	add	r7, sp, #0
 810bcbc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810bcbe:	687b      	ldr	r3, [r7, #4]
 810bcc0:	681b      	ldr	r3, [r3, #0]
 810bcc2:	f043 0203 	orr.w	r2, r3, #3
 810bcc6:	687b      	ldr	r3, [r7, #4]
 810bcc8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810bcca:	2300      	movs	r3, #0
}
 810bccc:	4618      	mov	r0, r3
 810bcce:	370c      	adds	r7, #12
 810bcd0:	46bd      	mov	sp, r7
 810bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcd6:	4770      	bx	lr

0810bcd8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 810bcd8:	b480      	push	{r7}
 810bcda:	b083      	sub	sp, #12
 810bcdc:	af00      	add	r7, sp, #0
 810bcde:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810bce0:	687b      	ldr	r3, [r7, #4]
 810bce2:	681b      	ldr	r3, [r3, #0]
 810bce4:	f003 0303 	and.w	r3, r3, #3
}
 810bce8:	4618      	mov	r0, r3
 810bcea:	370c      	adds	r7, #12
 810bcec:	46bd      	mov	sp, r7
 810bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcf2:	4770      	bx	lr

0810bcf4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 810bcf4:	b480      	push	{r7}
 810bcf6:	b085      	sub	sp, #20
 810bcf8:	af00      	add	r7, sp, #0
 810bcfa:	6078      	str	r0, [r7, #4]
 810bcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810bcfe:	2300      	movs	r3, #0
 810bd00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810bd02:	683b      	ldr	r3, [r7, #0]
 810bd04:	681a      	ldr	r2, [r3, #0]
 810bd06:	687b      	ldr	r3, [r7, #4]
 810bd08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810bd0a:	683b      	ldr	r3, [r7, #0]
 810bd0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810bd0e:	683b      	ldr	r3, [r7, #0]
 810bd10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810bd12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810bd14:	683b      	ldr	r3, [r7, #0]
 810bd16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810bd18:	431a      	orrs	r2, r3
                       Command->CPSM);
 810bd1a:	683b      	ldr	r3, [r7, #0]
 810bd1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810bd1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810bd20:	68fa      	ldr	r2, [r7, #12]
 810bd22:	4313      	orrs	r3, r2
 810bd24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810bd26:	687b      	ldr	r3, [r7, #4]
 810bd28:	68da      	ldr	r2, [r3, #12]
 810bd2a:	4b06      	ldr	r3, [pc, #24]	; (810bd44 <SDMMC_SendCommand+0x50>)
 810bd2c:	4013      	ands	r3, r2
 810bd2e:	68fa      	ldr	r2, [r7, #12]
 810bd30:	431a      	orrs	r2, r3
 810bd32:	687b      	ldr	r3, [r7, #4]
 810bd34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810bd36:	2300      	movs	r3, #0
}
 810bd38:	4618      	mov	r0, r3
 810bd3a:	3714      	adds	r7, #20
 810bd3c:	46bd      	mov	sp, r7
 810bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd42:	4770      	bx	lr
 810bd44:	fffee0c0 	.word	0xfffee0c0

0810bd48 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 810bd48:	b480      	push	{r7}
 810bd4a:	b083      	sub	sp, #12
 810bd4c:	af00      	add	r7, sp, #0
 810bd4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810bd50:	687b      	ldr	r3, [r7, #4]
 810bd52:	691b      	ldr	r3, [r3, #16]
 810bd54:	b2db      	uxtb	r3, r3
}
 810bd56:	4618      	mov	r0, r3
 810bd58:	370c      	adds	r7, #12
 810bd5a:	46bd      	mov	sp, r7
 810bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd60:	4770      	bx	lr

0810bd62 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810bd62:	b480      	push	{r7}
 810bd64:	b085      	sub	sp, #20
 810bd66:	af00      	add	r7, sp, #0
 810bd68:	6078      	str	r0, [r7, #4]
 810bd6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810bd6c:	687b      	ldr	r3, [r7, #4]
 810bd6e:	3314      	adds	r3, #20
 810bd70:	461a      	mov	r2, r3
 810bd72:	683b      	ldr	r3, [r7, #0]
 810bd74:	4413      	add	r3, r2
 810bd76:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810bd78:	68fb      	ldr	r3, [r7, #12]
 810bd7a:	681b      	ldr	r3, [r3, #0]
}
 810bd7c:	4618      	mov	r0, r3
 810bd7e:	3714      	adds	r7, #20
 810bd80:	46bd      	mov	sp, r7
 810bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd86:	4770      	bx	lr

0810bd88 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 810bd88:	b480      	push	{r7}
 810bd8a:	b085      	sub	sp, #20
 810bd8c:	af00      	add	r7, sp, #0
 810bd8e:	6078      	str	r0, [r7, #4]
 810bd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810bd92:	2300      	movs	r3, #0
 810bd94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810bd96:	683b      	ldr	r3, [r7, #0]
 810bd98:	681a      	ldr	r2, [r3, #0]
 810bd9a:	687b      	ldr	r3, [r7, #4]
 810bd9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810bd9e:	683b      	ldr	r3, [r7, #0]
 810bda0:	685a      	ldr	r2, [r3, #4]
 810bda2:	687b      	ldr	r3, [r7, #4]
 810bda4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810bda6:	683b      	ldr	r3, [r7, #0]
 810bda8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810bdaa:	683b      	ldr	r3, [r7, #0]
 810bdac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810bdae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810bdb0:	683b      	ldr	r3, [r7, #0]
 810bdb2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810bdb4:	431a      	orrs	r2, r3
                       Data->DPSM);
 810bdb6:	683b      	ldr	r3, [r7, #0]
 810bdb8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810bdba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810bdbc:	68fa      	ldr	r2, [r7, #12]
 810bdbe:	4313      	orrs	r3, r2
 810bdc0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810bdc2:	687b      	ldr	r3, [r7, #4]
 810bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bdc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810bdca:	68fb      	ldr	r3, [r7, #12]
 810bdcc:	431a      	orrs	r2, r3
 810bdce:	687b      	ldr	r3, [r7, #4]
 810bdd0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810bdd2:	2300      	movs	r3, #0

}
 810bdd4:	4618      	mov	r0, r3
 810bdd6:	3714      	adds	r7, #20
 810bdd8:	46bd      	mov	sp, r7
 810bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdde:	4770      	bx	lr

0810bde0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810bde0:	b580      	push	{r7, lr}
 810bde2:	b088      	sub	sp, #32
 810bde4:	af00      	add	r7, sp, #0
 810bde6:	6078      	str	r0, [r7, #4]
 810bde8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810bdea:	683b      	ldr	r3, [r7, #0]
 810bdec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810bdee:	2310      	movs	r3, #16
 810bdf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bdf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bdf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bdf8:	2300      	movs	r3, #0
 810bdfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bdfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810be00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810be02:	f107 0308 	add.w	r3, r7, #8
 810be06:	4619      	mov	r1, r3
 810be08:	6878      	ldr	r0, [r7, #4]
 810be0a:	f7ff ff73 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810be0e:	f241 3288 	movw	r2, #5000	; 0x1388
 810be12:	2110      	movs	r1, #16
 810be14:	6878      	ldr	r0, [r7, #4]
 810be16:	f000 f995 	bl	810c144 <SDMMC_GetCmdResp1>
 810be1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810be1c:	69fb      	ldr	r3, [r7, #28]
}
 810be1e:	4618      	mov	r0, r3
 810be20:	3720      	adds	r7, #32
 810be22:	46bd      	mov	sp, r7
 810be24:	bd80      	pop	{r7, pc}

0810be26 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810be26:	b580      	push	{r7, lr}
 810be28:	b088      	sub	sp, #32
 810be2a:	af00      	add	r7, sp, #0
 810be2c:	6078      	str	r0, [r7, #4]
 810be2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810be30:	683b      	ldr	r3, [r7, #0]
 810be32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810be34:	2307      	movs	r3, #7
 810be36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810be38:	f44f 7380 	mov.w	r3, #256	; 0x100
 810be3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810be3e:	2300      	movs	r3, #0
 810be40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810be42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810be46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810be48:	f107 0308 	add.w	r3, r7, #8
 810be4c:	4619      	mov	r1, r3
 810be4e:	6878      	ldr	r0, [r7, #4]
 810be50:	f7ff ff50 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810be54:	f241 3288 	movw	r2, #5000	; 0x1388
 810be58:	2107      	movs	r1, #7
 810be5a:	6878      	ldr	r0, [r7, #4]
 810be5c:	f000 f972 	bl	810c144 <SDMMC_GetCmdResp1>
 810be60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810be62:	69fb      	ldr	r3, [r7, #28]
}
 810be64:	4618      	mov	r0, r3
 810be66:	3720      	adds	r7, #32
 810be68:	46bd      	mov	sp, r7
 810be6a:	bd80      	pop	{r7, pc}

0810be6c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810be6c:	b580      	push	{r7, lr}
 810be6e:	b088      	sub	sp, #32
 810be70:	af00      	add	r7, sp, #0
 810be72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810be74:	2300      	movs	r3, #0
 810be76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810be78:	2300      	movs	r3, #0
 810be7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810be7c:	2300      	movs	r3, #0
 810be7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810be80:	2300      	movs	r3, #0
 810be82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810be84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810be88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810be8a:	f107 0308 	add.w	r3, r7, #8
 810be8e:	4619      	mov	r1, r3
 810be90:	6878      	ldr	r0, [r7, #4]
 810be92:	f7ff ff2f 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810be96:	6878      	ldr	r0, [r7, #4]
 810be98:	f000 fb96 	bl	810c5c8 <SDMMC_GetCmdError>
 810be9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810be9e:	69fb      	ldr	r3, [r7, #28]
}
 810bea0:	4618      	mov	r0, r3
 810bea2:	3720      	adds	r7, #32
 810bea4:	46bd      	mov	sp, r7
 810bea6:	bd80      	pop	{r7, pc}

0810bea8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810bea8:	b580      	push	{r7, lr}
 810beaa:	b088      	sub	sp, #32
 810beac:	af00      	add	r7, sp, #0
 810beae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810beb0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 810beb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810beb6:	2308      	movs	r3, #8
 810beb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810beba:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bec0:	2300      	movs	r3, #0
 810bec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810beca:	f107 0308 	add.w	r3, r7, #8
 810bece:	4619      	mov	r1, r3
 810bed0:	6878      	ldr	r0, [r7, #4]
 810bed2:	f7ff ff0f 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810bed6:	6878      	ldr	r0, [r7, #4]
 810bed8:	f000 fb28 	bl	810c52c <SDMMC_GetCmdResp7>
 810bedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bede:	69fb      	ldr	r3, [r7, #28]
}
 810bee0:	4618      	mov	r0, r3
 810bee2:	3720      	adds	r7, #32
 810bee4:	46bd      	mov	sp, r7
 810bee6:	bd80      	pop	{r7, pc}

0810bee8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bee8:	b580      	push	{r7, lr}
 810beea:	b088      	sub	sp, #32
 810beec:	af00      	add	r7, sp, #0
 810beee:	6078      	str	r0, [r7, #4]
 810bef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810bef2:	683b      	ldr	r3, [r7, #0]
 810bef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810bef6:	2337      	movs	r3, #55	; 0x37
 810bef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810befa:	f44f 7380 	mov.w	r3, #256	; 0x100
 810befe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bf00:	2300      	movs	r3, #0
 810bf02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bf04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bf08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bf0a:	f107 0308 	add.w	r3, r7, #8
 810bf0e:	4619      	mov	r1, r3
 810bf10:	6878      	ldr	r0, [r7, #4]
 810bf12:	f7ff feef 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810bf16:	f241 3288 	movw	r2, #5000	; 0x1388
 810bf1a:	2137      	movs	r1, #55	; 0x37
 810bf1c:	6878      	ldr	r0, [r7, #4]
 810bf1e:	f000 f911 	bl	810c144 <SDMMC_GetCmdResp1>
 810bf22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bf24:	69fb      	ldr	r3, [r7, #28]
}
 810bf26:	4618      	mov	r0, r3
 810bf28:	3720      	adds	r7, #32
 810bf2a:	46bd      	mov	sp, r7
 810bf2c:	bd80      	pop	{r7, pc}

0810bf2e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bf2e:	b580      	push	{r7, lr}
 810bf30:	b088      	sub	sp, #32
 810bf32:	af00      	add	r7, sp, #0
 810bf34:	6078      	str	r0, [r7, #4]
 810bf36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810bf38:	683b      	ldr	r3, [r7, #0]
 810bf3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810bf3c:	2329      	movs	r3, #41	; 0x29
 810bf3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bf40:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bf44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bf46:	2300      	movs	r3, #0
 810bf48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bf4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bf4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bf50:	f107 0308 	add.w	r3, r7, #8
 810bf54:	4619      	mov	r1, r3
 810bf56:	6878      	ldr	r0, [r7, #4]
 810bf58:	f7ff fecc 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810bf5c:	6878      	ldr	r0, [r7, #4]
 810bf5e:	f000 fa2d 	bl	810c3bc <SDMMC_GetCmdResp3>
 810bf62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bf64:	69fb      	ldr	r3, [r7, #28]
}
 810bf66:	4618      	mov	r0, r3
 810bf68:	3720      	adds	r7, #32
 810bf6a:	46bd      	mov	sp, r7
 810bf6c:	bd80      	pop	{r7, pc}

0810bf6e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810bf6e:	b580      	push	{r7, lr}
 810bf70:	b088      	sub	sp, #32
 810bf72:	af00      	add	r7, sp, #0
 810bf74:	6078      	str	r0, [r7, #4]
 810bf76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810bf78:	683b      	ldr	r3, [r7, #0]
 810bf7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810bf7c:	2306      	movs	r3, #6
 810bf7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bf80:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bf84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bf86:	2300      	movs	r3, #0
 810bf88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bf8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bf8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bf90:	f107 0308 	add.w	r3, r7, #8
 810bf94:	4619      	mov	r1, r3
 810bf96:	6878      	ldr	r0, [r7, #4]
 810bf98:	f7ff feac 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810bf9c:	f241 3288 	movw	r2, #5000	; 0x1388
 810bfa0:	2106      	movs	r1, #6
 810bfa2:	6878      	ldr	r0, [r7, #4]
 810bfa4:	f000 f8ce 	bl	810c144 <SDMMC_GetCmdResp1>
 810bfa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bfaa:	69fb      	ldr	r3, [r7, #28]
}
 810bfac:	4618      	mov	r0, r3
 810bfae:	3720      	adds	r7, #32
 810bfb0:	46bd      	mov	sp, r7
 810bfb2:	bd80      	pop	{r7, pc}

0810bfb4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810bfb4:	b580      	push	{r7, lr}
 810bfb6:	b088      	sub	sp, #32
 810bfb8:	af00      	add	r7, sp, #0
 810bfba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810bfbc:	2300      	movs	r3, #0
 810bfbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810bfc0:	2333      	movs	r3, #51	; 0x33
 810bfc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bfc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bfc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bfca:	2300      	movs	r3, #0
 810bfcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bfce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bfd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bfd4:	f107 0308 	add.w	r3, r7, #8
 810bfd8:	4619      	mov	r1, r3
 810bfda:	6878      	ldr	r0, [r7, #4]
 810bfdc:	f7ff fe8a 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 810bfe4:	2133      	movs	r1, #51	; 0x33
 810bfe6:	6878      	ldr	r0, [r7, #4]
 810bfe8:	f000 f8ac 	bl	810c144 <SDMMC_GetCmdResp1>
 810bfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bfee:	69fb      	ldr	r3, [r7, #28]
}
 810bff0:	4618      	mov	r0, r3
 810bff2:	3720      	adds	r7, #32
 810bff4:	46bd      	mov	sp, r7
 810bff6:	bd80      	pop	{r7, pc}

0810bff8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810bff8:	b580      	push	{r7, lr}
 810bffa:	b088      	sub	sp, #32
 810bffc:	af00      	add	r7, sp, #0
 810bffe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810c000:	2300      	movs	r3, #0
 810c002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810c004:	2302      	movs	r3, #2
 810c006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c008:	f44f 7340 	mov.w	r3, #768	; 0x300
 810c00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c00e:	2300      	movs	r3, #0
 810c010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c018:	f107 0308 	add.w	r3, r7, #8
 810c01c:	4619      	mov	r1, r3
 810c01e:	6878      	ldr	r0, [r7, #4]
 810c020:	f7ff fe68 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c024:	6878      	ldr	r0, [r7, #4]
 810c026:	f000 f97f 	bl	810c328 <SDMMC_GetCmdResp2>
 810c02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c02c:	69fb      	ldr	r3, [r7, #28]
}
 810c02e:	4618      	mov	r0, r3
 810c030:	3720      	adds	r7, #32
 810c032:	46bd      	mov	sp, r7
 810c034:	bd80      	pop	{r7, pc}

0810c036 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c036:	b580      	push	{r7, lr}
 810c038:	b088      	sub	sp, #32
 810c03a:	af00      	add	r7, sp, #0
 810c03c:	6078      	str	r0, [r7, #4]
 810c03e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810c040:	683b      	ldr	r3, [r7, #0]
 810c042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810c044:	2309      	movs	r3, #9
 810c046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c048:	f44f 7340 	mov.w	r3, #768	; 0x300
 810c04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c04e:	2300      	movs	r3, #0
 810c050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c058:	f107 0308 	add.w	r3, r7, #8
 810c05c:	4619      	mov	r1, r3
 810c05e:	6878      	ldr	r0, [r7, #4]
 810c060:	f7ff fe48 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c064:	6878      	ldr	r0, [r7, #4]
 810c066:	f000 f95f 	bl	810c328 <SDMMC_GetCmdResp2>
 810c06a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c06c:	69fb      	ldr	r3, [r7, #28]
}
 810c06e:	4618      	mov	r0, r3
 810c070:	3720      	adds	r7, #32
 810c072:	46bd      	mov	sp, r7
 810c074:	bd80      	pop	{r7, pc}

0810c076 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810c076:	b580      	push	{r7, lr}
 810c078:	b088      	sub	sp, #32
 810c07a:	af00      	add	r7, sp, #0
 810c07c:	6078      	str	r0, [r7, #4]
 810c07e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810c080:	2300      	movs	r3, #0
 810c082:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810c084:	2303      	movs	r3, #3
 810c086:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c088:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c08e:	2300      	movs	r3, #0
 810c090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c098:	f107 0308 	add.w	r3, r7, #8
 810c09c:	4619      	mov	r1, r3
 810c09e:	6878      	ldr	r0, [r7, #4]
 810c0a0:	f7ff fe28 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810c0a4:	683a      	ldr	r2, [r7, #0]
 810c0a6:	2103      	movs	r1, #3
 810c0a8:	6878      	ldr	r0, [r7, #4]
 810c0aa:	f000 f9c7 	bl	810c43c <SDMMC_GetCmdResp6>
 810c0ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c0b0:	69fb      	ldr	r3, [r7, #28]
}
 810c0b2:	4618      	mov	r0, r3
 810c0b4:	3720      	adds	r7, #32
 810c0b6:	46bd      	mov	sp, r7
 810c0b8:	bd80      	pop	{r7, pc}

0810c0ba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c0ba:	b580      	push	{r7, lr}
 810c0bc:	b088      	sub	sp, #32
 810c0be:	af00      	add	r7, sp, #0
 810c0c0:	6078      	str	r0, [r7, #4]
 810c0c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810c0c4:	683b      	ldr	r3, [r7, #0]
 810c0c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810c0c8:	230d      	movs	r3, #13
 810c0ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c0d2:	2300      	movs	r3, #0
 810c0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c0d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c0da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c0dc:	f107 0308 	add.w	r3, r7, #8
 810c0e0:	4619      	mov	r1, r3
 810c0e2:	6878      	ldr	r0, [r7, #4]
 810c0e4:	f7ff fe06 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810c0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 810c0ec:	210d      	movs	r1, #13
 810c0ee:	6878      	ldr	r0, [r7, #4]
 810c0f0:	f000 f828 	bl	810c144 <SDMMC_GetCmdResp1>
 810c0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c0f6:	69fb      	ldr	r3, [r7, #28]
}
 810c0f8:	4618      	mov	r0, r3
 810c0fa:	3720      	adds	r7, #32
 810c0fc:	46bd      	mov	sp, r7
 810c0fe:	bd80      	pop	{r7, pc}

0810c100 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810c100:	b580      	push	{r7, lr}
 810c102:	b088      	sub	sp, #32
 810c104:	af00      	add	r7, sp, #0
 810c106:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810c108:	2300      	movs	r3, #0
 810c10a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810c10c:	230d      	movs	r3, #13
 810c10e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c110:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c116:	2300      	movs	r3, #0
 810c118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c11a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c11e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c120:	f107 0308 	add.w	r3, r7, #8
 810c124:	4619      	mov	r1, r3
 810c126:	6878      	ldr	r0, [r7, #4]
 810c128:	f7ff fde4 	bl	810bcf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810c12c:	f241 3288 	movw	r2, #5000	; 0x1388
 810c130:	210d      	movs	r1, #13
 810c132:	6878      	ldr	r0, [r7, #4]
 810c134:	f000 f806 	bl	810c144 <SDMMC_GetCmdResp1>
 810c138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c13a:	69fb      	ldr	r3, [r7, #28]
}
 810c13c:	4618      	mov	r0, r3
 810c13e:	3720      	adds	r7, #32
 810c140:	46bd      	mov	sp, r7
 810c142:	bd80      	pop	{r7, pc}

0810c144 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810c144:	b580      	push	{r7, lr}
 810c146:	b088      	sub	sp, #32
 810c148:	af00      	add	r7, sp, #0
 810c14a:	60f8      	str	r0, [r7, #12]
 810c14c:	460b      	mov	r3, r1
 810c14e:	607a      	str	r2, [r7, #4]
 810c150:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810c152:	4b70      	ldr	r3, [pc, #448]	; (810c314 <SDMMC_GetCmdResp1+0x1d0>)
 810c154:	681b      	ldr	r3, [r3, #0]
 810c156:	4a70      	ldr	r2, [pc, #448]	; (810c318 <SDMMC_GetCmdResp1+0x1d4>)
 810c158:	fba2 2303 	umull	r2, r3, r2, r3
 810c15c:	0a5a      	lsrs	r2, r3, #9
 810c15e:	687b      	ldr	r3, [r7, #4]
 810c160:	fb02 f303 	mul.w	r3, r2, r3
 810c164:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c166:	69fb      	ldr	r3, [r7, #28]
 810c168:	1e5a      	subs	r2, r3, #1
 810c16a:	61fa      	str	r2, [r7, #28]
 810c16c:	2b00      	cmp	r3, #0
 810c16e:	d102      	bne.n	810c176 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c174:	e0c9      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810c176:	68fb      	ldr	r3, [r7, #12]
 810c178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c17a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810c17c:	69ba      	ldr	r2, [r7, #24]
 810c17e:	4b67      	ldr	r3, [pc, #412]	; (810c31c <SDMMC_GetCmdResp1+0x1d8>)
 810c180:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c182:	2b00      	cmp	r3, #0
 810c184:	d0ef      	beq.n	810c166 <SDMMC_GetCmdResp1+0x22>
 810c186:	69bb      	ldr	r3, [r7, #24]
 810c188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810c18c:	2b00      	cmp	r3, #0
 810c18e:	d1ea      	bne.n	810c166 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c190:	68fb      	ldr	r3, [r7, #12]
 810c192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c194:	f003 0304 	and.w	r3, r3, #4
 810c198:	2b00      	cmp	r3, #0
 810c19a:	d004      	beq.n	810c1a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c19c:	68fb      	ldr	r3, [r7, #12]
 810c19e:	2204      	movs	r2, #4
 810c1a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c1a2:	2304      	movs	r3, #4
 810c1a4:	e0b1      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c1a6:	68fb      	ldr	r3, [r7, #12]
 810c1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c1aa:	f003 0301 	and.w	r3, r3, #1
 810c1ae:	2b00      	cmp	r3, #0
 810c1b0:	d004      	beq.n	810c1bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c1b2:	68fb      	ldr	r3, [r7, #12]
 810c1b4:	2201      	movs	r2, #1
 810c1b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c1b8:	2301      	movs	r3, #1
 810c1ba:	e0a6      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c1bc:	68fb      	ldr	r3, [r7, #12]
 810c1be:	4a58      	ldr	r2, [pc, #352]	; (810c320 <SDMMC_GetCmdResp1+0x1dc>)
 810c1c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c1c2:	68f8      	ldr	r0, [r7, #12]
 810c1c4:	f7ff fdc0 	bl	810bd48 <SDMMC_GetCommandResponse>
 810c1c8:	4603      	mov	r3, r0
 810c1ca:	461a      	mov	r2, r3
 810c1cc:	7afb      	ldrb	r3, [r7, #11]
 810c1ce:	4293      	cmp	r3, r2
 810c1d0:	d001      	beq.n	810c1d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c1d2:	2301      	movs	r3, #1
 810c1d4:	e099      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c1d6:	2100      	movs	r1, #0
 810c1d8:	68f8      	ldr	r0, [r7, #12]
 810c1da:	f7ff fdc2 	bl	810bd62 <SDMMC_GetResponse>
 810c1de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810c1e0:	697a      	ldr	r2, [r7, #20]
 810c1e2:	4b50      	ldr	r3, [pc, #320]	; (810c324 <SDMMC_GetCmdResp1+0x1e0>)
 810c1e4:	4013      	ands	r3, r2
 810c1e6:	2b00      	cmp	r3, #0
 810c1e8:	d101      	bne.n	810c1ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810c1ea:	2300      	movs	r3, #0
 810c1ec:	e08d      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810c1ee:	697b      	ldr	r3, [r7, #20]
 810c1f0:	2b00      	cmp	r3, #0
 810c1f2:	da02      	bge.n	810c1fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810c1f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810c1f8:	e087      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810c1fa:	697b      	ldr	r3, [r7, #20]
 810c1fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810c200:	2b00      	cmp	r3, #0
 810c202:	d001      	beq.n	810c208 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810c204:	2340      	movs	r3, #64	; 0x40
 810c206:	e080      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810c208:	697b      	ldr	r3, [r7, #20]
 810c20a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810c20e:	2b00      	cmp	r3, #0
 810c210:	d001      	beq.n	810c216 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810c212:	2380      	movs	r3, #128	; 0x80
 810c214:	e079      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810c216:	697b      	ldr	r3, [r7, #20]
 810c218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c21c:	2b00      	cmp	r3, #0
 810c21e:	d002      	beq.n	810c226 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810c220:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c224:	e071      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810c226:	697b      	ldr	r3, [r7, #20]
 810c228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810c22c:	2b00      	cmp	r3, #0
 810c22e:	d002      	beq.n	810c236 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810c230:	f44f 7300 	mov.w	r3, #512	; 0x200
 810c234:	e069      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810c236:	697b      	ldr	r3, [r7, #20]
 810c238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810c23c:	2b00      	cmp	r3, #0
 810c23e:	d002      	beq.n	810c246 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810c240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810c244:	e061      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810c246:	697b      	ldr	r3, [r7, #20]
 810c248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810c24c:	2b00      	cmp	r3, #0
 810c24e:	d002      	beq.n	810c256 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810c250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810c254:	e059      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810c256:	697b      	ldr	r3, [r7, #20]
 810c258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c25c:	2b00      	cmp	r3, #0
 810c25e:	d002      	beq.n	810c266 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c264:	e051      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810c266:	697b      	ldr	r3, [r7, #20]
 810c268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810c26c:	2b00      	cmp	r3, #0
 810c26e:	d002      	beq.n	810c276 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810c274:	e049      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810c276:	697b      	ldr	r3, [r7, #20]
 810c278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810c27c:	2b00      	cmp	r3, #0
 810c27e:	d002      	beq.n	810c286 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810c280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810c284:	e041      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810c286:	697b      	ldr	r3, [r7, #20]
 810c288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810c28c:	2b00      	cmp	r3, #0
 810c28e:	d002      	beq.n	810c296 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810c290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c294:	e039      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810c296:	697b      	ldr	r3, [r7, #20]
 810c298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810c29c:	2b00      	cmp	r3, #0
 810c29e:	d002      	beq.n	810c2a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810c2a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810c2a4:	e031      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810c2a6:	697b      	ldr	r3, [r7, #20]
 810c2a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810c2ac:	2b00      	cmp	r3, #0
 810c2ae:	d002      	beq.n	810c2b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810c2b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810c2b4:	e029      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810c2b6:	697b      	ldr	r3, [r7, #20]
 810c2b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810c2bc:	2b00      	cmp	r3, #0
 810c2be:	d002      	beq.n	810c2c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810c2c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810c2c4:	e021      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810c2c6:	697b      	ldr	r3, [r7, #20]
 810c2c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810c2cc:	2b00      	cmp	r3, #0
 810c2ce:	d002      	beq.n	810c2d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810c2d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810c2d4:	e019      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810c2d6:	697b      	ldr	r3, [r7, #20]
 810c2d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c2dc:	2b00      	cmp	r3, #0
 810c2de:	d002      	beq.n	810c2e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810c2e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810c2e4:	e011      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810c2e6:	697b      	ldr	r3, [r7, #20]
 810c2e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810c2ec:	2b00      	cmp	r3, #0
 810c2ee:	d002      	beq.n	810c2f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810c2f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810c2f4:	e009      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810c2f6:	697b      	ldr	r3, [r7, #20]
 810c2f8:	f003 0308 	and.w	r3, r3, #8
 810c2fc:	2b00      	cmp	r3, #0
 810c2fe:	d002      	beq.n	810c306 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810c300:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 810c304:	e001      	b.n	810c30a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810c30a:	4618      	mov	r0, r3
 810c30c:	3720      	adds	r7, #32
 810c30e:	46bd      	mov	sp, r7
 810c310:	bd80      	pop	{r7, pc}
 810c312:	bf00      	nop
 810c314:	10000000 	.word	0x10000000
 810c318:	10624dd3 	.word	0x10624dd3
 810c31c:	00200045 	.word	0x00200045
 810c320:	002000c5 	.word	0x002000c5
 810c324:	fdffe008 	.word	0xfdffe008

0810c328 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810c328:	b480      	push	{r7}
 810c32a:	b085      	sub	sp, #20
 810c32c:	af00      	add	r7, sp, #0
 810c32e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c330:	4b1f      	ldr	r3, [pc, #124]	; (810c3b0 <SDMMC_GetCmdResp2+0x88>)
 810c332:	681b      	ldr	r3, [r3, #0]
 810c334:	4a1f      	ldr	r2, [pc, #124]	; (810c3b4 <SDMMC_GetCmdResp2+0x8c>)
 810c336:	fba2 2303 	umull	r2, r3, r2, r3
 810c33a:	0a5b      	lsrs	r3, r3, #9
 810c33c:	f241 3288 	movw	r2, #5000	; 0x1388
 810c340:	fb02 f303 	mul.w	r3, r2, r3
 810c344:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c346:	68fb      	ldr	r3, [r7, #12]
 810c348:	1e5a      	subs	r2, r3, #1
 810c34a:	60fa      	str	r2, [r7, #12]
 810c34c:	2b00      	cmp	r3, #0
 810c34e:	d102      	bne.n	810c356 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c354:	e026      	b.n	810c3a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810c356:	687b      	ldr	r3, [r7, #4]
 810c358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c35a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c35c:	68bb      	ldr	r3, [r7, #8]
 810c35e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c362:	2b00      	cmp	r3, #0
 810c364:	d0ef      	beq.n	810c346 <SDMMC_GetCmdResp2+0x1e>
 810c366:	68bb      	ldr	r3, [r7, #8]
 810c368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c36c:	2b00      	cmp	r3, #0
 810c36e:	d1ea      	bne.n	810c346 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c370:	687b      	ldr	r3, [r7, #4]
 810c372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c374:	f003 0304 	and.w	r3, r3, #4
 810c378:	2b00      	cmp	r3, #0
 810c37a:	d004      	beq.n	810c386 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c37c:	687b      	ldr	r3, [r7, #4]
 810c37e:	2204      	movs	r2, #4
 810c380:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c382:	2304      	movs	r3, #4
 810c384:	e00e      	b.n	810c3a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c386:	687b      	ldr	r3, [r7, #4]
 810c388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c38a:	f003 0301 	and.w	r3, r3, #1
 810c38e:	2b00      	cmp	r3, #0
 810c390:	d004      	beq.n	810c39c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c392:	687b      	ldr	r3, [r7, #4]
 810c394:	2201      	movs	r2, #1
 810c396:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c398:	2301      	movs	r3, #1
 810c39a:	e003      	b.n	810c3a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c39c:	687b      	ldr	r3, [r7, #4]
 810c39e:	4a06      	ldr	r2, [pc, #24]	; (810c3b8 <SDMMC_GetCmdResp2+0x90>)
 810c3a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810c3a2:	2300      	movs	r3, #0
}
 810c3a4:	4618      	mov	r0, r3
 810c3a6:	3714      	adds	r7, #20
 810c3a8:	46bd      	mov	sp, r7
 810c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3ae:	4770      	bx	lr
 810c3b0:	10000000 	.word	0x10000000
 810c3b4:	10624dd3 	.word	0x10624dd3
 810c3b8:	002000c5 	.word	0x002000c5

0810c3bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810c3bc:	b480      	push	{r7}
 810c3be:	b085      	sub	sp, #20
 810c3c0:	af00      	add	r7, sp, #0
 810c3c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c3c4:	4b1a      	ldr	r3, [pc, #104]	; (810c430 <SDMMC_GetCmdResp3+0x74>)
 810c3c6:	681b      	ldr	r3, [r3, #0]
 810c3c8:	4a1a      	ldr	r2, [pc, #104]	; (810c434 <SDMMC_GetCmdResp3+0x78>)
 810c3ca:	fba2 2303 	umull	r2, r3, r2, r3
 810c3ce:	0a5b      	lsrs	r3, r3, #9
 810c3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 810c3d4:	fb02 f303 	mul.w	r3, r2, r3
 810c3d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c3da:	68fb      	ldr	r3, [r7, #12]
 810c3dc:	1e5a      	subs	r2, r3, #1
 810c3de:	60fa      	str	r2, [r7, #12]
 810c3e0:	2b00      	cmp	r3, #0
 810c3e2:	d102      	bne.n	810c3ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c3e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c3e8:	e01b      	b.n	810c422 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810c3ea:	687b      	ldr	r3, [r7, #4]
 810c3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c3ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c3f0:	68bb      	ldr	r3, [r7, #8]
 810c3f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c3f6:	2b00      	cmp	r3, #0
 810c3f8:	d0ef      	beq.n	810c3da <SDMMC_GetCmdResp3+0x1e>
 810c3fa:	68bb      	ldr	r3, [r7, #8]
 810c3fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c400:	2b00      	cmp	r3, #0
 810c402:	d1ea      	bne.n	810c3da <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c404:	687b      	ldr	r3, [r7, #4]
 810c406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c408:	f003 0304 	and.w	r3, r3, #4
 810c40c:	2b00      	cmp	r3, #0
 810c40e:	d004      	beq.n	810c41a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c410:	687b      	ldr	r3, [r7, #4]
 810c412:	2204      	movs	r2, #4
 810c414:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c416:	2304      	movs	r3, #4
 810c418:	e003      	b.n	810c422 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c41a:	687b      	ldr	r3, [r7, #4]
 810c41c:	4a06      	ldr	r2, [pc, #24]	; (810c438 <SDMMC_GetCmdResp3+0x7c>)
 810c41e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810c420:	2300      	movs	r3, #0
}
 810c422:	4618      	mov	r0, r3
 810c424:	3714      	adds	r7, #20
 810c426:	46bd      	mov	sp, r7
 810c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c42c:	4770      	bx	lr
 810c42e:	bf00      	nop
 810c430:	10000000 	.word	0x10000000
 810c434:	10624dd3 	.word	0x10624dd3
 810c438:	002000c5 	.word	0x002000c5

0810c43c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810c43c:	b580      	push	{r7, lr}
 810c43e:	b088      	sub	sp, #32
 810c440:	af00      	add	r7, sp, #0
 810c442:	60f8      	str	r0, [r7, #12]
 810c444:	460b      	mov	r3, r1
 810c446:	607a      	str	r2, [r7, #4]
 810c448:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c44a:	4b35      	ldr	r3, [pc, #212]	; (810c520 <SDMMC_GetCmdResp6+0xe4>)
 810c44c:	681b      	ldr	r3, [r3, #0]
 810c44e:	4a35      	ldr	r2, [pc, #212]	; (810c524 <SDMMC_GetCmdResp6+0xe8>)
 810c450:	fba2 2303 	umull	r2, r3, r2, r3
 810c454:	0a5b      	lsrs	r3, r3, #9
 810c456:	f241 3288 	movw	r2, #5000	; 0x1388
 810c45a:	fb02 f303 	mul.w	r3, r2, r3
 810c45e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c460:	69fb      	ldr	r3, [r7, #28]
 810c462:	1e5a      	subs	r2, r3, #1
 810c464:	61fa      	str	r2, [r7, #28]
 810c466:	2b00      	cmp	r3, #0
 810c468:	d102      	bne.n	810c470 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c46a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c46e:	e052      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810c470:	68fb      	ldr	r3, [r7, #12]
 810c472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c474:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c476:	69bb      	ldr	r3, [r7, #24]
 810c478:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c47c:	2b00      	cmp	r3, #0
 810c47e:	d0ef      	beq.n	810c460 <SDMMC_GetCmdResp6+0x24>
 810c480:	69bb      	ldr	r3, [r7, #24]
 810c482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c486:	2b00      	cmp	r3, #0
 810c488:	d1ea      	bne.n	810c460 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c48a:	68fb      	ldr	r3, [r7, #12]
 810c48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c48e:	f003 0304 	and.w	r3, r3, #4
 810c492:	2b00      	cmp	r3, #0
 810c494:	d004      	beq.n	810c4a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c496:	68fb      	ldr	r3, [r7, #12]
 810c498:	2204      	movs	r2, #4
 810c49a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c49c:	2304      	movs	r3, #4
 810c49e:	e03a      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c4a0:	68fb      	ldr	r3, [r7, #12]
 810c4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c4a4:	f003 0301 	and.w	r3, r3, #1
 810c4a8:	2b00      	cmp	r3, #0
 810c4aa:	d004      	beq.n	810c4b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c4ac:	68fb      	ldr	r3, [r7, #12]
 810c4ae:	2201      	movs	r2, #1
 810c4b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c4b2:	2301      	movs	r3, #1
 810c4b4:	e02f      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c4b6:	68f8      	ldr	r0, [r7, #12]
 810c4b8:	f7ff fc46 	bl	810bd48 <SDMMC_GetCommandResponse>
 810c4bc:	4603      	mov	r3, r0
 810c4be:	461a      	mov	r2, r3
 810c4c0:	7afb      	ldrb	r3, [r7, #11]
 810c4c2:	4293      	cmp	r3, r2
 810c4c4:	d001      	beq.n	810c4ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c4c6:	2301      	movs	r3, #1
 810c4c8:	e025      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c4ca:	68fb      	ldr	r3, [r7, #12]
 810c4cc:	4a16      	ldr	r2, [pc, #88]	; (810c528 <SDMMC_GetCmdResp6+0xec>)
 810c4ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c4d0:	2100      	movs	r1, #0
 810c4d2:	68f8      	ldr	r0, [r7, #12]
 810c4d4:	f7ff fc45 	bl	810bd62 <SDMMC_GetResponse>
 810c4d8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810c4da:	697b      	ldr	r3, [r7, #20]
 810c4dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810c4e0:	2b00      	cmp	r3, #0
 810c4e2:	d106      	bne.n	810c4f2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810c4e4:	697b      	ldr	r3, [r7, #20]
 810c4e6:	0c1b      	lsrs	r3, r3, #16
 810c4e8:	b29a      	uxth	r2, r3
 810c4ea:	687b      	ldr	r3, [r7, #4]
 810c4ec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810c4ee:	2300      	movs	r3, #0
 810c4f0:	e011      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810c4f2:	697b      	ldr	r3, [r7, #20]
 810c4f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c4f8:	2b00      	cmp	r3, #0
 810c4fa:	d002      	beq.n	810c502 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c4fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810c500:	e009      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810c502:	697b      	ldr	r3, [r7, #20]
 810c504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810c508:	2b00      	cmp	r3, #0
 810c50a:	d002      	beq.n	810c512 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c50c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c510:	e001      	b.n	810c516 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810c516:	4618      	mov	r0, r3
 810c518:	3720      	adds	r7, #32
 810c51a:	46bd      	mov	sp, r7
 810c51c:	bd80      	pop	{r7, pc}
 810c51e:	bf00      	nop
 810c520:	10000000 	.word	0x10000000
 810c524:	10624dd3 	.word	0x10624dd3
 810c528:	002000c5 	.word	0x002000c5

0810c52c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810c52c:	b480      	push	{r7}
 810c52e:	b085      	sub	sp, #20
 810c530:	af00      	add	r7, sp, #0
 810c532:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c534:	4b22      	ldr	r3, [pc, #136]	; (810c5c0 <SDMMC_GetCmdResp7+0x94>)
 810c536:	681b      	ldr	r3, [r3, #0]
 810c538:	4a22      	ldr	r2, [pc, #136]	; (810c5c4 <SDMMC_GetCmdResp7+0x98>)
 810c53a:	fba2 2303 	umull	r2, r3, r2, r3
 810c53e:	0a5b      	lsrs	r3, r3, #9
 810c540:	f241 3288 	movw	r2, #5000	; 0x1388
 810c544:	fb02 f303 	mul.w	r3, r2, r3
 810c548:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c54a:	68fb      	ldr	r3, [r7, #12]
 810c54c:	1e5a      	subs	r2, r3, #1
 810c54e:	60fa      	str	r2, [r7, #12]
 810c550:	2b00      	cmp	r3, #0
 810c552:	d102      	bne.n	810c55a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c558:	e02c      	b.n	810c5b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810c55a:	687b      	ldr	r3, [r7, #4]
 810c55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c55e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c560:	68bb      	ldr	r3, [r7, #8]
 810c562:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c566:	2b00      	cmp	r3, #0
 810c568:	d0ef      	beq.n	810c54a <SDMMC_GetCmdResp7+0x1e>
 810c56a:	68bb      	ldr	r3, [r7, #8]
 810c56c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c570:	2b00      	cmp	r3, #0
 810c572:	d1ea      	bne.n	810c54a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c574:	687b      	ldr	r3, [r7, #4]
 810c576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c578:	f003 0304 	and.w	r3, r3, #4
 810c57c:	2b00      	cmp	r3, #0
 810c57e:	d004      	beq.n	810c58a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c580:	687b      	ldr	r3, [r7, #4]
 810c582:	2204      	movs	r2, #4
 810c584:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c586:	2304      	movs	r3, #4
 810c588:	e014      	b.n	810c5b4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c58a:	687b      	ldr	r3, [r7, #4]
 810c58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c58e:	f003 0301 	and.w	r3, r3, #1
 810c592:	2b00      	cmp	r3, #0
 810c594:	d004      	beq.n	810c5a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c596:	687b      	ldr	r3, [r7, #4]
 810c598:	2201      	movs	r2, #1
 810c59a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c59c:	2301      	movs	r3, #1
 810c59e:	e009      	b.n	810c5b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810c5a0:	687b      	ldr	r3, [r7, #4]
 810c5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c5a8:	2b00      	cmp	r3, #0
 810c5aa:	d002      	beq.n	810c5b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810c5ac:	687b      	ldr	r3, [r7, #4]
 810c5ae:	2240      	movs	r2, #64	; 0x40
 810c5b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810c5b2:	2300      	movs	r3, #0

}
 810c5b4:	4618      	mov	r0, r3
 810c5b6:	3714      	adds	r7, #20
 810c5b8:	46bd      	mov	sp, r7
 810c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5be:	4770      	bx	lr
 810c5c0:	10000000 	.word	0x10000000
 810c5c4:	10624dd3 	.word	0x10624dd3

0810c5c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810c5c8:	b480      	push	{r7}
 810c5ca:	b085      	sub	sp, #20
 810c5cc:	af00      	add	r7, sp, #0
 810c5ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c5d0:	4b11      	ldr	r3, [pc, #68]	; (810c618 <SDMMC_GetCmdError+0x50>)
 810c5d2:	681b      	ldr	r3, [r3, #0]
 810c5d4:	4a11      	ldr	r2, [pc, #68]	; (810c61c <SDMMC_GetCmdError+0x54>)
 810c5d6:	fba2 2303 	umull	r2, r3, r2, r3
 810c5da:	0a5b      	lsrs	r3, r3, #9
 810c5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 810c5e0:	fb02 f303 	mul.w	r3, r2, r3
 810c5e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c5e6:	68fb      	ldr	r3, [r7, #12]
 810c5e8:	1e5a      	subs	r2, r3, #1
 810c5ea:	60fa      	str	r2, [r7, #12]
 810c5ec:	2b00      	cmp	r3, #0
 810c5ee:	d102      	bne.n	810c5f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c5f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c5f4:	e009      	b.n	810c60a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810c5f6:	687b      	ldr	r3, [r7, #4]
 810c5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c5fe:	2b00      	cmp	r3, #0
 810c600:	d0f1      	beq.n	810c5e6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c602:	687b      	ldr	r3, [r7, #4]
 810c604:	4a06      	ldr	r2, [pc, #24]	; (810c620 <SDMMC_GetCmdError+0x58>)
 810c606:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 810c608:	2300      	movs	r3, #0
}
 810c60a:	4618      	mov	r0, r3
 810c60c:	3714      	adds	r7, #20
 810c60e:	46bd      	mov	sp, r7
 810c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c614:	4770      	bx	lr
 810c616:	bf00      	nop
 810c618:	10000000 	.word	0x10000000
 810c61c:	10624dd3 	.word	0x10624dd3
 810c620:	002000c5 	.word	0x002000c5

0810c624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810c624:	b084      	sub	sp, #16
 810c626:	b580      	push	{r7, lr}
 810c628:	b084      	sub	sp, #16
 810c62a:	af00      	add	r7, sp, #0
 810c62c:	6078      	str	r0, [r7, #4]
 810c62e:	f107 001c 	add.w	r0, r7, #28
 810c632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810c638:	2b01      	cmp	r3, #1
 810c63a:	d122      	bne.n	810c682 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810c63c:	687b      	ldr	r3, [r7, #4]
 810c63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810c648:	687b      	ldr	r3, [r7, #4]
 810c64a:	68db      	ldr	r3, [r3, #12]
 810c64c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810c650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810c654:	687a      	ldr	r2, [r7, #4]
 810c656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810c658:	687b      	ldr	r3, [r7, #4]
 810c65a:	68db      	ldr	r3, [r3, #12]
 810c65c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810c660:	687b      	ldr	r3, [r7, #4]
 810c662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810c664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810c666:	2b01      	cmp	r3, #1
 810c668:	d105      	bne.n	810c676 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810c66a:	687b      	ldr	r3, [r7, #4]
 810c66c:	68db      	ldr	r3, [r3, #12]
 810c66e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810c672:	687b      	ldr	r3, [r7, #4]
 810c674:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810c676:	6878      	ldr	r0, [r7, #4]
 810c678:	f000 faa6 	bl	810cbc8 <USB_CoreReset>
 810c67c:	4603      	mov	r3, r0
 810c67e:	73fb      	strb	r3, [r7, #15]
 810c680:	e01a      	b.n	810c6b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810c682:	687b      	ldr	r3, [r7, #4]
 810c684:	68db      	ldr	r3, [r3, #12]
 810c686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810c68a:	687b      	ldr	r3, [r7, #4]
 810c68c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810c68e:	6878      	ldr	r0, [r7, #4]
 810c690:	f000 fa9a 	bl	810cbc8 <USB_CoreReset>
 810c694:	4603      	mov	r3, r0
 810c696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810c698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810c69a:	2b00      	cmp	r3, #0
 810c69c:	d106      	bne.n	810c6ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810c69e:	687b      	ldr	r3, [r7, #4]
 810c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810c6a6:	687b      	ldr	r3, [r7, #4]
 810c6a8:	639a      	str	r2, [r3, #56]	; 0x38
 810c6aa:	e005      	b.n	810c6b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810c6ac:	687b      	ldr	r3, [r7, #4]
 810c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810c6b4:	687b      	ldr	r3, [r7, #4]
 810c6b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c6ba:	2b01      	cmp	r3, #1
 810c6bc:	d118      	bne.n	810c6f0 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810c6be:	687b      	ldr	r3, [r7, #4]
 810c6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810c6c2:	b29a      	uxth	r2, r3
 810c6c4:	687b      	ldr	r3, [r7, #4]
 810c6c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810c6c8:	687b      	ldr	r3, [r7, #4]
 810c6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810c6cc:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 810c6d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810c6d4:	687a      	ldr	r2, [r7, #4]
 810c6d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810c6d8:	687b      	ldr	r3, [r7, #4]
 810c6da:	689b      	ldr	r3, [r3, #8]
 810c6dc:	f043 0206 	orr.w	r2, r3, #6
 810c6e0:	687b      	ldr	r3, [r7, #4]
 810c6e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810c6e4:	687b      	ldr	r3, [r7, #4]
 810c6e6:	689b      	ldr	r3, [r3, #8]
 810c6e8:	f043 0220 	orr.w	r2, r3, #32
 810c6ec:	687b      	ldr	r3, [r7, #4]
 810c6ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810c6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 810c6f2:	4618      	mov	r0, r3
 810c6f4:	3710      	adds	r7, #16
 810c6f6:	46bd      	mov	sp, r7
 810c6f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810c6fc:	b004      	add	sp, #16
 810c6fe:	4770      	bx	lr

0810c700 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810c700:	b480      	push	{r7}
 810c702:	b083      	sub	sp, #12
 810c704:	af00      	add	r7, sp, #0
 810c706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810c708:	687b      	ldr	r3, [r7, #4]
 810c70a:	689b      	ldr	r3, [r3, #8]
 810c70c:	f023 0201 	bic.w	r2, r3, #1
 810c710:	687b      	ldr	r3, [r7, #4]
 810c712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810c714:	2300      	movs	r3, #0
}
 810c716:	4618      	mov	r0, r3
 810c718:	370c      	adds	r7, #12
 810c71a:	46bd      	mov	sp, r7
 810c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c720:	4770      	bx	lr

0810c722 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810c722:	b580      	push	{r7, lr}
 810c724:	b084      	sub	sp, #16
 810c726:	af00      	add	r7, sp, #0
 810c728:	6078      	str	r0, [r7, #4]
 810c72a:	460b      	mov	r3, r1
 810c72c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810c72e:	2300      	movs	r3, #0
 810c730:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810c732:	687b      	ldr	r3, [r7, #4]
 810c734:	68db      	ldr	r3, [r3, #12]
 810c736:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 810c73a:	687b      	ldr	r3, [r7, #4]
 810c73c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810c73e:	78fb      	ldrb	r3, [r7, #3]
 810c740:	2b01      	cmp	r3, #1
 810c742:	d115      	bne.n	810c770 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810c744:	687b      	ldr	r3, [r7, #4]
 810c746:	68db      	ldr	r3, [r3, #12]
 810c748:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810c74c:	687b      	ldr	r3, [r7, #4]
 810c74e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810c750:	2001      	movs	r0, #1
 810c752:	f7f6 fa05 	bl	8102b60 <HAL_Delay>
      ms++;
 810c756:	68fb      	ldr	r3, [r7, #12]
 810c758:	3301      	adds	r3, #1
 810c75a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 810c75c:	6878      	ldr	r0, [r7, #4]
 810c75e:	f000 fa25 	bl	810cbac <USB_GetMode>
 810c762:	4603      	mov	r3, r0
 810c764:	2b01      	cmp	r3, #1
 810c766:	d01e      	beq.n	810c7a6 <USB_SetCurrentMode+0x84>
 810c768:	68fb      	ldr	r3, [r7, #12]
 810c76a:	2b31      	cmp	r3, #49	; 0x31
 810c76c:	d9f0      	bls.n	810c750 <USB_SetCurrentMode+0x2e>
 810c76e:	e01a      	b.n	810c7a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810c770:	78fb      	ldrb	r3, [r7, #3]
 810c772:	2b00      	cmp	r3, #0
 810c774:	d115      	bne.n	810c7a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810c776:	687b      	ldr	r3, [r7, #4]
 810c778:	68db      	ldr	r3, [r3, #12]
 810c77a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810c77e:	687b      	ldr	r3, [r7, #4]
 810c780:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810c782:	2001      	movs	r0, #1
 810c784:	f7f6 f9ec 	bl	8102b60 <HAL_Delay>
      ms++;
 810c788:	68fb      	ldr	r3, [r7, #12]
 810c78a:	3301      	adds	r3, #1
 810c78c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 810c78e:	6878      	ldr	r0, [r7, #4]
 810c790:	f000 fa0c 	bl	810cbac <USB_GetMode>
 810c794:	4603      	mov	r3, r0
 810c796:	2b00      	cmp	r3, #0
 810c798:	d005      	beq.n	810c7a6 <USB_SetCurrentMode+0x84>
 810c79a:	68fb      	ldr	r3, [r7, #12]
 810c79c:	2b31      	cmp	r3, #49	; 0x31
 810c79e:	d9f0      	bls.n	810c782 <USB_SetCurrentMode+0x60>
 810c7a0:	e001      	b.n	810c7a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810c7a2:	2301      	movs	r3, #1
 810c7a4:	e005      	b.n	810c7b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 810c7a6:	68fb      	ldr	r3, [r7, #12]
 810c7a8:	2b32      	cmp	r3, #50	; 0x32
 810c7aa:	d101      	bne.n	810c7b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810c7ac:	2301      	movs	r3, #1
 810c7ae:	e000      	b.n	810c7b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810c7b0:	2300      	movs	r3, #0
}
 810c7b2:	4618      	mov	r0, r3
 810c7b4:	3710      	adds	r7, #16
 810c7b6:	46bd      	mov	sp, r7
 810c7b8:	bd80      	pop	{r7, pc}
	...

0810c7bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810c7bc:	b084      	sub	sp, #16
 810c7be:	b580      	push	{r7, lr}
 810c7c0:	b086      	sub	sp, #24
 810c7c2:	af00      	add	r7, sp, #0
 810c7c4:	6078      	str	r0, [r7, #4]
 810c7c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 810c7ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810c7ce:	2300      	movs	r3, #0
 810c7d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810c7d2:	687b      	ldr	r3, [r7, #4]
 810c7d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810c7d6:	2300      	movs	r3, #0
 810c7d8:	613b      	str	r3, [r7, #16]
 810c7da:	e009      	b.n	810c7f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810c7dc:	687a      	ldr	r2, [r7, #4]
 810c7de:	693b      	ldr	r3, [r7, #16]
 810c7e0:	3340      	adds	r3, #64	; 0x40
 810c7e2:	009b      	lsls	r3, r3, #2
 810c7e4:	4413      	add	r3, r2
 810c7e6:	2200      	movs	r2, #0
 810c7e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810c7ea:	693b      	ldr	r3, [r7, #16]
 810c7ec:	3301      	adds	r3, #1
 810c7ee:	613b      	str	r3, [r7, #16]
 810c7f0:	693b      	ldr	r3, [r7, #16]
 810c7f2:	2b0e      	cmp	r3, #14
 810c7f4:	d9f2      	bls.n	810c7dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810c7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810c7f8:	2b00      	cmp	r3, #0
 810c7fa:	d11c      	bne.n	810c836 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810c7fc:	68fb      	ldr	r3, [r7, #12]
 810c7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c802:	685b      	ldr	r3, [r3, #4]
 810c804:	68fa      	ldr	r2, [r7, #12]
 810c806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810c80a:	f043 0302 	orr.w	r3, r3, #2
 810c80e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810c810:	687b      	ldr	r3, [r7, #4]
 810c812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c814:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 810c818:	687b      	ldr	r3, [r7, #4]
 810c81a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810c81c:	687b      	ldr	r3, [r7, #4]
 810c81e:	681b      	ldr	r3, [r3, #0]
 810c820:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810c824:	687b      	ldr	r3, [r7, #4]
 810c826:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810c828:	687b      	ldr	r3, [r7, #4]
 810c82a:	681b      	ldr	r3, [r3, #0]
 810c82c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810c830:	687b      	ldr	r3, [r7, #4]
 810c832:	601a      	str	r2, [r3, #0]
 810c834:	e005      	b.n	810c842 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810c836:	687b      	ldr	r3, [r7, #4]
 810c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c83a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 810c83e:	687b      	ldr	r3, [r7, #4]
 810c840:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810c842:	68fb      	ldr	r3, [r7, #12]
 810c844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810c848:	461a      	mov	r2, r3
 810c84a:	2300      	movs	r3, #0
 810c84c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 810c84e:	68fb      	ldr	r3, [r7, #12]
 810c850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c854:	4619      	mov	r1, r3
 810c856:	68fb      	ldr	r3, [r7, #12]
 810c858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c85c:	461a      	mov	r2, r3
 810c85e:	680b      	ldr	r3, [r1, #0]
 810c860:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810c862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c864:	2b01      	cmp	r3, #1
 810c866:	d10c      	bne.n	810c882 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c86a:	2b00      	cmp	r3, #0
 810c86c:	d104      	bne.n	810c878 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810c86e:	2100      	movs	r1, #0
 810c870:	6878      	ldr	r0, [r7, #4]
 810c872:	f000 f961 	bl	810cb38 <USB_SetDevSpeed>
 810c876:	e008      	b.n	810c88a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810c878:	2101      	movs	r1, #1
 810c87a:	6878      	ldr	r0, [r7, #4]
 810c87c:	f000 f95c 	bl	810cb38 <USB_SetDevSpeed>
 810c880:	e003      	b.n	810c88a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810c882:	2103      	movs	r1, #3
 810c884:	6878      	ldr	r0, [r7, #4]
 810c886:	f000 f957 	bl	810cb38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810c88a:	2110      	movs	r1, #16
 810c88c:	6878      	ldr	r0, [r7, #4]
 810c88e:	f000 f8f3 	bl	810ca78 <USB_FlushTxFifo>
 810c892:	4603      	mov	r3, r0
 810c894:	2b00      	cmp	r3, #0
 810c896:	d001      	beq.n	810c89c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 810c898:	2301      	movs	r3, #1
 810c89a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810c89c:	6878      	ldr	r0, [r7, #4]
 810c89e:	f000 f91d 	bl	810cadc <USB_FlushRxFifo>
 810c8a2:	4603      	mov	r3, r0
 810c8a4:	2b00      	cmp	r3, #0
 810c8a6:	d001      	beq.n	810c8ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 810c8a8:	2301      	movs	r3, #1
 810c8aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810c8ac:	68fb      	ldr	r3, [r7, #12]
 810c8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c8b2:	461a      	mov	r2, r3
 810c8b4:	2300      	movs	r3, #0
 810c8b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810c8b8:	68fb      	ldr	r3, [r7, #12]
 810c8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c8be:	461a      	mov	r2, r3
 810c8c0:	2300      	movs	r3, #0
 810c8c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810c8c4:	68fb      	ldr	r3, [r7, #12]
 810c8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c8ca:	461a      	mov	r2, r3
 810c8cc:	2300      	movs	r3, #0
 810c8ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c8d0:	2300      	movs	r3, #0
 810c8d2:	613b      	str	r3, [r7, #16]
 810c8d4:	e043      	b.n	810c95e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810c8d6:	693b      	ldr	r3, [r7, #16]
 810c8d8:	015a      	lsls	r2, r3, #5
 810c8da:	68fb      	ldr	r3, [r7, #12]
 810c8dc:	4413      	add	r3, r2
 810c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c8e2:	681b      	ldr	r3, [r3, #0]
 810c8e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810c8e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810c8ec:	d118      	bne.n	810c920 <USB_DevInit+0x164>
    {
      if (i == 0U)
 810c8ee:	693b      	ldr	r3, [r7, #16]
 810c8f0:	2b00      	cmp	r3, #0
 810c8f2:	d10a      	bne.n	810c90a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810c8f4:	693b      	ldr	r3, [r7, #16]
 810c8f6:	015a      	lsls	r2, r3, #5
 810c8f8:	68fb      	ldr	r3, [r7, #12]
 810c8fa:	4413      	add	r3, r2
 810c8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c900:	461a      	mov	r2, r3
 810c902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810c906:	6013      	str	r3, [r2, #0]
 810c908:	e013      	b.n	810c932 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810c90a:	693b      	ldr	r3, [r7, #16]
 810c90c:	015a      	lsls	r2, r3, #5
 810c90e:	68fb      	ldr	r3, [r7, #12]
 810c910:	4413      	add	r3, r2
 810c912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c916:	461a      	mov	r2, r3
 810c918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810c91c:	6013      	str	r3, [r2, #0]
 810c91e:	e008      	b.n	810c932 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810c920:	693b      	ldr	r3, [r7, #16]
 810c922:	015a      	lsls	r2, r3, #5
 810c924:	68fb      	ldr	r3, [r7, #12]
 810c926:	4413      	add	r3, r2
 810c928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c92c:	461a      	mov	r2, r3
 810c92e:	2300      	movs	r3, #0
 810c930:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810c932:	693b      	ldr	r3, [r7, #16]
 810c934:	015a      	lsls	r2, r3, #5
 810c936:	68fb      	ldr	r3, [r7, #12]
 810c938:	4413      	add	r3, r2
 810c93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c93e:	461a      	mov	r2, r3
 810c940:	2300      	movs	r3, #0
 810c942:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810c944:	693b      	ldr	r3, [r7, #16]
 810c946:	015a      	lsls	r2, r3, #5
 810c948:	68fb      	ldr	r3, [r7, #12]
 810c94a:	4413      	add	r3, r2
 810c94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c950:	461a      	mov	r2, r3
 810c952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810c956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c958:	693b      	ldr	r3, [r7, #16]
 810c95a:	3301      	adds	r3, #1
 810c95c:	613b      	str	r3, [r7, #16]
 810c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c960:	693a      	ldr	r2, [r7, #16]
 810c962:	429a      	cmp	r2, r3
 810c964:	d3b7      	bcc.n	810c8d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c966:	2300      	movs	r3, #0
 810c968:	613b      	str	r3, [r7, #16]
 810c96a:	e043      	b.n	810c9f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810c96c:	693b      	ldr	r3, [r7, #16]
 810c96e:	015a      	lsls	r2, r3, #5
 810c970:	68fb      	ldr	r3, [r7, #12]
 810c972:	4413      	add	r3, r2
 810c974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c978:	681b      	ldr	r3, [r3, #0]
 810c97a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810c97e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810c982:	d118      	bne.n	810c9b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810c984:	693b      	ldr	r3, [r7, #16]
 810c986:	2b00      	cmp	r3, #0
 810c988:	d10a      	bne.n	810c9a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810c98a:	693b      	ldr	r3, [r7, #16]
 810c98c:	015a      	lsls	r2, r3, #5
 810c98e:	68fb      	ldr	r3, [r7, #12]
 810c990:	4413      	add	r3, r2
 810c992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c996:	461a      	mov	r2, r3
 810c998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810c99c:	6013      	str	r3, [r2, #0]
 810c99e:	e013      	b.n	810c9c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810c9a0:	693b      	ldr	r3, [r7, #16]
 810c9a2:	015a      	lsls	r2, r3, #5
 810c9a4:	68fb      	ldr	r3, [r7, #12]
 810c9a6:	4413      	add	r3, r2
 810c9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9ac:	461a      	mov	r2, r3
 810c9ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810c9b2:	6013      	str	r3, [r2, #0]
 810c9b4:	e008      	b.n	810c9c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810c9b6:	693b      	ldr	r3, [r7, #16]
 810c9b8:	015a      	lsls	r2, r3, #5
 810c9ba:	68fb      	ldr	r3, [r7, #12]
 810c9bc:	4413      	add	r3, r2
 810c9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9c2:	461a      	mov	r2, r3
 810c9c4:	2300      	movs	r3, #0
 810c9c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810c9c8:	693b      	ldr	r3, [r7, #16]
 810c9ca:	015a      	lsls	r2, r3, #5
 810c9cc:	68fb      	ldr	r3, [r7, #12]
 810c9ce:	4413      	add	r3, r2
 810c9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9d4:	461a      	mov	r2, r3
 810c9d6:	2300      	movs	r3, #0
 810c9d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810c9da:	693b      	ldr	r3, [r7, #16]
 810c9dc:	015a      	lsls	r2, r3, #5
 810c9de:	68fb      	ldr	r3, [r7, #12]
 810c9e0:	4413      	add	r3, r2
 810c9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9e6:	461a      	mov	r2, r3
 810c9e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810c9ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c9ee:	693b      	ldr	r3, [r7, #16]
 810c9f0:	3301      	adds	r3, #1
 810c9f2:	613b      	str	r3, [r7, #16]
 810c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9f6:	693a      	ldr	r2, [r7, #16]
 810c9f8:	429a      	cmp	r2, r3
 810c9fa:	d3b7      	bcc.n	810c96c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810c9fc:	68fb      	ldr	r3, [r7, #12]
 810c9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810ca02:	691b      	ldr	r3, [r3, #16]
 810ca04:	68fa      	ldr	r2, [r7, #12]
 810ca06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810ca0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810ca0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810ca10:	687b      	ldr	r3, [r7, #4]
 810ca12:	2200      	movs	r2, #0
 810ca14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810ca16:	687b      	ldr	r3, [r7, #4]
 810ca18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 810ca1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ca20:	2b00      	cmp	r3, #0
 810ca22:	d105      	bne.n	810ca30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ca24:	687b      	ldr	r3, [r7, #4]
 810ca26:	699b      	ldr	r3, [r3, #24]
 810ca28:	f043 0210 	orr.w	r2, r3, #16
 810ca2c:	687b      	ldr	r3, [r7, #4]
 810ca2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810ca30:	687b      	ldr	r3, [r7, #4]
 810ca32:	699a      	ldr	r2, [r3, #24]
 810ca34:	4b0f      	ldr	r3, [pc, #60]	; (810ca74 <USB_DevInit+0x2b8>)
 810ca36:	4313      	orrs	r3, r2
 810ca38:	687a      	ldr	r2, [r7, #4]
 810ca3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810ca3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ca3e:	2b00      	cmp	r3, #0
 810ca40:	d005      	beq.n	810ca4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810ca42:	687b      	ldr	r3, [r7, #4]
 810ca44:	699b      	ldr	r3, [r3, #24]
 810ca46:	f043 0208 	orr.w	r2, r3, #8
 810ca4a:	687b      	ldr	r3, [r7, #4]
 810ca4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810ca4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810ca50:	2b01      	cmp	r3, #1
 810ca52:	d107      	bne.n	810ca64 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810ca54:	687b      	ldr	r3, [r7, #4]
 810ca56:	699b      	ldr	r3, [r3, #24]
 810ca58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810ca5c:	f043 0304 	orr.w	r3, r3, #4
 810ca60:	687a      	ldr	r2, [r7, #4]
 810ca62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810ca64:	7dfb      	ldrb	r3, [r7, #23]
}
 810ca66:	4618      	mov	r0, r3
 810ca68:	3718      	adds	r7, #24
 810ca6a:	46bd      	mov	sp, r7
 810ca6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810ca70:	b004      	add	sp, #16
 810ca72:	4770      	bx	lr
 810ca74:	803c3800 	.word	0x803c3800

0810ca78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810ca78:	b480      	push	{r7}
 810ca7a:	b085      	sub	sp, #20
 810ca7c:	af00      	add	r7, sp, #0
 810ca7e:	6078      	str	r0, [r7, #4]
 810ca80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810ca82:	2300      	movs	r3, #0
 810ca84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 810ca86:	68fb      	ldr	r3, [r7, #12]
 810ca88:	3301      	adds	r3, #1
 810ca8a:	60fb      	str	r3, [r7, #12]
 810ca8c:	4a12      	ldr	r2, [pc, #72]	; (810cad8 <USB_FlushTxFifo+0x60>)
 810ca8e:	4293      	cmp	r3, r2
 810ca90:	d901      	bls.n	810ca96 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810ca92:	2303      	movs	r3, #3
 810ca94:	e01a      	b.n	810cacc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810ca96:	687b      	ldr	r3, [r7, #4]
 810ca98:	691b      	ldr	r3, [r3, #16]
 810ca9a:	2b00      	cmp	r3, #0
 810ca9c:	daf3      	bge.n	810ca86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810ca9e:	2300      	movs	r3, #0
 810caa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810caa2:	683b      	ldr	r3, [r7, #0]
 810caa4:	019b      	lsls	r3, r3, #6
 810caa6:	f043 0220 	orr.w	r2, r3, #32
 810caaa:	687b      	ldr	r3, [r7, #4]
 810caac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810caae:	68fb      	ldr	r3, [r7, #12]
 810cab0:	3301      	adds	r3, #1
 810cab2:	60fb      	str	r3, [r7, #12]
 810cab4:	4a08      	ldr	r2, [pc, #32]	; (810cad8 <USB_FlushTxFifo+0x60>)
 810cab6:	4293      	cmp	r3, r2
 810cab8:	d901      	bls.n	810cabe <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 810caba:	2303      	movs	r3, #3
 810cabc:	e006      	b.n	810cacc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810cabe:	687b      	ldr	r3, [r7, #4]
 810cac0:	691b      	ldr	r3, [r3, #16]
 810cac2:	f003 0320 	and.w	r3, r3, #32
 810cac6:	2b20      	cmp	r3, #32
 810cac8:	d0f1      	beq.n	810caae <USB_FlushTxFifo+0x36>

  return HAL_OK;
 810caca:	2300      	movs	r3, #0
}
 810cacc:	4618      	mov	r0, r3
 810cace:	3714      	adds	r7, #20
 810cad0:	46bd      	mov	sp, r7
 810cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cad6:	4770      	bx	lr
 810cad8:	00030d40 	.word	0x00030d40

0810cadc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810cadc:	b480      	push	{r7}
 810cade:	b085      	sub	sp, #20
 810cae0:	af00      	add	r7, sp, #0
 810cae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810cae4:	2300      	movs	r3, #0
 810cae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 810cae8:	68fb      	ldr	r3, [r7, #12]
 810caea:	3301      	adds	r3, #1
 810caec:	60fb      	str	r3, [r7, #12]
 810caee:	4a11      	ldr	r2, [pc, #68]	; (810cb34 <USB_FlushRxFifo+0x58>)
 810caf0:	4293      	cmp	r3, r2
 810caf2:	d901      	bls.n	810caf8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 810caf4:	2303      	movs	r3, #3
 810caf6:	e017      	b.n	810cb28 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810caf8:	687b      	ldr	r3, [r7, #4]
 810cafa:	691b      	ldr	r3, [r3, #16]
 810cafc:	2b00      	cmp	r3, #0
 810cafe:	daf3      	bge.n	810cae8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810cb00:	2300      	movs	r3, #0
 810cb02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810cb04:	687b      	ldr	r3, [r7, #4]
 810cb06:	2210      	movs	r2, #16
 810cb08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810cb0a:	68fb      	ldr	r3, [r7, #12]
 810cb0c:	3301      	adds	r3, #1
 810cb0e:	60fb      	str	r3, [r7, #12]
 810cb10:	4a08      	ldr	r2, [pc, #32]	; (810cb34 <USB_FlushRxFifo+0x58>)
 810cb12:	4293      	cmp	r3, r2
 810cb14:	d901      	bls.n	810cb1a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 810cb16:	2303      	movs	r3, #3
 810cb18:	e006      	b.n	810cb28 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810cb1a:	687b      	ldr	r3, [r7, #4]
 810cb1c:	691b      	ldr	r3, [r3, #16]
 810cb1e:	f003 0310 	and.w	r3, r3, #16
 810cb22:	2b10      	cmp	r3, #16
 810cb24:	d0f1      	beq.n	810cb0a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 810cb26:	2300      	movs	r3, #0
}
 810cb28:	4618      	mov	r0, r3
 810cb2a:	3714      	adds	r7, #20
 810cb2c:	46bd      	mov	sp, r7
 810cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb32:	4770      	bx	lr
 810cb34:	00030d40 	.word	0x00030d40

0810cb38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810cb38:	b480      	push	{r7}
 810cb3a:	b085      	sub	sp, #20
 810cb3c:	af00      	add	r7, sp, #0
 810cb3e:	6078      	str	r0, [r7, #4]
 810cb40:	460b      	mov	r3, r1
 810cb42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cb44:	687b      	ldr	r3, [r7, #4]
 810cb46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810cb48:	68fb      	ldr	r3, [r7, #12]
 810cb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810cb4e:	681a      	ldr	r2, [r3, #0]
 810cb50:	78fb      	ldrb	r3, [r7, #3]
 810cb52:	68f9      	ldr	r1, [r7, #12]
 810cb54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810cb58:	4313      	orrs	r3, r2
 810cb5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810cb5c:	2300      	movs	r3, #0
}
 810cb5e:	4618      	mov	r0, r3
 810cb60:	3714      	adds	r7, #20
 810cb62:	46bd      	mov	sp, r7
 810cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb68:	4770      	bx	lr

0810cb6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810cb6a:	b480      	push	{r7}
 810cb6c:	b085      	sub	sp, #20
 810cb6e:	af00      	add	r7, sp, #0
 810cb70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cb72:	687b      	ldr	r3, [r7, #4]
 810cb74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810cb76:	68fb      	ldr	r3, [r7, #12]
 810cb78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810cb7c:	681b      	ldr	r3, [r3, #0]
 810cb7e:	68fa      	ldr	r2, [r7, #12]
 810cb80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810cb84:	f023 0303 	bic.w	r3, r3, #3
 810cb88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810cb8a:	68fb      	ldr	r3, [r7, #12]
 810cb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810cb90:	685b      	ldr	r3, [r3, #4]
 810cb92:	68fa      	ldr	r2, [r7, #12]
 810cb94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810cb98:	f043 0302 	orr.w	r3, r3, #2
 810cb9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810cb9e:	2300      	movs	r3, #0
}
 810cba0:	4618      	mov	r0, r3
 810cba2:	3714      	adds	r7, #20
 810cba4:	46bd      	mov	sp, r7
 810cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbaa:	4770      	bx	lr

0810cbac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 810cbac:	b480      	push	{r7}
 810cbae:	b083      	sub	sp, #12
 810cbb0:	af00      	add	r7, sp, #0
 810cbb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810cbb4:	687b      	ldr	r3, [r7, #4]
 810cbb6:	695b      	ldr	r3, [r3, #20]
 810cbb8:	f003 0301 	and.w	r3, r3, #1
}
 810cbbc:	4618      	mov	r0, r3
 810cbbe:	370c      	adds	r7, #12
 810cbc0:	46bd      	mov	sp, r7
 810cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbc6:	4770      	bx	lr

0810cbc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810cbc8:	b480      	push	{r7}
 810cbca:	b085      	sub	sp, #20
 810cbcc:	af00      	add	r7, sp, #0
 810cbce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810cbd0:	2300      	movs	r3, #0
 810cbd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 810cbd4:	68fb      	ldr	r3, [r7, #12]
 810cbd6:	3301      	adds	r3, #1
 810cbd8:	60fb      	str	r3, [r7, #12]
 810cbda:	4a13      	ldr	r2, [pc, #76]	; (810cc28 <USB_CoreReset+0x60>)
 810cbdc:	4293      	cmp	r3, r2
 810cbde:	d901      	bls.n	810cbe4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 810cbe0:	2303      	movs	r3, #3
 810cbe2:	e01a      	b.n	810cc1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810cbe4:	687b      	ldr	r3, [r7, #4]
 810cbe6:	691b      	ldr	r3, [r3, #16]
 810cbe8:	2b00      	cmp	r3, #0
 810cbea:	daf3      	bge.n	810cbd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810cbec:	2300      	movs	r3, #0
 810cbee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810cbf0:	687b      	ldr	r3, [r7, #4]
 810cbf2:	691b      	ldr	r3, [r3, #16]
 810cbf4:	f043 0201 	orr.w	r2, r3, #1
 810cbf8:	687b      	ldr	r3, [r7, #4]
 810cbfa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810cbfc:	68fb      	ldr	r3, [r7, #12]
 810cbfe:	3301      	adds	r3, #1
 810cc00:	60fb      	str	r3, [r7, #12]
 810cc02:	4a09      	ldr	r2, [pc, #36]	; (810cc28 <USB_CoreReset+0x60>)
 810cc04:	4293      	cmp	r3, r2
 810cc06:	d901      	bls.n	810cc0c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 810cc08:	2303      	movs	r3, #3
 810cc0a:	e006      	b.n	810cc1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810cc0c:	687b      	ldr	r3, [r7, #4]
 810cc0e:	691b      	ldr	r3, [r3, #16]
 810cc10:	f003 0301 	and.w	r3, r3, #1
 810cc14:	2b01      	cmp	r3, #1
 810cc16:	d0f1      	beq.n	810cbfc <USB_CoreReset+0x34>

  return HAL_OK;
 810cc18:	2300      	movs	r3, #0
}
 810cc1a:	4618      	mov	r0, r3
 810cc1c:	3714      	adds	r7, #20
 810cc1e:	46bd      	mov	sp, r7
 810cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc24:	4770      	bx	lr
 810cc26:	bf00      	nop
 810cc28:	00030d40 	.word	0x00030d40

0810cc2c <__libc_init_array>:
 810cc2c:	b570      	push	{r4, r5, r6, lr}
 810cc2e:	4d0d      	ldr	r5, [pc, #52]	; (810cc64 <__libc_init_array+0x38>)
 810cc30:	4c0d      	ldr	r4, [pc, #52]	; (810cc68 <__libc_init_array+0x3c>)
 810cc32:	1b64      	subs	r4, r4, r5
 810cc34:	10a4      	asrs	r4, r4, #2
 810cc36:	2600      	movs	r6, #0
 810cc38:	42a6      	cmp	r6, r4
 810cc3a:	d109      	bne.n	810cc50 <__libc_init_array+0x24>
 810cc3c:	4d0b      	ldr	r5, [pc, #44]	; (810cc6c <__libc_init_array+0x40>)
 810cc3e:	4c0c      	ldr	r4, [pc, #48]	; (810cc70 <__libc_init_array+0x44>)
 810cc40:	f000 f820 	bl	810cc84 <_init>
 810cc44:	1b64      	subs	r4, r4, r5
 810cc46:	10a4      	asrs	r4, r4, #2
 810cc48:	2600      	movs	r6, #0
 810cc4a:	42a6      	cmp	r6, r4
 810cc4c:	d105      	bne.n	810cc5a <__libc_init_array+0x2e>
 810cc4e:	bd70      	pop	{r4, r5, r6, pc}
 810cc50:	f855 3b04 	ldr.w	r3, [r5], #4
 810cc54:	4798      	blx	r3
 810cc56:	3601      	adds	r6, #1
 810cc58:	e7ee      	b.n	810cc38 <__libc_init_array+0xc>
 810cc5a:	f855 3b04 	ldr.w	r3, [r5], #4
 810cc5e:	4798      	blx	r3
 810cc60:	3601      	adds	r6, #1
 810cc62:	e7f2      	b.n	810cc4a <__libc_init_array+0x1e>
 810cc64:	0810ccdc 	.word	0x0810ccdc
 810cc68:	0810ccdc 	.word	0x0810ccdc
 810cc6c:	0810ccdc 	.word	0x0810ccdc
 810cc70:	0810cce0 	.word	0x0810cce0

0810cc74 <memset>:
 810cc74:	4402      	add	r2, r0
 810cc76:	4603      	mov	r3, r0
 810cc78:	4293      	cmp	r3, r2
 810cc7a:	d100      	bne.n	810cc7e <memset+0xa>
 810cc7c:	4770      	bx	lr
 810cc7e:	f803 1b01 	strb.w	r1, [r3], #1
 810cc82:	e7f9      	b.n	810cc78 <memset+0x4>

0810cc84 <_init>:
 810cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cc86:	bf00      	nop
 810cc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cc8a:	bc08      	pop	{r3}
 810cc8c:	469e      	mov	lr, r3
 810cc8e:	4770      	bx	lr

0810cc90 <_fini>:
 810cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cc92:	bf00      	nop
 810cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cc96:	bc08      	pop	{r3}
 810cc98:	469e      	mov	lr, r3
 810cc9a:	4770      	bx	lr
