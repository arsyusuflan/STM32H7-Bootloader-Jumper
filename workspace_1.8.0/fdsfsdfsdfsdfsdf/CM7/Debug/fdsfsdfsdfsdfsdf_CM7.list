
fdsfsdfsdfsdfsdf_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d0  080030d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080030d0  080030d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d0  080030d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080030d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  080030e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  080030e8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ff  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc1  00000000  00000000  0003053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00032500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d21a  00000000  00000000  00033428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f5  00000000  00000000  00070642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018cee8  00000000  00000000  00079d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00206c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e9c  00000000  00000000  00206c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080030a8 	.word	0x080030a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080030a8 	.word	0x080030a8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <main+0x94>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f943 	bl	80006c0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 f9b5 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f831 	bl	80004a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000442:	f000 f8bf 	bl	80005c4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000446:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <main+0x94>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <main+0x94>)
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <main+0x94>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fcd1 	bl	8000e0c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800046a:	2100      	movs	r1, #0
 800046c:	2000      	movs	r0, #0
 800046e:	f000 fce7 	bl	8000e40 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000476:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000478:	bf00      	nop
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <main+0x94>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d104      	bne.n	8000490 <main+0x84>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	1e5a      	subs	r2, r3, #1
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	2b00      	cmp	r3, #0
 800048e:	dcf4      	bgt.n	800047a <main+0x6e>
if ( timeout < 0 )
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	da01      	bge.n	800049a <main+0x8e>
{
Error_Handler();
 8000496:	f000 f913 	bl	80006c0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 f8bf 	bl	800061c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049e:	e7fe      	b.n	800049e <main+0x92>
 80004a0:	58024400 	.word	0x58024400

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09c      	sub	sp, #112	; 0x70
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	224c      	movs	r2, #76	; 0x4c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fdf0 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2220      	movs	r2, #32
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 fdea 	bl	8003098 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004c4:	2004      	movs	r0, #4
 80004c6:	f000 fccf 	bl	8000e68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <SystemClock_Config+0x114>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d2:	4a39      	ldr	r2, [pc, #228]	; (80005b8 <SystemClock_Config+0x114>)
 80004d4:	f023 0301 	bic.w	r3, r3, #1
 80004d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <SystemClock_Config+0x114>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4b35      	ldr	r3, [pc, #212]	; (80005bc <SystemClock_Config+0x118>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a34      	ldr	r2, [pc, #208]	; (80005bc <SystemClock_Config+0x118>)
 80004ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b32      	ldr	r3, [pc, #200]	; (80005bc <SystemClock_Config+0x118>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004fc:	bf00      	nop
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <SystemClock_Config+0x118>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800050a:	d1f8      	bne.n	80004fe <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <SystemClock_Config+0x11c>)
 800050e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000510:	f023 0303 	bic.w	r3, r3, #3
 8000514:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <SystemClock_Config+0x11c>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800051c:	230b      	movs	r3, #11
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000526:	2301      	movs	r3, #1
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2340      	movs	r3, #64	; 0x40
 800052c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000536:	2302      	movs	r3, #2
 8000538:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800053a:	2305      	movs	r3, #5
 800053c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800053e:	2330      	movs	r3, #48	; 0x30
 8000540:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000542:	2302      	movs	r3, #2
 8000544:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000546:	2305      	movs	r3, #5
 8000548:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800054e:	2308      	movs	r3, #8
 8000550:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000552:	2300      	movs	r3, #0
 8000554:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fcdc 	bl	8000f1c <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800056a:	f000 f8a9 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	233f      	movs	r3, #63	; 0x3f
 8000570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000586:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f8ed 	bl	8001774 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80005a0:	f000 f88e 	bl	80006c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 fa98 	bl	8001ae0 <HAL_RCC_MCOConfig>
}
 80005b0:	bf00      	nop
 80005b2:	3770      	adds	r7, #112	; 0x70
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400
 80005bc:	58024800 	.word	0x58024800
 80005c0:	58024400 	.word	0x58024400

080005c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0b0      	sub	sp, #192	; 0xc0
 80005c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	22c0      	movs	r2, #192	; 0xc0
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fd61 	bl	8003098 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80005e0:	230c      	movs	r3, #12
 80005e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80005f0:	23c0      	movs	r3, #192	; 0xc0
 80005f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80005f4:	2320      	movs	r3, #32
 80005f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fc4f 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000610:	f000 f856 	bl	80006c0 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	37c0      	adds	r7, #192	; 0xc0
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <MX_GPIO_Init+0x9c>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0xa0>)
 80006aa:	f000 f9ff 	bl	8000aac <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	58024400 	.word	0x58024400
 80006bc:	58020000 	.word	0x58020000

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_MspInit+0x30>)
 80006d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_MspInit+0x30>)
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_MspInit+0x30>)
 80006e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	58024400 	.word	0x58024400

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f89e 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000758:	f7ff fdbe 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 fc65 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000786:	f7ff fe41 	bl	800040c <main>
  bx  lr
 800078a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800078c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000794:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000798:	080030d8 	.word	0x080030d8
  ldr r2, =_sbss
 800079c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007a0:	24000030 	.word	0x24000030

080007a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC3_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 f94a 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007b4:	f001 f9fe 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80007b8:	4602      	mov	r2, r0
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_Init+0x68>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	4913      	ldr	r1, [pc, #76]	; (8000814 <HAL_Init+0x6c>)
 80007c6:	5ccb      	ldrb	r3, [r1, r3]
 80007c8:	f003 031f 	and.w	r3, r3, #31
 80007cc:	fa22 f303 	lsr.w	r3, r2, r3
 80007d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_Init+0x68>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_Init+0x6c>)
 80007dc:	5cd3      	ldrb	r3, [r2, r3]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	fa22 f303 	lsr.w	r3, r2, r3
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <HAL_Init+0x70>)
 80007ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <HAL_Init+0x74>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f814 	bl	8000820 <HAL_InitTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e002      	b.n	8000808 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000802:	f7ff ff63 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58024400 	.word	0x58024400
 8000814:	080030c0 	.word	0x080030c0
 8000818:	24000004 	.word	0x24000004
 800081c:	24000000 	.word	0x24000000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e021      	b.n	8000878 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_InitTick+0x64>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_InitTick+0x60>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f921 	bl	8000a92 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8f9 	bl	8000a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x68>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400000c 	.word	0x2400000c
 8000884:	24000000 	.word	0x24000000
 8000888:	24000008 	.word	0x24000008

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2400000c 	.word	0x2400000c
 80008b0:	2400002c 	.word	0x2400002c

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2400002c 	.word	0x2400002c

080008cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetREVID+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	0c1b      	lsrs	r3, r3, #16
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	5c001000 	.word	0x5c001000

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <__NVIC_SetPriorityGrouping+0x40>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	4313      	orrs	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <__NVIC_SetPriorityGrouping+0x40>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	05fa0000 	.word	0x05fa0000

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff47 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff5e 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff90 	bl	800099c <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5f 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffb2 	bl	8000a04 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000aba:	4b89      	ldr	r3, [pc, #548]	; (8000ce0 <HAL_GPIO_Init+0x234>)
 8000abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000abe:	e194      	b.n	8000dea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 8186 	beq.w	8000de4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d005      	beq.n	8000af0 <HAL_GPIO_Init+0x44>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4013      	ands	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	f003 0201 	and.w	r2, r3, #1
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d017      	beq.n	8000b8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d123      	bne.n	8000be2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	08da      	lsrs	r2, r3, #3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	69b9      	ldr	r1, [r7, #24]
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0203 	and.w	r2, r3, #3
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80e0 	beq.w	8000de4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <HAL_GPIO_Init+0x238>)
 8000c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ce4 <HAL_GPIO_Init+0x238>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <HAL_GPIO_Init+0x238>)
 8000c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c42:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <HAL_GPIO_Init+0x23c>)
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <HAL_GPIO_Init+0x240>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d052      	beq.n	8000d14 <HAL_GPIO_Init+0x268>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_GPIO_Init+0x244>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d031      	beq.n	8000cda <HAL_GPIO_Init+0x22e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_GPIO_Init+0x248>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d02b      	beq.n	8000cd6 <HAL_GPIO_Init+0x22a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_GPIO_Init+0x24c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d025      	beq.n	8000cd2 <HAL_GPIO_Init+0x226>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <HAL_GPIO_Init+0x250>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01f      	beq.n	8000cce <HAL_GPIO_Init+0x222>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_GPIO_Init+0x254>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d019      	beq.n	8000cca <HAL_GPIO_Init+0x21e>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_GPIO_Init+0x258>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0x21a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_GPIO_Init+0x25c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00d      	beq.n	8000cc2 <HAL_GPIO_Init+0x216>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <HAL_GPIO_Init+0x260>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d007      	beq.n	8000cbe <HAL_GPIO_Init+0x212>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_GPIO_Init+0x264>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_GPIO_Init+0x20e>
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	e02d      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cba:	230a      	movs	r3, #10
 8000cbc:	e02b      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	e029      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	e027      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	e025      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cca:	2305      	movs	r3, #5
 8000ccc:	e023      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e021      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e01f      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e01d      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e01b      	b.n	8000d16 <HAL_GPIO_Init+0x26a>
 8000cde:	bf00      	nop
 8000ce0:	58000080 	.word	0x58000080
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	58000400 	.word	0x58000400
 8000cec:	58020000 	.word	0x58020000
 8000cf0:	58020400 	.word	0x58020400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	58021000 	.word	0x58021000
 8000d00:	58021400 	.word	0x58021400
 8000d04:	58021800 	.word	0x58021800
 8000d08:	58021c00 	.word	0x58021c00
 8000d0c:	58022000 	.word	0x58022000
 8000d10:	58022400 	.word	0x58022400
 8000d14:	2300      	movs	r3, #0
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	f002 0203 	and.w	r2, r2, #3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4093      	lsls	r3, r2
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d26:	4938      	ldr	r1, [pc, #224]	; (8000e08 <HAL_GPIO_Init+0x35c>)
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	3301      	adds	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f47f ae63 	bne.w	8000ac0 <HAL_GPIO_Init+0x14>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3724      	adds	r7, #36	; 0x24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	58000400 	.word	0x58000400

08000e0c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_HSEM_FastTake+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3320      	adds	r3, #32
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_HSEM_FastTake+0x30>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	e000      	b.n	8000e2a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	58026400 	.word	0x58026400
 8000e3c:	80000300 	.word	0x80000300

08000e40 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000e4a:	4906      	ldr	r1, [pc, #24]	; (8000e64 <HAL_HSEM_Release+0x24>)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	58026400 	.word	0x58026400

08000e68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <HAL_PWREx_ConfigSupply+0xb0>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d00a      	beq.n	8000e92 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_PWREx_ConfigSupply+0xb0>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d001      	beq.n	8000e8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e040      	b.n	8000f10 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e03e      	b.n	8000f10 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <HAL_PWREx_ConfigSupply+0xb0>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000e9a:	491f      	ldr	r1, [pc, #124]	; (8000f18 <HAL_PWREx_ConfigSupply+0xb0>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ea2:	f7ff fd07 	bl	80008b4 <HAL_GetTick>
 8000ea6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ea8:	e009      	b.n	8000ebe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000eaa:	f7ff fd03 	bl	80008b4 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb8:	d901      	bls.n	8000ebe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e028      	b.n	8000f10 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eca:	d1ee      	bne.n	8000eaa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b1e      	cmp	r3, #30
 8000ed0:	d008      	beq.n	8000ee4 <HAL_PWREx_ConfigSupply+0x7c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ed6:	d005      	beq.n	8000ee4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b1d      	cmp	r3, #29
 8000edc:	d002      	beq.n	8000ee4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b2d      	cmp	r3, #45	; 0x2d
 8000ee2:	d114      	bne.n	8000f0e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000ee4:	f7ff fce6 	bl	80008b4 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000eea:	e009      	b.n	8000f00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000eec:	f7ff fce2 	bl	80008b4 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000efa:	d901      	bls.n	8000f00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e007      	b.n	8000f10 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d1ee      	bne.n	8000eec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58024800 	.word	0x58024800

08000f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f000 bc1c 	b.w	8001768 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 8087 	beq.w	800104c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f3e:	4b9e      	ldr	r3, [pc, #632]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f48:	4b9b      	ldr	r3, [pc, #620]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d007      	beq.n	8000f64 <HAL_RCC_OscConfig+0x48>
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	2b18      	cmp	r3, #24
 8000f58:	d110      	bne.n	8000f7c <HAL_RCC_OscConfig+0x60>
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d10b      	bne.n	8000f7c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f64:	4b94      	ldr	r3, [pc, #592]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d06c      	beq.n	800104a <HAL_RCC_OscConfig+0x12e>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d168      	bne.n	800104a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e3f5      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d106      	bne.n	8000f94 <HAL_RCC_OscConfig+0x78>
 8000f86:	4b8c      	ldr	r3, [pc, #560]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a8b      	ldr	r2, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e02e      	b.n	8000ff2 <HAL_RCC_OscConfig+0xd6>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x9a>
 8000f9c:	4b86      	ldr	r3, [pc, #536]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a85      	ldr	r2, [pc, #532]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b83      	ldr	r3, [pc, #524]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a82      	ldr	r2, [pc, #520]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e01d      	b.n	8000ff2 <HAL_RCC_OscConfig+0xd6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0xbe>
 8000fc0:	4b7d      	ldr	r3, [pc, #500]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a7c      	ldr	r2, [pc, #496]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b7a      	ldr	r3, [pc, #488]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a79      	ldr	r2, [pc, #484]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e00b      	b.n	8000ff2 <HAL_RCC_OscConfig+0xd6>
 8000fda:	4b77      	ldr	r3, [pc, #476]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a76      	ldr	r2, [pc, #472]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b74      	ldr	r3, [pc, #464]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a73      	ldr	r2, [pc, #460]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8000fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d013      	beq.n	8001022 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fc5b 	bl	80008b4 <HAL_GetTick>
 8000ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001002:	f7ff fc57 	bl	80008b4 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b64      	cmp	r3, #100	; 0x64
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e3a9      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0xe6>
 8001020:	e014      	b.n	800104c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001022:	f7ff fc47 	bl	80008b4 <HAL_GetTick>
 8001026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102a:	f7ff fc43 	bl	80008b4 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e395      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800103c:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x10e>
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80ca 	beq.w	80011ee <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001062:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001064:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001068:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <HAL_RCC_OscConfig+0x164>
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	2b18      	cmp	r3, #24
 8001074:	d156      	bne.n	8001124 <HAL_RCC_OscConfig+0x208>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d151      	bne.n	8001124 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001080:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_OscConfig+0x17c>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e367      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 0219 	bic.w	r2, r3, #25
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4944      	ldr	r1, [pc, #272]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010aa:	f7ff fc03 	bl	80008b4 <HAL_GetTick>
 80010ae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fbff 	bl	80008b4 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e351      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d0:	f7ff fbfc 	bl	80008cc <HAL_GetREVID>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80010da:	4293      	cmp	r3, r2
 80010dc:	d817      	bhi.n	800110e <HAL_RCC_OscConfig+0x1f2>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b40      	cmp	r3, #64	; 0x40
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1dc>
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80010ee:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010f6:	e07a      	b.n	80011ee <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	031b      	lsls	r3, r3, #12
 8001106:	492c      	ldr	r1, [pc, #176]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800110c:	e06f      	b.n	80011ee <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	061b      	lsls	r3, r3, #24
 800111c:	4926      	ldr	r1, [pc, #152]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001122:	e064      	b.n	80011ee <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d047      	beq.n	80011bc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 0219 	bic.w	r2, r3, #25
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	491f      	ldr	r1, [pc, #124]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fbb9 	bl	80008b4 <HAL_GetTick>
 8001142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fbb5 	bl	80008b4 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e307      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	f7ff fbb2 	bl	80008cc <HAL_GetREVID>
 8001168:	4603      	mov	r3, r0
 800116a:	f241 0203 	movw	r2, #4099	; 0x1003
 800116e:	4293      	cmp	r3, r2
 8001170:	d817      	bhi.n	80011a2 <HAL_RCC_OscConfig+0x286>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b40      	cmp	r3, #64	; 0x40
 8001178:	d108      	bne.n	800118c <HAL_RCC_OscConfig+0x270>
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6053      	str	r3, [r2, #4]
 800118a:	e030      	b.n	80011ee <HAL_RCC_OscConfig+0x2d2>
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	031b      	lsls	r3, r3, #12
 800119a:	4907      	ldr	r1, [pc, #28]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
 80011a0:	e025      	b.n	80011ee <HAL_RCC_OscConfig+0x2d2>
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	061b      	lsls	r3, r3, #24
 80011b0:	4901      	ldr	r1, [pc, #4]	; (80011b8 <HAL_RCC_OscConfig+0x29c>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
 80011b6:	e01a      	b.n	80011ee <HAL_RCC_OscConfig+0x2d2>
 80011b8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011bc:	4b9e      	ldr	r3, [pc, #632]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a9d      	ldr	r2, [pc, #628]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb74 	bl	80008b4 <HAL_GetTick>
 80011cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fb70 	bl	80008b4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e2c2      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011e2:	4b95      	ldr	r3, [pc, #596]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a9 	beq.w	800134e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fc:	4b8e      	ldr	r3, [pc, #568]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001204:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001206:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d007      	beq.n	8001222 <HAL_RCC_OscConfig+0x306>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b18      	cmp	r3, #24
 8001216:	d13a      	bne.n	800128e <HAL_RCC_OscConfig+0x372>
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d135      	bne.n	800128e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001222:	4b85      	ldr	r3, [pc, #532]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x31e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b80      	cmp	r3, #128	; 0x80
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e296      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800123a:	f7ff fb47 	bl	80008cc <HAL_GetREVID>
 800123e:	4603      	mov	r3, r0
 8001240:	f241 0203 	movw	r2, #4099	; 0x1003
 8001244:	4293      	cmp	r3, r2
 8001246:	d817      	bhi.n	8001278 <HAL_RCC_OscConfig+0x35c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	2b20      	cmp	r3, #32
 800124e:	d108      	bne.n	8001262 <HAL_RCC_OscConfig+0x346>
 8001250:	4b79      	ldr	r3, [pc, #484]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001258:	4a77      	ldr	r2, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 800125a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800125e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001260:	e075      	b.n	800134e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001262:	4b75      	ldr	r3, [pc, #468]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	069b      	lsls	r3, r3, #26
 8001270:	4971      	ldr	r1, [pc, #452]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001276:	e06a      	b.n	800134e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	061b      	lsls	r3, r3, #24
 8001286:	496c      	ldr	r1, [pc, #432]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001288:	4313      	orrs	r3, r2
 800128a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800128c:	e05f      	b.n	800134e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d042      	beq.n	800131c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001296:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a67      	ldr	r2, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb07 	bl	80008b4 <HAL_GetTick>
 80012a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80012aa:	f7ff fb03 	bl	80008b4 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e255      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012c8:	f7ff fb00 	bl	80008cc <HAL_GetREVID>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d817      	bhi.n	8001306 <HAL_RCC_OscConfig+0x3ea>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d108      	bne.n	80012f0 <HAL_RCC_OscConfig+0x3d4>
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80012e6:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80012e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012ec:	6053      	str	r3, [r2, #4]
 80012ee:	e02e      	b.n	800134e <HAL_RCC_OscConfig+0x432>
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	069b      	lsls	r3, r3, #26
 80012fe:	494e      	ldr	r1, [pc, #312]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
 8001304:	e023      	b.n	800134e <HAL_RCC_OscConfig+0x432>
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	061b      	lsls	r3, r3, #24
 8001314:	4948      	ldr	r1, [pc, #288]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001316:	4313      	orrs	r3, r2
 8001318:	60cb      	str	r3, [r1, #12]
 800131a:	e018      	b.n	800134e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fac4 	bl	80008b4 <HAL_GetTick>
 800132c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001330:	f7ff fac0 	bl	80008b4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e212      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d036      	beq.n	80013c8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d019      	beq.n	8001396 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff faa1 	bl	80008b4 <HAL_GetTick>
 8001372:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fa9d 	bl	80008b4 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e1ef      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 800138a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x45a>
 8001394:	e018      	b.n	80013c8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139a:	4a27      	ldr	r2, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff fa87 	bl	80008b4 <HAL_GetTick>
 80013a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff fa83 	bl	80008b4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1d5      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d039      	beq.n	8001448 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d019      	beq.n	8001410 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 80013e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fa64 	bl	80008b4 <HAL_GetTick>
 80013ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80013f0:	f7ff fa60 	bl	80008b4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1b2      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x4d4>
 800140e:	e01b      	b.n	8001448 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_RCC_OscConfig+0x51c>)
 8001416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800141a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800141c:	f7ff fa4a 	bl	80008b4 <HAL_GetTick>
 8001420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001424:	f7ff fa46 	bl	80008b4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d904      	bls.n	800143c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e198      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
 8001436:	bf00      	nop
 8001438:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800143c:	4ba3      	ldr	r3, [pc, #652]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ed      	bne.n	8001424 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8081 	beq.w	8001558 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001456:	4b9e      	ldr	r3, [pc, #632]	; (80016d0 <HAL_RCC_OscConfig+0x7b4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a9d      	ldr	r2, [pc, #628]	; (80016d0 <HAL_RCC_OscConfig+0x7b4>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001462:	f7ff fa27 	bl	80008b4 <HAL_GetTick>
 8001466:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff fa23 	bl	80008b4 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b64      	cmp	r3, #100	; 0x64
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e175      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800147c:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <HAL_RCC_OscConfig+0x7b4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x582>
 8001490:	4b8e      	ldr	r3, [pc, #568]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a8d      	ldr	r2, [pc, #564]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e02d      	b.n	80014fa <HAL_RCC_OscConfig+0x5de>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5a4>
 80014a6:	4b89      	ldr	r3, [pc, #548]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a88      	ldr	r2, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4b86      	ldr	r3, [pc, #536]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a85      	ldr	r2, [pc, #532]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014b8:	f023 0304 	bic.w	r3, r3, #4
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e01c      	b.n	80014fa <HAL_RCC_OscConfig+0x5de>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x5c6>
 80014c8:	4b80      	ldr	r3, [pc, #512]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a7f      	ldr	r2, [pc, #508]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a7c      	ldr	r2, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0x5de>
 80014e2:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a79      	ldr	r2, [pc, #484]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	4b77      	ldr	r3, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a76      	ldr	r2, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d015      	beq.n	800152e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff f9d7 	bl	80008b4 <HAL_GetTick>
 8001506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff f9d3 	bl	80008b4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e123      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001520:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCC_OscConfig+0x5ee>
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff f9c1 	bl	80008b4 <HAL_GetTick>
 8001532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff f9bd 	bl	80008b4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e10d      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800154c:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8102 	beq.w	8001766 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800156a:	2b18      	cmp	r3, #24
 800156c:	f000 80bd 	beq.w	80016ea <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	2b02      	cmp	r3, #2
 8001576:	f040 8095 	bne.w	80016a4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a53      	ldr	r2, [pc, #332]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff f995 	bl	80008b4 <HAL_GetTick>
 800158a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff f991 	bl	80008b4 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0e3      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015a0:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80015ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b0:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_RCC_OscConfig+0x7b8>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	430a      	orrs	r2, r1
 80015c0:	4942      	ldr	r1, [pc, #264]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	628b      	str	r3, [r1, #40]	; 0x28
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	3b01      	subs	r3, #1
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	b29b      	uxth	r3, r3
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ee:	3b01      	subs	r3, #1
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80015f6:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80015fc:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800160a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_RCC_OscConfig+0x7bc>)
 800160e:	4013      	ands	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001614:	00d2      	lsls	r2, r2, #3
 8001616:	492d      	ldr	r1, [pc, #180]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001618:	4313      	orrs	r3, r2
 800161a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f023 020c 	bic.w	r2, r3, #12
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4928      	ldr	r1, [pc, #160]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800162a:	4313      	orrs	r3, r2
 800162c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f023 0202 	bic.w	r2, r3, #2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800163c:	4313      	orrs	r3, r2
 800163e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	4a18      	ldr	r2, [pc, #96]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a15      	ldr	r2, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff f91a 	bl	80008b4 <HAL_GetTick>
 8001680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f916 	bl	80008b4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e068      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x768>
 80016a2:	e060      	b.n	8001766 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x7b0>)
 80016aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f900 	bl	80008b4 <HAL_GetTick>
 80016b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016b6:	e011      	b.n	80016dc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f8fc 	bl	80008b4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d90a      	bls.n	80016dc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e04e      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
 80016ca:	bf00      	nop
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58024800 	.word	0x58024800
 80016d4:	fffffc0c 	.word	0xfffffc0c
 80016d8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x854>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e7      	bne.n	80016b8 <HAL_RCC_OscConfig+0x79c>
 80016e8:	e03d      	b.n	8001766 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x854>)
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_RCC_OscConfig+0x854>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d031      	beq.n	8001762 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d12a      	bne.n	8001762 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d122      	bne.n	8001762 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d11a      	bne.n	8001762 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	0a5b      	lsrs	r3, r3, #9
 8001730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d111      	bne.n	8001762 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d108      	bne.n	8001762 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	0e1b      	lsrs	r3, r3, #24
 8001754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3730      	adds	r7, #48	; 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024400 	.word	0x58024400

08001774 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e19c      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 020f 	bic.w	r2, r3, #15
 800179e:	4985      	ldr	r1, [pc, #532]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e184      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d908      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	4975      	ldr	r1, [pc, #468]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017fe:	429a      	cmp	r2, r3
 8001800:	d908      	bls.n	8001814 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	496a      	ldr	r1, [pc, #424]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001810:	4313      	orrs	r3, r2
 8001812:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d010      	beq.n	8001842 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800182c:	429a      	cmp	r2, r3
 800182e:	d908      	bls.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	495e      	ldr	r1, [pc, #376]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800183e:	4313      	orrs	r3, r2
 8001840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185a:	429a      	cmp	r2, r3
 800185c:	d908      	bls.n	8001870 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4953      	ldr	r1, [pc, #332]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800186c:	4313      	orrs	r3, r2
 800186e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	429a      	cmp	r2, r3
 800188a:	d908      	bls.n	800189e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f023 020f 	bic.w	r2, r3, #15
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4947      	ldr	r1, [pc, #284]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800189a:	4313      	orrs	r3, r2
 800189c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d055      	beq.n	8001956 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4940      	ldr	r1, [pc, #256]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d121      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0f6      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d115      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0ea      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0de      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d6      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f023 0207 	bic.w	r2, r3, #7
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4925      	ldr	r1, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001922:	4313      	orrs	r3, r2
 8001924:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7fe ffc5 	bl	80008b4 <HAL_GetTick>
 800192a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192c:	e00a      	b.n	8001944 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192e:	f7fe ffc1 	bl	80008b4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0be      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	429a      	cmp	r2, r3
 8001954:	d1eb      	bne.n	800192e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	429a      	cmp	r2, r3
 8001970:	d208      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f023 020f 	bic.w	r2, r3, #15
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001980:	4313      	orrs	r3, r2
 8001982:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d214      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 020f 	bic.w	r2, r3, #15
 800199a:	4906      	ldr	r1, [pc, #24]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e086      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
 80019b4:	52002000 	.word	0x52002000
 80019b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d208      	bcs.n	80019ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4939      	ldr	r1, [pc, #228]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d208      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	492e      	ldr	r1, [pc, #184]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d208      	bcs.n	8001a46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4922      	ldr	r1, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d208      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4917      	ldr	r1, [pc, #92]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a74:	f000 f89e 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	4912      	ldr	r1, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x35c>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_RCC_ClockConfig+0x35c>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x360>)
 8001aaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x364>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x368>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe feb2 	bl	8000820 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	080030c0 	.word	0x080030c0
 8001ad4:	24000004 	.word	0x24000004
 8001ad8:	24000000 	.word	0x24000000
 8001adc:	24000008 	.word	0x24000008

08001ae0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d12a      	bne.n	8001b48 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481f      	ldr	r0, [pc, #124]	; (8001bac <HAL_RCC_MCOConfig+0xcc>)
 8001b2e:	f7fe ffbd 	bl	8000aac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	4919      	ldr	r1, [pc, #100]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001b46:	e02a      	b.n	8001b9e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <HAL_RCC_MCOConfig+0xd0>)
 8001b84:	f7fe ff92 	bl	8000aac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	01d9      	lsls	r1, r3, #7
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_MCOConfig+0xc8>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	610b      	str	r3, [r1, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	3730      	adds	r7, #48	; 0x30
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58020000 	.word	0x58020000
 8001bb0:	58020800 	.word	0x58020800

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bba:	4bb3      	ldr	r3, [pc, #716]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc2:	2b18      	cmp	r3, #24
 8001bc4:	f200 8155 	bhi.w	8001e72 <HAL_RCC_GetSysClockFreq+0x2be>
 8001bc8:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001c35 	.word	0x08001c35
 8001bd4:	08001e73 	.word	0x08001e73
 8001bd8:	08001e73 	.word	0x08001e73
 8001bdc:	08001e73 	.word	0x08001e73
 8001be0:	08001e73 	.word	0x08001e73
 8001be4:	08001e73 	.word	0x08001e73
 8001be8:	08001e73 	.word	0x08001e73
 8001bec:	08001e73 	.word	0x08001e73
 8001bf0:	08001c5b 	.word	0x08001c5b
 8001bf4:	08001e73 	.word	0x08001e73
 8001bf8:	08001e73 	.word	0x08001e73
 8001bfc:	08001e73 	.word	0x08001e73
 8001c00:	08001e73 	.word	0x08001e73
 8001c04:	08001e73 	.word	0x08001e73
 8001c08:	08001e73 	.word	0x08001e73
 8001c0c:	08001e73 	.word	0x08001e73
 8001c10:	08001c61 	.word	0x08001c61
 8001c14:	08001e73 	.word	0x08001e73
 8001c18:	08001e73 	.word	0x08001e73
 8001c1c:	08001e73 	.word	0x08001e73
 8001c20:	08001e73 	.word	0x08001e73
 8001c24:	08001e73 	.word	0x08001e73
 8001c28:	08001e73 	.word	0x08001e73
 8001c2c:	08001e73 	.word	0x08001e73
 8001c30:	08001c67 	.word	0x08001c67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c34:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c40:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	4a90      	ldr	r2, [pc, #576]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c52:	e111      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c54:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c56:	61bb      	str	r3, [r7, #24]
    break;
 8001c58:	e10e      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c5a:	4b8d      	ldr	r3, [pc, #564]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c5c:	61bb      	str	r3, [r7, #24]
    break;
 8001c5e:	e10b      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c62:	61bb      	str	r3, [r7, #24]
    break;
 8001c64:	e108      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c70:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c7c:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001c86:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80e1 	beq.w	8001e6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	f000 8083 	beq.w	8001db8 <HAL_RCC_GetSysClockFreq+0x204>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f200 80a1 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x248>
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x114>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d056      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001cc6:	e099      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d02d      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	4a6b      	ldr	r2, [pc, #428]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d2e:	e087      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001e9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d72:	e065      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001db6:	e043      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ea4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dfa:	e021      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e64:	ee17 3a90 	vmov	r3, s15
 8001e68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e6a:	e005      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
    break;
 8001e70:	e002      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e74:	61bb      	str	r3, [r7, #24]
    break;
 8001e76:	bf00      	nop
  }

  return sysclockfreq;
 8001e78:	69bb      	ldr	r3, [r7, #24]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	03d09000 	.word	0x03d09000
 8001e90:	003d0900 	.word	0x003d0900
 8001e94:	017d7840 	.word	0x017d7840
 8001e98:	46000000 	.word	0x46000000
 8001e9c:	4c742400 	.word	0x4c742400
 8001ea0:	4a742400 	.word	0x4a742400
 8001ea4:	4bbebc20 	.word	0x4bbebc20

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03f      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ecc:	d02a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ece:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ed2:	d824      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed8:	d018      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ede:	d81e      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee8:	d007      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eea:	e018      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eec:	4bab      	ldr	r3, [pc, #684]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	4aaa      	ldr	r2, [pc, #680]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001ef8:	e015      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 ff41 	bl	8002d88 <RCCEx_PLL2_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3324      	adds	r3, #36	; 0x24
 8001f10:	2102      	movs	r1, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 ffea 	bl	8002eec <RCCEx_PLL3_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f38:	4998      	ldr	r1, [pc, #608]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	650b      	str	r3, [r1, #80]	; 0x50
 8001f3e:	e001      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03d      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d826      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f75 	.word	0x08001f75
 8001f64:	08001f83 	.word	0x08001f83
 8001f68:	08001f95 	.word	0x08001f95
 8001f6c:	08001fad 	.word	0x08001fad
 8001f70:	08001fad 	.word	0x08001fad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f74:	4b89      	ldr	r3, [pc, #548]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	4a88      	ldr	r2, [pc, #544]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f80:	e015      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fefd 	bl	8002d88 <RCCEx_PLL2_Config>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f92:	e00c      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3324      	adds	r3, #36	; 0x24
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 ffa6 	bl	8002eec <RCCEx_PLL3_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001fa4:	e003      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8001faa:	e000      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb4:	4b79      	ldr	r3, [pc, #484]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	f023 0207 	bic.w	r2, r3, #7
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4976      	ldr	r1, [pc, #472]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8001fc6:	e001      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d042      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe0:	d02b      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8001fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe6:	d825      	bhi.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001fe8:	2bc0      	cmp	r3, #192	; 0xc0
 8001fea:	d028      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001fec:	2bc0      	cmp	r3, #192	; 0xc0
 8001fee:	d821      	bhi.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d016      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d81d      	bhi.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d007      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002000:	e018      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002002:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800200e:	e017      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 feb6 	bl	8002d88 <RCCEx_PLL2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002020:	e00e      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3324      	adds	r3, #36	; 0x24
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 ff5f 	bl	8002eec <RCCEx_PLL3_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002032:	e005      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
      break;
 8002038:	e002      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800203a:	bf00      	nop
 800203c:	e000      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800203e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002046:	4b55      	ldr	r3, [pc, #340]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	4952      	ldr	r1, [pc, #328]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	650b      	str	r3, [r1, #80]	; 0x50
 8002058:	e001      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d049      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002074:	d030      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800207a:	d82a      	bhi.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800207c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002080:	d02c      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002082:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002086:	d824      	bhi.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208c:	d018      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800208e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002092:	d81e      	bhi.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800209c:	d007      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800209e:	e018      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	4a3d      	ldr	r2, [pc, #244]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020ac:	e017      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fe67 	bl	8002d88 <RCCEx_PLL2_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80020be:	e00e      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3324      	adds	r3, #36	; 0x24
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ff10 	bl	8002eec <RCCEx_PLL3_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020d0:	e005      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80020d8:	bf00      	nop
 80020da:	e000      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80020dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80020f2:	492a      	ldr	r1, [pc, #168]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	658b      	str	r3, [r1, #88]	; 0x58
 80020f8:	e001      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002106:	2b00      	cmp	r3, #0
 8002108:	d04c      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002114:	d030      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800211a:	d82a      	bhi.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800211c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002120:	d02c      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002122:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002126:	d824      	bhi.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800212c:	d018      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800212e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002132:	d81e      	bhi.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d007      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800213e:	e018      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	4a15      	ldr	r2, [pc, #84]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800214c:	e017      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fe17 	bl	8002d88 <RCCEx_PLL2_Config>
 800215a:	4603      	mov	r3, r0
 800215c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800215e:	e00e      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3324      	adds	r3, #36	; 0x24
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fec0 	bl	8002eec <RCCEx_PLL3_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002170:	e005      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002178:	bf00      	nop
 800217a:	e000      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800217c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002192:	4902      	ldr	r1, [pc, #8]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	658b      	str	r3, [r1, #88]	; 0x58
 8002198:	e004      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800219a:	bf00      	nop
 800219c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d032      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	2b30      	cmp	r3, #48	; 0x30
 80021b6:	d01c      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80021b8:	2b30      	cmp	r3, #48	; 0x30
 80021ba:	d817      	bhi.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x344>
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d00c      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x332>
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d813      	bhi.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x344>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d016      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d10f      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021cc:	4bb1      	ldr	r3, [pc, #708]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	4ab0      	ldr	r2, [pc, #704]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80021d8:	e00e      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	2102      	movs	r1, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fdd1 	bl	8002d88 <RCCEx_PLL2_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80021ea:	e005      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
      break;
 80021f0:	e002      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80021f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021fe:	4ba5      	ldr	r3, [pc, #660]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220a:	49a2      	ldr	r1, [pc, #648]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800220c:	4313      	orrs	r3, r2
 800220e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002210:	e001      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d047      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222a:	d030      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800222c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002230:	d82a      	bhi.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002232:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002236:	d02c      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800223c:	d824      	bhi.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800223e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002242:	d018      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002248:	d81e      	bhi.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002252:	d007      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002254:	e018      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002256:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	4a8e      	ldr	r2, [pc, #568]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002262:	e017      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fd8c 	bl	8002d88 <RCCEx_PLL2_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002274:	e00e      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3324      	adds	r3, #36	; 0x24
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fe35 	bl	8002eec <RCCEx_PLL3_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002286:	e005      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
      break;
 800228c:	e002      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800228e:	bf00      	nop
 8002290:	e000      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800229a:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	497b      	ldr	r1, [pc, #492]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	650b      	str	r3, [r1, #80]	; 0x50
 80022ac:	e001      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d049      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c6:	d02e      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d828      	bhi.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80022ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022d2:	d02a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80022d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022d8:	d822      	bhi.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80022da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022de:	d026      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80022e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022e4:	d81c      	bhi.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80022e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022ea:	d010      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x466>
 80022ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022f0:	d816      	bhi.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01d      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d111      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fd40 	bl	8002d88 <RCCEx_PLL2_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800230c:	e012      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3324      	adds	r3, #36	; 0x24
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fde9 	bl	8002eec <RCCEx_PLL3_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800231e:	e009      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	75fb      	strb	r3, [r7, #23]
      break;
 8002324:	e006      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002326:	bf00      	nop
 8002328:	e004      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800232a:	bf00      	nop
 800232c:	e002      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800233a:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002346:	4953      	ldr	r1, [pc, #332]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	650b      	str	r3, [r1, #80]	; 0x50
 800234c:	e001      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d04b      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002368:	d02e      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800236a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236e:	d828      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002374:	d02a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d822      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800237c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002380:	d026      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002386:	d81c      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800238c:	d010      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800238e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002392:	d816      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01d      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800239c:	d111      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2101      	movs	r1, #1
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fcef 	bl	8002d88 <RCCEx_PLL2_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80023ae:	e012      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3324      	adds	r3, #36	; 0x24
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fd98 	bl	8002eec <RCCEx_PLL3_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80023c0:	e009      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
      break;
 80023c6:	e006      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80023c8:	bf00      	nop
 80023ca:	e004      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80023cc:	bf00      	nop
 80023ce:	e002      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80023d0:	bf00      	nop
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80023d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023ea:	492a      	ldr	r1, [pc, #168]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	658b      	str	r3, [r1, #88]	; 0x58
 80023f0:	e001      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d022      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00e      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800240a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240e:	d108      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	2101      	movs	r1, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fcb6 	bl	8002d88 <RCCEx_PLL2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	4915      	ldr	r1, [pc, #84]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002442:	e001      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d031      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245c:	d00e      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800245e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002462:	d814      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d017      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246c:	d10f      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800247a:	e00e      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fc80 	bl	8002d88 <RCCEx_PLL2_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800248c:	e005      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
      break;
 8002492:	e002      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002494:	58024400 	.word	0x58024400
      break;
 8002498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80024a0:	4bbc      	ldr	r3, [pc, #752]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80024a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	49b9      	ldr	r1, [pc, #740]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	650b      	str	r3, [r1, #80]	; 0x50
 80024b2:	e001      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d032      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d81b      	bhi.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	0800250b 	.word	0x0800250b
 80024d8:	080024e5 	.word	0x080024e5
 80024dc:	080024f3 	.word	0x080024f3
 80024e0:	0800250b 	.word	0x0800250b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e4:	4bab      	ldr	r3, [pc, #684]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	4aaa      	ldr	r2, [pc, #680]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80024ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80024f0:	e00c      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2102      	movs	r1, #2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fc45 	bl	8002d88 <RCCEx_PLL2_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002502:	e003      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]
      break;
 8002508:	e000      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 800250a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002512:	4ba0      	ldr	r3, [pc, #640]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	499d      	ldr	r1, [pc, #628]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002520:	4313      	orrs	r3, r2
 8002522:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002524:	e001      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8086 	beq.w	8002644 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002538:	4b97      	ldr	r3, [pc, #604]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a96      	ldr	r2, [pc, #600]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002544:	f7fe f9b6 	bl	80008b4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254a:	e009      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254c:	f7fe f9b2 	bl	80008b4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d902      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	75fb      	strb	r3, [r7, #23]
        break;
 800255e:	e005      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002560:	4b8d      	ldr	r3, [pc, #564]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ef      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d166      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800257c:	4053      	eors	r3, r2
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	2b00      	cmp	r3, #0
 8002584:	d013      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002586:	4b83      	ldr	r3, [pc, #524]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b80      	ldr	r3, [pc, #512]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a7f      	ldr	r2, [pc, #508]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800259c:	4b7d      	ldr	r3, [pc, #500]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a7c      	ldr	r2, [pc, #496]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80025a8:	4a7a      	ldr	r2, [pc, #488]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d115      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe f97b 	bl	80008b4 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025c0:	e00b      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe f977 	bl	80008b4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	75fb      	strb	r3, [r7, #23]
            break;
 80025d8:	e005      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025da:	4b6e      	ldr	r3, [pc, #440]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ed      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d126      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025fa:	d10d      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80025fc:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800260a:	0919      	lsrs	r1, r3, #4
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800260e:	400b      	ands	r3, r1
 8002610:	4960      	ldr	r1, [pc, #384]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002612:	4313      	orrs	r3, r2
 8002614:	610b      	str	r3, [r1, #16]
 8002616:	e005      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002618:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	4a5d      	ldr	r2, [pc, #372]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800261e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002622:	6113      	str	r3, [r2, #16]
 8002624:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002632:	4958      	ldr	r1, [pc, #352]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002634:	4313      	orrs	r3, r2
 8002636:	670b      	str	r3, [r1, #112]	; 0x70
 8002638:	e004      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	75bb      	strb	r3, [r7, #22]
 800263e:	e001      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d07e      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002654:	2b28      	cmp	r3, #40	; 0x28
 8002656:	d867      	bhi.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	0800272f 	.word	0x0800272f
 8002664:	08002729 	.word	0x08002729
 8002668:	08002729 	.word	0x08002729
 800266c:	08002729 	.word	0x08002729
 8002670:	08002729 	.word	0x08002729
 8002674:	08002729 	.word	0x08002729
 8002678:	08002729 	.word	0x08002729
 800267c:	08002729 	.word	0x08002729
 8002680:	08002705 	.word	0x08002705
 8002684:	08002729 	.word	0x08002729
 8002688:	08002729 	.word	0x08002729
 800268c:	08002729 	.word	0x08002729
 8002690:	08002729 	.word	0x08002729
 8002694:	08002729 	.word	0x08002729
 8002698:	08002729 	.word	0x08002729
 800269c:	08002729 	.word	0x08002729
 80026a0:	08002717 	.word	0x08002717
 80026a4:	08002729 	.word	0x08002729
 80026a8:	08002729 	.word	0x08002729
 80026ac:	08002729 	.word	0x08002729
 80026b0:	08002729 	.word	0x08002729
 80026b4:	08002729 	.word	0x08002729
 80026b8:	08002729 	.word	0x08002729
 80026bc:	08002729 	.word	0x08002729
 80026c0:	0800272f 	.word	0x0800272f
 80026c4:	08002729 	.word	0x08002729
 80026c8:	08002729 	.word	0x08002729
 80026cc:	08002729 	.word	0x08002729
 80026d0:	08002729 	.word	0x08002729
 80026d4:	08002729 	.word	0x08002729
 80026d8:	08002729 	.word	0x08002729
 80026dc:	08002729 	.word	0x08002729
 80026e0:	0800272f 	.word	0x0800272f
 80026e4:	08002729 	.word	0x08002729
 80026e8:	08002729 	.word	0x08002729
 80026ec:	08002729 	.word	0x08002729
 80026f0:	08002729 	.word	0x08002729
 80026f4:	08002729 	.word	0x08002729
 80026f8:	08002729 	.word	0x08002729
 80026fc:	08002729 	.word	0x08002729
 8002700:	0800272f 	.word	0x0800272f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fb3c 	bl	8002d88 <RCCEx_PLL2_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002714:	e00c      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3324      	adds	r3, #36	; 0x24
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fbe5 	bl	8002eec <RCCEx_PLL3_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002726:	e003      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
      break;
 800272c:	e000      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 800272e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002742:	4914      	ldr	r1, [pc, #80]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002744:	4313      	orrs	r3, r2
 8002746:	654b      	str	r3, [r1, #84]	; 0x54
 8002748:	e001      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03e      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275e:	2b05      	cmp	r3, #5
 8002760:	d827      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	080027b9 	.word	0x080027b9
 800276c:	08002781 	.word	0x08002781
 8002770:	080027a1 	.word	0x080027a1
 8002774:	080027b9 	.word	0x080027b9
 8002778:	080027b9 	.word	0x080027b9
 800277c:	080027b9 	.word	0x080027b9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fafe 	bl	8002d88 <RCCEx_PLL2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002790:	e013      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002792:	bf00      	nop
 8002794:	58024400 	.word	0x58024400
 8002798:	58024800 	.word	0x58024800
 800279c:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3324      	adds	r3, #36	; 0x24
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fba0 	bl	8002eec <RCCEx_PLL3_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
      break;
 80027b6:	e000      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80027b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80027c0:	4b9f      	ldr	r3, [pc, #636]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f023 0207 	bic.w	r2, r3, #7
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027cc:	499c      	ldr	r1, [pc, #624]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	654b      	str	r3, [r1, #84]	; 0x54
 80027d2:	e001      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d039      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d820      	bhi.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002837 	.word	0x08002837
 80027f8:	0800280d 	.word	0x0800280d
 80027fc:	0800281f 	.word	0x0800281f
 8002800:	08002837 	.word	0x08002837
 8002804:	08002837 	.word	0x08002837
 8002808:	08002837 	.word	0x08002837
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fab8 	bl	8002d88 <RCCEx_PLL2_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800281c:	e00c      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3324      	adds	r3, #36	; 0x24
 8002822:	2101      	movs	r1, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fb61 	bl	8002eec <RCCEx_PLL3_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800282e:	e003      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	75fb      	strb	r3, [r7, #23]
      break;
 8002834:	e000      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800283e:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284c:	497c      	ldr	r1, [pc, #496]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800284e:	4313      	orrs	r3, r2
 8002850:	658b      	str	r3, [r1, #88]	; 0x58
 8002852:	e001      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d04b      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800286e:	d02e      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002874:	d828      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287a:	d02a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d822      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002886:	d026      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800288c:	d81c      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800288e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002898:	d816      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01d      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800289e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a2:	d111      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fa6c 	bl	8002d88 <RCCEx_PLL2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80028b4:	e012      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3324      	adds	r3, #36	; 0x24
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb15 	bl	8002eec <RCCEx_PLL3_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80028ce:	bf00      	nop
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80028da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4953      	ldr	r1, [pc, #332]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	654b      	str	r3, [r1, #84]	; 0x54
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d04b      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800290e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002912:	d02e      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002914:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002918:	d828      	bhi.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d02a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d822      	bhi.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800292a:	d026      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800292c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002930:	d81c      	bhi.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002936:	d010      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	d816      	bhi.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01d      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d111      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa1a 	bl	8002d88 <RCCEx_PLL2_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002958:	e012      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3324      	adds	r3, #36	; 0x24
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fac3 	bl	8002eec <RCCEx_PLL3_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800296a:	e009      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	75fb      	strb	r3, [r7, #23]
      break;
 8002970:	e006      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002972:	bf00      	nop
 8002974:	e004      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002976:	bf00      	nop
 8002978:	e002      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800297e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002994:	492a      	ldr	r1, [pc, #168]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002996:	4313      	orrs	r3, r2
 8002998:	658b      	str	r3, [r1, #88]	; 0x58
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d04d      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80029b6:	d02e      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80029b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80029bc:	d828      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80029be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c2:	d02a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80029c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c8:	d822      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80029ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80029ce:	d026      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80029d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80029d4:	d81c      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80029d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029da:	d010      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80029dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e0:	d816      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01d      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ea:	d111      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f9c8 	bl	8002d88 <RCCEx_PLL2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80029fc:	e012      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3324      	adds	r3, #36	; 0x24
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fa71 	bl	8002eec <RCCEx_PLL3_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002a0e:	e009      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	75fb      	strb	r3, [r7, #23]
      break;
 8002a14:	e006      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002a16:	bf00      	nop
 8002a18:	e004      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a38:	4901      	ldr	r1, [pc, #4]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a3e:	e003      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	d10a      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	2102      	movs	r1, #2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa40 	bl	8002eec <RCCEx_PLL3_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002a76:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a84:	4988      	ldr	r1, [pc, #544]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fa1f 	bl	8002eec <RCCEx_PLL3_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ab8:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac6:	4978      	ldr	r1, [pc, #480]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d034      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae2:	d01d      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae8:	d817      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af2:	d009      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8002af4:	e011      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f943 	bl	8002d88 <RCCEx_PLL2_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002b06:	e00c      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3324      	adds	r3, #36	; 0x24
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f9ec 	bl	8002eec <RCCEx_PLL3_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8002b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b28:	4b5f      	ldr	r3, [pc, #380]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b36:	495c      	ldr	r1, [pc, #368]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8002b3c:	e001      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d033      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b58:	d01c      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8002b5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b5e:	d816      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8002b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b64:	d003      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6a:	d007      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8002b6c:	e00f      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	4a4d      	ldr	r2, [pc, #308]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3324      	adds	r3, #36	; 0x24
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f9b2 	bl	8002eec <RCCEx_PLL3_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9c:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	493f      	ldr	r1, [pc, #252]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	654b      	str	r3, [r1, #84]	; 0x54
 8002bb0:	e001      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d029      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8002bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bce:	d007      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8002bd0:	e00f      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd2:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2102      	movs	r1, #2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f8ce 	bl	8002d88 <RCCEx_PLL2_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	4927      	ldr	r1, [pc, #156]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c10:	e001      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3324      	adds	r3, #36	; 0x24
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f95f 	bl	8002eec <RCCEx_PLL3_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d035      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4e:	d017      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8002c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c54:	d811      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d80b      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002c78:	e007      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7e:	e004      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8002c80:	bf00      	nop
 8002c82:	e002      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8002c84:	bf00      	nop
 8002c86:	e000      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8002c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	4902      	ldr	r1, [pc, #8]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	654b      	str	r3, [r1, #84]	; 0x54
 8002ca4:	e004      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8002ca6:	bf00      	nop
 8002ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc8:	492e      	ldr	r1, [pc, #184]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ce8:	4926      	ldr	r1, [pc, #152]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d06:	491f      	ldr	r1, [pc, #124]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d22:	6113      	str	r3, [r2, #16]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d2e:	4915      	ldr	r1, [pc, #84]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da08      	bge.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	490e      	ldr	r1, [pc, #56]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d68:	4906      	ldr	r1, [pc, #24]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002d6e:	7dbb      	ldrb	r3, [r7, #22]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	58024400 	.word	0x58024400

08002d88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002d96:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d101      	bne.n	8002da6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e099      	b.n	8002eda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002da6:	4b4f      	ldr	r3, [pc, #316]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002dac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fd fd7f 	bl	80008b4 <HAL_GetTick>
 8002db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002db8:	e008      	b.n	8002dcc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002dba:	f7fd fd7b 	bl	80008b4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e086      	b.n	8002eda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002dcc:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	031b      	lsls	r3, r3, #12
 8002de6:	493f      	ldr	r1, [pc, #252]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	628b      	str	r3, [r1, #40]	; 0x28
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	025b      	lsls	r3, r3, #9
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e1c:	4931      	ldr	r1, [pc, #196]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002e22:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	492d      	ldr	r1, [pc, #180]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	f023 0220 	bic.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4928      	ldr	r1, [pc, #160]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002e46:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e4c:	f023 0310 	bic.w	r3, r3, #16
 8002e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <RCCEx_PLL2_Config+0x160>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	69d2      	ldr	r2, [r2, #28]
 8002e5e:	00d2      	lsls	r2, r2, #3
 8002e60:	4920      	ldr	r1, [pc, #128]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002e66:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e84:	e00f      	b.n	8002ea6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e98:	e005      	b.n	8002ea6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb2:	f7fd fcff 	bl	80008b4 <HAL_GetTick>
 8002eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002eb8:	e008      	b.n	8002ecc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002eba:	f7fd fcfb 	bl	80008b4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e006      	b.n	8002eda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <RCCEx_PLL2_Config+0x15c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	ffff0007 	.word	0xffff0007

08002eec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002efa:	4b53      	ldr	r3, [pc, #332]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d101      	bne.n	8002f0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e099      	b.n	800303e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f16:	f7fd fccd 	bl	80008b4 <HAL_GetTick>
 8002f1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002f1e:	f7fd fcc9 	bl	80008b4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e086      	b.n	800303e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f30:	4b45      	ldr	r3, [pc, #276]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	051b      	lsls	r3, r3, #20
 8002f4a:	493f      	ldr	r1, [pc, #252]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	025b      	lsls	r3, r3, #9
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f80:	4931      	ldr	r1, [pc, #196]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002f86:	4b30      	ldr	r3, [pc, #192]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	492d      	ldr	r1, [pc, #180]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4928      	ldr	r1, [pc, #160]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002faa:	4b27      	ldr	r3, [pc, #156]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	4a26      	ldr	r2, [pc, #152]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <RCCEx_PLL3_Config+0x160>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	69d2      	ldr	r2, [r2, #28]
 8002fc2:	00d2      	lsls	r2, r2, #3
 8002fc4:	4920      	ldr	r1, [pc, #128]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002fca:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002fe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fe8:	e00f      	b.n	800300a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8002ff6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ffc:	e005      	b.n	800300a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4a11      	ldr	r2, [pc, #68]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8003004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003008:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003016:	f7fd fc4d 	bl	80008b4 <HAL_GetTick>
 800301a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800301c:	e008      	b.n	8003030 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800301e:	f7fd fc49 	bl	80008b4 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e006      	b.n	800303e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <RCCEx_PLL3_Config+0x15c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	58024400 	.word	0x58024400
 800304c:	ffff0007 	.word	0xffff0007

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4d0d      	ldr	r5, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1b64      	subs	r4, r4, r5
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2600      	movs	r6, #0
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4d0b      	ldr	r5, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 f820 	bl	80030a8 <_init>
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2600      	movs	r6, #0
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f855 3b04 	ldr.w	r3, [r5], #4
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	080030d0 	.word	0x080030d0
 800308c:	080030d0 	.word	0x080030d0
 8003090:	080030d0 	.word	0x080030d0
 8003094:	080030d4 	.word	0x080030d4

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <_init>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr

080030b4 <_fini>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr
