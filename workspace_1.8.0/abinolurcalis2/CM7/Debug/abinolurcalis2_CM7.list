
abinolurcalis2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  08040298  08040298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08044e48  08044e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044e90  08044e90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08044e90  08044e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044e98  08044e98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044e98  08044e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044e9c  08044e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08044ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08044eb0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08044eb0  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c37  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272d  00000000  00000000  00038c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0003b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e462  00000000  00000000  0003c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e816  00000000  00000000  0007ad52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195180  00000000  00000000  00089568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021e6e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb0  00000000  00000000  0021e73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040298 <__do_global_dtors_aux>:
 8040298:	b510      	push	{r4, lr}
 804029a:	4c05      	ldr	r4, [pc, #20]	; (80402b0 <__do_global_dtors_aux+0x18>)
 804029c:	7823      	ldrb	r3, [r4, #0]
 804029e:	b933      	cbnz	r3, 80402ae <__do_global_dtors_aux+0x16>
 80402a0:	4b04      	ldr	r3, [pc, #16]	; (80402b4 <__do_global_dtors_aux+0x1c>)
 80402a2:	b113      	cbz	r3, 80402aa <__do_global_dtors_aux+0x12>
 80402a4:	4804      	ldr	r0, [pc, #16]	; (80402b8 <__do_global_dtors_aux+0x20>)
 80402a6:	f3af 8000 	nop.w
 80402aa:	2301      	movs	r3, #1
 80402ac:	7023      	strb	r3, [r4, #0]
 80402ae:	bd10      	pop	{r4, pc}
 80402b0:	24000010 	.word	0x24000010
 80402b4:	00000000 	.word	0x00000000
 80402b8:	08044e30 	.word	0x08044e30

080402bc <frame_dummy>:
 80402bc:	b508      	push	{r3, lr}
 80402be:	4b03      	ldr	r3, [pc, #12]	; (80402cc <frame_dummy+0x10>)
 80402c0:	b11b      	cbz	r3, 80402ca <frame_dummy+0xe>
 80402c2:	4903      	ldr	r1, [pc, #12]	; (80402d0 <frame_dummy+0x14>)
 80402c4:	4803      	ldr	r0, [pc, #12]	; (80402d4 <frame_dummy+0x18>)
 80402c6:	f3af 8000 	nop.w
 80402ca:	bd08      	pop	{r3, pc}
 80402cc:	00000000 	.word	0x00000000
 80402d0:	24000014 	.word	0x24000014
 80402d4:	08044e30 	.word	0x08044e30

080402d8 <__aeabi_uldivmod>:
 80402d8:	b953      	cbnz	r3, 80402f0 <__aeabi_uldivmod+0x18>
 80402da:	b94a      	cbnz	r2, 80402f0 <__aeabi_uldivmod+0x18>
 80402dc:	2900      	cmp	r1, #0
 80402de:	bf08      	it	eq
 80402e0:	2800      	cmpeq	r0, #0
 80402e2:	bf1c      	itt	ne
 80402e4:	f04f 31ff 	movne.w	r1, #4294967295
 80402e8:	f04f 30ff 	movne.w	r0, #4294967295
 80402ec:	f000 b96e 	b.w	80405cc <__aeabi_idiv0>
 80402f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80402f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402f8:	f000 f806 	bl	8040308 <__udivmoddi4>
 80402fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040304:	b004      	add	sp, #16
 8040306:	4770      	bx	lr

08040308 <__udivmoddi4>:
 8040308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804030c:	9d08      	ldr	r5, [sp, #32]
 804030e:	4604      	mov	r4, r0
 8040310:	468c      	mov	ip, r1
 8040312:	2b00      	cmp	r3, #0
 8040314:	f040 8083 	bne.w	804041e <__udivmoddi4+0x116>
 8040318:	428a      	cmp	r2, r1
 804031a:	4617      	mov	r7, r2
 804031c:	d947      	bls.n	80403ae <__udivmoddi4+0xa6>
 804031e:	fab2 f282 	clz	r2, r2
 8040322:	b142      	cbz	r2, 8040336 <__udivmoddi4+0x2e>
 8040324:	f1c2 0020 	rsb	r0, r2, #32
 8040328:	fa24 f000 	lsr.w	r0, r4, r0
 804032c:	4091      	lsls	r1, r2
 804032e:	4097      	lsls	r7, r2
 8040330:	ea40 0c01 	orr.w	ip, r0, r1
 8040334:	4094      	lsls	r4, r2
 8040336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 804033a:	0c23      	lsrs	r3, r4, #16
 804033c:	fbbc f6f8 	udiv	r6, ip, r8
 8040340:	fa1f fe87 	uxth.w	lr, r7
 8040344:	fb08 c116 	mls	r1, r8, r6, ip
 8040348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804034c:	fb06 f10e 	mul.w	r1, r6, lr
 8040350:	4299      	cmp	r1, r3
 8040352:	d909      	bls.n	8040368 <__udivmoddi4+0x60>
 8040354:	18fb      	adds	r3, r7, r3
 8040356:	f106 30ff 	add.w	r0, r6, #4294967295
 804035a:	f080 8119 	bcs.w	8040590 <__udivmoddi4+0x288>
 804035e:	4299      	cmp	r1, r3
 8040360:	f240 8116 	bls.w	8040590 <__udivmoddi4+0x288>
 8040364:	3e02      	subs	r6, #2
 8040366:	443b      	add	r3, r7
 8040368:	1a5b      	subs	r3, r3, r1
 804036a:	b2a4      	uxth	r4, r4
 804036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8040370:	fb08 3310 	mls	r3, r8, r0, r3
 8040374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040378:	fb00 fe0e 	mul.w	lr, r0, lr
 804037c:	45a6      	cmp	lr, r4
 804037e:	d909      	bls.n	8040394 <__udivmoddi4+0x8c>
 8040380:	193c      	adds	r4, r7, r4
 8040382:	f100 33ff 	add.w	r3, r0, #4294967295
 8040386:	f080 8105 	bcs.w	8040594 <__udivmoddi4+0x28c>
 804038a:	45a6      	cmp	lr, r4
 804038c:	f240 8102 	bls.w	8040594 <__udivmoddi4+0x28c>
 8040390:	3802      	subs	r0, #2
 8040392:	443c      	add	r4, r7
 8040394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040398:	eba4 040e 	sub.w	r4, r4, lr
 804039c:	2600      	movs	r6, #0
 804039e:	b11d      	cbz	r5, 80403a8 <__udivmoddi4+0xa0>
 80403a0:	40d4      	lsrs	r4, r2
 80403a2:	2300      	movs	r3, #0
 80403a4:	e9c5 4300 	strd	r4, r3, [r5]
 80403a8:	4631      	mov	r1, r6
 80403aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403ae:	b902      	cbnz	r2, 80403b2 <__udivmoddi4+0xaa>
 80403b0:	deff      	udf	#255	; 0xff
 80403b2:	fab2 f282 	clz	r2, r2
 80403b6:	2a00      	cmp	r2, #0
 80403b8:	d150      	bne.n	804045c <__udivmoddi4+0x154>
 80403ba:	1bcb      	subs	r3, r1, r7
 80403bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403c0:	fa1f f887 	uxth.w	r8, r7
 80403c4:	2601      	movs	r6, #1
 80403c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80403ca:	0c21      	lsrs	r1, r4, #16
 80403cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80403d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80403d4:	fb08 f30c 	mul.w	r3, r8, ip
 80403d8:	428b      	cmp	r3, r1
 80403da:	d907      	bls.n	80403ec <__udivmoddi4+0xe4>
 80403dc:	1879      	adds	r1, r7, r1
 80403de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0xe2>
 80403e4:	428b      	cmp	r3, r1
 80403e6:	f200 80e9 	bhi.w	80405bc <__udivmoddi4+0x2b4>
 80403ea:	4684      	mov	ip, r0
 80403ec:	1ac9      	subs	r1, r1, r3
 80403ee:	b2a3      	uxth	r3, r4
 80403f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80403f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80403f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80403fc:	fb08 f800 	mul.w	r8, r8, r0
 8040400:	45a0      	cmp	r8, r4
 8040402:	d907      	bls.n	8040414 <__udivmoddi4+0x10c>
 8040404:	193c      	adds	r4, r7, r4
 8040406:	f100 33ff 	add.w	r3, r0, #4294967295
 804040a:	d202      	bcs.n	8040412 <__udivmoddi4+0x10a>
 804040c:	45a0      	cmp	r8, r4
 804040e:	f200 80d9 	bhi.w	80405c4 <__udivmoddi4+0x2bc>
 8040412:	4618      	mov	r0, r3
 8040414:	eba4 0408 	sub.w	r4, r4, r8
 8040418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804041c:	e7bf      	b.n	804039e <__udivmoddi4+0x96>
 804041e:	428b      	cmp	r3, r1
 8040420:	d909      	bls.n	8040436 <__udivmoddi4+0x12e>
 8040422:	2d00      	cmp	r5, #0
 8040424:	f000 80b1 	beq.w	804058a <__udivmoddi4+0x282>
 8040428:	2600      	movs	r6, #0
 804042a:	e9c5 0100 	strd	r0, r1, [r5]
 804042e:	4630      	mov	r0, r6
 8040430:	4631      	mov	r1, r6
 8040432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040436:	fab3 f683 	clz	r6, r3
 804043a:	2e00      	cmp	r6, #0
 804043c:	d14a      	bne.n	80404d4 <__udivmoddi4+0x1cc>
 804043e:	428b      	cmp	r3, r1
 8040440:	d302      	bcc.n	8040448 <__udivmoddi4+0x140>
 8040442:	4282      	cmp	r2, r0
 8040444:	f200 80b8 	bhi.w	80405b8 <__udivmoddi4+0x2b0>
 8040448:	1a84      	subs	r4, r0, r2
 804044a:	eb61 0103 	sbc.w	r1, r1, r3
 804044e:	2001      	movs	r0, #1
 8040450:	468c      	mov	ip, r1
 8040452:	2d00      	cmp	r5, #0
 8040454:	d0a8      	beq.n	80403a8 <__udivmoddi4+0xa0>
 8040456:	e9c5 4c00 	strd	r4, ip, [r5]
 804045a:	e7a5      	b.n	80403a8 <__udivmoddi4+0xa0>
 804045c:	f1c2 0320 	rsb	r3, r2, #32
 8040460:	fa20 f603 	lsr.w	r6, r0, r3
 8040464:	4097      	lsls	r7, r2
 8040466:	fa01 f002 	lsl.w	r0, r1, r2
 804046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 804046e:	40d9      	lsrs	r1, r3
 8040470:	4330      	orrs	r0, r6
 8040472:	0c03      	lsrs	r3, r0, #16
 8040474:	fbb1 f6fe 	udiv	r6, r1, lr
 8040478:	fa1f f887 	uxth.w	r8, r7
 804047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8040480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040484:	fb06 f108 	mul.w	r1, r6, r8
 8040488:	4299      	cmp	r1, r3
 804048a:	fa04 f402 	lsl.w	r4, r4, r2
 804048e:	d909      	bls.n	80404a4 <__udivmoddi4+0x19c>
 8040490:	18fb      	adds	r3, r7, r3
 8040492:	f106 3cff 	add.w	ip, r6, #4294967295
 8040496:	f080 808d 	bcs.w	80405b4 <__udivmoddi4+0x2ac>
 804049a:	4299      	cmp	r1, r3
 804049c:	f240 808a 	bls.w	80405b4 <__udivmoddi4+0x2ac>
 80404a0:	3e02      	subs	r6, #2
 80404a2:	443b      	add	r3, r7
 80404a4:	1a5b      	subs	r3, r3, r1
 80404a6:	b281      	uxth	r1, r0
 80404a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80404ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80404b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404b4:	fb00 f308 	mul.w	r3, r0, r8
 80404b8:	428b      	cmp	r3, r1
 80404ba:	d907      	bls.n	80404cc <__udivmoddi4+0x1c4>
 80404bc:	1879      	adds	r1, r7, r1
 80404be:	f100 3cff 	add.w	ip, r0, #4294967295
 80404c2:	d273      	bcs.n	80405ac <__udivmoddi4+0x2a4>
 80404c4:	428b      	cmp	r3, r1
 80404c6:	d971      	bls.n	80405ac <__udivmoddi4+0x2a4>
 80404c8:	3802      	subs	r0, #2
 80404ca:	4439      	add	r1, r7
 80404cc:	1acb      	subs	r3, r1, r3
 80404ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80404d2:	e778      	b.n	80403c6 <__udivmoddi4+0xbe>
 80404d4:	f1c6 0c20 	rsb	ip, r6, #32
 80404d8:	fa03 f406 	lsl.w	r4, r3, r6
 80404dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80404e0:	431c      	orrs	r4, r3
 80404e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80404e6:	fa01 f306 	lsl.w	r3, r1, r6
 80404ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80404ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80404f2:	431f      	orrs	r7, r3
 80404f4:	0c3b      	lsrs	r3, r7, #16
 80404f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80404fa:	fa1f f884 	uxth.w	r8, r4
 80404fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8040502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040506:	fb09 fa08 	mul.w	sl, r9, r8
 804050a:	458a      	cmp	sl, r1
 804050c:	fa02 f206 	lsl.w	r2, r2, r6
 8040510:	fa00 f306 	lsl.w	r3, r0, r6
 8040514:	d908      	bls.n	8040528 <__udivmoddi4+0x220>
 8040516:	1861      	adds	r1, r4, r1
 8040518:	f109 30ff 	add.w	r0, r9, #4294967295
 804051c:	d248      	bcs.n	80405b0 <__udivmoddi4+0x2a8>
 804051e:	458a      	cmp	sl, r1
 8040520:	d946      	bls.n	80405b0 <__udivmoddi4+0x2a8>
 8040522:	f1a9 0902 	sub.w	r9, r9, #2
 8040526:	4421      	add	r1, r4
 8040528:	eba1 010a 	sub.w	r1, r1, sl
 804052c:	b2bf      	uxth	r7, r7
 804052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8040532:	fb0e 1110 	mls	r1, lr, r0, r1
 8040536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 804053a:	fb00 f808 	mul.w	r8, r0, r8
 804053e:	45b8      	cmp	r8, r7
 8040540:	d907      	bls.n	8040552 <__udivmoddi4+0x24a>
 8040542:	19e7      	adds	r7, r4, r7
 8040544:	f100 31ff 	add.w	r1, r0, #4294967295
 8040548:	d22e      	bcs.n	80405a8 <__udivmoddi4+0x2a0>
 804054a:	45b8      	cmp	r8, r7
 804054c:	d92c      	bls.n	80405a8 <__udivmoddi4+0x2a0>
 804054e:	3802      	subs	r0, #2
 8040550:	4427      	add	r7, r4
 8040552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8040556:	eba7 0708 	sub.w	r7, r7, r8
 804055a:	fba0 8902 	umull	r8, r9, r0, r2
 804055e:	454f      	cmp	r7, r9
 8040560:	46c6      	mov	lr, r8
 8040562:	4649      	mov	r1, r9
 8040564:	d31a      	bcc.n	804059c <__udivmoddi4+0x294>
 8040566:	d017      	beq.n	8040598 <__udivmoddi4+0x290>
 8040568:	b15d      	cbz	r5, 8040582 <__udivmoddi4+0x27a>
 804056a:	ebb3 020e 	subs.w	r2, r3, lr
 804056e:	eb67 0701 	sbc.w	r7, r7, r1
 8040572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8040576:	40f2      	lsrs	r2, r6
 8040578:	ea4c 0202 	orr.w	r2, ip, r2
 804057c:	40f7      	lsrs	r7, r6
 804057e:	e9c5 2700 	strd	r2, r7, [r5]
 8040582:	2600      	movs	r6, #0
 8040584:	4631      	mov	r1, r6
 8040586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804058a:	462e      	mov	r6, r5
 804058c:	4628      	mov	r0, r5
 804058e:	e70b      	b.n	80403a8 <__udivmoddi4+0xa0>
 8040590:	4606      	mov	r6, r0
 8040592:	e6e9      	b.n	8040368 <__udivmoddi4+0x60>
 8040594:	4618      	mov	r0, r3
 8040596:	e6fd      	b.n	8040394 <__udivmoddi4+0x8c>
 8040598:	4543      	cmp	r3, r8
 804059a:	d2e5      	bcs.n	8040568 <__udivmoddi4+0x260>
 804059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80405a0:	eb69 0104 	sbc.w	r1, r9, r4
 80405a4:	3801      	subs	r0, #1
 80405a6:	e7df      	b.n	8040568 <__udivmoddi4+0x260>
 80405a8:	4608      	mov	r0, r1
 80405aa:	e7d2      	b.n	8040552 <__udivmoddi4+0x24a>
 80405ac:	4660      	mov	r0, ip
 80405ae:	e78d      	b.n	80404cc <__udivmoddi4+0x1c4>
 80405b0:	4681      	mov	r9, r0
 80405b2:	e7b9      	b.n	8040528 <__udivmoddi4+0x220>
 80405b4:	4666      	mov	r6, ip
 80405b6:	e775      	b.n	80404a4 <__udivmoddi4+0x19c>
 80405b8:	4630      	mov	r0, r6
 80405ba:	e74a      	b.n	8040452 <__udivmoddi4+0x14a>
 80405bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80405c0:	4439      	add	r1, r7
 80405c2:	e713      	b.n	80403ec <__udivmoddi4+0xe4>
 80405c4:	3802      	subs	r0, #2
 80405c6:	443c      	add	r4, r7
 80405c8:	e724      	b.n	8040414 <__udivmoddi4+0x10c>
 80405ca:	bf00      	nop

080405cc <__aeabi_idiv0>:
 80405cc:	4770      	bx	lr
 80405ce:	bf00      	nop

080405d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80405d0:	b480      	push	{r7}
 80405d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80405d4:	4b3f      	ldr	r3, [pc, #252]	; (80406d4 <SystemInit+0x104>)
 80405d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80405da:	4a3e      	ldr	r2, [pc, #248]	; (80406d4 <SystemInit+0x104>)
 80405dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80405e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80405e4:	4b3b      	ldr	r3, [pc, #236]	; (80406d4 <SystemInit+0x104>)
 80405e6:	691b      	ldr	r3, [r3, #16]
 80405e8:	4a3a      	ldr	r2, [pc, #232]	; (80406d4 <SystemInit+0x104>)
 80405ea:	f043 0310 	orr.w	r3, r3, #16
 80405ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80405f0:	4b39      	ldr	r3, [pc, #228]	; (80406d8 <SystemInit+0x108>)
 80405f2:	681b      	ldr	r3, [r3, #0]
 80405f4:	f003 030f 	and.w	r3, r3, #15
 80405f8:	2b06      	cmp	r3, #6
 80405fa:	d807      	bhi.n	804060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80405fc:	4b36      	ldr	r3, [pc, #216]	; (80406d8 <SystemInit+0x108>)
 80405fe:	681b      	ldr	r3, [r3, #0]
 8040600:	f023 030f 	bic.w	r3, r3, #15
 8040604:	4a34      	ldr	r2, [pc, #208]	; (80406d8 <SystemInit+0x108>)
 8040606:	f043 0307 	orr.w	r3, r3, #7
 804060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 804060c:	4b33      	ldr	r3, [pc, #204]	; (80406dc <SystemInit+0x10c>)
 804060e:	681b      	ldr	r3, [r3, #0]
 8040610:	4a32      	ldr	r2, [pc, #200]	; (80406dc <SystemInit+0x10c>)
 8040612:	f043 0301 	orr.w	r3, r3, #1
 8040616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8040618:	4b30      	ldr	r3, [pc, #192]	; (80406dc <SystemInit+0x10c>)
 804061a:	2200      	movs	r2, #0
 804061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 804061e:	4b2f      	ldr	r3, [pc, #188]	; (80406dc <SystemInit+0x10c>)
 8040620:	681a      	ldr	r2, [r3, #0]
 8040622:	492e      	ldr	r1, [pc, #184]	; (80406dc <SystemInit+0x10c>)
 8040624:	4b2e      	ldr	r3, [pc, #184]	; (80406e0 <SystemInit+0x110>)
 8040626:	4013      	ands	r3, r2
 8040628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 804062a:	4b2b      	ldr	r3, [pc, #172]	; (80406d8 <SystemInit+0x108>)
 804062c:	681b      	ldr	r3, [r3, #0]
 804062e:	f003 0308 	and.w	r3, r3, #8
 8040632:	2b00      	cmp	r3, #0
 8040634:	d007      	beq.n	8040646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040636:	4b28      	ldr	r3, [pc, #160]	; (80406d8 <SystemInit+0x108>)
 8040638:	681b      	ldr	r3, [r3, #0]
 804063a:	f023 030f 	bic.w	r3, r3, #15
 804063e:	4a26      	ldr	r2, [pc, #152]	; (80406d8 <SystemInit+0x108>)
 8040640:	f043 0307 	orr.w	r3, r3, #7
 8040644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040646:	4b25      	ldr	r3, [pc, #148]	; (80406dc <SystemInit+0x10c>)
 8040648:	2200      	movs	r2, #0
 804064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 804064c:	4b23      	ldr	r3, [pc, #140]	; (80406dc <SystemInit+0x10c>)
 804064e:	2200      	movs	r2, #0
 8040650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8040652:	4b22      	ldr	r3, [pc, #136]	; (80406dc <SystemInit+0x10c>)
 8040654:	2200      	movs	r2, #0
 8040656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040658:	4b20      	ldr	r3, [pc, #128]	; (80406dc <SystemInit+0x10c>)
 804065a:	4a22      	ldr	r2, [pc, #136]	; (80406e4 <SystemInit+0x114>)
 804065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804065e:	4b1f      	ldr	r3, [pc, #124]	; (80406dc <SystemInit+0x10c>)
 8040660:	4a21      	ldr	r2, [pc, #132]	; (80406e8 <SystemInit+0x118>)
 8040662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040664:	4b1d      	ldr	r3, [pc, #116]	; (80406dc <SystemInit+0x10c>)
 8040666:	4a21      	ldr	r2, [pc, #132]	; (80406ec <SystemInit+0x11c>)
 8040668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 804066a:	4b1c      	ldr	r3, [pc, #112]	; (80406dc <SystemInit+0x10c>)
 804066c:	2200      	movs	r2, #0
 804066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8040670:	4b1a      	ldr	r3, [pc, #104]	; (80406dc <SystemInit+0x10c>)
 8040672:	4a1e      	ldr	r2, [pc, #120]	; (80406ec <SystemInit+0x11c>)
 8040674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040676:	4b19      	ldr	r3, [pc, #100]	; (80406dc <SystemInit+0x10c>)
 8040678:	2200      	movs	r2, #0
 804067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 804067c:	4b17      	ldr	r3, [pc, #92]	; (80406dc <SystemInit+0x10c>)
 804067e:	4a1b      	ldr	r2, [pc, #108]	; (80406ec <SystemInit+0x11c>)
 8040680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8040682:	4b16      	ldr	r3, [pc, #88]	; (80406dc <SystemInit+0x10c>)
 8040684:	2200      	movs	r2, #0
 8040686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8040688:	4b14      	ldr	r3, [pc, #80]	; (80406dc <SystemInit+0x10c>)
 804068a:	681b      	ldr	r3, [r3, #0]
 804068c:	4a13      	ldr	r2, [pc, #76]	; (80406dc <SystemInit+0x10c>)
 804068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8040692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040694:	4b11      	ldr	r3, [pc, #68]	; (80406dc <SystemInit+0x10c>)
 8040696:	2200      	movs	r2, #0
 8040698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 804069a:	4b15      	ldr	r3, [pc, #84]	; (80406f0 <SystemInit+0x120>)
 804069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804069e:	4a14      	ldr	r2, [pc, #80]	; (80406f0 <SystemInit+0x120>)
 80406a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80406a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80406a6:	4b13      	ldr	r3, [pc, #76]	; (80406f4 <SystemInit+0x124>)
 80406a8:	681a      	ldr	r2, [r3, #0]
 80406aa:	4b13      	ldr	r3, [pc, #76]	; (80406f8 <SystemInit+0x128>)
 80406ac:	4013      	ands	r3, r2
 80406ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80406b2:	d202      	bcs.n	80406ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80406b4:	4b11      	ldr	r3, [pc, #68]	; (80406fc <SystemInit+0x12c>)
 80406b6:	2201      	movs	r2, #1
 80406b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80406ba:	4b11      	ldr	r3, [pc, #68]	; (8040700 <SystemInit+0x130>)
 80406bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80406c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80406c2:	4b04      	ldr	r3, [pc, #16]	; (80406d4 <SystemInit+0x104>)
 80406c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80406c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80406ca:	bf00      	nop
 80406cc:	46bd      	mov	sp, r7
 80406ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406d2:	4770      	bx	lr
 80406d4:	e000ed00 	.word	0xe000ed00
 80406d8:	52002000 	.word	0x52002000
 80406dc:	58024400 	.word	0x58024400
 80406e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80406e4:	02020200 	.word	0x02020200
 80406e8:	01ff0000 	.word	0x01ff0000
 80406ec:	01010280 	.word	0x01010280
 80406f0:	580000c0 	.word	0x580000c0
 80406f4:	5c001000 	.word	0x5c001000
 80406f8:	ffff0000 	.word	0xffff0000
 80406fc:	51008108 	.word	0x51008108
 8040700:	52004000 	.word	0x52004000

08040704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040704:	b580      	push	{r7, lr}
 8040706:	b082      	sub	sp, #8
 8040708:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804070a:	f000 fabb 	bl	8040c84 <HAL_Init>
  SCB->VTOR = 0x08040000;
 804070e:	4b2a      	ldr	r3, [pc, #168]	; (80407b8 <main+0xb4>)
 8040710:	4a2a      	ldr	r2, [pc, #168]	; (80407bc <main+0xb8>)
 8040712:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040714:	f000 f85c 	bl	80407d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8040718:	f000 f8ea 	bl	80408f0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 804071c:	4b28      	ldr	r3, [pc, #160]	; (80407c0 <main+0xbc>)
 804071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040722:	4a27      	ldr	r2, [pc, #156]	; (80407c0 <main+0xbc>)
 8040724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8040728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 804072c:	4b24      	ldr	r3, [pc, #144]	; (80407c0 <main+0xbc>)
 804072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8040736:	603b      	str	r3, [r7, #0]
 8040738:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 804073a:	2000      	movs	r0, #0
 804073c:	f000 fe12 	bl	8041364 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8040740:	2100      	movs	r1, #0
 8040742:	2000      	movs	r0, #0
 8040744:	f000 fe28 	bl	8041398 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8040748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804074c:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 804074e:	bf00      	nop
 8040750:	4b1b      	ldr	r3, [pc, #108]	; (80407c0 <main+0xbc>)
 8040752:	681b      	ldr	r3, [r3, #0]
 8040754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040758:	2b00      	cmp	r3, #0
 804075a:	d104      	bne.n	8040766 <main+0x62>
 804075c:	687b      	ldr	r3, [r7, #4]
 804075e:	1e5a      	subs	r2, r3, #1
 8040760:	607a      	str	r2, [r7, #4]
 8040762:	2b00      	cmp	r3, #0
 8040764:	dcf4      	bgt.n	8040750 <main+0x4c>
if ( timeout < 0 )
 8040766:	687b      	ldr	r3, [r7, #4]
 8040768:	2b00      	cmp	r3, #0
 804076a:	da01      	bge.n	8040770 <main+0x6c>
{
Error_Handler();
 804076c:	f000 f9b0 	bl	8040ad0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040770:	f000 f936 	bl	80409e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8040774:	f000 f8e8 	bl	8040948 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8040778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804077c:	f000 fb14 	bl	8040da8 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t*)"Application\n", 12, 100);
 8040780:	2364      	movs	r3, #100	; 0x64
 8040782:	220c      	movs	r2, #12
 8040784:	490f      	ldr	r1, [pc, #60]	; (80407c4 <main+0xc0>)
 8040786:	4810      	ldr	r0, [pc, #64]	; (80407c8 <main+0xc4>)
 8040788:	f003 fa78 	bl	8043c7c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_RESET);
 804078c:	2200      	movs	r2, #0
 804078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040792:	480e      	ldr	r0, [pc, #56]	; (80407cc <main+0xc8>)
 8040794:	f000 fdcc 	bl	8041330 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8040798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804079c:	f000 fb04 	bl	8040da8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET);
 80407a0:	2201      	movs	r2, #1
 80407a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80407a6:	4809      	ldr	r0, [pc, #36]	; (80407cc <main+0xc8>)
 80407a8:	f000 fdc2 	bl	8041330 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80407ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80407b0:	f000 fafa 	bl	8040da8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_RESET);
 80407b4:	e7ea      	b.n	804078c <main+0x88>
 80407b6:	bf00      	nop
 80407b8:	e000ed00 	.word	0xe000ed00
 80407bc:	08040000 	.word	0x08040000
 80407c0:	58024400 	.word	0x58024400
 80407c4:	08044e48 	.word	0x08044e48
 80407c8:	2400002c 	.word	0x2400002c
 80407cc:	58022000 	.word	0x58022000

080407d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80407d0:	b580      	push	{r7, lr}
 80407d2:	b09c      	sub	sp, #112	; 0x70
 80407d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80407d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80407da:	224c      	movs	r2, #76	; 0x4c
 80407dc:	2100      	movs	r1, #0
 80407de:	4618      	mov	r0, r3
 80407e0:	f004 fb1e 	bl	8044e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80407e4:	1d3b      	adds	r3, r7, #4
 80407e6:	2220      	movs	r2, #32
 80407e8:	2100      	movs	r1, #0
 80407ea:	4618      	mov	r0, r3
 80407ec:	f004 fb18 	bl	8044e20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80407f0:	2004      	movs	r0, #4
 80407f2:	f000 fde5 	bl	80413c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80407f6:	2300      	movs	r3, #0
 80407f8:	603b      	str	r3, [r7, #0]
 80407fa:	4b3a      	ldr	r3, [pc, #232]	; (80408e4 <SystemClock_Config+0x114>)
 80407fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80407fe:	4a39      	ldr	r2, [pc, #228]	; (80408e4 <SystemClock_Config+0x114>)
 8040800:	f023 0301 	bic.w	r3, r3, #1
 8040804:	62d3      	str	r3, [r2, #44]	; 0x2c
 8040806:	4b37      	ldr	r3, [pc, #220]	; (80408e4 <SystemClock_Config+0x114>)
 8040808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804080a:	f003 0301 	and.w	r3, r3, #1
 804080e:	603b      	str	r3, [r7, #0]
 8040810:	4b35      	ldr	r3, [pc, #212]	; (80408e8 <SystemClock_Config+0x118>)
 8040812:	699b      	ldr	r3, [r3, #24]
 8040814:	4a34      	ldr	r2, [pc, #208]	; (80408e8 <SystemClock_Config+0x118>)
 8040816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 804081a:	6193      	str	r3, [r2, #24]
 804081c:	4b32      	ldr	r3, [pc, #200]	; (80408e8 <SystemClock_Config+0x118>)
 804081e:	699b      	ldr	r3, [r3, #24]
 8040820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040824:	603b      	str	r3, [r7, #0]
 8040826:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040828:	bf00      	nop
 804082a:	4b2f      	ldr	r3, [pc, #188]	; (80408e8 <SystemClock_Config+0x118>)
 804082c:	699b      	ldr	r3, [r3, #24]
 804082e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8040836:	d1f8      	bne.n	804082a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8040838:	4b2c      	ldr	r3, [pc, #176]	; (80408ec <SystemClock_Config+0x11c>)
 804083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804083c:	f023 0303 	bic.w	r3, r3, #3
 8040840:	4a2a      	ldr	r2, [pc, #168]	; (80408ec <SystemClock_Config+0x11c>)
 8040842:	f043 0302 	orr.w	r3, r3, #2
 8040846:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8040848:	230b      	movs	r3, #11
 804084a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804084c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8040852:	2301      	movs	r3, #1
 8040854:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040856:	2340      	movs	r3, #64	; 0x40
 8040858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804085a:	2301      	movs	r3, #1
 804085c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804085e:	2302      	movs	r3, #2
 8040860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040862:	2302      	movs	r3, #2
 8040864:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8040866:	2305      	movs	r3, #5
 8040868:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 804086a:	2330      	movs	r3, #48	; 0x30
 804086c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 804086e:	2302      	movs	r3, #2
 8040870:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8040872:	2305      	movs	r3, #5
 8040874:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040876:	2302      	movs	r3, #2
 8040878:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 804087a:	2308      	movs	r3, #8
 804087c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 804087e:	2300      	movs	r3, #0
 8040880:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040882:	2300      	movs	r3, #0
 8040884:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804088a:	4618      	mov	r0, r3
 804088c:	f000 fdf2 	bl	8041474 <HAL_RCC_OscConfig>
 8040890:	4603      	mov	r3, r0
 8040892:	2b00      	cmp	r3, #0
 8040894:	d001      	beq.n	804089a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8040896:	f000 f91b 	bl	8040ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804089a:	233f      	movs	r3, #63	; 0x3f
 804089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804089e:	2300      	movs	r3, #0
 80408a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80408a2:	2300      	movs	r3, #0
 80408a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80408a6:	2300      	movs	r3, #0
 80408a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80408aa:	2300      	movs	r3, #0
 80408ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80408ae:	2300      	movs	r3, #0
 80408b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80408b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80408b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80408b8:	2300      	movs	r3, #0
 80408ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80408bc:	1d3b      	adds	r3, r7, #4
 80408be:	2100      	movs	r1, #0
 80408c0:	4618      	mov	r0, r3
 80408c2:	f001 fa03 	bl	8041ccc <HAL_RCC_ClockConfig>
 80408c6:	4603      	mov	r3, r0
 80408c8:	2b00      	cmp	r3, #0
 80408ca:	d001      	beq.n	80408d0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80408cc:	f000 f900 	bl	8040ad0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80408d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80408d4:	2100      	movs	r1, #0
 80408d6:	2000      	movs	r0, #0
 80408d8:	f001 fbae 	bl	8042038 <HAL_RCC_MCOConfig>
}
 80408dc:	bf00      	nop
 80408de:	3770      	adds	r7, #112	; 0x70
 80408e0:	46bd      	mov	sp, r7
 80408e2:	bd80      	pop	{r7, pc}
 80408e4:	58000400 	.word	0x58000400
 80408e8:	58024800 	.word	0x58024800
 80408ec:	58024400 	.word	0x58024400

080408f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80408f0:	b580      	push	{r7, lr}
 80408f2:	b0b0      	sub	sp, #192	; 0xc0
 80408f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80408f6:	463b      	mov	r3, r7
 80408f8:	22c0      	movs	r2, #192	; 0xc0
 80408fa:	2100      	movs	r1, #0
 80408fc:	4618      	mov	r0, r3
 80408fe:	f004 fa8f 	bl	8044e20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8040902:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8040906:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8040908:	2302      	movs	r3, #2
 804090a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 804090c:	230c      	movs	r3, #12
 804090e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8040910:	2302      	movs	r3, #2
 8040912:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8040914:	2302      	movs	r3, #2
 8040916:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8040918:	2302      	movs	r3, #2
 804091a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 804091c:	23c0      	movs	r3, #192	; 0xc0
 804091e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8040920:	2320      	movs	r3, #32
 8040922:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8040924:	2300      	movs	r3, #0
 8040926:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8040928:	2300      	movs	r3, #0
 804092a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804092e:	463b      	mov	r3, r7
 8040930:	4618      	mov	r0, r3
 8040932:	f001 fdc1 	bl	80424b8 <HAL_RCCEx_PeriphCLKConfig>
 8040936:	4603      	mov	r3, r0
 8040938:	2b00      	cmp	r3, #0
 804093a:	d001      	beq.n	8040940 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 804093c:	f000 f8c8 	bl	8040ad0 <Error_Handler>
  }
}
 8040940:	bf00      	nop
 8040942:	37c0      	adds	r7, #192	; 0xc0
 8040944:	46bd      	mov	sp, r7
 8040946:	bd80      	pop	{r7, pc}

08040948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040948:	b580      	push	{r7, lr}
 804094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 804094c:	4b22      	ldr	r3, [pc, #136]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 804094e:	4a23      	ldr	r2, [pc, #140]	; (80409dc <MX_USART1_UART_Init+0x94>)
 8040950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8040952:	4b21      	ldr	r3, [pc, #132]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8040958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804095a:	4b1f      	ldr	r3, [pc, #124]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 804095c:	2200      	movs	r2, #0
 804095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040960:	4b1d      	ldr	r3, [pc, #116]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040962:	2200      	movs	r2, #0
 8040964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040966:	4b1c      	ldr	r3, [pc, #112]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040968:	2200      	movs	r2, #0
 804096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 804096c:	4b1a      	ldr	r3, [pc, #104]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 804096e:	220c      	movs	r2, #12
 8040970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040972:	4b19      	ldr	r3, [pc, #100]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040974:	2200      	movs	r2, #0
 8040976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040978:	4b17      	ldr	r3, [pc, #92]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 804097a:	2200      	movs	r2, #0
 804097c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804097e:	4b16      	ldr	r3, [pc, #88]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040980:	2200      	movs	r2, #0
 8040982:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040984:	4b14      	ldr	r3, [pc, #80]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040986:	2200      	movs	r2, #0
 8040988:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 804098a:	4b13      	ldr	r3, [pc, #76]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 804098c:	2200      	movs	r2, #0
 804098e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040990:	4811      	ldr	r0, [pc, #68]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 8040992:	f003 f923 	bl	8043bdc <HAL_UART_Init>
 8040996:	4603      	mov	r3, r0
 8040998:	2b00      	cmp	r3, #0
 804099a:	d001      	beq.n	80409a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 804099c:	f000 f898 	bl	8040ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80409a0:	2100      	movs	r1, #0
 80409a2:	480d      	ldr	r0, [pc, #52]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 80409a4:	f004 f94e 	bl	8044c44 <HAL_UARTEx_SetTxFifoThreshold>
 80409a8:	4603      	mov	r3, r0
 80409aa:	2b00      	cmp	r3, #0
 80409ac:	d001      	beq.n	80409b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80409ae:	f000 f88f 	bl	8040ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80409b2:	2100      	movs	r1, #0
 80409b4:	4808      	ldr	r0, [pc, #32]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 80409b6:	f004 f983 	bl	8044cc0 <HAL_UARTEx_SetRxFifoThreshold>
 80409ba:	4603      	mov	r3, r0
 80409bc:	2b00      	cmp	r3, #0
 80409be:	d001      	beq.n	80409c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80409c0:	f000 f886 	bl	8040ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80409c4:	4804      	ldr	r0, [pc, #16]	; (80409d8 <MX_USART1_UART_Init+0x90>)
 80409c6:	f004 f904 	bl	8044bd2 <HAL_UARTEx_DisableFifoMode>
 80409ca:	4603      	mov	r3, r0
 80409cc:	2b00      	cmp	r3, #0
 80409ce:	d001      	beq.n	80409d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80409d0:	f000 f87e 	bl	8040ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80409d4:	bf00      	nop
 80409d6:	bd80      	pop	{r7, pc}
 80409d8:	2400002c 	.word	0x2400002c
 80409dc:	40011000 	.word	0x40011000

080409e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80409e0:	b580      	push	{r7, lr}
 80409e2:	b08a      	sub	sp, #40	; 0x28
 80409e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80409e6:	f107 0314 	add.w	r3, r7, #20
 80409ea:	2200      	movs	r2, #0
 80409ec:	601a      	str	r2, [r3, #0]
 80409ee:	605a      	str	r2, [r3, #4]
 80409f0:	609a      	str	r2, [r3, #8]
 80409f2:	60da      	str	r2, [r3, #12]
 80409f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80409f6:	4b33      	ldr	r3, [pc, #204]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 80409f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80409fc:	4a31      	ldr	r2, [pc, #196]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 80409fe:	f043 0304 	orr.w	r3, r3, #4
 8040a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a06:	4b2f      	ldr	r3, [pc, #188]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a0c:	f003 0304 	and.w	r3, r3, #4
 8040a10:	613b      	str	r3, [r7, #16]
 8040a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040a14:	4b2b      	ldr	r3, [pc, #172]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a1a:	4a2a      	ldr	r2, [pc, #168]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a1c:	f043 0301 	orr.w	r3, r3, #1
 8040a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a24:	4b27      	ldr	r3, [pc, #156]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a2a:	f003 0301 	and.w	r3, r3, #1
 8040a2e:	60fb      	str	r3, [r7, #12]
 8040a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040a32:	4b24      	ldr	r3, [pc, #144]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a38:	4a22      	ldr	r2, [pc, #136]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a42:	4b20      	ldr	r3, [pc, #128]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8040a4c:	60bb      	str	r3, [r7, #8]
 8040a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040a50:	4b1c      	ldr	r3, [pc, #112]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a56:	4a1b      	ldr	r2, [pc, #108]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a60:	4b18      	ldr	r3, [pc, #96]	; (8040ac4 <MX_GPIO_Init+0xe4>)
 8040a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040a6a:	607b      	str	r3, [r7, #4]
 8040a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 8040a6e:	2201      	movs	r2, #1
 8040a70:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8040a74:	4814      	ldr	r0, [pc, #80]	; (8040ac8 <MX_GPIO_Init+0xe8>)
 8040a76:	f000 fc5b 	bl	8041330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040a80:	2302      	movs	r3, #2
 8040a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040a84:	2300      	movs	r3, #0
 8040a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040a88:	2300      	movs	r3, #0
 8040a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040a8c:	2300      	movs	r3, #0
 8040a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040a90:	f107 0314 	add.w	r3, r7, #20
 8040a94:	4619      	mov	r1, r3
 8040a96:	480d      	ldr	r0, [pc, #52]	; (8040acc <MX_GPIO_Init+0xec>)
 8040a98:	f000 fa9a 	bl	8040fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8040a9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8040aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040aa2:	2301      	movs	r3, #1
 8040aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040aa6:	2300      	movs	r3, #0
 8040aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040aaa:	2300      	movs	r3, #0
 8040aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8040aae:	f107 0314 	add.w	r3, r7, #20
 8040ab2:	4619      	mov	r1, r3
 8040ab4:	4804      	ldr	r0, [pc, #16]	; (8040ac8 <MX_GPIO_Init+0xe8>)
 8040ab6:	f000 fa8b 	bl	8040fd0 <HAL_GPIO_Init>

}
 8040aba:	bf00      	nop
 8040abc:	3728      	adds	r7, #40	; 0x28
 8040abe:	46bd      	mov	sp, r7
 8040ac0:	bd80      	pop	{r7, pc}
 8040ac2:	bf00      	nop
 8040ac4:	58024400 	.word	0x58024400
 8040ac8:	58022000 	.word	0x58022000
 8040acc:	58020000 	.word	0x58020000

08040ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040ad0:	b480      	push	{r7}
 8040ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040ad4:	b672      	cpsid	i
}
 8040ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040ad8:	e7fe      	b.n	8040ad8 <Error_Handler+0x8>
	...

08040adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040adc:	b480      	push	{r7}
 8040ade:	b083      	sub	sp, #12
 8040ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040ae2:	4b0a      	ldr	r3, [pc, #40]	; (8040b0c <HAL_MspInit+0x30>)
 8040ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8040ae8:	4a08      	ldr	r2, [pc, #32]	; (8040b0c <HAL_MspInit+0x30>)
 8040aea:	f043 0302 	orr.w	r3, r3, #2
 8040aee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8040af2:	4b06      	ldr	r3, [pc, #24]	; (8040b0c <HAL_MspInit+0x30>)
 8040af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8040af8:	f003 0302 	and.w	r3, r3, #2
 8040afc:	607b      	str	r3, [r7, #4]
 8040afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040b00:	bf00      	nop
 8040b02:	370c      	adds	r7, #12
 8040b04:	46bd      	mov	sp, r7
 8040b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b0a:	4770      	bx	lr
 8040b0c:	58024400 	.word	0x58024400

08040b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040b10:	b580      	push	{r7, lr}
 8040b12:	b0ba      	sub	sp, #232	; 0xe8
 8040b14:	af00      	add	r7, sp, #0
 8040b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8040b1c:	2200      	movs	r2, #0
 8040b1e:	601a      	str	r2, [r3, #0]
 8040b20:	605a      	str	r2, [r3, #4]
 8040b22:	609a      	str	r2, [r3, #8]
 8040b24:	60da      	str	r2, [r3, #12]
 8040b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040b28:	f107 0314 	add.w	r3, r7, #20
 8040b2c:	22c0      	movs	r2, #192	; 0xc0
 8040b2e:	2100      	movs	r1, #0
 8040b30:	4618      	mov	r0, r3
 8040b32:	f004 f975 	bl	8044e20 <memset>
  if(huart->Instance==USART1)
 8040b36:	687b      	ldr	r3, [r7, #4]
 8040b38:	681b      	ldr	r3, [r3, #0]
 8040b3a:	4a25      	ldr	r2, [pc, #148]	; (8040bd0 <HAL_UART_MspInit+0xc0>)
 8040b3c:	4293      	cmp	r3, r2
 8040b3e:	d142      	bne.n	8040bc6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040b40:	2301      	movs	r3, #1
 8040b42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040b44:	2300      	movs	r3, #0
 8040b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040b4a:	f107 0314 	add.w	r3, r7, #20
 8040b4e:	4618      	mov	r0, r3
 8040b50:	f001 fcb2 	bl	80424b8 <HAL_RCCEx_PeriphCLKConfig>
 8040b54:	4603      	mov	r3, r0
 8040b56:	2b00      	cmp	r3, #0
 8040b58:	d001      	beq.n	8040b5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8040b5a:	f7ff ffb9 	bl	8040ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040b5e:	4b1d      	ldr	r3, [pc, #116]	; (8040bd4 <HAL_UART_MspInit+0xc4>)
 8040b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8040b64:	4a1b      	ldr	r2, [pc, #108]	; (8040bd4 <HAL_UART_MspInit+0xc4>)
 8040b66:	f043 0310 	orr.w	r3, r3, #16
 8040b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8040b6e:	4b19      	ldr	r3, [pc, #100]	; (8040bd4 <HAL_UART_MspInit+0xc4>)
 8040b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8040b74:	f003 0310 	and.w	r3, r3, #16
 8040b78:	613b      	str	r3, [r7, #16]
 8040b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040b7c:	4b15      	ldr	r3, [pc, #84]	; (8040bd4 <HAL_UART_MspInit+0xc4>)
 8040b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040b82:	4a14      	ldr	r2, [pc, #80]	; (8040bd4 <HAL_UART_MspInit+0xc4>)
 8040b84:	f043 0301 	orr.w	r3, r3, #1
 8040b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040b8c:	4b11      	ldr	r3, [pc, #68]	; (8040bd4 <HAL_UART_MspInit+0xc4>)
 8040b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040b92:	f003 0301 	and.w	r3, r3, #1
 8040b96:	60fb      	str	r3, [r7, #12]
 8040b98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040b9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040ba2:	2302      	movs	r3, #2
 8040ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ba8:	2300      	movs	r3, #0
 8040baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040bae:	2300      	movs	r3, #0
 8040bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040bb4:	2307      	movs	r3, #7
 8040bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040bba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8040bbe:	4619      	mov	r1, r3
 8040bc0:	4805      	ldr	r0, [pc, #20]	; (8040bd8 <HAL_UART_MspInit+0xc8>)
 8040bc2:	f000 fa05 	bl	8040fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040bc6:	bf00      	nop
 8040bc8:	37e8      	adds	r7, #232	; 0xe8
 8040bca:	46bd      	mov	sp, r7
 8040bcc:	bd80      	pop	{r7, pc}
 8040bce:	bf00      	nop
 8040bd0:	40011000 	.word	0x40011000
 8040bd4:	58024400 	.word	0x58024400
 8040bd8:	58020000 	.word	0x58020000

08040bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040bdc:	b480      	push	{r7}
 8040bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040be0:	e7fe      	b.n	8040be0 <NMI_Handler+0x4>

08040be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040be2:	b480      	push	{r7}
 8040be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040be6:	e7fe      	b.n	8040be6 <HardFault_Handler+0x4>

08040be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040be8:	b480      	push	{r7}
 8040bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040bec:	e7fe      	b.n	8040bec <MemManage_Handler+0x4>

08040bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040bee:	b480      	push	{r7}
 8040bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040bf2:	e7fe      	b.n	8040bf2 <BusFault_Handler+0x4>

08040bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040bf4:	b480      	push	{r7}
 8040bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040bf8:	e7fe      	b.n	8040bf8 <UsageFault_Handler+0x4>

08040bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040bfa:	b480      	push	{r7}
 8040bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040bfe:	bf00      	nop
 8040c00:	46bd      	mov	sp, r7
 8040c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c06:	4770      	bx	lr

08040c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040c08:	b480      	push	{r7}
 8040c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040c0c:	bf00      	nop
 8040c0e:	46bd      	mov	sp, r7
 8040c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c14:	4770      	bx	lr

08040c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040c16:	b480      	push	{r7}
 8040c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040c1a:	bf00      	nop
 8040c1c:	46bd      	mov	sp, r7
 8040c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c22:	4770      	bx	lr

08040c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040c24:	b580      	push	{r7, lr}
 8040c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040c28:	f000 f89e 	bl	8040d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040c2c:	bf00      	nop
 8040c2e:	bd80      	pop	{r7, pc}

08040c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040c68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040c34:	f7ff fccc 	bl	80405d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040c38:	480c      	ldr	r0, [pc, #48]	; (8040c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040c3a:	490d      	ldr	r1, [pc, #52]	; (8040c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040c3c:	4a0d      	ldr	r2, [pc, #52]	; (8040c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040c40:	e002      	b.n	8040c48 <LoopCopyDataInit>

08040c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040c46:	3304      	adds	r3, #4

08040c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040c4c:	d3f9      	bcc.n	8040c42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040c4e:	4a0a      	ldr	r2, [pc, #40]	; (8040c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040c50:	4c0a      	ldr	r4, [pc, #40]	; (8040c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8040c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040c54:	e001      	b.n	8040c5a <LoopFillZerobss>

08040c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040c58:	3204      	adds	r2, #4

08040c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040c5c:	d3fb      	bcc.n	8040c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040c5e:	f004 f8bb 	bl	8044dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040c62:	f7ff fd4f 	bl	8040704 <main>
  bx  lr
 8040c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040c68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8040c6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040c70:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8040c74:	08044ea0 	.word	0x08044ea0
  ldr r2, =_sbss
 8040c78:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8040c7c:	240000c0 	.word	0x240000c0

08040c80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040c80:	e7fe      	b.n	8040c80 <ADC3_IRQHandler>
	...

08040c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040c84:	b580      	push	{r7, lr}
 8040c86:	b082      	sub	sp, #8
 8040c88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040c8a:	2003      	movs	r0, #3
 8040c8c:	f000 f96e 	bl	8040f6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040c90:	f001 fa3c 	bl	804210c <HAL_RCC_GetSysClockFreq>
 8040c94:	4602      	mov	r2, r0
 8040c96:	4b15      	ldr	r3, [pc, #84]	; (8040cec <HAL_Init+0x68>)
 8040c98:	699b      	ldr	r3, [r3, #24]
 8040c9a:	0a1b      	lsrs	r3, r3, #8
 8040c9c:	f003 030f 	and.w	r3, r3, #15
 8040ca0:	4913      	ldr	r1, [pc, #76]	; (8040cf0 <HAL_Init+0x6c>)
 8040ca2:	5ccb      	ldrb	r3, [r1, r3]
 8040ca4:	f003 031f 	and.w	r3, r3, #31
 8040ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8040cac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040cae:	4b0f      	ldr	r3, [pc, #60]	; (8040cec <HAL_Init+0x68>)
 8040cb0:	699b      	ldr	r3, [r3, #24]
 8040cb2:	f003 030f 	and.w	r3, r3, #15
 8040cb6:	4a0e      	ldr	r2, [pc, #56]	; (8040cf0 <HAL_Init+0x6c>)
 8040cb8:	5cd3      	ldrb	r3, [r2, r3]
 8040cba:	f003 031f 	and.w	r3, r3, #31
 8040cbe:	687a      	ldr	r2, [r7, #4]
 8040cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8040cc4:	4a0b      	ldr	r2, [pc, #44]	; (8040cf4 <HAL_Init+0x70>)
 8040cc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8040cc8:	4a0b      	ldr	r2, [pc, #44]	; (8040cf8 <HAL_Init+0x74>)
 8040cca:	687b      	ldr	r3, [r7, #4]
 8040ccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040cce:	2000      	movs	r0, #0
 8040cd0:	f000 f814 	bl	8040cfc <HAL_InitTick>
 8040cd4:	4603      	mov	r3, r0
 8040cd6:	2b00      	cmp	r3, #0
 8040cd8:	d001      	beq.n	8040cde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8040cda:	2301      	movs	r3, #1
 8040cdc:	e002      	b.n	8040ce4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8040cde:	f7ff fefd 	bl	8040adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040ce2:	2300      	movs	r3, #0
}
 8040ce4:	4618      	mov	r0, r3
 8040ce6:	3708      	adds	r7, #8
 8040ce8:	46bd      	mov	sp, r7
 8040cea:	bd80      	pop	{r7, pc}
 8040cec:	58024400 	.word	0x58024400
 8040cf0:	08044e58 	.word	0x08044e58
 8040cf4:	24000004 	.word	0x24000004
 8040cf8:	24000000 	.word	0x24000000

08040cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040cfc:	b580      	push	{r7, lr}
 8040cfe:	b082      	sub	sp, #8
 8040d00:	af00      	add	r7, sp, #0
 8040d02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8040d04:	4b15      	ldr	r3, [pc, #84]	; (8040d5c <HAL_InitTick+0x60>)
 8040d06:	781b      	ldrb	r3, [r3, #0]
 8040d08:	2b00      	cmp	r3, #0
 8040d0a:	d101      	bne.n	8040d10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8040d0c:	2301      	movs	r3, #1
 8040d0e:	e021      	b.n	8040d54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8040d10:	4b13      	ldr	r3, [pc, #76]	; (8040d60 <HAL_InitTick+0x64>)
 8040d12:	681a      	ldr	r2, [r3, #0]
 8040d14:	4b11      	ldr	r3, [pc, #68]	; (8040d5c <HAL_InitTick+0x60>)
 8040d16:	781b      	ldrb	r3, [r3, #0]
 8040d18:	4619      	mov	r1, r3
 8040d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8040d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8040d26:	4618      	mov	r0, r3
 8040d28:	f000 f945 	bl	8040fb6 <HAL_SYSTICK_Config>
 8040d2c:	4603      	mov	r3, r0
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	d001      	beq.n	8040d36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8040d32:	2301      	movs	r3, #1
 8040d34:	e00e      	b.n	8040d54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040d36:	687b      	ldr	r3, [r7, #4]
 8040d38:	2b0f      	cmp	r3, #15
 8040d3a:	d80a      	bhi.n	8040d52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040d3c:	2200      	movs	r2, #0
 8040d3e:	6879      	ldr	r1, [r7, #4]
 8040d40:	f04f 30ff 	mov.w	r0, #4294967295
 8040d44:	f000 f91d 	bl	8040f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040d48:	4a06      	ldr	r2, [pc, #24]	; (8040d64 <HAL_InitTick+0x68>)
 8040d4a:	687b      	ldr	r3, [r7, #4]
 8040d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040d4e:	2300      	movs	r3, #0
 8040d50:	e000      	b.n	8040d54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8040d52:	2301      	movs	r3, #1
}
 8040d54:	4618      	mov	r0, r3
 8040d56:	3708      	adds	r7, #8
 8040d58:	46bd      	mov	sp, r7
 8040d5a:	bd80      	pop	{r7, pc}
 8040d5c:	2400000c 	.word	0x2400000c
 8040d60:	24000000 	.word	0x24000000
 8040d64:	24000008 	.word	0x24000008

08040d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040d68:	b480      	push	{r7}
 8040d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040d6c:	4b06      	ldr	r3, [pc, #24]	; (8040d88 <HAL_IncTick+0x20>)
 8040d6e:	781b      	ldrb	r3, [r3, #0]
 8040d70:	461a      	mov	r2, r3
 8040d72:	4b06      	ldr	r3, [pc, #24]	; (8040d8c <HAL_IncTick+0x24>)
 8040d74:	681b      	ldr	r3, [r3, #0]
 8040d76:	4413      	add	r3, r2
 8040d78:	4a04      	ldr	r2, [pc, #16]	; (8040d8c <HAL_IncTick+0x24>)
 8040d7a:	6013      	str	r3, [r2, #0]
}
 8040d7c:	bf00      	nop
 8040d7e:	46bd      	mov	sp, r7
 8040d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d84:	4770      	bx	lr
 8040d86:	bf00      	nop
 8040d88:	2400000c 	.word	0x2400000c
 8040d8c:	240000bc 	.word	0x240000bc

08040d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040d90:	b480      	push	{r7}
 8040d92:	af00      	add	r7, sp, #0
  return uwTick;
 8040d94:	4b03      	ldr	r3, [pc, #12]	; (8040da4 <HAL_GetTick+0x14>)
 8040d96:	681b      	ldr	r3, [r3, #0]
}
 8040d98:	4618      	mov	r0, r3
 8040d9a:	46bd      	mov	sp, r7
 8040d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040da0:	4770      	bx	lr
 8040da2:	bf00      	nop
 8040da4:	240000bc 	.word	0x240000bc

08040da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040da8:	b580      	push	{r7, lr}
 8040daa:	b084      	sub	sp, #16
 8040dac:	af00      	add	r7, sp, #0
 8040dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040db0:	f7ff ffee 	bl	8040d90 <HAL_GetTick>
 8040db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040db6:	687b      	ldr	r3, [r7, #4]
 8040db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040dba:	68fb      	ldr	r3, [r7, #12]
 8040dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040dc0:	d005      	beq.n	8040dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040dc2:	4b0a      	ldr	r3, [pc, #40]	; (8040dec <HAL_Delay+0x44>)
 8040dc4:	781b      	ldrb	r3, [r3, #0]
 8040dc6:	461a      	mov	r2, r3
 8040dc8:	68fb      	ldr	r3, [r7, #12]
 8040dca:	4413      	add	r3, r2
 8040dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040dce:	bf00      	nop
 8040dd0:	f7ff ffde 	bl	8040d90 <HAL_GetTick>
 8040dd4:	4602      	mov	r2, r0
 8040dd6:	68bb      	ldr	r3, [r7, #8]
 8040dd8:	1ad3      	subs	r3, r2, r3
 8040dda:	68fa      	ldr	r2, [r7, #12]
 8040ddc:	429a      	cmp	r2, r3
 8040dde:	d8f7      	bhi.n	8040dd0 <HAL_Delay+0x28>
  {
  }
}
 8040de0:	bf00      	nop
 8040de2:	bf00      	nop
 8040de4:	3710      	adds	r7, #16
 8040de6:	46bd      	mov	sp, r7
 8040de8:	bd80      	pop	{r7, pc}
 8040dea:	bf00      	nop
 8040dec:	2400000c 	.word	0x2400000c

08040df0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8040df0:	b480      	push	{r7}
 8040df2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8040df4:	4b03      	ldr	r3, [pc, #12]	; (8040e04 <HAL_GetREVID+0x14>)
 8040df6:	681b      	ldr	r3, [r3, #0]
 8040df8:	0c1b      	lsrs	r3, r3, #16
}
 8040dfa:	4618      	mov	r0, r3
 8040dfc:	46bd      	mov	sp, r7
 8040dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e02:	4770      	bx	lr
 8040e04:	5c001000 	.word	0x5c001000

08040e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040e08:	b480      	push	{r7}
 8040e0a:	b085      	sub	sp, #20
 8040e0c:	af00      	add	r7, sp, #0
 8040e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040e10:	687b      	ldr	r3, [r7, #4]
 8040e12:	f003 0307 	and.w	r3, r3, #7
 8040e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040e18:	4b0b      	ldr	r3, [pc, #44]	; (8040e48 <__NVIC_SetPriorityGrouping+0x40>)
 8040e1a:	68db      	ldr	r3, [r3, #12]
 8040e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040e1e:	68ba      	ldr	r2, [r7, #8]
 8040e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040e24:	4013      	ands	r3, r2
 8040e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040e28:	68fb      	ldr	r3, [r7, #12]
 8040e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040e2c:	68bb      	ldr	r3, [r7, #8]
 8040e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040e30:	4b06      	ldr	r3, [pc, #24]	; (8040e4c <__NVIC_SetPriorityGrouping+0x44>)
 8040e32:	4313      	orrs	r3, r2
 8040e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040e36:	4a04      	ldr	r2, [pc, #16]	; (8040e48 <__NVIC_SetPriorityGrouping+0x40>)
 8040e38:	68bb      	ldr	r3, [r7, #8]
 8040e3a:	60d3      	str	r3, [r2, #12]
}
 8040e3c:	bf00      	nop
 8040e3e:	3714      	adds	r7, #20
 8040e40:	46bd      	mov	sp, r7
 8040e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e46:	4770      	bx	lr
 8040e48:	e000ed00 	.word	0xe000ed00
 8040e4c:	05fa0000 	.word	0x05fa0000

08040e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040e50:	b480      	push	{r7}
 8040e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040e54:	4b04      	ldr	r3, [pc, #16]	; (8040e68 <__NVIC_GetPriorityGrouping+0x18>)
 8040e56:	68db      	ldr	r3, [r3, #12]
 8040e58:	0a1b      	lsrs	r3, r3, #8
 8040e5a:	f003 0307 	and.w	r3, r3, #7
}
 8040e5e:	4618      	mov	r0, r3
 8040e60:	46bd      	mov	sp, r7
 8040e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e66:	4770      	bx	lr
 8040e68:	e000ed00 	.word	0xe000ed00

08040e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040e6c:	b480      	push	{r7}
 8040e6e:	b083      	sub	sp, #12
 8040e70:	af00      	add	r7, sp, #0
 8040e72:	4603      	mov	r3, r0
 8040e74:	6039      	str	r1, [r7, #0]
 8040e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8040e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040e7c:	2b00      	cmp	r3, #0
 8040e7e:	db0a      	blt.n	8040e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e80:	683b      	ldr	r3, [r7, #0]
 8040e82:	b2da      	uxtb	r2, r3
 8040e84:	490c      	ldr	r1, [pc, #48]	; (8040eb8 <__NVIC_SetPriority+0x4c>)
 8040e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040e8a:	0112      	lsls	r2, r2, #4
 8040e8c:	b2d2      	uxtb	r2, r2
 8040e8e:	440b      	add	r3, r1
 8040e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040e94:	e00a      	b.n	8040eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e96:	683b      	ldr	r3, [r7, #0]
 8040e98:	b2da      	uxtb	r2, r3
 8040e9a:	4908      	ldr	r1, [pc, #32]	; (8040ebc <__NVIC_SetPriority+0x50>)
 8040e9c:	88fb      	ldrh	r3, [r7, #6]
 8040e9e:	f003 030f 	and.w	r3, r3, #15
 8040ea2:	3b04      	subs	r3, #4
 8040ea4:	0112      	lsls	r2, r2, #4
 8040ea6:	b2d2      	uxtb	r2, r2
 8040ea8:	440b      	add	r3, r1
 8040eaa:	761a      	strb	r2, [r3, #24]
}
 8040eac:	bf00      	nop
 8040eae:	370c      	adds	r7, #12
 8040eb0:	46bd      	mov	sp, r7
 8040eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eb6:	4770      	bx	lr
 8040eb8:	e000e100 	.word	0xe000e100
 8040ebc:	e000ed00 	.word	0xe000ed00

08040ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040ec0:	b480      	push	{r7}
 8040ec2:	b089      	sub	sp, #36	; 0x24
 8040ec4:	af00      	add	r7, sp, #0
 8040ec6:	60f8      	str	r0, [r7, #12]
 8040ec8:	60b9      	str	r1, [r7, #8]
 8040eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040ecc:	68fb      	ldr	r3, [r7, #12]
 8040ece:	f003 0307 	and.w	r3, r3, #7
 8040ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040ed4:	69fb      	ldr	r3, [r7, #28]
 8040ed6:	f1c3 0307 	rsb	r3, r3, #7
 8040eda:	2b04      	cmp	r3, #4
 8040edc:	bf28      	it	cs
 8040ede:	2304      	movcs	r3, #4
 8040ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040ee2:	69fb      	ldr	r3, [r7, #28]
 8040ee4:	3304      	adds	r3, #4
 8040ee6:	2b06      	cmp	r3, #6
 8040ee8:	d902      	bls.n	8040ef0 <NVIC_EncodePriority+0x30>
 8040eea:	69fb      	ldr	r3, [r7, #28]
 8040eec:	3b03      	subs	r3, #3
 8040eee:	e000      	b.n	8040ef2 <NVIC_EncodePriority+0x32>
 8040ef0:	2300      	movs	r3, #0
 8040ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8040ef8:	69bb      	ldr	r3, [r7, #24]
 8040efa:	fa02 f303 	lsl.w	r3, r2, r3
 8040efe:	43da      	mvns	r2, r3
 8040f00:	68bb      	ldr	r3, [r7, #8]
 8040f02:	401a      	ands	r2, r3
 8040f04:	697b      	ldr	r3, [r7, #20]
 8040f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040f08:	f04f 31ff 	mov.w	r1, #4294967295
 8040f0c:	697b      	ldr	r3, [r7, #20]
 8040f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8040f12:	43d9      	mvns	r1, r3
 8040f14:	687b      	ldr	r3, [r7, #4]
 8040f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040f18:	4313      	orrs	r3, r2
         );
}
 8040f1a:	4618      	mov	r0, r3
 8040f1c:	3724      	adds	r7, #36	; 0x24
 8040f1e:	46bd      	mov	sp, r7
 8040f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f24:	4770      	bx	lr
	...

08040f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040f28:	b580      	push	{r7, lr}
 8040f2a:	b082      	sub	sp, #8
 8040f2c:	af00      	add	r7, sp, #0
 8040f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040f30:	687b      	ldr	r3, [r7, #4]
 8040f32:	3b01      	subs	r3, #1
 8040f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040f38:	d301      	bcc.n	8040f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040f3a:	2301      	movs	r3, #1
 8040f3c:	e00f      	b.n	8040f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040f3e:	4a0a      	ldr	r2, [pc, #40]	; (8040f68 <SysTick_Config+0x40>)
 8040f40:	687b      	ldr	r3, [r7, #4]
 8040f42:	3b01      	subs	r3, #1
 8040f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040f46:	210f      	movs	r1, #15
 8040f48:	f04f 30ff 	mov.w	r0, #4294967295
 8040f4c:	f7ff ff8e 	bl	8040e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040f50:	4b05      	ldr	r3, [pc, #20]	; (8040f68 <SysTick_Config+0x40>)
 8040f52:	2200      	movs	r2, #0
 8040f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040f56:	4b04      	ldr	r3, [pc, #16]	; (8040f68 <SysTick_Config+0x40>)
 8040f58:	2207      	movs	r2, #7
 8040f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040f5c:	2300      	movs	r3, #0
}
 8040f5e:	4618      	mov	r0, r3
 8040f60:	3708      	adds	r7, #8
 8040f62:	46bd      	mov	sp, r7
 8040f64:	bd80      	pop	{r7, pc}
 8040f66:	bf00      	nop
 8040f68:	e000e010 	.word	0xe000e010

08040f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040f6c:	b580      	push	{r7, lr}
 8040f6e:	b082      	sub	sp, #8
 8040f70:	af00      	add	r7, sp, #0
 8040f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040f74:	6878      	ldr	r0, [r7, #4]
 8040f76:	f7ff ff47 	bl	8040e08 <__NVIC_SetPriorityGrouping>
}
 8040f7a:	bf00      	nop
 8040f7c:	3708      	adds	r7, #8
 8040f7e:	46bd      	mov	sp, r7
 8040f80:	bd80      	pop	{r7, pc}

08040f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f82:	b580      	push	{r7, lr}
 8040f84:	b086      	sub	sp, #24
 8040f86:	af00      	add	r7, sp, #0
 8040f88:	4603      	mov	r3, r0
 8040f8a:	60b9      	str	r1, [r7, #8]
 8040f8c:	607a      	str	r2, [r7, #4]
 8040f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040f90:	f7ff ff5e 	bl	8040e50 <__NVIC_GetPriorityGrouping>
 8040f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040f96:	687a      	ldr	r2, [r7, #4]
 8040f98:	68b9      	ldr	r1, [r7, #8]
 8040f9a:	6978      	ldr	r0, [r7, #20]
 8040f9c:	f7ff ff90 	bl	8040ec0 <NVIC_EncodePriority>
 8040fa0:	4602      	mov	r2, r0
 8040fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8040fa6:	4611      	mov	r1, r2
 8040fa8:	4618      	mov	r0, r3
 8040faa:	f7ff ff5f 	bl	8040e6c <__NVIC_SetPriority>
}
 8040fae:	bf00      	nop
 8040fb0:	3718      	adds	r7, #24
 8040fb2:	46bd      	mov	sp, r7
 8040fb4:	bd80      	pop	{r7, pc}

08040fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040fb6:	b580      	push	{r7, lr}
 8040fb8:	b082      	sub	sp, #8
 8040fba:	af00      	add	r7, sp, #0
 8040fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040fbe:	6878      	ldr	r0, [r7, #4]
 8040fc0:	f7ff ffb2 	bl	8040f28 <SysTick_Config>
 8040fc4:	4603      	mov	r3, r0
}
 8040fc6:	4618      	mov	r0, r3
 8040fc8:	3708      	adds	r7, #8
 8040fca:	46bd      	mov	sp, r7
 8040fcc:	bd80      	pop	{r7, pc}
	...

08040fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040fd0:	b480      	push	{r7}
 8040fd2:	b089      	sub	sp, #36	; 0x24
 8040fd4:	af00      	add	r7, sp, #0
 8040fd6:	6078      	str	r0, [r7, #4]
 8040fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8040fda:	2300      	movs	r3, #0
 8040fdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8040fde:	4b89      	ldr	r3, [pc, #548]	; (8041204 <HAL_GPIO_Init+0x234>)
 8040fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8040fe2:	e194      	b.n	804130e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040fe4:	683b      	ldr	r3, [r7, #0]
 8040fe6:	681a      	ldr	r2, [r3, #0]
 8040fe8:	2101      	movs	r1, #1
 8040fea:	69fb      	ldr	r3, [r7, #28]
 8040fec:	fa01 f303 	lsl.w	r3, r1, r3
 8040ff0:	4013      	ands	r3, r2
 8040ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8040ff4:	693b      	ldr	r3, [r7, #16]
 8040ff6:	2b00      	cmp	r3, #0
 8040ff8:	f000 8186 	beq.w	8041308 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040ffc:	683b      	ldr	r3, [r7, #0]
 8040ffe:	685b      	ldr	r3, [r3, #4]
 8041000:	f003 0303 	and.w	r3, r3, #3
 8041004:	2b01      	cmp	r3, #1
 8041006:	d005      	beq.n	8041014 <HAL_GPIO_Init+0x44>
 8041008:	683b      	ldr	r3, [r7, #0]
 804100a:	685b      	ldr	r3, [r3, #4]
 804100c:	f003 0303 	and.w	r3, r3, #3
 8041010:	2b02      	cmp	r3, #2
 8041012:	d130      	bne.n	8041076 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041014:	687b      	ldr	r3, [r7, #4]
 8041016:	689b      	ldr	r3, [r3, #8]
 8041018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804101a:	69fb      	ldr	r3, [r7, #28]
 804101c:	005b      	lsls	r3, r3, #1
 804101e:	2203      	movs	r2, #3
 8041020:	fa02 f303 	lsl.w	r3, r2, r3
 8041024:	43db      	mvns	r3, r3
 8041026:	69ba      	ldr	r2, [r7, #24]
 8041028:	4013      	ands	r3, r2
 804102a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 804102c:	683b      	ldr	r3, [r7, #0]
 804102e:	68da      	ldr	r2, [r3, #12]
 8041030:	69fb      	ldr	r3, [r7, #28]
 8041032:	005b      	lsls	r3, r3, #1
 8041034:	fa02 f303 	lsl.w	r3, r2, r3
 8041038:	69ba      	ldr	r2, [r7, #24]
 804103a:	4313      	orrs	r3, r2
 804103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 804103e:	687b      	ldr	r3, [r7, #4]
 8041040:	69ba      	ldr	r2, [r7, #24]
 8041042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041044:	687b      	ldr	r3, [r7, #4]
 8041046:	685b      	ldr	r3, [r3, #4]
 8041048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804104a:	2201      	movs	r2, #1
 804104c:	69fb      	ldr	r3, [r7, #28]
 804104e:	fa02 f303 	lsl.w	r3, r2, r3
 8041052:	43db      	mvns	r3, r3
 8041054:	69ba      	ldr	r2, [r7, #24]
 8041056:	4013      	ands	r3, r2
 8041058:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 804105a:	683b      	ldr	r3, [r7, #0]
 804105c:	685b      	ldr	r3, [r3, #4]
 804105e:	091b      	lsrs	r3, r3, #4
 8041060:	f003 0201 	and.w	r2, r3, #1
 8041064:	69fb      	ldr	r3, [r7, #28]
 8041066:	fa02 f303 	lsl.w	r3, r2, r3
 804106a:	69ba      	ldr	r2, [r7, #24]
 804106c:	4313      	orrs	r3, r2
 804106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041070:	687b      	ldr	r3, [r7, #4]
 8041072:	69ba      	ldr	r2, [r7, #24]
 8041074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8041076:	683b      	ldr	r3, [r7, #0]
 8041078:	685b      	ldr	r3, [r3, #4]
 804107a:	f003 0303 	and.w	r3, r3, #3
 804107e:	2b03      	cmp	r3, #3
 8041080:	d017      	beq.n	80410b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041082:	687b      	ldr	r3, [r7, #4]
 8041084:	68db      	ldr	r3, [r3, #12]
 8041086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041088:	69fb      	ldr	r3, [r7, #28]
 804108a:	005b      	lsls	r3, r3, #1
 804108c:	2203      	movs	r2, #3
 804108e:	fa02 f303 	lsl.w	r3, r2, r3
 8041092:	43db      	mvns	r3, r3
 8041094:	69ba      	ldr	r2, [r7, #24]
 8041096:	4013      	ands	r3, r2
 8041098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804109a:	683b      	ldr	r3, [r7, #0]
 804109c:	689a      	ldr	r2, [r3, #8]
 804109e:	69fb      	ldr	r3, [r7, #28]
 80410a0:	005b      	lsls	r3, r3, #1
 80410a2:	fa02 f303 	lsl.w	r3, r2, r3
 80410a6:	69ba      	ldr	r2, [r7, #24]
 80410a8:	4313      	orrs	r3, r2
 80410aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80410ac:	687b      	ldr	r3, [r7, #4]
 80410ae:	69ba      	ldr	r2, [r7, #24]
 80410b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80410b2:	683b      	ldr	r3, [r7, #0]
 80410b4:	685b      	ldr	r3, [r3, #4]
 80410b6:	f003 0303 	and.w	r3, r3, #3
 80410ba:	2b02      	cmp	r3, #2
 80410bc:	d123      	bne.n	8041106 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80410be:	69fb      	ldr	r3, [r7, #28]
 80410c0:	08da      	lsrs	r2, r3, #3
 80410c2:	687b      	ldr	r3, [r7, #4]
 80410c4:	3208      	adds	r2, #8
 80410c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80410ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80410cc:	69fb      	ldr	r3, [r7, #28]
 80410ce:	f003 0307 	and.w	r3, r3, #7
 80410d2:	009b      	lsls	r3, r3, #2
 80410d4:	220f      	movs	r2, #15
 80410d6:	fa02 f303 	lsl.w	r3, r2, r3
 80410da:	43db      	mvns	r3, r3
 80410dc:	69ba      	ldr	r2, [r7, #24]
 80410de:	4013      	ands	r3, r2
 80410e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80410e2:	683b      	ldr	r3, [r7, #0]
 80410e4:	691a      	ldr	r2, [r3, #16]
 80410e6:	69fb      	ldr	r3, [r7, #28]
 80410e8:	f003 0307 	and.w	r3, r3, #7
 80410ec:	009b      	lsls	r3, r3, #2
 80410ee:	fa02 f303 	lsl.w	r3, r2, r3
 80410f2:	69ba      	ldr	r2, [r7, #24]
 80410f4:	4313      	orrs	r3, r2
 80410f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80410f8:	69fb      	ldr	r3, [r7, #28]
 80410fa:	08da      	lsrs	r2, r3, #3
 80410fc:	687b      	ldr	r3, [r7, #4]
 80410fe:	3208      	adds	r2, #8
 8041100:	69b9      	ldr	r1, [r7, #24]
 8041102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041106:	687b      	ldr	r3, [r7, #4]
 8041108:	681b      	ldr	r3, [r3, #0]
 804110a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 804110c:	69fb      	ldr	r3, [r7, #28]
 804110e:	005b      	lsls	r3, r3, #1
 8041110:	2203      	movs	r2, #3
 8041112:	fa02 f303 	lsl.w	r3, r2, r3
 8041116:	43db      	mvns	r3, r3
 8041118:	69ba      	ldr	r2, [r7, #24]
 804111a:	4013      	ands	r3, r2
 804111c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804111e:	683b      	ldr	r3, [r7, #0]
 8041120:	685b      	ldr	r3, [r3, #4]
 8041122:	f003 0203 	and.w	r2, r3, #3
 8041126:	69fb      	ldr	r3, [r7, #28]
 8041128:	005b      	lsls	r3, r3, #1
 804112a:	fa02 f303 	lsl.w	r3, r2, r3
 804112e:	69ba      	ldr	r2, [r7, #24]
 8041130:	4313      	orrs	r3, r2
 8041132:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041134:	687b      	ldr	r3, [r7, #4]
 8041136:	69ba      	ldr	r2, [r7, #24]
 8041138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 804113a:	683b      	ldr	r3, [r7, #0]
 804113c:	685b      	ldr	r3, [r3, #4]
 804113e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8041142:	2b00      	cmp	r3, #0
 8041144:	f000 80e0 	beq.w	8041308 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041148:	4b2f      	ldr	r3, [pc, #188]	; (8041208 <HAL_GPIO_Init+0x238>)
 804114a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 804114e:	4a2e      	ldr	r2, [pc, #184]	; (8041208 <HAL_GPIO_Init+0x238>)
 8041150:	f043 0302 	orr.w	r3, r3, #2
 8041154:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8041158:	4b2b      	ldr	r3, [pc, #172]	; (8041208 <HAL_GPIO_Init+0x238>)
 804115a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 804115e:	f003 0302 	and.w	r3, r3, #2
 8041162:	60fb      	str	r3, [r7, #12]
 8041164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8041166:	4a29      	ldr	r2, [pc, #164]	; (804120c <HAL_GPIO_Init+0x23c>)
 8041168:	69fb      	ldr	r3, [r7, #28]
 804116a:	089b      	lsrs	r3, r3, #2
 804116c:	3302      	adds	r3, #2
 804116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8041174:	69fb      	ldr	r3, [r7, #28]
 8041176:	f003 0303 	and.w	r3, r3, #3
 804117a:	009b      	lsls	r3, r3, #2
 804117c:	220f      	movs	r2, #15
 804117e:	fa02 f303 	lsl.w	r3, r2, r3
 8041182:	43db      	mvns	r3, r3
 8041184:	69ba      	ldr	r2, [r7, #24]
 8041186:	4013      	ands	r3, r2
 8041188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 804118a:	687b      	ldr	r3, [r7, #4]
 804118c:	4a20      	ldr	r2, [pc, #128]	; (8041210 <HAL_GPIO_Init+0x240>)
 804118e:	4293      	cmp	r3, r2
 8041190:	d052      	beq.n	8041238 <HAL_GPIO_Init+0x268>
 8041192:	687b      	ldr	r3, [r7, #4]
 8041194:	4a1f      	ldr	r2, [pc, #124]	; (8041214 <HAL_GPIO_Init+0x244>)
 8041196:	4293      	cmp	r3, r2
 8041198:	d031      	beq.n	80411fe <HAL_GPIO_Init+0x22e>
 804119a:	687b      	ldr	r3, [r7, #4]
 804119c:	4a1e      	ldr	r2, [pc, #120]	; (8041218 <HAL_GPIO_Init+0x248>)
 804119e:	4293      	cmp	r3, r2
 80411a0:	d02b      	beq.n	80411fa <HAL_GPIO_Init+0x22a>
 80411a2:	687b      	ldr	r3, [r7, #4]
 80411a4:	4a1d      	ldr	r2, [pc, #116]	; (804121c <HAL_GPIO_Init+0x24c>)
 80411a6:	4293      	cmp	r3, r2
 80411a8:	d025      	beq.n	80411f6 <HAL_GPIO_Init+0x226>
 80411aa:	687b      	ldr	r3, [r7, #4]
 80411ac:	4a1c      	ldr	r2, [pc, #112]	; (8041220 <HAL_GPIO_Init+0x250>)
 80411ae:	4293      	cmp	r3, r2
 80411b0:	d01f      	beq.n	80411f2 <HAL_GPIO_Init+0x222>
 80411b2:	687b      	ldr	r3, [r7, #4]
 80411b4:	4a1b      	ldr	r2, [pc, #108]	; (8041224 <HAL_GPIO_Init+0x254>)
 80411b6:	4293      	cmp	r3, r2
 80411b8:	d019      	beq.n	80411ee <HAL_GPIO_Init+0x21e>
 80411ba:	687b      	ldr	r3, [r7, #4]
 80411bc:	4a1a      	ldr	r2, [pc, #104]	; (8041228 <HAL_GPIO_Init+0x258>)
 80411be:	4293      	cmp	r3, r2
 80411c0:	d013      	beq.n	80411ea <HAL_GPIO_Init+0x21a>
 80411c2:	687b      	ldr	r3, [r7, #4]
 80411c4:	4a19      	ldr	r2, [pc, #100]	; (804122c <HAL_GPIO_Init+0x25c>)
 80411c6:	4293      	cmp	r3, r2
 80411c8:	d00d      	beq.n	80411e6 <HAL_GPIO_Init+0x216>
 80411ca:	687b      	ldr	r3, [r7, #4]
 80411cc:	4a18      	ldr	r2, [pc, #96]	; (8041230 <HAL_GPIO_Init+0x260>)
 80411ce:	4293      	cmp	r3, r2
 80411d0:	d007      	beq.n	80411e2 <HAL_GPIO_Init+0x212>
 80411d2:	687b      	ldr	r3, [r7, #4]
 80411d4:	4a17      	ldr	r2, [pc, #92]	; (8041234 <HAL_GPIO_Init+0x264>)
 80411d6:	4293      	cmp	r3, r2
 80411d8:	d101      	bne.n	80411de <HAL_GPIO_Init+0x20e>
 80411da:	2309      	movs	r3, #9
 80411dc:	e02d      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411de:	230a      	movs	r3, #10
 80411e0:	e02b      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411e2:	2308      	movs	r3, #8
 80411e4:	e029      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411e6:	2307      	movs	r3, #7
 80411e8:	e027      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411ea:	2306      	movs	r3, #6
 80411ec:	e025      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411ee:	2305      	movs	r3, #5
 80411f0:	e023      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411f2:	2304      	movs	r3, #4
 80411f4:	e021      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411f6:	2303      	movs	r3, #3
 80411f8:	e01f      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411fa:	2302      	movs	r3, #2
 80411fc:	e01d      	b.n	804123a <HAL_GPIO_Init+0x26a>
 80411fe:	2301      	movs	r3, #1
 8041200:	e01b      	b.n	804123a <HAL_GPIO_Init+0x26a>
 8041202:	bf00      	nop
 8041204:	58000080 	.word	0x58000080
 8041208:	58024400 	.word	0x58024400
 804120c:	58000400 	.word	0x58000400
 8041210:	58020000 	.word	0x58020000
 8041214:	58020400 	.word	0x58020400
 8041218:	58020800 	.word	0x58020800
 804121c:	58020c00 	.word	0x58020c00
 8041220:	58021000 	.word	0x58021000
 8041224:	58021400 	.word	0x58021400
 8041228:	58021800 	.word	0x58021800
 804122c:	58021c00 	.word	0x58021c00
 8041230:	58022000 	.word	0x58022000
 8041234:	58022400 	.word	0x58022400
 8041238:	2300      	movs	r3, #0
 804123a:	69fa      	ldr	r2, [r7, #28]
 804123c:	f002 0203 	and.w	r2, r2, #3
 8041240:	0092      	lsls	r2, r2, #2
 8041242:	4093      	lsls	r3, r2
 8041244:	69ba      	ldr	r2, [r7, #24]
 8041246:	4313      	orrs	r3, r2
 8041248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 804124a:	4938      	ldr	r1, [pc, #224]	; (804132c <HAL_GPIO_Init+0x35c>)
 804124c:	69fb      	ldr	r3, [r7, #28]
 804124e:	089b      	lsrs	r3, r3, #2
 8041250:	3302      	adds	r3, #2
 8041252:	69ba      	ldr	r2, [r7, #24]
 8041254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 804125c:	681b      	ldr	r3, [r3, #0]
 804125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041260:	693b      	ldr	r3, [r7, #16]
 8041262:	43db      	mvns	r3, r3
 8041264:	69ba      	ldr	r2, [r7, #24]
 8041266:	4013      	ands	r3, r2
 8041268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 804126a:	683b      	ldr	r3, [r7, #0]
 804126c:	685b      	ldr	r3, [r3, #4]
 804126e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041272:	2b00      	cmp	r3, #0
 8041274:	d003      	beq.n	804127e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8041276:	69ba      	ldr	r2, [r7, #24]
 8041278:	693b      	ldr	r3, [r7, #16]
 804127a:	4313      	orrs	r3, r2
 804127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 804127e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8041282:	69bb      	ldr	r3, [r7, #24]
 8041284:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8041286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 804128a:	685b      	ldr	r3, [r3, #4]
 804128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804128e:	693b      	ldr	r3, [r7, #16]
 8041290:	43db      	mvns	r3, r3
 8041292:	69ba      	ldr	r2, [r7, #24]
 8041294:	4013      	ands	r3, r2
 8041296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041298:	683b      	ldr	r3, [r7, #0]
 804129a:	685b      	ldr	r3, [r3, #4]
 804129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80412a0:	2b00      	cmp	r3, #0
 80412a2:	d003      	beq.n	80412ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80412a4:	69ba      	ldr	r2, [r7, #24]
 80412a6:	693b      	ldr	r3, [r7, #16]
 80412a8:	4313      	orrs	r3, r2
 80412aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80412ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80412b0:	69bb      	ldr	r3, [r7, #24]
 80412b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80412b4:	697b      	ldr	r3, [r7, #20]
 80412b6:	685b      	ldr	r3, [r3, #4]
 80412b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80412ba:	693b      	ldr	r3, [r7, #16]
 80412bc:	43db      	mvns	r3, r3
 80412be:	69ba      	ldr	r2, [r7, #24]
 80412c0:	4013      	ands	r3, r2
 80412c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80412c4:	683b      	ldr	r3, [r7, #0]
 80412c6:	685b      	ldr	r3, [r3, #4]
 80412c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80412cc:	2b00      	cmp	r3, #0
 80412ce:	d003      	beq.n	80412d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80412d0:	69ba      	ldr	r2, [r7, #24]
 80412d2:	693b      	ldr	r3, [r7, #16]
 80412d4:	4313      	orrs	r3, r2
 80412d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80412d8:	697b      	ldr	r3, [r7, #20]
 80412da:	69ba      	ldr	r2, [r7, #24]
 80412dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80412de:	697b      	ldr	r3, [r7, #20]
 80412e0:	681b      	ldr	r3, [r3, #0]
 80412e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80412e4:	693b      	ldr	r3, [r7, #16]
 80412e6:	43db      	mvns	r3, r3
 80412e8:	69ba      	ldr	r2, [r7, #24]
 80412ea:	4013      	ands	r3, r2
 80412ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80412ee:	683b      	ldr	r3, [r7, #0]
 80412f0:	685b      	ldr	r3, [r3, #4]
 80412f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80412f6:	2b00      	cmp	r3, #0
 80412f8:	d003      	beq.n	8041302 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80412fa:	69ba      	ldr	r2, [r7, #24]
 80412fc:	693b      	ldr	r3, [r7, #16]
 80412fe:	4313      	orrs	r3, r2
 8041300:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8041302:	697b      	ldr	r3, [r7, #20]
 8041304:	69ba      	ldr	r2, [r7, #24]
 8041306:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8041308:	69fb      	ldr	r3, [r7, #28]
 804130a:	3301      	adds	r3, #1
 804130c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 804130e:	683b      	ldr	r3, [r7, #0]
 8041310:	681a      	ldr	r2, [r3, #0]
 8041312:	69fb      	ldr	r3, [r7, #28]
 8041314:	fa22 f303 	lsr.w	r3, r2, r3
 8041318:	2b00      	cmp	r3, #0
 804131a:	f47f ae63 	bne.w	8040fe4 <HAL_GPIO_Init+0x14>
  }
}
 804131e:	bf00      	nop
 8041320:	bf00      	nop
 8041322:	3724      	adds	r7, #36	; 0x24
 8041324:	46bd      	mov	sp, r7
 8041326:	f85d 7b04 	ldr.w	r7, [sp], #4
 804132a:	4770      	bx	lr
 804132c:	58000400 	.word	0x58000400

08041330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041330:	b480      	push	{r7}
 8041332:	b083      	sub	sp, #12
 8041334:	af00      	add	r7, sp, #0
 8041336:	6078      	str	r0, [r7, #4]
 8041338:	460b      	mov	r3, r1
 804133a:	807b      	strh	r3, [r7, #2]
 804133c:	4613      	mov	r3, r2
 804133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041340:	787b      	ldrb	r3, [r7, #1]
 8041342:	2b00      	cmp	r3, #0
 8041344:	d003      	beq.n	804134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041346:	887a      	ldrh	r2, [r7, #2]
 8041348:	687b      	ldr	r3, [r7, #4]
 804134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 804134c:	e003      	b.n	8041356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 804134e:	887b      	ldrh	r3, [r7, #2]
 8041350:	041a      	lsls	r2, r3, #16
 8041352:	687b      	ldr	r3, [r7, #4]
 8041354:	619a      	str	r2, [r3, #24]
}
 8041356:	bf00      	nop
 8041358:	370c      	adds	r7, #12
 804135a:	46bd      	mov	sp, r7
 804135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041360:	4770      	bx	lr
	...

08041364 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8041364:	b480      	push	{r7}
 8041366:	b083      	sub	sp, #12
 8041368:	af00      	add	r7, sp, #0
 804136a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 804136c:	4a08      	ldr	r2, [pc, #32]	; (8041390 <HAL_HSEM_FastTake+0x2c>)
 804136e:	687b      	ldr	r3, [r7, #4]
 8041370:	3320      	adds	r3, #32
 8041372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041376:	4a07      	ldr	r2, [pc, #28]	; (8041394 <HAL_HSEM_FastTake+0x30>)
 8041378:	4293      	cmp	r3, r2
 804137a:	d101      	bne.n	8041380 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 804137c:	2300      	movs	r3, #0
 804137e:	e000      	b.n	8041382 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041380:	2301      	movs	r3, #1
}
 8041382:	4618      	mov	r0, r3
 8041384:	370c      	adds	r7, #12
 8041386:	46bd      	mov	sp, r7
 8041388:	f85d 7b04 	ldr.w	r7, [sp], #4
 804138c:	4770      	bx	lr
 804138e:	bf00      	nop
 8041390:	58026400 	.word	0x58026400
 8041394:	80000300 	.word	0x80000300

08041398 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041398:	b480      	push	{r7}
 804139a:	b083      	sub	sp, #12
 804139c:	af00      	add	r7, sp, #0
 804139e:	6078      	str	r0, [r7, #4]
 80413a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80413a2:	4906      	ldr	r1, [pc, #24]	; (80413bc <HAL_HSEM_Release+0x24>)
 80413a4:	683b      	ldr	r3, [r7, #0]
 80413a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80413aa:	687b      	ldr	r3, [r7, #4]
 80413ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80413b0:	bf00      	nop
 80413b2:	370c      	adds	r7, #12
 80413b4:	46bd      	mov	sp, r7
 80413b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413ba:	4770      	bx	lr
 80413bc:	58026400 	.word	0x58026400

080413c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80413c0:	b580      	push	{r7, lr}
 80413c2:	b084      	sub	sp, #16
 80413c4:	af00      	add	r7, sp, #0
 80413c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80413c8:	4b29      	ldr	r3, [pc, #164]	; (8041470 <HAL_PWREx_ConfigSupply+0xb0>)
 80413ca:	68db      	ldr	r3, [r3, #12]
 80413cc:	f003 0307 	and.w	r3, r3, #7
 80413d0:	2b06      	cmp	r3, #6
 80413d2:	d00a      	beq.n	80413ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80413d4:	4b26      	ldr	r3, [pc, #152]	; (8041470 <HAL_PWREx_ConfigSupply+0xb0>)
 80413d6:	68db      	ldr	r3, [r3, #12]
 80413d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80413dc:	687a      	ldr	r2, [r7, #4]
 80413de:	429a      	cmp	r2, r3
 80413e0:	d001      	beq.n	80413e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80413e2:	2301      	movs	r3, #1
 80413e4:	e040      	b.n	8041468 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80413e6:	2300      	movs	r3, #0
 80413e8:	e03e      	b.n	8041468 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80413ea:	4b21      	ldr	r3, [pc, #132]	; (8041470 <HAL_PWREx_ConfigSupply+0xb0>)
 80413ec:	68db      	ldr	r3, [r3, #12]
 80413ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80413f2:	491f      	ldr	r1, [pc, #124]	; (8041470 <HAL_PWREx_ConfigSupply+0xb0>)
 80413f4:	687b      	ldr	r3, [r7, #4]
 80413f6:	4313      	orrs	r3, r2
 80413f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80413fa:	f7ff fcc9 	bl	8040d90 <HAL_GetTick>
 80413fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8041400:	e009      	b.n	8041416 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8041402:	f7ff fcc5 	bl	8040d90 <HAL_GetTick>
 8041406:	4602      	mov	r2, r0
 8041408:	68fb      	ldr	r3, [r7, #12]
 804140a:	1ad3      	subs	r3, r2, r3
 804140c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041410:	d901      	bls.n	8041416 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8041412:	2301      	movs	r3, #1
 8041414:	e028      	b.n	8041468 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8041416:	4b16      	ldr	r3, [pc, #88]	; (8041470 <HAL_PWREx_ConfigSupply+0xb0>)
 8041418:	685b      	ldr	r3, [r3, #4]
 804141a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804141e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8041422:	d1ee      	bne.n	8041402 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8041424:	687b      	ldr	r3, [r7, #4]
 8041426:	2b1e      	cmp	r3, #30
 8041428:	d008      	beq.n	804143c <HAL_PWREx_ConfigSupply+0x7c>
 804142a:	687b      	ldr	r3, [r7, #4]
 804142c:	2b2e      	cmp	r3, #46	; 0x2e
 804142e:	d005      	beq.n	804143c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8041430:	687b      	ldr	r3, [r7, #4]
 8041432:	2b1d      	cmp	r3, #29
 8041434:	d002      	beq.n	804143c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8041436:	687b      	ldr	r3, [r7, #4]
 8041438:	2b2d      	cmp	r3, #45	; 0x2d
 804143a:	d114      	bne.n	8041466 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 804143c:	f7ff fca8 	bl	8040d90 <HAL_GetTick>
 8041440:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8041442:	e009      	b.n	8041458 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8041444:	f7ff fca4 	bl	8040d90 <HAL_GetTick>
 8041448:	4602      	mov	r2, r0
 804144a:	68fb      	ldr	r3, [r7, #12]
 804144c:	1ad3      	subs	r3, r2, r3
 804144e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041452:	d901      	bls.n	8041458 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8041454:	2301      	movs	r3, #1
 8041456:	e007      	b.n	8041468 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8041458:	4b05      	ldr	r3, [pc, #20]	; (8041470 <HAL_PWREx_ConfigSupply+0xb0>)
 804145a:	68db      	ldr	r3, [r3, #12]
 804145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041464:	d1ee      	bne.n	8041444 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8041466:	2300      	movs	r3, #0
}
 8041468:	4618      	mov	r0, r3
 804146a:	3710      	adds	r7, #16
 804146c:	46bd      	mov	sp, r7
 804146e:	bd80      	pop	{r7, pc}
 8041470:	58024800 	.word	0x58024800

08041474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041474:	b580      	push	{r7, lr}
 8041476:	b08c      	sub	sp, #48	; 0x30
 8041478:	af00      	add	r7, sp, #0
 804147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 804147c:	687b      	ldr	r3, [r7, #4]
 804147e:	2b00      	cmp	r3, #0
 8041480:	d102      	bne.n	8041488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8041482:	2301      	movs	r3, #1
 8041484:	f000 bc1c 	b.w	8041cc0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041488:	687b      	ldr	r3, [r7, #4]
 804148a:	681b      	ldr	r3, [r3, #0]
 804148c:	f003 0301 	and.w	r3, r3, #1
 8041490:	2b00      	cmp	r3, #0
 8041492:	f000 8087 	beq.w	80415a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041496:	4b9e      	ldr	r3, [pc, #632]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041498:	691b      	ldr	r3, [r3, #16]
 804149a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80414a0:	4b9b      	ldr	r3, [pc, #620]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80414a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80414a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80414a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80414a8:	2b10      	cmp	r3, #16
 80414aa:	d007      	beq.n	80414bc <HAL_RCC_OscConfig+0x48>
 80414ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80414ae:	2b18      	cmp	r3, #24
 80414b0:	d110      	bne.n	80414d4 <HAL_RCC_OscConfig+0x60>
 80414b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80414b4:	f003 0303 	and.w	r3, r3, #3
 80414b8:	2b02      	cmp	r3, #2
 80414ba:	d10b      	bne.n	80414d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80414bc:	4b94      	ldr	r3, [pc, #592]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80414be:	681b      	ldr	r3, [r3, #0]
 80414c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80414c4:	2b00      	cmp	r3, #0
 80414c6:	d06c      	beq.n	80415a2 <HAL_RCC_OscConfig+0x12e>
 80414c8:	687b      	ldr	r3, [r7, #4]
 80414ca:	685b      	ldr	r3, [r3, #4]
 80414cc:	2b00      	cmp	r3, #0
 80414ce:	d168      	bne.n	80415a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80414d0:	2301      	movs	r3, #1
 80414d2:	e3f5      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80414d4:	687b      	ldr	r3, [r7, #4]
 80414d6:	685b      	ldr	r3, [r3, #4]
 80414d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80414dc:	d106      	bne.n	80414ec <HAL_RCC_OscConfig+0x78>
 80414de:	4b8c      	ldr	r3, [pc, #560]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80414e0:	681b      	ldr	r3, [r3, #0]
 80414e2:	4a8b      	ldr	r2, [pc, #556]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80414e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80414e8:	6013      	str	r3, [r2, #0]
 80414ea:	e02e      	b.n	804154a <HAL_RCC_OscConfig+0xd6>
 80414ec:	687b      	ldr	r3, [r7, #4]
 80414ee:	685b      	ldr	r3, [r3, #4]
 80414f0:	2b00      	cmp	r3, #0
 80414f2:	d10c      	bne.n	804150e <HAL_RCC_OscConfig+0x9a>
 80414f4:	4b86      	ldr	r3, [pc, #536]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80414f6:	681b      	ldr	r3, [r3, #0]
 80414f8:	4a85      	ldr	r2, [pc, #532]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80414fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80414fe:	6013      	str	r3, [r2, #0]
 8041500:	4b83      	ldr	r3, [pc, #524]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041502:	681b      	ldr	r3, [r3, #0]
 8041504:	4a82      	ldr	r2, [pc, #520]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804150a:	6013      	str	r3, [r2, #0]
 804150c:	e01d      	b.n	804154a <HAL_RCC_OscConfig+0xd6>
 804150e:	687b      	ldr	r3, [r7, #4]
 8041510:	685b      	ldr	r3, [r3, #4]
 8041512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041516:	d10c      	bne.n	8041532 <HAL_RCC_OscConfig+0xbe>
 8041518:	4b7d      	ldr	r3, [pc, #500]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 804151a:	681b      	ldr	r3, [r3, #0]
 804151c:	4a7c      	ldr	r2, [pc, #496]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 804151e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041522:	6013      	str	r3, [r2, #0]
 8041524:	4b7a      	ldr	r3, [pc, #488]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041526:	681b      	ldr	r3, [r3, #0]
 8041528:	4a79      	ldr	r2, [pc, #484]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 804152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804152e:	6013      	str	r3, [r2, #0]
 8041530:	e00b      	b.n	804154a <HAL_RCC_OscConfig+0xd6>
 8041532:	4b77      	ldr	r3, [pc, #476]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041534:	681b      	ldr	r3, [r3, #0]
 8041536:	4a76      	ldr	r2, [pc, #472]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804153c:	6013      	str	r3, [r2, #0]
 804153e:	4b74      	ldr	r3, [pc, #464]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041540:	681b      	ldr	r3, [r3, #0]
 8041542:	4a73      	ldr	r2, [pc, #460]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041548:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 804154a:	687b      	ldr	r3, [r7, #4]
 804154c:	685b      	ldr	r3, [r3, #4]
 804154e:	2b00      	cmp	r3, #0
 8041550:	d013      	beq.n	804157a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041552:	f7ff fc1d 	bl	8040d90 <HAL_GetTick>
 8041556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8041558:	e008      	b.n	804156c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804155a:	f7ff fc19 	bl	8040d90 <HAL_GetTick>
 804155e:	4602      	mov	r2, r0
 8041560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041562:	1ad3      	subs	r3, r2, r3
 8041564:	2b64      	cmp	r3, #100	; 0x64
 8041566:	d901      	bls.n	804156c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8041568:	2303      	movs	r3, #3
 804156a:	e3a9      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804156c:	4b68      	ldr	r3, [pc, #416]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 804156e:	681b      	ldr	r3, [r3, #0]
 8041570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041574:	2b00      	cmp	r3, #0
 8041576:	d0f0      	beq.n	804155a <HAL_RCC_OscConfig+0xe6>
 8041578:	e014      	b.n	80415a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804157a:	f7ff fc09 	bl	8040d90 <HAL_GetTick>
 804157e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8041580:	e008      	b.n	8041594 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8041582:	f7ff fc05 	bl	8040d90 <HAL_GetTick>
 8041586:	4602      	mov	r2, r0
 8041588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804158a:	1ad3      	subs	r3, r2, r3
 804158c:	2b64      	cmp	r3, #100	; 0x64
 804158e:	d901      	bls.n	8041594 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8041590:	2303      	movs	r3, #3
 8041592:	e395      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8041594:	4b5e      	ldr	r3, [pc, #376]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041596:	681b      	ldr	r3, [r3, #0]
 8041598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804159c:	2b00      	cmp	r3, #0
 804159e:	d1f0      	bne.n	8041582 <HAL_RCC_OscConfig+0x10e>
 80415a0:	e000      	b.n	80415a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80415a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80415a4:	687b      	ldr	r3, [r7, #4]
 80415a6:	681b      	ldr	r3, [r3, #0]
 80415a8:	f003 0302 	and.w	r3, r3, #2
 80415ac:	2b00      	cmp	r3, #0
 80415ae:	f000 80ca 	beq.w	8041746 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80415b2:	4b57      	ldr	r3, [pc, #348]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80415b4:	691b      	ldr	r3, [r3, #16]
 80415b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80415ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80415bc:	4b54      	ldr	r3, [pc, #336]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80415be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80415c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80415c2:	6a3b      	ldr	r3, [r7, #32]
 80415c4:	2b00      	cmp	r3, #0
 80415c6:	d007      	beq.n	80415d8 <HAL_RCC_OscConfig+0x164>
 80415c8:	6a3b      	ldr	r3, [r7, #32]
 80415ca:	2b18      	cmp	r3, #24
 80415cc:	d156      	bne.n	804167c <HAL_RCC_OscConfig+0x208>
 80415ce:	69fb      	ldr	r3, [r7, #28]
 80415d0:	f003 0303 	and.w	r3, r3, #3
 80415d4:	2b00      	cmp	r3, #0
 80415d6:	d151      	bne.n	804167c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80415d8:	4b4d      	ldr	r3, [pc, #308]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80415da:	681b      	ldr	r3, [r3, #0]
 80415dc:	f003 0304 	and.w	r3, r3, #4
 80415e0:	2b00      	cmp	r3, #0
 80415e2:	d005      	beq.n	80415f0 <HAL_RCC_OscConfig+0x17c>
 80415e4:	687b      	ldr	r3, [r7, #4]
 80415e6:	68db      	ldr	r3, [r3, #12]
 80415e8:	2b00      	cmp	r3, #0
 80415ea:	d101      	bne.n	80415f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80415ec:	2301      	movs	r3, #1
 80415ee:	e367      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80415f0:	4b47      	ldr	r3, [pc, #284]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80415f2:	681b      	ldr	r3, [r3, #0]
 80415f4:	f023 0219 	bic.w	r2, r3, #25
 80415f8:	687b      	ldr	r3, [r7, #4]
 80415fa:	68db      	ldr	r3, [r3, #12]
 80415fc:	4944      	ldr	r1, [pc, #272]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80415fe:	4313      	orrs	r3, r2
 8041600:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8041602:	f7ff fbc5 	bl	8040d90 <HAL_GetTick>
 8041606:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8041608:	e008      	b.n	804161c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804160a:	f7ff fbc1 	bl	8040d90 <HAL_GetTick>
 804160e:	4602      	mov	r2, r0
 8041610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041612:	1ad3      	subs	r3, r2, r3
 8041614:	2b02      	cmp	r3, #2
 8041616:	d901      	bls.n	804161c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8041618:	2303      	movs	r3, #3
 804161a:	e351      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804161c:	4b3c      	ldr	r3, [pc, #240]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 804161e:	681b      	ldr	r3, [r3, #0]
 8041620:	f003 0304 	and.w	r3, r3, #4
 8041624:	2b00      	cmp	r3, #0
 8041626:	d0f0      	beq.n	804160a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041628:	f7ff fbe2 	bl	8040df0 <HAL_GetREVID>
 804162c:	4603      	mov	r3, r0
 804162e:	f241 0203 	movw	r2, #4099	; 0x1003
 8041632:	4293      	cmp	r3, r2
 8041634:	d817      	bhi.n	8041666 <HAL_RCC_OscConfig+0x1f2>
 8041636:	687b      	ldr	r3, [r7, #4]
 8041638:	691b      	ldr	r3, [r3, #16]
 804163a:	2b40      	cmp	r3, #64	; 0x40
 804163c:	d108      	bne.n	8041650 <HAL_RCC_OscConfig+0x1dc>
 804163e:	4b34      	ldr	r3, [pc, #208]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041640:	685b      	ldr	r3, [r3, #4]
 8041642:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8041646:	4a32      	ldr	r2, [pc, #200]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804164c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804164e:	e07a      	b.n	8041746 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041650:	4b2f      	ldr	r3, [pc, #188]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041652:	685b      	ldr	r3, [r3, #4]
 8041654:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8041658:	687b      	ldr	r3, [r7, #4]
 804165a:	691b      	ldr	r3, [r3, #16]
 804165c:	031b      	lsls	r3, r3, #12
 804165e:	492c      	ldr	r1, [pc, #176]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041660:	4313      	orrs	r3, r2
 8041662:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041664:	e06f      	b.n	8041746 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041666:	4b2a      	ldr	r3, [pc, #168]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041668:	685b      	ldr	r3, [r3, #4]
 804166a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 804166e:	687b      	ldr	r3, [r7, #4]
 8041670:	691b      	ldr	r3, [r3, #16]
 8041672:	061b      	lsls	r3, r3, #24
 8041674:	4926      	ldr	r1, [pc, #152]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041676:	4313      	orrs	r3, r2
 8041678:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804167a:	e064      	b.n	8041746 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 804167c:	687b      	ldr	r3, [r7, #4]
 804167e:	68db      	ldr	r3, [r3, #12]
 8041680:	2b00      	cmp	r3, #0
 8041682:	d047      	beq.n	8041714 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8041684:	4b22      	ldr	r3, [pc, #136]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041686:	681b      	ldr	r3, [r3, #0]
 8041688:	f023 0219 	bic.w	r2, r3, #25
 804168c:	687b      	ldr	r3, [r7, #4]
 804168e:	68db      	ldr	r3, [r3, #12]
 8041690:	491f      	ldr	r1, [pc, #124]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 8041692:	4313      	orrs	r3, r2
 8041694:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041696:	f7ff fb7b 	bl	8040d90 <HAL_GetTick>
 804169a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804169c:	e008      	b.n	80416b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804169e:	f7ff fb77 	bl	8040d90 <HAL_GetTick>
 80416a2:	4602      	mov	r2, r0
 80416a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80416a6:	1ad3      	subs	r3, r2, r3
 80416a8:	2b02      	cmp	r3, #2
 80416aa:	d901      	bls.n	80416b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80416ac:	2303      	movs	r3, #3
 80416ae:	e307      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80416b0:	4b17      	ldr	r3, [pc, #92]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80416b2:	681b      	ldr	r3, [r3, #0]
 80416b4:	f003 0304 	and.w	r3, r3, #4
 80416b8:	2b00      	cmp	r3, #0
 80416ba:	d0f0      	beq.n	804169e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80416bc:	f7ff fb98 	bl	8040df0 <HAL_GetREVID>
 80416c0:	4603      	mov	r3, r0
 80416c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80416c6:	4293      	cmp	r3, r2
 80416c8:	d817      	bhi.n	80416fa <HAL_RCC_OscConfig+0x286>
 80416ca:	687b      	ldr	r3, [r7, #4]
 80416cc:	691b      	ldr	r3, [r3, #16]
 80416ce:	2b40      	cmp	r3, #64	; 0x40
 80416d0:	d108      	bne.n	80416e4 <HAL_RCC_OscConfig+0x270>
 80416d2:	4b0f      	ldr	r3, [pc, #60]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80416d4:	685b      	ldr	r3, [r3, #4]
 80416d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80416da:	4a0d      	ldr	r2, [pc, #52]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80416dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80416e0:	6053      	str	r3, [r2, #4]
 80416e2:	e030      	b.n	8041746 <HAL_RCC_OscConfig+0x2d2>
 80416e4:	4b0a      	ldr	r3, [pc, #40]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80416e6:	685b      	ldr	r3, [r3, #4]
 80416e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80416ec:	687b      	ldr	r3, [r7, #4]
 80416ee:	691b      	ldr	r3, [r3, #16]
 80416f0:	031b      	lsls	r3, r3, #12
 80416f2:	4907      	ldr	r1, [pc, #28]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80416f4:	4313      	orrs	r3, r2
 80416f6:	604b      	str	r3, [r1, #4]
 80416f8:	e025      	b.n	8041746 <HAL_RCC_OscConfig+0x2d2>
 80416fa:	4b05      	ldr	r3, [pc, #20]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 80416fc:	685b      	ldr	r3, [r3, #4]
 80416fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041702:	687b      	ldr	r3, [r7, #4]
 8041704:	691b      	ldr	r3, [r3, #16]
 8041706:	061b      	lsls	r3, r3, #24
 8041708:	4901      	ldr	r1, [pc, #4]	; (8041710 <HAL_RCC_OscConfig+0x29c>)
 804170a:	4313      	orrs	r3, r2
 804170c:	604b      	str	r3, [r1, #4]
 804170e:	e01a      	b.n	8041746 <HAL_RCC_OscConfig+0x2d2>
 8041710:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041714:	4b9e      	ldr	r3, [pc, #632]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041716:	681b      	ldr	r3, [r3, #0]
 8041718:	4a9d      	ldr	r2, [pc, #628]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804171a:	f023 0301 	bic.w	r3, r3, #1
 804171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041720:	f7ff fb36 	bl	8040d90 <HAL_GetTick>
 8041724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8041726:	e008      	b.n	804173a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041728:	f7ff fb32 	bl	8040d90 <HAL_GetTick>
 804172c:	4602      	mov	r2, r0
 804172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041730:	1ad3      	subs	r3, r2, r3
 8041732:	2b02      	cmp	r3, #2
 8041734:	d901      	bls.n	804173a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8041736:	2303      	movs	r3, #3
 8041738:	e2c2      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 804173a:	4b95      	ldr	r3, [pc, #596]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804173c:	681b      	ldr	r3, [r3, #0]
 804173e:	f003 0304 	and.w	r3, r3, #4
 8041742:	2b00      	cmp	r3, #0
 8041744:	d1f0      	bne.n	8041728 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8041746:	687b      	ldr	r3, [r7, #4]
 8041748:	681b      	ldr	r3, [r3, #0]
 804174a:	f003 0310 	and.w	r3, r3, #16
 804174e:	2b00      	cmp	r3, #0
 8041750:	f000 80a9 	beq.w	80418a6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041754:	4b8e      	ldr	r3, [pc, #568]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041756:	691b      	ldr	r3, [r3, #16]
 8041758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804175c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804175e:	4b8c      	ldr	r3, [pc, #560]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041762:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8041764:	69bb      	ldr	r3, [r7, #24]
 8041766:	2b08      	cmp	r3, #8
 8041768:	d007      	beq.n	804177a <HAL_RCC_OscConfig+0x306>
 804176a:	69bb      	ldr	r3, [r7, #24]
 804176c:	2b18      	cmp	r3, #24
 804176e:	d13a      	bne.n	80417e6 <HAL_RCC_OscConfig+0x372>
 8041770:	697b      	ldr	r3, [r7, #20]
 8041772:	f003 0303 	and.w	r3, r3, #3
 8041776:	2b01      	cmp	r3, #1
 8041778:	d135      	bne.n	80417e6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 804177a:	4b85      	ldr	r3, [pc, #532]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804177c:	681b      	ldr	r3, [r3, #0]
 804177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041782:	2b00      	cmp	r3, #0
 8041784:	d005      	beq.n	8041792 <HAL_RCC_OscConfig+0x31e>
 8041786:	687b      	ldr	r3, [r7, #4]
 8041788:	69db      	ldr	r3, [r3, #28]
 804178a:	2b80      	cmp	r3, #128	; 0x80
 804178c:	d001      	beq.n	8041792 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 804178e:	2301      	movs	r3, #1
 8041790:	e296      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8041792:	f7ff fb2d 	bl	8040df0 <HAL_GetREVID>
 8041796:	4603      	mov	r3, r0
 8041798:	f241 0203 	movw	r2, #4099	; 0x1003
 804179c:	4293      	cmp	r3, r2
 804179e:	d817      	bhi.n	80417d0 <HAL_RCC_OscConfig+0x35c>
 80417a0:	687b      	ldr	r3, [r7, #4]
 80417a2:	6a1b      	ldr	r3, [r3, #32]
 80417a4:	2b20      	cmp	r3, #32
 80417a6:	d108      	bne.n	80417ba <HAL_RCC_OscConfig+0x346>
 80417a8:	4b79      	ldr	r3, [pc, #484]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417aa:	685b      	ldr	r3, [r3, #4]
 80417ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80417b0:	4a77      	ldr	r2, [pc, #476]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80417b6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80417b8:	e075      	b.n	80418a6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80417ba:	4b75      	ldr	r3, [pc, #468]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417bc:	685b      	ldr	r3, [r3, #4]
 80417be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80417c2:	687b      	ldr	r3, [r7, #4]
 80417c4:	6a1b      	ldr	r3, [r3, #32]
 80417c6:	069b      	lsls	r3, r3, #26
 80417c8:	4971      	ldr	r1, [pc, #452]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417ca:	4313      	orrs	r3, r2
 80417cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80417ce:	e06a      	b.n	80418a6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80417d0:	4b6f      	ldr	r3, [pc, #444]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417d2:	68db      	ldr	r3, [r3, #12]
 80417d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80417d8:	687b      	ldr	r3, [r7, #4]
 80417da:	6a1b      	ldr	r3, [r3, #32]
 80417dc:	061b      	lsls	r3, r3, #24
 80417de:	496c      	ldr	r1, [pc, #432]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417e0:	4313      	orrs	r3, r2
 80417e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80417e4:	e05f      	b.n	80418a6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80417e6:	687b      	ldr	r3, [r7, #4]
 80417e8:	69db      	ldr	r3, [r3, #28]
 80417ea:	2b00      	cmp	r3, #0
 80417ec:	d042      	beq.n	8041874 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80417ee:	4b68      	ldr	r3, [pc, #416]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417f0:	681b      	ldr	r3, [r3, #0]
 80417f2:	4a67      	ldr	r2, [pc, #412]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80417f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80417f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80417fa:	f7ff fac9 	bl	8040d90 <HAL_GetTick>
 80417fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8041800:	e008      	b.n	8041814 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8041802:	f7ff fac5 	bl	8040d90 <HAL_GetTick>
 8041806:	4602      	mov	r2, r0
 8041808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804180a:	1ad3      	subs	r3, r2, r3
 804180c:	2b02      	cmp	r3, #2
 804180e:	d901      	bls.n	8041814 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8041810:	2303      	movs	r3, #3
 8041812:	e255      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8041814:	4b5e      	ldr	r3, [pc, #376]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041816:	681b      	ldr	r3, [r3, #0]
 8041818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804181c:	2b00      	cmp	r3, #0
 804181e:	d0f0      	beq.n	8041802 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8041820:	f7ff fae6 	bl	8040df0 <HAL_GetREVID>
 8041824:	4603      	mov	r3, r0
 8041826:	f241 0203 	movw	r2, #4099	; 0x1003
 804182a:	4293      	cmp	r3, r2
 804182c:	d817      	bhi.n	804185e <HAL_RCC_OscConfig+0x3ea>
 804182e:	687b      	ldr	r3, [r7, #4]
 8041830:	6a1b      	ldr	r3, [r3, #32]
 8041832:	2b20      	cmp	r3, #32
 8041834:	d108      	bne.n	8041848 <HAL_RCC_OscConfig+0x3d4>
 8041836:	4b56      	ldr	r3, [pc, #344]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041838:	685b      	ldr	r3, [r3, #4]
 804183a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 804183e:	4a54      	ldr	r2, [pc, #336]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8041844:	6053      	str	r3, [r2, #4]
 8041846:	e02e      	b.n	80418a6 <HAL_RCC_OscConfig+0x432>
 8041848:	4b51      	ldr	r3, [pc, #324]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804184a:	685b      	ldr	r3, [r3, #4]
 804184c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8041850:	687b      	ldr	r3, [r7, #4]
 8041852:	6a1b      	ldr	r3, [r3, #32]
 8041854:	069b      	lsls	r3, r3, #26
 8041856:	494e      	ldr	r1, [pc, #312]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041858:	4313      	orrs	r3, r2
 804185a:	604b      	str	r3, [r1, #4]
 804185c:	e023      	b.n	80418a6 <HAL_RCC_OscConfig+0x432>
 804185e:	4b4c      	ldr	r3, [pc, #304]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041860:	68db      	ldr	r3, [r3, #12]
 8041862:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8041866:	687b      	ldr	r3, [r7, #4]
 8041868:	6a1b      	ldr	r3, [r3, #32]
 804186a:	061b      	lsls	r3, r3, #24
 804186c:	4948      	ldr	r1, [pc, #288]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804186e:	4313      	orrs	r3, r2
 8041870:	60cb      	str	r3, [r1, #12]
 8041872:	e018      	b.n	80418a6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8041874:	4b46      	ldr	r3, [pc, #280]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041876:	681b      	ldr	r3, [r3, #0]
 8041878:	4a45      	ldr	r2, [pc, #276]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804187a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041880:	f7ff fa86 	bl	8040d90 <HAL_GetTick>
 8041884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041886:	e008      	b.n	804189a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8041888:	f7ff fa82 	bl	8040d90 <HAL_GetTick>
 804188c:	4602      	mov	r2, r0
 804188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041890:	1ad3      	subs	r3, r2, r3
 8041892:	2b02      	cmp	r3, #2
 8041894:	d901      	bls.n	804189a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8041896:	2303      	movs	r3, #3
 8041898:	e212      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 804189a:	4b3d      	ldr	r3, [pc, #244]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804189c:	681b      	ldr	r3, [r3, #0]
 804189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80418a2:	2b00      	cmp	r3, #0
 80418a4:	d1f0      	bne.n	8041888 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80418a6:	687b      	ldr	r3, [r7, #4]
 80418a8:	681b      	ldr	r3, [r3, #0]
 80418aa:	f003 0308 	and.w	r3, r3, #8
 80418ae:	2b00      	cmp	r3, #0
 80418b0:	d036      	beq.n	8041920 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80418b2:	687b      	ldr	r3, [r7, #4]
 80418b4:	695b      	ldr	r3, [r3, #20]
 80418b6:	2b00      	cmp	r3, #0
 80418b8:	d019      	beq.n	80418ee <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80418ba:	4b35      	ldr	r3, [pc, #212]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80418bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418be:	4a34      	ldr	r2, [pc, #208]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80418c0:	f043 0301 	orr.w	r3, r3, #1
 80418c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80418c6:	f7ff fa63 	bl	8040d90 <HAL_GetTick>
 80418ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80418cc:	e008      	b.n	80418e0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80418ce:	f7ff fa5f 	bl	8040d90 <HAL_GetTick>
 80418d2:	4602      	mov	r2, r0
 80418d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80418d6:	1ad3      	subs	r3, r2, r3
 80418d8:	2b02      	cmp	r3, #2
 80418da:	d901      	bls.n	80418e0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80418dc:	2303      	movs	r3, #3
 80418de:	e1ef      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80418e0:	4b2b      	ldr	r3, [pc, #172]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80418e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418e4:	f003 0302 	and.w	r3, r3, #2
 80418e8:	2b00      	cmp	r3, #0
 80418ea:	d0f0      	beq.n	80418ce <HAL_RCC_OscConfig+0x45a>
 80418ec:	e018      	b.n	8041920 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80418ee:	4b28      	ldr	r3, [pc, #160]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80418f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418f2:	4a27      	ldr	r2, [pc, #156]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 80418f4:	f023 0301 	bic.w	r3, r3, #1
 80418f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80418fa:	f7ff fa49 	bl	8040d90 <HAL_GetTick>
 80418fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8041900:	e008      	b.n	8041914 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041902:	f7ff fa45 	bl	8040d90 <HAL_GetTick>
 8041906:	4602      	mov	r2, r0
 8041908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804190a:	1ad3      	subs	r3, r2, r3
 804190c:	2b02      	cmp	r3, #2
 804190e:	d901      	bls.n	8041914 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8041910:	2303      	movs	r3, #3
 8041912:	e1d5      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8041914:	4b1e      	ldr	r3, [pc, #120]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041918:	f003 0302 	and.w	r3, r3, #2
 804191c:	2b00      	cmp	r3, #0
 804191e:	d1f0      	bne.n	8041902 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041920:	687b      	ldr	r3, [r7, #4]
 8041922:	681b      	ldr	r3, [r3, #0]
 8041924:	f003 0320 	and.w	r3, r3, #32
 8041928:	2b00      	cmp	r3, #0
 804192a:	d039      	beq.n	80419a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 804192c:	687b      	ldr	r3, [r7, #4]
 804192e:	699b      	ldr	r3, [r3, #24]
 8041930:	2b00      	cmp	r3, #0
 8041932:	d019      	beq.n	8041968 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041934:	4b16      	ldr	r3, [pc, #88]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 8041936:	681b      	ldr	r3, [r3, #0]
 8041938:	4a15      	ldr	r2, [pc, #84]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804193a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804193e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041940:	f7ff fa26 	bl	8040d90 <HAL_GetTick>
 8041944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041946:	e008      	b.n	804195a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8041948:	f7ff fa22 	bl	8040d90 <HAL_GetTick>
 804194c:	4602      	mov	r2, r0
 804194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041950:	1ad3      	subs	r3, r2, r3
 8041952:	2b02      	cmp	r3, #2
 8041954:	d901      	bls.n	804195a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8041956:	2303      	movs	r3, #3
 8041958:	e1b2      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 804195a:	4b0d      	ldr	r3, [pc, #52]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804195c:	681b      	ldr	r3, [r3, #0]
 804195e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041962:	2b00      	cmp	r3, #0
 8041964:	d0f0      	beq.n	8041948 <HAL_RCC_OscConfig+0x4d4>
 8041966:	e01b      	b.n	80419a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041968:	4b09      	ldr	r3, [pc, #36]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804196a:	681b      	ldr	r3, [r3, #0]
 804196c:	4a08      	ldr	r2, [pc, #32]	; (8041990 <HAL_RCC_OscConfig+0x51c>)
 804196e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8041972:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041974:	f7ff fa0c 	bl	8040d90 <HAL_GetTick>
 8041978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804197a:	e00b      	b.n	8041994 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 804197c:	f7ff fa08 	bl	8040d90 <HAL_GetTick>
 8041980:	4602      	mov	r2, r0
 8041982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041984:	1ad3      	subs	r3, r2, r3
 8041986:	2b02      	cmp	r3, #2
 8041988:	d904      	bls.n	8041994 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 804198a:	2303      	movs	r3, #3
 804198c:	e198      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
 804198e:	bf00      	nop
 8041990:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041994:	4ba3      	ldr	r3, [pc, #652]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041996:	681b      	ldr	r3, [r3, #0]
 8041998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804199c:	2b00      	cmp	r3, #0
 804199e:	d1ed      	bne.n	804197c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80419a0:	687b      	ldr	r3, [r7, #4]
 80419a2:	681b      	ldr	r3, [r3, #0]
 80419a4:	f003 0304 	and.w	r3, r3, #4
 80419a8:	2b00      	cmp	r3, #0
 80419aa:	f000 8081 	beq.w	8041ab0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80419ae:	4b9e      	ldr	r3, [pc, #632]	; (8041c28 <HAL_RCC_OscConfig+0x7b4>)
 80419b0:	681b      	ldr	r3, [r3, #0]
 80419b2:	4a9d      	ldr	r2, [pc, #628]	; (8041c28 <HAL_RCC_OscConfig+0x7b4>)
 80419b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80419b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80419ba:	f7ff f9e9 	bl	8040d90 <HAL_GetTick>
 80419be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80419c0:	e008      	b.n	80419d4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80419c2:	f7ff f9e5 	bl	8040d90 <HAL_GetTick>
 80419c6:	4602      	mov	r2, r0
 80419c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80419ca:	1ad3      	subs	r3, r2, r3
 80419cc:	2b64      	cmp	r3, #100	; 0x64
 80419ce:	d901      	bls.n	80419d4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80419d0:	2303      	movs	r3, #3
 80419d2:	e175      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80419d4:	4b94      	ldr	r3, [pc, #592]	; (8041c28 <HAL_RCC_OscConfig+0x7b4>)
 80419d6:	681b      	ldr	r3, [r3, #0]
 80419d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80419dc:	2b00      	cmp	r3, #0
 80419de:	d0f0      	beq.n	80419c2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80419e0:	687b      	ldr	r3, [r7, #4]
 80419e2:	689b      	ldr	r3, [r3, #8]
 80419e4:	2b01      	cmp	r3, #1
 80419e6:	d106      	bne.n	80419f6 <HAL_RCC_OscConfig+0x582>
 80419e8:	4b8e      	ldr	r3, [pc, #568]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 80419ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80419ec:	4a8d      	ldr	r2, [pc, #564]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 80419ee:	f043 0301 	orr.w	r3, r3, #1
 80419f2:	6713      	str	r3, [r2, #112]	; 0x70
 80419f4:	e02d      	b.n	8041a52 <HAL_RCC_OscConfig+0x5de>
 80419f6:	687b      	ldr	r3, [r7, #4]
 80419f8:	689b      	ldr	r3, [r3, #8]
 80419fa:	2b00      	cmp	r3, #0
 80419fc:	d10c      	bne.n	8041a18 <HAL_RCC_OscConfig+0x5a4>
 80419fe:	4b89      	ldr	r3, [pc, #548]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a02:	4a88      	ldr	r2, [pc, #544]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a04:	f023 0301 	bic.w	r3, r3, #1
 8041a08:	6713      	str	r3, [r2, #112]	; 0x70
 8041a0a:	4b86      	ldr	r3, [pc, #536]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a0e:	4a85      	ldr	r2, [pc, #532]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a10:	f023 0304 	bic.w	r3, r3, #4
 8041a14:	6713      	str	r3, [r2, #112]	; 0x70
 8041a16:	e01c      	b.n	8041a52 <HAL_RCC_OscConfig+0x5de>
 8041a18:	687b      	ldr	r3, [r7, #4]
 8041a1a:	689b      	ldr	r3, [r3, #8]
 8041a1c:	2b05      	cmp	r3, #5
 8041a1e:	d10c      	bne.n	8041a3a <HAL_RCC_OscConfig+0x5c6>
 8041a20:	4b80      	ldr	r3, [pc, #512]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a24:	4a7f      	ldr	r2, [pc, #508]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a26:	f043 0304 	orr.w	r3, r3, #4
 8041a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8041a2c:	4b7d      	ldr	r3, [pc, #500]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a30:	4a7c      	ldr	r2, [pc, #496]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a32:	f043 0301 	orr.w	r3, r3, #1
 8041a36:	6713      	str	r3, [r2, #112]	; 0x70
 8041a38:	e00b      	b.n	8041a52 <HAL_RCC_OscConfig+0x5de>
 8041a3a:	4b7a      	ldr	r3, [pc, #488]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a3e:	4a79      	ldr	r2, [pc, #484]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a40:	f023 0301 	bic.w	r3, r3, #1
 8041a44:	6713      	str	r3, [r2, #112]	; 0x70
 8041a46:	4b77      	ldr	r3, [pc, #476]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a4a:	4a76      	ldr	r2, [pc, #472]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a4c:	f023 0304 	bic.w	r3, r3, #4
 8041a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041a52:	687b      	ldr	r3, [r7, #4]
 8041a54:	689b      	ldr	r3, [r3, #8]
 8041a56:	2b00      	cmp	r3, #0
 8041a58:	d015      	beq.n	8041a86 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041a5a:	f7ff f999 	bl	8040d90 <HAL_GetTick>
 8041a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041a60:	e00a      	b.n	8041a78 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041a62:	f7ff f995 	bl	8040d90 <HAL_GetTick>
 8041a66:	4602      	mov	r2, r0
 8041a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041a6a:	1ad3      	subs	r3, r2, r3
 8041a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8041a70:	4293      	cmp	r3, r2
 8041a72:	d901      	bls.n	8041a78 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8041a74:	2303      	movs	r3, #3
 8041a76:	e123      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041a78:	4b6a      	ldr	r3, [pc, #424]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041a7c:	f003 0302 	and.w	r3, r3, #2
 8041a80:	2b00      	cmp	r3, #0
 8041a82:	d0ee      	beq.n	8041a62 <HAL_RCC_OscConfig+0x5ee>
 8041a84:	e014      	b.n	8041ab0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041a86:	f7ff f983 	bl	8040d90 <HAL_GetTick>
 8041a8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041a8c:	e00a      	b.n	8041aa4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041a8e:	f7ff f97f 	bl	8040d90 <HAL_GetTick>
 8041a92:	4602      	mov	r2, r0
 8041a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041a96:	1ad3      	subs	r3, r2, r3
 8041a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8041a9c:	4293      	cmp	r3, r2
 8041a9e:	d901      	bls.n	8041aa4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8041aa0:	2303      	movs	r3, #3
 8041aa2:	e10d      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041aa4:	4b5f      	ldr	r3, [pc, #380]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041aa8:	f003 0302 	and.w	r3, r3, #2
 8041aac:	2b00      	cmp	r3, #0
 8041aae:	d1ee      	bne.n	8041a8e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041ab0:	687b      	ldr	r3, [r7, #4]
 8041ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041ab4:	2b00      	cmp	r3, #0
 8041ab6:	f000 8102 	beq.w	8041cbe <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8041aba:	4b5a      	ldr	r3, [pc, #360]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041abc:	691b      	ldr	r3, [r3, #16]
 8041abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8041ac2:	2b18      	cmp	r3, #24
 8041ac4:	f000 80bd 	beq.w	8041c42 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041ac8:	687b      	ldr	r3, [r7, #4]
 8041aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041acc:	2b02      	cmp	r3, #2
 8041ace:	f040 8095 	bne.w	8041bfc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041ad2:	4b54      	ldr	r3, [pc, #336]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041ad4:	681b      	ldr	r3, [r3, #0]
 8041ad6:	4a53      	ldr	r2, [pc, #332]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041ade:	f7ff f957 	bl	8040d90 <HAL_GetTick>
 8041ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041ae4:	e008      	b.n	8041af8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041ae6:	f7ff f953 	bl	8040d90 <HAL_GetTick>
 8041aea:	4602      	mov	r2, r0
 8041aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041aee:	1ad3      	subs	r3, r2, r3
 8041af0:	2b02      	cmp	r3, #2
 8041af2:	d901      	bls.n	8041af8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8041af4:	2303      	movs	r3, #3
 8041af6:	e0e3      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041af8:	4b4a      	ldr	r3, [pc, #296]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041afa:	681b      	ldr	r3, [r3, #0]
 8041afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041b00:	2b00      	cmp	r3, #0
 8041b02:	d1f0      	bne.n	8041ae6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041b04:	4b47      	ldr	r3, [pc, #284]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8041b08:	4b48      	ldr	r3, [pc, #288]	; (8041c2c <HAL_RCC_OscConfig+0x7b8>)
 8041b0a:	4013      	ands	r3, r2
 8041b0c:	687a      	ldr	r2, [r7, #4]
 8041b0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8041b10:	687a      	ldr	r2, [r7, #4]
 8041b12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8041b14:	0112      	lsls	r2, r2, #4
 8041b16:	430a      	orrs	r2, r1
 8041b18:	4942      	ldr	r1, [pc, #264]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b1a:	4313      	orrs	r3, r2
 8041b1c:	628b      	str	r3, [r1, #40]	; 0x28
 8041b1e:	687b      	ldr	r3, [r7, #4]
 8041b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b22:	3b01      	subs	r3, #1
 8041b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041b28:	687b      	ldr	r3, [r7, #4]
 8041b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041b2c:	3b01      	subs	r3, #1
 8041b2e:	025b      	lsls	r3, r3, #9
 8041b30:	b29b      	uxth	r3, r3
 8041b32:	431a      	orrs	r2, r3
 8041b34:	687b      	ldr	r3, [r7, #4]
 8041b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041b38:	3b01      	subs	r3, #1
 8041b3a:	041b      	lsls	r3, r3, #16
 8041b3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8041b40:	431a      	orrs	r2, r3
 8041b42:	687b      	ldr	r3, [r7, #4]
 8041b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b46:	3b01      	subs	r3, #1
 8041b48:	061b      	lsls	r3, r3, #24
 8041b4a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8041b4e:	4935      	ldr	r1, [pc, #212]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b50:	4313      	orrs	r3, r2
 8041b52:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8041b54:	4b33      	ldr	r3, [pc, #204]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041b58:	4a32      	ldr	r2, [pc, #200]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b5a:	f023 0301 	bic.w	r3, r3, #1
 8041b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041b60:	4b30      	ldr	r3, [pc, #192]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041b64:	4b32      	ldr	r3, [pc, #200]	; (8041c30 <HAL_RCC_OscConfig+0x7bc>)
 8041b66:	4013      	ands	r3, r2
 8041b68:	687a      	ldr	r2, [r7, #4]
 8041b6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8041b6c:	00d2      	lsls	r2, r2, #3
 8041b6e:	492d      	ldr	r1, [pc, #180]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b70:	4313      	orrs	r3, r2
 8041b72:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8041b74:	4b2b      	ldr	r3, [pc, #172]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041b78:	f023 020c 	bic.w	r2, r3, #12
 8041b7c:	687b      	ldr	r3, [r7, #4]
 8041b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b80:	4928      	ldr	r1, [pc, #160]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b82:	4313      	orrs	r3, r2
 8041b84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8041b86:	4b27      	ldr	r3, [pc, #156]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041b8a:	f023 0202 	bic.w	r2, r3, #2
 8041b8e:	687b      	ldr	r3, [r7, #4]
 8041b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041b92:	4924      	ldr	r1, [pc, #144]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b94:	4313      	orrs	r3, r2
 8041b96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8041b98:	4b22      	ldr	r3, [pc, #136]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041b9c:	4a21      	ldr	r2, [pc, #132]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8041ba4:	4b1f      	ldr	r3, [pc, #124]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041ba8:	4a1e      	ldr	r2, [pc, #120]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8041bb0:	4b1c      	ldr	r3, [pc, #112]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041bb4:	4a1b      	ldr	r2, [pc, #108]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8041bbc:	4b19      	ldr	r3, [pc, #100]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041bc0:	4a18      	ldr	r2, [pc, #96]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bc2:	f043 0301 	orr.w	r3, r3, #1
 8041bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041bc8:	4b16      	ldr	r3, [pc, #88]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bca:	681b      	ldr	r3, [r3, #0]
 8041bcc:	4a15      	ldr	r2, [pc, #84]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041bd4:	f7ff f8dc 	bl	8040d90 <HAL_GetTick>
 8041bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041bda:	e008      	b.n	8041bee <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041bdc:	f7ff f8d8 	bl	8040d90 <HAL_GetTick>
 8041be0:	4602      	mov	r2, r0
 8041be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041be4:	1ad3      	subs	r3, r2, r3
 8041be6:	2b02      	cmp	r3, #2
 8041be8:	d901      	bls.n	8041bee <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8041bea:	2303      	movs	r3, #3
 8041bec:	e068      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041bee:	4b0d      	ldr	r3, [pc, #52]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bf0:	681b      	ldr	r3, [r3, #0]
 8041bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041bf6:	2b00      	cmp	r3, #0
 8041bf8:	d0f0      	beq.n	8041bdc <HAL_RCC_OscConfig+0x768>
 8041bfa:	e060      	b.n	8041cbe <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041bfc:	4b09      	ldr	r3, [pc, #36]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041bfe:	681b      	ldr	r3, [r3, #0]
 8041c00:	4a08      	ldr	r2, [pc, #32]	; (8041c24 <HAL_RCC_OscConfig+0x7b0>)
 8041c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c08:	f7ff f8c2 	bl	8040d90 <HAL_GetTick>
 8041c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041c0e:	e011      	b.n	8041c34 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041c10:	f7ff f8be 	bl	8040d90 <HAL_GetTick>
 8041c14:	4602      	mov	r2, r0
 8041c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c18:	1ad3      	subs	r3, r2, r3
 8041c1a:	2b02      	cmp	r3, #2
 8041c1c:	d90a      	bls.n	8041c34 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8041c1e:	2303      	movs	r3, #3
 8041c20:	e04e      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
 8041c22:	bf00      	nop
 8041c24:	58024400 	.word	0x58024400
 8041c28:	58024800 	.word	0x58024800
 8041c2c:	fffffc0c 	.word	0xfffffc0c
 8041c30:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041c34:	4b24      	ldr	r3, [pc, #144]	; (8041cc8 <HAL_RCC_OscConfig+0x854>)
 8041c36:	681b      	ldr	r3, [r3, #0]
 8041c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041c3c:	2b00      	cmp	r3, #0
 8041c3e:	d1e7      	bne.n	8041c10 <HAL_RCC_OscConfig+0x79c>
 8041c40:	e03d      	b.n	8041cbe <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8041c42:	4b21      	ldr	r3, [pc, #132]	; (8041cc8 <HAL_RCC_OscConfig+0x854>)
 8041c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041c46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8041c48:	4b1f      	ldr	r3, [pc, #124]	; (8041cc8 <HAL_RCC_OscConfig+0x854>)
 8041c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c4c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041c4e:	687b      	ldr	r3, [r7, #4]
 8041c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c52:	2b01      	cmp	r3, #1
 8041c54:	d031      	beq.n	8041cba <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041c56:	693b      	ldr	r3, [r7, #16]
 8041c58:	f003 0203 	and.w	r2, r3, #3
 8041c5c:	687b      	ldr	r3, [r7, #4]
 8041c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041c60:	429a      	cmp	r2, r3
 8041c62:	d12a      	bne.n	8041cba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041c64:	693b      	ldr	r3, [r7, #16]
 8041c66:	091b      	lsrs	r3, r3, #4
 8041c68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8041c6c:	687b      	ldr	r3, [r7, #4]
 8041c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041c70:	429a      	cmp	r2, r3
 8041c72:	d122      	bne.n	8041cba <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041c74:	68fb      	ldr	r3, [r7, #12]
 8041c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041c7a:	687b      	ldr	r3, [r7, #4]
 8041c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041c80:	429a      	cmp	r2, r3
 8041c82:	d11a      	bne.n	8041cba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041c84:	68fb      	ldr	r3, [r7, #12]
 8041c86:	0a5b      	lsrs	r3, r3, #9
 8041c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041c8c:	687b      	ldr	r3, [r7, #4]
 8041c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041c90:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041c92:	429a      	cmp	r2, r3
 8041c94:	d111      	bne.n	8041cba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041c96:	68fb      	ldr	r3, [r7, #12]
 8041c98:	0c1b      	lsrs	r3, r3, #16
 8041c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041c9e:	687b      	ldr	r3, [r7, #4]
 8041ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041ca2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041ca4:	429a      	cmp	r2, r3
 8041ca6:	d108      	bne.n	8041cba <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8041ca8:	68fb      	ldr	r3, [r7, #12]
 8041caa:	0e1b      	lsrs	r3, r3, #24
 8041cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041cb0:	687b      	ldr	r3, [r7, #4]
 8041cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041cb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041cb6:	429a      	cmp	r2, r3
 8041cb8:	d001      	beq.n	8041cbe <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8041cba:	2301      	movs	r3, #1
 8041cbc:	e000      	b.n	8041cc0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8041cbe:	2300      	movs	r3, #0
}
 8041cc0:	4618      	mov	r0, r3
 8041cc2:	3730      	adds	r7, #48	; 0x30
 8041cc4:	46bd      	mov	sp, r7
 8041cc6:	bd80      	pop	{r7, pc}
 8041cc8:	58024400 	.word	0x58024400

08041ccc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041ccc:	b580      	push	{r7, lr}
 8041cce:	b086      	sub	sp, #24
 8041cd0:	af00      	add	r7, sp, #0
 8041cd2:	6078      	str	r0, [r7, #4]
 8041cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8041cd6:	687b      	ldr	r3, [r7, #4]
 8041cd8:	2b00      	cmp	r3, #0
 8041cda:	d101      	bne.n	8041ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041cdc:	2301      	movs	r3, #1
 8041cde:	e19c      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041ce0:	4b8a      	ldr	r3, [pc, #552]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041ce2:	681b      	ldr	r3, [r3, #0]
 8041ce4:	f003 030f 	and.w	r3, r3, #15
 8041ce8:	683a      	ldr	r2, [r7, #0]
 8041cea:	429a      	cmp	r2, r3
 8041cec:	d910      	bls.n	8041d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041cee:	4b87      	ldr	r3, [pc, #540]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041cf0:	681b      	ldr	r3, [r3, #0]
 8041cf2:	f023 020f 	bic.w	r2, r3, #15
 8041cf6:	4985      	ldr	r1, [pc, #532]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041cf8:	683b      	ldr	r3, [r7, #0]
 8041cfa:	4313      	orrs	r3, r2
 8041cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041cfe:	4b83      	ldr	r3, [pc, #524]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041d00:	681b      	ldr	r3, [r3, #0]
 8041d02:	f003 030f 	and.w	r3, r3, #15
 8041d06:	683a      	ldr	r2, [r7, #0]
 8041d08:	429a      	cmp	r2, r3
 8041d0a:	d001      	beq.n	8041d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8041d0c:	2301      	movs	r3, #1
 8041d0e:	e184      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8041d10:	687b      	ldr	r3, [r7, #4]
 8041d12:	681b      	ldr	r3, [r3, #0]
 8041d14:	f003 0304 	and.w	r3, r3, #4
 8041d18:	2b00      	cmp	r3, #0
 8041d1a:	d010      	beq.n	8041d3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8041d1c:	687b      	ldr	r3, [r7, #4]
 8041d1e:	691a      	ldr	r2, [r3, #16]
 8041d20:	4b7b      	ldr	r3, [pc, #492]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d22:	699b      	ldr	r3, [r3, #24]
 8041d24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041d28:	429a      	cmp	r2, r3
 8041d2a:	d908      	bls.n	8041d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8041d2c:	4b78      	ldr	r3, [pc, #480]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d2e:	699b      	ldr	r3, [r3, #24]
 8041d30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041d34:	687b      	ldr	r3, [r7, #4]
 8041d36:	691b      	ldr	r3, [r3, #16]
 8041d38:	4975      	ldr	r1, [pc, #468]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d3a:	4313      	orrs	r3, r2
 8041d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041d3e:	687b      	ldr	r3, [r7, #4]
 8041d40:	681b      	ldr	r3, [r3, #0]
 8041d42:	f003 0308 	and.w	r3, r3, #8
 8041d46:	2b00      	cmp	r3, #0
 8041d48:	d010      	beq.n	8041d6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8041d4a:	687b      	ldr	r3, [r7, #4]
 8041d4c:	695a      	ldr	r2, [r3, #20]
 8041d4e:	4b70      	ldr	r3, [pc, #448]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d50:	69db      	ldr	r3, [r3, #28]
 8041d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041d56:	429a      	cmp	r2, r3
 8041d58:	d908      	bls.n	8041d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8041d5a:	4b6d      	ldr	r3, [pc, #436]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d5c:	69db      	ldr	r3, [r3, #28]
 8041d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041d62:	687b      	ldr	r3, [r7, #4]
 8041d64:	695b      	ldr	r3, [r3, #20]
 8041d66:	496a      	ldr	r1, [pc, #424]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d68:	4313      	orrs	r3, r2
 8041d6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041d6c:	687b      	ldr	r3, [r7, #4]
 8041d6e:	681b      	ldr	r3, [r3, #0]
 8041d70:	f003 0310 	and.w	r3, r3, #16
 8041d74:	2b00      	cmp	r3, #0
 8041d76:	d010      	beq.n	8041d9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8041d78:	687b      	ldr	r3, [r7, #4]
 8041d7a:	699a      	ldr	r2, [r3, #24]
 8041d7c:	4b64      	ldr	r3, [pc, #400]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d7e:	69db      	ldr	r3, [r3, #28]
 8041d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8041d84:	429a      	cmp	r2, r3
 8041d86:	d908      	bls.n	8041d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8041d88:	4b61      	ldr	r3, [pc, #388]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d8a:	69db      	ldr	r3, [r3, #28]
 8041d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	699b      	ldr	r3, [r3, #24]
 8041d94:	495e      	ldr	r1, [pc, #376]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041d96:	4313      	orrs	r3, r2
 8041d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8041d9a:	687b      	ldr	r3, [r7, #4]
 8041d9c:	681b      	ldr	r3, [r3, #0]
 8041d9e:	f003 0320 	and.w	r3, r3, #32
 8041da2:	2b00      	cmp	r3, #0
 8041da4:	d010      	beq.n	8041dc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8041da6:	687b      	ldr	r3, [r7, #4]
 8041da8:	69da      	ldr	r2, [r3, #28]
 8041daa:	4b59      	ldr	r3, [pc, #356]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041dac:	6a1b      	ldr	r3, [r3, #32]
 8041dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041db2:	429a      	cmp	r2, r3
 8041db4:	d908      	bls.n	8041dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8041db6:	4b56      	ldr	r3, [pc, #344]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041db8:	6a1b      	ldr	r3, [r3, #32]
 8041dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041dbe:	687b      	ldr	r3, [r7, #4]
 8041dc0:	69db      	ldr	r3, [r3, #28]
 8041dc2:	4953      	ldr	r1, [pc, #332]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041dc4:	4313      	orrs	r3, r2
 8041dc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041dc8:	687b      	ldr	r3, [r7, #4]
 8041dca:	681b      	ldr	r3, [r3, #0]
 8041dcc:	f003 0302 	and.w	r3, r3, #2
 8041dd0:	2b00      	cmp	r3, #0
 8041dd2:	d010      	beq.n	8041df6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8041dd4:	687b      	ldr	r3, [r7, #4]
 8041dd6:	68da      	ldr	r2, [r3, #12]
 8041dd8:	4b4d      	ldr	r3, [pc, #308]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041dda:	699b      	ldr	r3, [r3, #24]
 8041ddc:	f003 030f 	and.w	r3, r3, #15
 8041de0:	429a      	cmp	r2, r3
 8041de2:	d908      	bls.n	8041df6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041de4:	4b4a      	ldr	r3, [pc, #296]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041de6:	699b      	ldr	r3, [r3, #24]
 8041de8:	f023 020f 	bic.w	r2, r3, #15
 8041dec:	687b      	ldr	r3, [r7, #4]
 8041dee:	68db      	ldr	r3, [r3, #12]
 8041df0:	4947      	ldr	r1, [pc, #284]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041df2:	4313      	orrs	r3, r2
 8041df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041df6:	687b      	ldr	r3, [r7, #4]
 8041df8:	681b      	ldr	r3, [r3, #0]
 8041dfa:	f003 0301 	and.w	r3, r3, #1
 8041dfe:	2b00      	cmp	r3, #0
 8041e00:	d055      	beq.n	8041eae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8041e02:	4b43      	ldr	r3, [pc, #268]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e04:	699b      	ldr	r3, [r3, #24]
 8041e06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8041e0a:	687b      	ldr	r3, [r7, #4]
 8041e0c:	689b      	ldr	r3, [r3, #8]
 8041e0e:	4940      	ldr	r1, [pc, #256]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e10:	4313      	orrs	r3, r2
 8041e12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041e14:	687b      	ldr	r3, [r7, #4]
 8041e16:	685b      	ldr	r3, [r3, #4]
 8041e18:	2b02      	cmp	r3, #2
 8041e1a:	d107      	bne.n	8041e2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8041e1c:	4b3c      	ldr	r3, [pc, #240]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e1e:	681b      	ldr	r3, [r3, #0]
 8041e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041e24:	2b00      	cmp	r3, #0
 8041e26:	d121      	bne.n	8041e6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8041e28:	2301      	movs	r3, #1
 8041e2a:	e0f6      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041e2c:	687b      	ldr	r3, [r7, #4]
 8041e2e:	685b      	ldr	r3, [r3, #4]
 8041e30:	2b03      	cmp	r3, #3
 8041e32:	d107      	bne.n	8041e44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041e34:	4b36      	ldr	r3, [pc, #216]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e36:	681b      	ldr	r3, [r3, #0]
 8041e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041e3c:	2b00      	cmp	r3, #0
 8041e3e:	d115      	bne.n	8041e6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8041e40:	2301      	movs	r3, #1
 8041e42:	e0ea      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8041e44:	687b      	ldr	r3, [r7, #4]
 8041e46:	685b      	ldr	r3, [r3, #4]
 8041e48:	2b01      	cmp	r3, #1
 8041e4a:	d107      	bne.n	8041e5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8041e4c:	4b30      	ldr	r3, [pc, #192]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e4e:	681b      	ldr	r3, [r3, #0]
 8041e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e54:	2b00      	cmp	r3, #0
 8041e56:	d109      	bne.n	8041e6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8041e58:	2301      	movs	r3, #1
 8041e5a:	e0de      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8041e5c:	4b2c      	ldr	r3, [pc, #176]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e5e:	681b      	ldr	r3, [r3, #0]
 8041e60:	f003 0304 	and.w	r3, r3, #4
 8041e64:	2b00      	cmp	r3, #0
 8041e66:	d101      	bne.n	8041e6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8041e68:	2301      	movs	r3, #1
 8041e6a:	e0d6      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8041e6c:	4b28      	ldr	r3, [pc, #160]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e6e:	691b      	ldr	r3, [r3, #16]
 8041e70:	f023 0207 	bic.w	r2, r3, #7
 8041e74:	687b      	ldr	r3, [r7, #4]
 8041e76:	685b      	ldr	r3, [r3, #4]
 8041e78:	4925      	ldr	r1, [pc, #148]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e7a:	4313      	orrs	r3, r2
 8041e7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041e7e:	f7fe ff87 	bl	8040d90 <HAL_GetTick>
 8041e82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041e84:	e00a      	b.n	8041e9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041e86:	f7fe ff83 	bl	8040d90 <HAL_GetTick>
 8041e8a:	4602      	mov	r2, r0
 8041e8c:	697b      	ldr	r3, [r7, #20]
 8041e8e:	1ad3      	subs	r3, r2, r3
 8041e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8041e94:	4293      	cmp	r3, r2
 8041e96:	d901      	bls.n	8041e9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8041e98:	2303      	movs	r3, #3
 8041e9a:	e0be      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041e9c:	4b1c      	ldr	r3, [pc, #112]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041e9e:	691b      	ldr	r3, [r3, #16]
 8041ea0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8041ea4:	687b      	ldr	r3, [r7, #4]
 8041ea6:	685b      	ldr	r3, [r3, #4]
 8041ea8:	00db      	lsls	r3, r3, #3
 8041eaa:	429a      	cmp	r2, r3
 8041eac:	d1eb      	bne.n	8041e86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041eae:	687b      	ldr	r3, [r7, #4]
 8041eb0:	681b      	ldr	r3, [r3, #0]
 8041eb2:	f003 0302 	and.w	r3, r3, #2
 8041eb6:	2b00      	cmp	r3, #0
 8041eb8:	d010      	beq.n	8041edc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8041eba:	687b      	ldr	r3, [r7, #4]
 8041ebc:	68da      	ldr	r2, [r3, #12]
 8041ebe:	4b14      	ldr	r3, [pc, #80]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041ec0:	699b      	ldr	r3, [r3, #24]
 8041ec2:	f003 030f 	and.w	r3, r3, #15
 8041ec6:	429a      	cmp	r2, r3
 8041ec8:	d208      	bcs.n	8041edc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041eca:	4b11      	ldr	r3, [pc, #68]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041ecc:	699b      	ldr	r3, [r3, #24]
 8041ece:	f023 020f 	bic.w	r2, r3, #15
 8041ed2:	687b      	ldr	r3, [r7, #4]
 8041ed4:	68db      	ldr	r3, [r3, #12]
 8041ed6:	490e      	ldr	r1, [pc, #56]	; (8041f10 <HAL_RCC_ClockConfig+0x244>)
 8041ed8:	4313      	orrs	r3, r2
 8041eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8041edc:	4b0b      	ldr	r3, [pc, #44]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041ede:	681b      	ldr	r3, [r3, #0]
 8041ee0:	f003 030f 	and.w	r3, r3, #15
 8041ee4:	683a      	ldr	r2, [r7, #0]
 8041ee6:	429a      	cmp	r2, r3
 8041ee8:	d214      	bcs.n	8041f14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041eea:	4b08      	ldr	r3, [pc, #32]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041eec:	681b      	ldr	r3, [r3, #0]
 8041eee:	f023 020f 	bic.w	r2, r3, #15
 8041ef2:	4906      	ldr	r1, [pc, #24]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041ef4:	683b      	ldr	r3, [r7, #0]
 8041ef6:	4313      	orrs	r3, r2
 8041ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041efa:	4b04      	ldr	r3, [pc, #16]	; (8041f0c <HAL_RCC_ClockConfig+0x240>)
 8041efc:	681b      	ldr	r3, [r3, #0]
 8041efe:	f003 030f 	and.w	r3, r3, #15
 8041f02:	683a      	ldr	r2, [r7, #0]
 8041f04:	429a      	cmp	r2, r3
 8041f06:	d005      	beq.n	8041f14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8041f08:	2301      	movs	r3, #1
 8041f0a:	e086      	b.n	804201a <HAL_RCC_ClockConfig+0x34e>
 8041f0c:	52002000 	.word	0x52002000
 8041f10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8041f14:	687b      	ldr	r3, [r7, #4]
 8041f16:	681b      	ldr	r3, [r3, #0]
 8041f18:	f003 0304 	and.w	r3, r3, #4
 8041f1c:	2b00      	cmp	r3, #0
 8041f1e:	d010      	beq.n	8041f42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8041f20:	687b      	ldr	r3, [r7, #4]
 8041f22:	691a      	ldr	r2, [r3, #16]
 8041f24:	4b3f      	ldr	r3, [pc, #252]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f26:	699b      	ldr	r3, [r3, #24]
 8041f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041f2c:	429a      	cmp	r2, r3
 8041f2e:	d208      	bcs.n	8041f42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8041f30:	4b3c      	ldr	r3, [pc, #240]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f32:	699b      	ldr	r3, [r3, #24]
 8041f34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041f38:	687b      	ldr	r3, [r7, #4]
 8041f3a:	691b      	ldr	r3, [r3, #16]
 8041f3c:	4939      	ldr	r1, [pc, #228]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f3e:	4313      	orrs	r3, r2
 8041f40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041f42:	687b      	ldr	r3, [r7, #4]
 8041f44:	681b      	ldr	r3, [r3, #0]
 8041f46:	f003 0308 	and.w	r3, r3, #8
 8041f4a:	2b00      	cmp	r3, #0
 8041f4c:	d010      	beq.n	8041f70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8041f4e:	687b      	ldr	r3, [r7, #4]
 8041f50:	695a      	ldr	r2, [r3, #20]
 8041f52:	4b34      	ldr	r3, [pc, #208]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f54:	69db      	ldr	r3, [r3, #28]
 8041f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041f5a:	429a      	cmp	r2, r3
 8041f5c:	d208      	bcs.n	8041f70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8041f5e:	4b31      	ldr	r3, [pc, #196]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f60:	69db      	ldr	r3, [r3, #28]
 8041f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041f66:	687b      	ldr	r3, [r7, #4]
 8041f68:	695b      	ldr	r3, [r3, #20]
 8041f6a:	492e      	ldr	r1, [pc, #184]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f6c:	4313      	orrs	r3, r2
 8041f6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041f70:	687b      	ldr	r3, [r7, #4]
 8041f72:	681b      	ldr	r3, [r3, #0]
 8041f74:	f003 0310 	and.w	r3, r3, #16
 8041f78:	2b00      	cmp	r3, #0
 8041f7a:	d010      	beq.n	8041f9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8041f7c:	687b      	ldr	r3, [r7, #4]
 8041f7e:	699a      	ldr	r2, [r3, #24]
 8041f80:	4b28      	ldr	r3, [pc, #160]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f82:	69db      	ldr	r3, [r3, #28]
 8041f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8041f88:	429a      	cmp	r2, r3
 8041f8a:	d208      	bcs.n	8041f9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8041f8c:	4b25      	ldr	r3, [pc, #148]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f8e:	69db      	ldr	r3, [r3, #28]
 8041f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041f94:	687b      	ldr	r3, [r7, #4]
 8041f96:	699b      	ldr	r3, [r3, #24]
 8041f98:	4922      	ldr	r1, [pc, #136]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041f9a:	4313      	orrs	r3, r2
 8041f9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8041f9e:	687b      	ldr	r3, [r7, #4]
 8041fa0:	681b      	ldr	r3, [r3, #0]
 8041fa2:	f003 0320 	and.w	r3, r3, #32
 8041fa6:	2b00      	cmp	r3, #0
 8041fa8:	d010      	beq.n	8041fcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8041faa:	687b      	ldr	r3, [r7, #4]
 8041fac:	69da      	ldr	r2, [r3, #28]
 8041fae:	4b1d      	ldr	r3, [pc, #116]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041fb0:	6a1b      	ldr	r3, [r3, #32]
 8041fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041fb6:	429a      	cmp	r2, r3
 8041fb8:	d208      	bcs.n	8041fcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8041fba:	4b1a      	ldr	r3, [pc, #104]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041fbc:	6a1b      	ldr	r3, [r3, #32]
 8041fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041fc2:	687b      	ldr	r3, [r7, #4]
 8041fc4:	69db      	ldr	r3, [r3, #28]
 8041fc6:	4917      	ldr	r1, [pc, #92]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041fc8:	4313      	orrs	r3, r2
 8041fca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8041fcc:	f000 f89e 	bl	804210c <HAL_RCC_GetSysClockFreq>
 8041fd0:	4602      	mov	r2, r0
 8041fd2:	4b14      	ldr	r3, [pc, #80]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041fd4:	699b      	ldr	r3, [r3, #24]
 8041fd6:	0a1b      	lsrs	r3, r3, #8
 8041fd8:	f003 030f 	and.w	r3, r3, #15
 8041fdc:	4912      	ldr	r1, [pc, #72]	; (8042028 <HAL_RCC_ClockConfig+0x35c>)
 8041fde:	5ccb      	ldrb	r3, [r1, r3]
 8041fe0:	f003 031f 	and.w	r3, r3, #31
 8041fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8041fe8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8041fea:	4b0e      	ldr	r3, [pc, #56]	; (8042024 <HAL_RCC_ClockConfig+0x358>)
 8041fec:	699b      	ldr	r3, [r3, #24]
 8041fee:	f003 030f 	and.w	r3, r3, #15
 8041ff2:	4a0d      	ldr	r2, [pc, #52]	; (8042028 <HAL_RCC_ClockConfig+0x35c>)
 8041ff4:	5cd3      	ldrb	r3, [r2, r3]
 8041ff6:	f003 031f 	and.w	r3, r3, #31
 8041ffa:	693a      	ldr	r2, [r7, #16]
 8041ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8042000:	4a0a      	ldr	r2, [pc, #40]	; (804202c <HAL_RCC_ClockConfig+0x360>)
 8042002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042004:	4a0a      	ldr	r2, [pc, #40]	; (8042030 <HAL_RCC_ClockConfig+0x364>)
 8042006:	693b      	ldr	r3, [r7, #16]
 8042008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 804200a:	4b0a      	ldr	r3, [pc, #40]	; (8042034 <HAL_RCC_ClockConfig+0x368>)
 804200c:	681b      	ldr	r3, [r3, #0]
 804200e:	4618      	mov	r0, r3
 8042010:	f7fe fe74 	bl	8040cfc <HAL_InitTick>
 8042014:	4603      	mov	r3, r0
 8042016:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8042018:	7bfb      	ldrb	r3, [r7, #15]
}
 804201a:	4618      	mov	r0, r3
 804201c:	3718      	adds	r7, #24
 804201e:	46bd      	mov	sp, r7
 8042020:	bd80      	pop	{r7, pc}
 8042022:	bf00      	nop
 8042024:	58024400 	.word	0x58024400
 8042028:	08044e58 	.word	0x08044e58
 804202c:	24000004 	.word	0x24000004
 8042030:	24000000 	.word	0x24000000
 8042034:	24000008 	.word	0x24000008

08042038 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8042038:	b580      	push	{r7, lr}
 804203a:	b08c      	sub	sp, #48	; 0x30
 804203c:	af00      	add	r7, sp, #0
 804203e:	60f8      	str	r0, [r7, #12]
 8042040:	60b9      	str	r1, [r7, #8]
 8042042:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8042044:	68fb      	ldr	r3, [r7, #12]
 8042046:	2b00      	cmp	r3, #0
 8042048:	d12a      	bne.n	80420a0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 804204a:	4b2d      	ldr	r3, [pc, #180]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 804204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8042050:	4a2b      	ldr	r2, [pc, #172]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 8042052:	f043 0301 	orr.w	r3, r3, #1
 8042056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 804205a:	4b29      	ldr	r3, [pc, #164]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 804205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8042060:	f003 0301 	and.w	r3, r3, #1
 8042064:	61bb      	str	r3, [r7, #24]
 8042066:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8042068:	f44f 7380 	mov.w	r3, #256	; 0x100
 804206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804206e:	2302      	movs	r3, #2
 8042070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8042072:	2303      	movs	r3, #3
 8042074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042076:	2300      	movs	r3, #0
 8042078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 804207a:	2300      	movs	r3, #0
 804207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 804207e:	f107 031c 	add.w	r3, r7, #28
 8042082:	4619      	mov	r1, r3
 8042084:	481f      	ldr	r0, [pc, #124]	; (8042104 <HAL_RCC_MCOConfig+0xcc>)
 8042086:	f7fe ffa3 	bl	8040fd0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 804208a:	4b1d      	ldr	r3, [pc, #116]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 804208c:	691b      	ldr	r3, [r3, #16]
 804208e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8042092:	68b9      	ldr	r1, [r7, #8]
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	430b      	orrs	r3, r1
 8042098:	4919      	ldr	r1, [pc, #100]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 804209a:	4313      	orrs	r3, r2
 804209c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 804209e:	e02a      	b.n	80420f6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80420a0:	4b17      	ldr	r3, [pc, #92]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 80420a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80420a6:	4a16      	ldr	r2, [pc, #88]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 80420a8:	f043 0304 	orr.w	r3, r3, #4
 80420ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80420b0:	4b13      	ldr	r3, [pc, #76]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 80420b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80420b6:	f003 0304 	and.w	r3, r3, #4
 80420ba:	617b      	str	r3, [r7, #20]
 80420bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80420be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80420c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80420c4:	2302      	movs	r3, #2
 80420c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80420c8:	2303      	movs	r3, #3
 80420ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80420cc:	2300      	movs	r3, #0
 80420ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80420d0:	2300      	movs	r3, #0
 80420d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80420d4:	f107 031c 	add.w	r3, r7, #28
 80420d8:	4619      	mov	r1, r3
 80420da:	480b      	ldr	r0, [pc, #44]	; (8042108 <HAL_RCC_MCOConfig+0xd0>)
 80420dc:	f7fe ff78 	bl	8040fd0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80420e0:	4b07      	ldr	r3, [pc, #28]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 80420e2:	691b      	ldr	r3, [r3, #16]
 80420e4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80420e8:	687b      	ldr	r3, [r7, #4]
 80420ea:	01d9      	lsls	r1, r3, #7
 80420ec:	68bb      	ldr	r3, [r7, #8]
 80420ee:	430b      	orrs	r3, r1
 80420f0:	4903      	ldr	r1, [pc, #12]	; (8042100 <HAL_RCC_MCOConfig+0xc8>)
 80420f2:	4313      	orrs	r3, r2
 80420f4:	610b      	str	r3, [r1, #16]
}
 80420f6:	bf00      	nop
 80420f8:	3730      	adds	r7, #48	; 0x30
 80420fa:	46bd      	mov	sp, r7
 80420fc:	bd80      	pop	{r7, pc}
 80420fe:	bf00      	nop
 8042100:	58024400 	.word	0x58024400
 8042104:	58020000 	.word	0x58020000
 8042108:	58020800 	.word	0x58020800

0804210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804210c:	b480      	push	{r7}
 804210e:	b089      	sub	sp, #36	; 0x24
 8042110:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042112:	4bb3      	ldr	r3, [pc, #716]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042114:	691b      	ldr	r3, [r3, #16]
 8042116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804211a:	2b18      	cmp	r3, #24
 804211c:	f200 8155 	bhi.w	80423ca <HAL_RCC_GetSysClockFreq+0x2be>
 8042120:	a201      	add	r2, pc, #4	; (adr r2, 8042128 <HAL_RCC_GetSysClockFreq+0x1c>)
 8042122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042126:	bf00      	nop
 8042128:	0804218d 	.word	0x0804218d
 804212c:	080423cb 	.word	0x080423cb
 8042130:	080423cb 	.word	0x080423cb
 8042134:	080423cb 	.word	0x080423cb
 8042138:	080423cb 	.word	0x080423cb
 804213c:	080423cb 	.word	0x080423cb
 8042140:	080423cb 	.word	0x080423cb
 8042144:	080423cb 	.word	0x080423cb
 8042148:	080421b3 	.word	0x080421b3
 804214c:	080423cb 	.word	0x080423cb
 8042150:	080423cb 	.word	0x080423cb
 8042154:	080423cb 	.word	0x080423cb
 8042158:	080423cb 	.word	0x080423cb
 804215c:	080423cb 	.word	0x080423cb
 8042160:	080423cb 	.word	0x080423cb
 8042164:	080423cb 	.word	0x080423cb
 8042168:	080421b9 	.word	0x080421b9
 804216c:	080423cb 	.word	0x080423cb
 8042170:	080423cb 	.word	0x080423cb
 8042174:	080423cb 	.word	0x080423cb
 8042178:	080423cb 	.word	0x080423cb
 804217c:	080423cb 	.word	0x080423cb
 8042180:	080423cb 	.word	0x080423cb
 8042184:	080423cb 	.word	0x080423cb
 8042188:	080421bf 	.word	0x080421bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804218c:	4b94      	ldr	r3, [pc, #592]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804218e:	681b      	ldr	r3, [r3, #0]
 8042190:	f003 0320 	and.w	r3, r3, #32
 8042194:	2b00      	cmp	r3, #0
 8042196:	d009      	beq.n	80421ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8042198:	4b91      	ldr	r3, [pc, #580]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804219a:	681b      	ldr	r3, [r3, #0]
 804219c:	08db      	lsrs	r3, r3, #3
 804219e:	f003 0303 	and.w	r3, r3, #3
 80421a2:	4a90      	ldr	r2, [pc, #576]	; (80423e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80421a4:	fa22 f303 	lsr.w	r3, r2, r3
 80421a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80421aa:	e111      	b.n	80423d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80421ac:	4b8d      	ldr	r3, [pc, #564]	; (80423e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80421ae:	61bb      	str	r3, [r7, #24]
    break;
 80421b0:	e10e      	b.n	80423d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80421b2:	4b8d      	ldr	r3, [pc, #564]	; (80423e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80421b4:	61bb      	str	r3, [r7, #24]
    break;
 80421b6:	e10b      	b.n	80423d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80421b8:	4b8c      	ldr	r3, [pc, #560]	; (80423ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80421ba:	61bb      	str	r3, [r7, #24]
    break;
 80421bc:	e108      	b.n	80423d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80421be:	4b88      	ldr	r3, [pc, #544]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80421c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80421c2:	f003 0303 	and.w	r3, r3, #3
 80421c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80421c8:	4b85      	ldr	r3, [pc, #532]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80421ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80421cc:	091b      	lsrs	r3, r3, #4
 80421ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80421d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80421d4:	4b82      	ldr	r3, [pc, #520]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80421d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80421d8:	f003 0301 	and.w	r3, r3, #1
 80421dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80421de:	4b80      	ldr	r3, [pc, #512]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80421e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80421e2:	08db      	lsrs	r3, r3, #3
 80421e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80421e8:	68fa      	ldr	r2, [r7, #12]
 80421ea:	fb02 f303 	mul.w	r3, r2, r3
 80421ee:	ee07 3a90 	vmov	s15, r3
 80421f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80421f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80421fa:	693b      	ldr	r3, [r7, #16]
 80421fc:	2b00      	cmp	r3, #0
 80421fe:	f000 80e1 	beq.w	80423c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8042202:	697b      	ldr	r3, [r7, #20]
 8042204:	2b02      	cmp	r3, #2
 8042206:	f000 8083 	beq.w	8042310 <HAL_RCC_GetSysClockFreq+0x204>
 804220a:	697b      	ldr	r3, [r7, #20]
 804220c:	2b02      	cmp	r3, #2
 804220e:	f200 80a1 	bhi.w	8042354 <HAL_RCC_GetSysClockFreq+0x248>
 8042212:	697b      	ldr	r3, [r7, #20]
 8042214:	2b00      	cmp	r3, #0
 8042216:	d003      	beq.n	8042220 <HAL_RCC_GetSysClockFreq+0x114>
 8042218:	697b      	ldr	r3, [r7, #20]
 804221a:	2b01      	cmp	r3, #1
 804221c:	d056      	beq.n	80422cc <HAL_RCC_GetSysClockFreq+0x1c0>
 804221e:	e099      	b.n	8042354 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8042220:	4b6f      	ldr	r3, [pc, #444]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042222:	681b      	ldr	r3, [r3, #0]
 8042224:	f003 0320 	and.w	r3, r3, #32
 8042228:	2b00      	cmp	r3, #0
 804222a:	d02d      	beq.n	8042288 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 804222c:	4b6c      	ldr	r3, [pc, #432]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804222e:	681b      	ldr	r3, [r3, #0]
 8042230:	08db      	lsrs	r3, r3, #3
 8042232:	f003 0303 	and.w	r3, r3, #3
 8042236:	4a6b      	ldr	r2, [pc, #428]	; (80423e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042238:	fa22 f303 	lsr.w	r3, r2, r3
 804223c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 804223e:	687b      	ldr	r3, [r7, #4]
 8042240:	ee07 3a90 	vmov	s15, r3
 8042244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042248:	693b      	ldr	r3, [r7, #16]
 804224a:	ee07 3a90 	vmov	s15, r3
 804224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042256:	4b62      	ldr	r3, [pc, #392]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804225a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804225e:	ee07 3a90 	vmov	s15, r3
 8042262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042266:	ed97 6a02 	vldr	s12, [r7, #8]
 804226a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80423f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 804226e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804227a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8042286:	e087      	b.n	8042398 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8042288:	693b      	ldr	r3, [r7, #16]
 804228a:	ee07 3a90 	vmov	s15, r3
 804228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042292:	eddf 6a58 	vldr	s13, [pc, #352]	; 80423f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8042296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804229a:	4b51      	ldr	r3, [pc, #324]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804229e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80422a2:	ee07 3a90 	vmov	s15, r3
 80422a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80422aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80422ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80423f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80422b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80422b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80422ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80422be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80422c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80422c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80422ca:	e065      	b.n	8042398 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80422cc:	693b      	ldr	r3, [r7, #16]
 80422ce:	ee07 3a90 	vmov	s15, r3
 80422d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80422d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80423f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80422da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80422de:	4b40      	ldr	r3, [pc, #256]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80422e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80422e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80422e6:	ee07 3a90 	vmov	s15, r3
 80422ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80422ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80422f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80423f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80422f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80422fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80422fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8042302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042306:	ee67 7a27 	vmul.f32	s15, s14, s15
 804230a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804230e:	e043      	b.n	8042398 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8042310:	693b      	ldr	r3, [r7, #16]
 8042312:	ee07 3a90 	vmov	s15, r3
 8042316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804231a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80423fc <HAL_RCC_GetSysClockFreq+0x2f0>
 804231e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042322:	4b2f      	ldr	r3, [pc, #188]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804232a:	ee07 3a90 	vmov	s15, r3
 804232e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042332:	ed97 6a02 	vldr	s12, [r7, #8]
 8042336:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80423f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 804233a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804233e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8042346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804234a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804234e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8042352:	e021      	b.n	8042398 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8042354:	693b      	ldr	r3, [r7, #16]
 8042356:	ee07 3a90 	vmov	s15, r3
 804235a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804235e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80423f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8042362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042366:	4b1e      	ldr	r3, [pc, #120]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804236a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804236e:	ee07 3a90 	vmov	s15, r3
 8042372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042376:	ed97 6a02 	vldr	s12, [r7, #8]
 804237a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80423f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 804237e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804238a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804238e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8042396:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8042398:	4b11      	ldr	r3, [pc, #68]	; (80423e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804239c:	0a5b      	lsrs	r3, r3, #9
 804239e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80423a2:	3301      	adds	r3, #1
 80423a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80423a6:	683b      	ldr	r3, [r7, #0]
 80423a8:	ee07 3a90 	vmov	s15, r3
 80423ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80423b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80423b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80423b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80423bc:	ee17 3a90 	vmov	r3, s15
 80423c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80423c2:	e005      	b.n	80423d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80423c4:	2300      	movs	r3, #0
 80423c6:	61bb      	str	r3, [r7, #24]
    break;
 80423c8:	e002      	b.n	80423d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80423ca:	4b07      	ldr	r3, [pc, #28]	; (80423e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80423cc:	61bb      	str	r3, [r7, #24]
    break;
 80423ce:	bf00      	nop
  }

  return sysclockfreq;
 80423d0:	69bb      	ldr	r3, [r7, #24]
}
 80423d2:	4618      	mov	r0, r3
 80423d4:	3724      	adds	r7, #36	; 0x24
 80423d6:	46bd      	mov	sp, r7
 80423d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423dc:	4770      	bx	lr
 80423de:	bf00      	nop
 80423e0:	58024400 	.word	0x58024400
 80423e4:	03d09000 	.word	0x03d09000
 80423e8:	003d0900 	.word	0x003d0900
 80423ec:	017d7840 	.word	0x017d7840
 80423f0:	46000000 	.word	0x46000000
 80423f4:	4c742400 	.word	0x4c742400
 80423f8:	4a742400 	.word	0x4a742400
 80423fc:	4bbebc20 	.word	0x4bbebc20

08042400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042400:	b580      	push	{r7, lr}
 8042402:	b082      	sub	sp, #8
 8042404:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8042406:	f7ff fe81 	bl	804210c <HAL_RCC_GetSysClockFreq>
 804240a:	4602      	mov	r2, r0
 804240c:	4b10      	ldr	r3, [pc, #64]	; (8042450 <HAL_RCC_GetHCLKFreq+0x50>)
 804240e:	699b      	ldr	r3, [r3, #24]
 8042410:	0a1b      	lsrs	r3, r3, #8
 8042412:	f003 030f 	and.w	r3, r3, #15
 8042416:	490f      	ldr	r1, [pc, #60]	; (8042454 <HAL_RCC_GetHCLKFreq+0x54>)
 8042418:	5ccb      	ldrb	r3, [r1, r3]
 804241a:	f003 031f 	and.w	r3, r3, #31
 804241e:	fa22 f303 	lsr.w	r3, r2, r3
 8042422:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042424:	4b0a      	ldr	r3, [pc, #40]	; (8042450 <HAL_RCC_GetHCLKFreq+0x50>)
 8042426:	699b      	ldr	r3, [r3, #24]
 8042428:	f003 030f 	and.w	r3, r3, #15
 804242c:	4a09      	ldr	r2, [pc, #36]	; (8042454 <HAL_RCC_GetHCLKFreq+0x54>)
 804242e:	5cd3      	ldrb	r3, [r2, r3]
 8042430:	f003 031f 	and.w	r3, r3, #31
 8042434:	687a      	ldr	r2, [r7, #4]
 8042436:	fa22 f303 	lsr.w	r3, r2, r3
 804243a:	4a07      	ldr	r2, [pc, #28]	; (8042458 <HAL_RCC_GetHCLKFreq+0x58>)
 804243c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 804243e:	4a07      	ldr	r2, [pc, #28]	; (804245c <HAL_RCC_GetHCLKFreq+0x5c>)
 8042440:	687b      	ldr	r3, [r7, #4]
 8042442:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8042444:	4b04      	ldr	r3, [pc, #16]	; (8042458 <HAL_RCC_GetHCLKFreq+0x58>)
 8042446:	681b      	ldr	r3, [r3, #0]
}
 8042448:	4618      	mov	r0, r3
 804244a:	3708      	adds	r7, #8
 804244c:	46bd      	mov	sp, r7
 804244e:	bd80      	pop	{r7, pc}
 8042450:	58024400 	.word	0x58024400
 8042454:	08044e58 	.word	0x08044e58
 8042458:	24000004 	.word	0x24000004
 804245c:	24000000 	.word	0x24000000

08042460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042460:	b580      	push	{r7, lr}
 8042462:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8042464:	f7ff ffcc 	bl	8042400 <HAL_RCC_GetHCLKFreq>
 8042468:	4602      	mov	r2, r0
 804246a:	4b06      	ldr	r3, [pc, #24]	; (8042484 <HAL_RCC_GetPCLK1Freq+0x24>)
 804246c:	69db      	ldr	r3, [r3, #28]
 804246e:	091b      	lsrs	r3, r3, #4
 8042470:	f003 0307 	and.w	r3, r3, #7
 8042474:	4904      	ldr	r1, [pc, #16]	; (8042488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8042476:	5ccb      	ldrb	r3, [r1, r3]
 8042478:	f003 031f 	and.w	r3, r3, #31
 804247c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8042480:	4618      	mov	r0, r3
 8042482:	bd80      	pop	{r7, pc}
 8042484:	58024400 	.word	0x58024400
 8042488:	08044e58 	.word	0x08044e58

0804248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804248c:	b580      	push	{r7, lr}
 804248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8042490:	f7ff ffb6 	bl	8042400 <HAL_RCC_GetHCLKFreq>
 8042494:	4602      	mov	r2, r0
 8042496:	4b06      	ldr	r3, [pc, #24]	; (80424b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8042498:	69db      	ldr	r3, [r3, #28]
 804249a:	0a1b      	lsrs	r3, r3, #8
 804249c:	f003 0307 	and.w	r3, r3, #7
 80424a0:	4904      	ldr	r1, [pc, #16]	; (80424b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80424a2:	5ccb      	ldrb	r3, [r1, r3]
 80424a4:	f003 031f 	and.w	r3, r3, #31
 80424a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80424ac:	4618      	mov	r0, r3
 80424ae:	bd80      	pop	{r7, pc}
 80424b0:	58024400 	.word	0x58024400
 80424b4:	08044e58 	.word	0x08044e58

080424b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80424b8:	b580      	push	{r7, lr}
 80424ba:	b086      	sub	sp, #24
 80424bc:	af00      	add	r7, sp, #0
 80424be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80424c0:	2300      	movs	r3, #0
 80424c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80424c4:	2300      	movs	r3, #0
 80424c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80424c8:	687b      	ldr	r3, [r7, #4]
 80424ca:	681b      	ldr	r3, [r3, #0]
 80424cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80424d0:	2b00      	cmp	r3, #0
 80424d2:	d03f      	beq.n	8042554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80424d4:	687b      	ldr	r3, [r7, #4]
 80424d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80424d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80424dc:	d02a      	beq.n	8042534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80424de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80424e2:	d824      	bhi.n	804252e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80424e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80424e8:	d018      	beq.n	804251c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80424ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80424ee:	d81e      	bhi.n	804252e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80424f0:	2b00      	cmp	r3, #0
 80424f2:	d003      	beq.n	80424fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80424f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80424f8:	d007      	beq.n	804250a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80424fa:	e018      	b.n	804252e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80424fc:	4bab      	ldr	r3, [pc, #684]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80424fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042500:	4aaa      	ldr	r2, [pc, #680]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8042508:	e015      	b.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 804250a:	687b      	ldr	r3, [r7, #4]
 804250c:	3304      	adds	r3, #4
 804250e:	2102      	movs	r1, #2
 8042510:	4618      	mov	r0, r3
 8042512:	f001 f9ff 	bl	8043914 <RCCEx_PLL2_Config>
 8042516:	4603      	mov	r3, r0
 8042518:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 804251a:	e00c      	b.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	3324      	adds	r3, #36	; 0x24
 8042520:	2102      	movs	r1, #2
 8042522:	4618      	mov	r0, r3
 8042524:	f001 faa8 	bl	8043a78 <RCCEx_PLL3_Config>
 8042528:	4603      	mov	r3, r0
 804252a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 804252c:	e003      	b.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 804252e:	2301      	movs	r3, #1
 8042530:	75fb      	strb	r3, [r7, #23]
      break;
 8042532:	e000      	b.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8042534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042536:	7dfb      	ldrb	r3, [r7, #23]
 8042538:	2b00      	cmp	r3, #0
 804253a:	d109      	bne.n	8042550 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 804253c:	4b9b      	ldr	r3, [pc, #620]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 804253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042544:	687b      	ldr	r3, [r7, #4]
 8042546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042548:	4998      	ldr	r1, [pc, #608]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 804254a:	4313      	orrs	r3, r2
 804254c:	650b      	str	r3, [r1, #80]	; 0x50
 804254e:	e001      	b.n	8042554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042550:	7dfb      	ldrb	r3, [r7, #23]
 8042552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8042554:	687b      	ldr	r3, [r7, #4]
 8042556:	681b      	ldr	r3, [r3, #0]
 8042558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804255c:	2b00      	cmp	r3, #0
 804255e:	d03d      	beq.n	80425dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8042560:	687b      	ldr	r3, [r7, #4]
 8042562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042564:	2b04      	cmp	r3, #4
 8042566:	d826      	bhi.n	80425b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8042568:	a201      	add	r2, pc, #4	; (adr r2, 8042570 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 804256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804256e:	bf00      	nop
 8042570:	08042585 	.word	0x08042585
 8042574:	08042593 	.word	0x08042593
 8042578:	080425a5 	.word	0x080425a5
 804257c:	080425bd 	.word	0x080425bd
 8042580:	080425bd 	.word	0x080425bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042584:	4b89      	ldr	r3, [pc, #548]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042588:	4a88      	ldr	r2, [pc, #544]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 804258a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804258e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8042590:	e015      	b.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8042592:	687b      	ldr	r3, [r7, #4]
 8042594:	3304      	adds	r3, #4
 8042596:	2100      	movs	r1, #0
 8042598:	4618      	mov	r0, r3
 804259a:	f001 f9bb 	bl	8043914 <RCCEx_PLL2_Config>
 804259e:	4603      	mov	r3, r0
 80425a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80425a2:	e00c      	b.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80425a4:	687b      	ldr	r3, [r7, #4]
 80425a6:	3324      	adds	r3, #36	; 0x24
 80425a8:	2100      	movs	r1, #0
 80425aa:	4618      	mov	r0, r3
 80425ac:	f001 fa64 	bl	8043a78 <RCCEx_PLL3_Config>
 80425b0:	4603      	mov	r3, r0
 80425b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80425b4:	e003      	b.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80425b6:	2301      	movs	r3, #1
 80425b8:	75fb      	strb	r3, [r7, #23]
      break;
 80425ba:	e000      	b.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80425bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80425be:	7dfb      	ldrb	r3, [r7, #23]
 80425c0:	2b00      	cmp	r3, #0
 80425c2:	d109      	bne.n	80425d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80425c4:	4b79      	ldr	r3, [pc, #484]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80425c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80425c8:	f023 0207 	bic.w	r2, r3, #7
 80425cc:	687b      	ldr	r3, [r7, #4]
 80425ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80425d0:	4976      	ldr	r1, [pc, #472]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80425d2:	4313      	orrs	r3, r2
 80425d4:	650b      	str	r3, [r1, #80]	; 0x50
 80425d6:	e001      	b.n	80425dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80425d8:	7dfb      	ldrb	r3, [r7, #23]
 80425da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80425dc:	687b      	ldr	r3, [r7, #4]
 80425de:	681b      	ldr	r3, [r3, #0]
 80425e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80425e4:	2b00      	cmp	r3, #0
 80425e6:	d042      	beq.n	804266e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80425e8:	687b      	ldr	r3, [r7, #4]
 80425ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80425ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80425f0:	d02b      	beq.n	804264a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80425f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80425f6:	d825      	bhi.n	8042644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80425f8:	2bc0      	cmp	r3, #192	; 0xc0
 80425fa:	d028      	beq.n	804264e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80425fc:	2bc0      	cmp	r3, #192	; 0xc0
 80425fe:	d821      	bhi.n	8042644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8042600:	2b80      	cmp	r3, #128	; 0x80
 8042602:	d016      	beq.n	8042632 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8042604:	2b80      	cmp	r3, #128	; 0x80
 8042606:	d81d      	bhi.n	8042644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8042608:	2b00      	cmp	r3, #0
 804260a:	d002      	beq.n	8042612 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 804260c:	2b40      	cmp	r3, #64	; 0x40
 804260e:	d007      	beq.n	8042620 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8042610:	e018      	b.n	8042644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042612:	4b66      	ldr	r3, [pc, #408]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042616:	4a65      	ldr	r2, [pc, #404]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804261c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 804261e:	e017      	b.n	8042650 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8042620:	687b      	ldr	r3, [r7, #4]
 8042622:	3304      	adds	r3, #4
 8042624:	2100      	movs	r1, #0
 8042626:	4618      	mov	r0, r3
 8042628:	f001 f974 	bl	8043914 <RCCEx_PLL2_Config>
 804262c:	4603      	mov	r3, r0
 804262e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8042630:	e00e      	b.n	8042650 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8042632:	687b      	ldr	r3, [r7, #4]
 8042634:	3324      	adds	r3, #36	; 0x24
 8042636:	2100      	movs	r1, #0
 8042638:	4618      	mov	r0, r3
 804263a:	f001 fa1d 	bl	8043a78 <RCCEx_PLL3_Config>
 804263e:	4603      	mov	r3, r0
 8042640:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8042642:	e005      	b.n	8042650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042644:	2301      	movs	r3, #1
 8042646:	75fb      	strb	r3, [r7, #23]
      break;
 8042648:	e002      	b.n	8042650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 804264a:	bf00      	nop
 804264c:	e000      	b.n	8042650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 804264e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042650:	7dfb      	ldrb	r3, [r7, #23]
 8042652:	2b00      	cmp	r3, #0
 8042654:	d109      	bne.n	804266a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8042656:	4b55      	ldr	r3, [pc, #340]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804265a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 804265e:	687b      	ldr	r3, [r7, #4]
 8042660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042662:	4952      	ldr	r1, [pc, #328]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042664:	4313      	orrs	r3, r2
 8042666:	650b      	str	r3, [r1, #80]	; 0x50
 8042668:	e001      	b.n	804266e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804266a:	7dfb      	ldrb	r3, [r7, #23]
 804266c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 804266e:	687b      	ldr	r3, [r7, #4]
 8042670:	681b      	ldr	r3, [r3, #0]
 8042672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042676:	2b00      	cmp	r3, #0
 8042678:	d049      	beq.n	804270e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 804267a:	687b      	ldr	r3, [r7, #4]
 804267c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8042680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042684:	d030      	beq.n	80426e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8042686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 804268a:	d82a      	bhi.n	80426e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 804268c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8042690:	d02c      	beq.n	80426ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8042692:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8042696:	d824      	bhi.n	80426e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8042698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804269c:	d018      	beq.n	80426d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 804269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80426a2:	d81e      	bhi.n	80426e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80426a4:	2b00      	cmp	r3, #0
 80426a6:	d003      	beq.n	80426b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80426a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80426ac:	d007      	beq.n	80426be <HAL_RCCEx_PeriphCLKConfig+0x206>
 80426ae:	e018      	b.n	80426e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80426b0:	4b3e      	ldr	r3, [pc, #248]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80426b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80426b4:	4a3d      	ldr	r2, [pc, #244]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80426b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80426ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80426bc:	e017      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80426be:	687b      	ldr	r3, [r7, #4]
 80426c0:	3304      	adds	r3, #4
 80426c2:	2100      	movs	r1, #0
 80426c4:	4618      	mov	r0, r3
 80426c6:	f001 f925 	bl	8043914 <RCCEx_PLL2_Config>
 80426ca:	4603      	mov	r3, r0
 80426cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80426ce:	e00e      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	3324      	adds	r3, #36	; 0x24
 80426d4:	2100      	movs	r1, #0
 80426d6:	4618      	mov	r0, r3
 80426d8:	f001 f9ce 	bl	8043a78 <RCCEx_PLL3_Config>
 80426dc:	4603      	mov	r3, r0
 80426de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80426e0:	e005      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80426e2:	2301      	movs	r3, #1
 80426e4:	75fb      	strb	r3, [r7, #23]
      break;
 80426e6:	e002      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80426e8:	bf00      	nop
 80426ea:	e000      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80426ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80426ee:	7dfb      	ldrb	r3, [r7, #23]
 80426f0:	2b00      	cmp	r3, #0
 80426f2:	d10a      	bne.n	804270a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80426f4:	4b2d      	ldr	r3, [pc, #180]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80426f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80426f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80426fc:	687b      	ldr	r3, [r7, #4]
 80426fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8042702:	492a      	ldr	r1, [pc, #168]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042704:	4313      	orrs	r3, r2
 8042706:	658b      	str	r3, [r1, #88]	; 0x58
 8042708:	e001      	b.n	804270e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804270a:	7dfb      	ldrb	r3, [r7, #23]
 804270c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	681b      	ldr	r3, [r3, #0]
 8042712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042716:	2b00      	cmp	r3, #0
 8042718:	d04c      	beq.n	80427b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 804271a:	687b      	ldr	r3, [r7, #4]
 804271c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8042720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042724:	d030      	beq.n	8042788 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8042726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804272a:	d82a      	bhi.n	8042782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 804272c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8042730:	d02c      	beq.n	804278c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8042732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8042736:	d824      	bhi.n	8042782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8042738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804273c:	d018      	beq.n	8042770 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 804273e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042742:	d81e      	bhi.n	8042782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8042744:	2b00      	cmp	r3, #0
 8042746:	d003      	beq.n	8042750 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8042748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804274c:	d007      	beq.n	804275e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 804274e:	e018      	b.n	8042782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042750:	4b16      	ldr	r3, [pc, #88]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042754:	4a15      	ldr	r2, [pc, #84]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804275a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 804275c:	e017      	b.n	804278e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 804275e:	687b      	ldr	r3, [r7, #4]
 8042760:	3304      	adds	r3, #4
 8042762:	2100      	movs	r1, #0
 8042764:	4618      	mov	r0, r3
 8042766:	f001 f8d5 	bl	8043914 <RCCEx_PLL2_Config>
 804276a:	4603      	mov	r3, r0
 804276c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 804276e:	e00e      	b.n	804278e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042770:	687b      	ldr	r3, [r7, #4]
 8042772:	3324      	adds	r3, #36	; 0x24
 8042774:	2100      	movs	r1, #0
 8042776:	4618      	mov	r0, r3
 8042778:	f001 f97e 	bl	8043a78 <RCCEx_PLL3_Config>
 804277c:	4603      	mov	r3, r0
 804277e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8042780:	e005      	b.n	804278e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8042782:	2301      	movs	r3, #1
 8042784:	75fb      	strb	r3, [r7, #23]
      break;
 8042786:	e002      	b.n	804278e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8042788:	bf00      	nop
 804278a:	e000      	b.n	804278e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 804278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 804278e:	7dfb      	ldrb	r3, [r7, #23]
 8042790:	2b00      	cmp	r3, #0
 8042792:	d10d      	bne.n	80427b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8042794:	4b05      	ldr	r3, [pc, #20]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8042796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042798:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 804279c:	687b      	ldr	r3, [r7, #4]
 804279e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80427a2:	4902      	ldr	r1, [pc, #8]	; (80427ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80427a4:	4313      	orrs	r3, r2
 80427a6:	658b      	str	r3, [r1, #88]	; 0x58
 80427a8:	e004      	b.n	80427b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80427aa:	bf00      	nop
 80427ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80427b0:	7dfb      	ldrb	r3, [r7, #23]
 80427b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80427b4:	687b      	ldr	r3, [r7, #4]
 80427b6:	681b      	ldr	r3, [r3, #0]
 80427b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80427bc:	2b00      	cmp	r3, #0
 80427be:	d032      	beq.n	8042826 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80427c0:	687b      	ldr	r3, [r7, #4]
 80427c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80427c4:	2b30      	cmp	r3, #48	; 0x30
 80427c6:	d01c      	beq.n	8042802 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80427c8:	2b30      	cmp	r3, #48	; 0x30
 80427ca:	d817      	bhi.n	80427fc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80427cc:	2b20      	cmp	r3, #32
 80427ce:	d00c      	beq.n	80427ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80427d0:	2b20      	cmp	r3, #32
 80427d2:	d813      	bhi.n	80427fc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80427d4:	2b00      	cmp	r3, #0
 80427d6:	d016      	beq.n	8042806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80427d8:	2b10      	cmp	r3, #16
 80427da:	d10f      	bne.n	80427fc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80427dc:	4bb1      	ldr	r3, [pc, #708]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80427de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80427e0:	4ab0      	ldr	r2, [pc, #704]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80427e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80427e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80427e8:	e00e      	b.n	8042808 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80427ea:	687b      	ldr	r3, [r7, #4]
 80427ec:	3304      	adds	r3, #4
 80427ee:	2102      	movs	r1, #2
 80427f0:	4618      	mov	r0, r3
 80427f2:	f001 f88f 	bl	8043914 <RCCEx_PLL2_Config>
 80427f6:	4603      	mov	r3, r0
 80427f8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80427fa:	e005      	b.n	8042808 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80427fc:	2301      	movs	r3, #1
 80427fe:	75fb      	strb	r3, [r7, #23]
      break;
 8042800:	e002      	b.n	8042808 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8042802:	bf00      	nop
 8042804:	e000      	b.n	8042808 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8042806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042808:	7dfb      	ldrb	r3, [r7, #23]
 804280a:	2b00      	cmp	r3, #0
 804280c:	d109      	bne.n	8042822 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 804280e:	4ba5      	ldr	r3, [pc, #660]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042816:	687b      	ldr	r3, [r7, #4]
 8042818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804281a:	49a2      	ldr	r1, [pc, #648]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 804281c:	4313      	orrs	r3, r2
 804281e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8042820:	e001      	b.n	8042826 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042822:	7dfb      	ldrb	r3, [r7, #23]
 8042824:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8042826:	687b      	ldr	r3, [r7, #4]
 8042828:	681b      	ldr	r3, [r3, #0]
 804282a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804282e:	2b00      	cmp	r3, #0
 8042830:	d047      	beq.n	80428c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8042832:	687b      	ldr	r3, [r7, #4]
 8042834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804283a:	d030      	beq.n	804289e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 804283c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042840:	d82a      	bhi.n	8042898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8042842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042846:	d02c      	beq.n	80428a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8042848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 804284c:	d824      	bhi.n	8042898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 804284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042852:	d018      	beq.n	8042886 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8042854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042858:	d81e      	bhi.n	8042898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 804285a:	2b00      	cmp	r3, #0
 804285c:	d003      	beq.n	8042866 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 804285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042862:	d007      	beq.n	8042874 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8042864:	e018      	b.n	8042898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042866:	4b8f      	ldr	r3, [pc, #572]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804286a:	4a8e      	ldr	r2, [pc, #568]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 804286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8042872:	e017      	b.n	80428a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8042874:	687b      	ldr	r3, [r7, #4]
 8042876:	3304      	adds	r3, #4
 8042878:	2100      	movs	r1, #0
 804287a:	4618      	mov	r0, r3
 804287c:	f001 f84a 	bl	8043914 <RCCEx_PLL2_Config>
 8042880:	4603      	mov	r3, r0
 8042882:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8042884:	e00e      	b.n	80428a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8042886:	687b      	ldr	r3, [r7, #4]
 8042888:	3324      	adds	r3, #36	; 0x24
 804288a:	2100      	movs	r1, #0
 804288c:	4618      	mov	r0, r3
 804288e:	f001 f8f3 	bl	8043a78 <RCCEx_PLL3_Config>
 8042892:	4603      	mov	r3, r0
 8042894:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8042896:	e005      	b.n	80428a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042898:	2301      	movs	r3, #1
 804289a:	75fb      	strb	r3, [r7, #23]
      break;
 804289c:	e002      	b.n	80428a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 804289e:	bf00      	nop
 80428a0:	e000      	b.n	80428a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80428a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80428a4:	7dfb      	ldrb	r3, [r7, #23]
 80428a6:	2b00      	cmp	r3, #0
 80428a8:	d109      	bne.n	80428be <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80428aa:	4b7e      	ldr	r3, [pc, #504]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80428ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80428ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80428b6:	497b      	ldr	r1, [pc, #492]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80428b8:	4313      	orrs	r3, r2
 80428ba:	650b      	str	r3, [r1, #80]	; 0x50
 80428bc:	e001      	b.n	80428c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80428be:	7dfb      	ldrb	r3, [r7, #23]
 80428c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80428c2:	687b      	ldr	r3, [r7, #4]
 80428c4:	681b      	ldr	r3, [r3, #0]
 80428c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80428ca:	2b00      	cmp	r3, #0
 80428cc:	d049      	beq.n	8042962 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80428ce:	687b      	ldr	r3, [r7, #4]
 80428d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80428d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80428d6:	d02e      	beq.n	8042936 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80428d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80428dc:	d828      	bhi.n	8042930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80428de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80428e2:	d02a      	beq.n	804293a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80428e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80428e8:	d822      	bhi.n	8042930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80428ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80428ee:	d026      	beq.n	804293e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80428f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80428f4:	d81c      	bhi.n	8042930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80428f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80428fa:	d010      	beq.n	804291e <HAL_RCCEx_PeriphCLKConfig+0x466>
 80428fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8042900:	d816      	bhi.n	8042930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8042902:	2b00      	cmp	r3, #0
 8042904:	d01d      	beq.n	8042942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8042906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804290a:	d111      	bne.n	8042930 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 804290c:	687b      	ldr	r3, [r7, #4]
 804290e:	3304      	adds	r3, #4
 8042910:	2101      	movs	r1, #1
 8042912:	4618      	mov	r0, r3
 8042914:	f000 fffe 	bl	8043914 <RCCEx_PLL2_Config>
 8042918:	4603      	mov	r3, r0
 804291a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 804291c:	e012      	b.n	8042944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 804291e:	687b      	ldr	r3, [r7, #4]
 8042920:	3324      	adds	r3, #36	; 0x24
 8042922:	2101      	movs	r1, #1
 8042924:	4618      	mov	r0, r3
 8042926:	f001 f8a7 	bl	8043a78 <RCCEx_PLL3_Config>
 804292a:	4603      	mov	r3, r0
 804292c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 804292e:	e009      	b.n	8042944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042930:	2301      	movs	r3, #1
 8042932:	75fb      	strb	r3, [r7, #23]
      break;
 8042934:	e006      	b.n	8042944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8042936:	bf00      	nop
 8042938:	e004      	b.n	8042944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 804293a:	bf00      	nop
 804293c:	e002      	b.n	8042944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 804293e:	bf00      	nop
 8042940:	e000      	b.n	8042944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8042942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042944:	7dfb      	ldrb	r3, [r7, #23]
 8042946:	2b00      	cmp	r3, #0
 8042948:	d109      	bne.n	804295e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 804294a:	4b56      	ldr	r3, [pc, #344]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 804294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804294e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8042952:	687b      	ldr	r3, [r7, #4]
 8042954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042956:	4953      	ldr	r1, [pc, #332]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042958:	4313      	orrs	r3, r2
 804295a:	650b      	str	r3, [r1, #80]	; 0x50
 804295c:	e001      	b.n	8042962 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804295e:	7dfb      	ldrb	r3, [r7, #23]
 8042960:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8042962:	687b      	ldr	r3, [r7, #4]
 8042964:	681b      	ldr	r3, [r3, #0]
 8042966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804296a:	2b00      	cmp	r3, #0
 804296c:	d04b      	beq.n	8042a06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 804296e:	687b      	ldr	r3, [r7, #4]
 8042970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8042974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042978:	d02e      	beq.n	80429d8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 804297a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 804297e:	d828      	bhi.n	80429d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8042980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042984:	d02a      	beq.n	80429dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8042986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804298a:	d822      	bhi.n	80429d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 804298c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042990:	d026      	beq.n	80429e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8042992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042996:	d81c      	bhi.n	80429d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8042998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804299c:	d010      	beq.n	80429c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 804299e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80429a2:	d816      	bhi.n	80429d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80429a4:	2b00      	cmp	r3, #0
 80429a6:	d01d      	beq.n	80429e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80429a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80429ac:	d111      	bne.n	80429d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80429ae:	687b      	ldr	r3, [r7, #4]
 80429b0:	3304      	adds	r3, #4
 80429b2:	2101      	movs	r1, #1
 80429b4:	4618      	mov	r0, r3
 80429b6:	f000 ffad 	bl	8043914 <RCCEx_PLL2_Config>
 80429ba:	4603      	mov	r3, r0
 80429bc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80429be:	e012      	b.n	80429e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80429c0:	687b      	ldr	r3, [r7, #4]
 80429c2:	3324      	adds	r3, #36	; 0x24
 80429c4:	2101      	movs	r1, #1
 80429c6:	4618      	mov	r0, r3
 80429c8:	f001 f856 	bl	8043a78 <RCCEx_PLL3_Config>
 80429cc:	4603      	mov	r3, r0
 80429ce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80429d0:	e009      	b.n	80429e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80429d2:	2301      	movs	r3, #1
 80429d4:	75fb      	strb	r3, [r7, #23]
      break;
 80429d6:	e006      	b.n	80429e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80429d8:	bf00      	nop
 80429da:	e004      	b.n	80429e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80429dc:	bf00      	nop
 80429de:	e002      	b.n	80429e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80429e0:	bf00      	nop
 80429e2:	e000      	b.n	80429e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80429e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80429e6:	7dfb      	ldrb	r3, [r7, #23]
 80429e8:	2b00      	cmp	r3, #0
 80429ea:	d10a      	bne.n	8042a02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80429ec:	4b2d      	ldr	r3, [pc, #180]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80429ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80429f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80429f4:	687b      	ldr	r3, [r7, #4]
 80429f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80429fa:	492a      	ldr	r1, [pc, #168]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80429fc:	4313      	orrs	r3, r2
 80429fe:	658b      	str	r3, [r1, #88]	; 0x58
 8042a00:	e001      	b.n	8042a06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042a02:	7dfb      	ldrb	r3, [r7, #23]
 8042a04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8042a06:	687b      	ldr	r3, [r7, #4]
 8042a08:	681b      	ldr	r3, [r3, #0]
 8042a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042a0e:	2b00      	cmp	r3, #0
 8042a10:	d022      	beq.n	8042a58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8042a12:	687b      	ldr	r3, [r7, #4]
 8042a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a16:	2b00      	cmp	r3, #0
 8042a18:	d00e      	beq.n	8042a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8042a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042a1e:	d108      	bne.n	8042a32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8042a20:	687b      	ldr	r3, [r7, #4]
 8042a22:	3304      	adds	r3, #4
 8042a24:	2101      	movs	r1, #1
 8042a26:	4618      	mov	r0, r3
 8042a28:	f000 ff74 	bl	8043914 <RCCEx_PLL2_Config>
 8042a2c:	4603      	mov	r3, r0
 8042a2e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8042a30:	e003      	b.n	8042a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042a32:	2301      	movs	r3, #1
 8042a34:	75fb      	strb	r3, [r7, #23]
      break;
 8042a36:	e000      	b.n	8042a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8042a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042a3a:	7dfb      	ldrb	r3, [r7, #23]
 8042a3c:	2b00      	cmp	r3, #0
 8042a3e:	d109      	bne.n	8042a54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8042a40:	4b18      	ldr	r3, [pc, #96]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8042a48:	687b      	ldr	r3, [r7, #4]
 8042a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a4c:	4915      	ldr	r1, [pc, #84]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042a4e:	4313      	orrs	r3, r2
 8042a50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8042a52:	e001      	b.n	8042a58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042a54:	7dfb      	ldrb	r3, [r7, #23]
 8042a56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042a58:	687b      	ldr	r3, [r7, #4]
 8042a5a:	681b      	ldr	r3, [r3, #0]
 8042a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8042a60:	2b00      	cmp	r3, #0
 8042a62:	d031      	beq.n	8042ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8042a64:	687b      	ldr	r3, [r7, #4]
 8042a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042a6c:	d00e      	beq.n	8042a8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8042a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042a72:	d814      	bhi.n	8042a9e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8042a74:	2b00      	cmp	r3, #0
 8042a76:	d017      	beq.n	8042aa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8042a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042a7c:	d10f      	bne.n	8042a9e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042a7e:	4b09      	ldr	r3, [pc, #36]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042a82:	4a08      	ldr	r2, [pc, #32]	; (8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8042a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8042a8a:	e00e      	b.n	8042aaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8042a8c:	687b      	ldr	r3, [r7, #4]
 8042a8e:	3304      	adds	r3, #4
 8042a90:	2101      	movs	r1, #1
 8042a92:	4618      	mov	r0, r3
 8042a94:	f000 ff3e 	bl	8043914 <RCCEx_PLL2_Config>
 8042a98:	4603      	mov	r3, r0
 8042a9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8042a9c:	e005      	b.n	8042aaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042a9e:	2301      	movs	r3, #1
 8042aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8042aa2:	e002      	b.n	8042aaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8042aa4:	58024400 	.word	0x58024400
      break;
 8042aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042aaa:	7dfb      	ldrb	r3, [r7, #23]
 8042aac:	2b00      	cmp	r3, #0
 8042aae:	d109      	bne.n	8042ac4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042ab0:	4bbc      	ldr	r3, [pc, #752]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042ab4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8042ab8:	687b      	ldr	r3, [r7, #4]
 8042aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042abc:	49b9      	ldr	r1, [pc, #740]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042abe:	4313      	orrs	r3, r2
 8042ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8042ac2:	e001      	b.n	8042ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042ac4:	7dfb      	ldrb	r3, [r7, #23]
 8042ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8042ac8:	687b      	ldr	r3, [r7, #4]
 8042aca:	681b      	ldr	r3, [r3, #0]
 8042acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042ad0:	2b00      	cmp	r3, #0
 8042ad2:	d032      	beq.n	8042b3a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042ad8:	2b03      	cmp	r3, #3
 8042ada:	d81b      	bhi.n	8042b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8042adc:	a201      	add	r2, pc, #4	; (adr r2, 8042ae4 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8042ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042ae2:	bf00      	nop
 8042ae4:	08042b1b 	.word	0x08042b1b
 8042ae8:	08042af5 	.word	0x08042af5
 8042aec:	08042b03 	.word	0x08042b03
 8042af0:	08042b1b 	.word	0x08042b1b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042af4:	4bab      	ldr	r3, [pc, #684]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042af8:	4aaa      	ldr	r2, [pc, #680]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8042b00:	e00c      	b.n	8042b1c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	3304      	adds	r3, #4
 8042b06:	2102      	movs	r1, #2
 8042b08:	4618      	mov	r0, r3
 8042b0a:	f000 ff03 	bl	8043914 <RCCEx_PLL2_Config>
 8042b0e:	4603      	mov	r3, r0
 8042b10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8042b12:	e003      	b.n	8042b1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8042b14:	2301      	movs	r3, #1
 8042b16:	75fb      	strb	r3, [r7, #23]
      break;
 8042b18:	e000      	b.n	8042b1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8042b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042b1c:	7dfb      	ldrb	r3, [r7, #23]
 8042b1e:	2b00      	cmp	r3, #0
 8042b20:	d109      	bne.n	8042b36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8042b22:	4ba0      	ldr	r3, [pc, #640]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042b26:	f023 0203 	bic.w	r2, r3, #3
 8042b2a:	687b      	ldr	r3, [r7, #4]
 8042b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042b2e:	499d      	ldr	r1, [pc, #628]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042b30:	4313      	orrs	r3, r2
 8042b32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8042b34:	e001      	b.n	8042b3a <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042b36:	7dfb      	ldrb	r3, [r7, #23]
 8042b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042b3a:	687b      	ldr	r3, [r7, #4]
 8042b3c:	681b      	ldr	r3, [r3, #0]
 8042b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042b42:	2b00      	cmp	r3, #0
 8042b44:	f000 8086 	beq.w	8042c54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042b48:	4b97      	ldr	r3, [pc, #604]	; (8042da8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8042b4a:	681b      	ldr	r3, [r3, #0]
 8042b4c:	4a96      	ldr	r2, [pc, #600]	; (8042da8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8042b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042b54:	f7fe f91c 	bl	8040d90 <HAL_GetTick>
 8042b58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042b5a:	e009      	b.n	8042b70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042b5c:	f7fe f918 	bl	8040d90 <HAL_GetTick>
 8042b60:	4602      	mov	r2, r0
 8042b62:	693b      	ldr	r3, [r7, #16]
 8042b64:	1ad3      	subs	r3, r2, r3
 8042b66:	2b64      	cmp	r3, #100	; 0x64
 8042b68:	d902      	bls.n	8042b70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8042b6a:	2303      	movs	r3, #3
 8042b6c:	75fb      	strb	r3, [r7, #23]
        break;
 8042b6e:	e005      	b.n	8042b7c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042b70:	4b8d      	ldr	r3, [pc, #564]	; (8042da8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8042b72:	681b      	ldr	r3, [r3, #0]
 8042b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042b78:	2b00      	cmp	r3, #0
 8042b7a:	d0ef      	beq.n	8042b5c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8042b7c:	7dfb      	ldrb	r3, [r7, #23]
 8042b7e:	2b00      	cmp	r3, #0
 8042b80:	d166      	bne.n	8042c50 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8042b82:	4b88      	ldr	r3, [pc, #544]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8042b86:	687b      	ldr	r3, [r7, #4]
 8042b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042b8c:	4053      	eors	r3, r2
 8042b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042b92:	2b00      	cmp	r3, #0
 8042b94:	d013      	beq.n	8042bbe <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042b96:	4b83      	ldr	r3, [pc, #524]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042b9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042ba0:	4b80      	ldr	r3, [pc, #512]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042ba4:	4a7f      	ldr	r2, [pc, #508]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042baa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042bac:	4b7d      	ldr	r3, [pc, #500]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042bb0:	4a7c      	ldr	r2, [pc, #496]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042bb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8042bb8:	4a7a      	ldr	r2, [pc, #488]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8042bbe:	687b      	ldr	r3, [r7, #4]
 8042bc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042bc8:	d115      	bne.n	8042bf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042bca:	f7fe f8e1 	bl	8040d90 <HAL_GetTick>
 8042bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042bd0:	e00b      	b.n	8042bea <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042bd2:	f7fe f8dd 	bl	8040d90 <HAL_GetTick>
 8042bd6:	4602      	mov	r2, r0
 8042bd8:	693b      	ldr	r3, [r7, #16]
 8042bda:	1ad3      	subs	r3, r2, r3
 8042bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8042be0:	4293      	cmp	r3, r2
 8042be2:	d902      	bls.n	8042bea <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8042be4:	2303      	movs	r3, #3
 8042be6:	75fb      	strb	r3, [r7, #23]
            break;
 8042be8:	e005      	b.n	8042bf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042bea:	4b6e      	ldr	r3, [pc, #440]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042bee:	f003 0302 	and.w	r3, r3, #2
 8042bf2:	2b00      	cmp	r3, #0
 8042bf4:	d0ed      	beq.n	8042bd2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8042bf6:	7dfb      	ldrb	r3, [r7, #23]
 8042bf8:	2b00      	cmp	r3, #0
 8042bfa:	d126      	bne.n	8042c4a <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042bfc:	687b      	ldr	r3, [r7, #4]
 8042bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042c0a:	d10d      	bne.n	8042c28 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8042c0c:	4b65      	ldr	r3, [pc, #404]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042c0e:	691b      	ldr	r3, [r3, #16]
 8042c10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042c1a:	0919      	lsrs	r1, r3, #4
 8042c1c:	4b63      	ldr	r3, [pc, #396]	; (8042dac <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8042c1e:	400b      	ands	r3, r1
 8042c20:	4960      	ldr	r1, [pc, #384]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042c22:	4313      	orrs	r3, r2
 8042c24:	610b      	str	r3, [r1, #16]
 8042c26:	e005      	b.n	8042c34 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8042c28:	4b5e      	ldr	r3, [pc, #376]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042c2a:	691b      	ldr	r3, [r3, #16]
 8042c2c:	4a5d      	ldr	r2, [pc, #372]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042c2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8042c32:	6113      	str	r3, [r2, #16]
 8042c34:	4b5b      	ldr	r3, [pc, #364]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8042c38:	687b      	ldr	r3, [r7, #4]
 8042c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042c42:	4958      	ldr	r1, [pc, #352]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042c44:	4313      	orrs	r3, r2
 8042c46:	670b      	str	r3, [r1, #112]	; 0x70
 8042c48:	e004      	b.n	8042c54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8042c4a:	7dfb      	ldrb	r3, [r7, #23]
 8042c4c:	75bb      	strb	r3, [r7, #22]
 8042c4e:	e001      	b.n	8042c54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042c50:	7dfb      	ldrb	r3, [r7, #23]
 8042c52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8042c54:	687b      	ldr	r3, [r7, #4]
 8042c56:	681b      	ldr	r3, [r3, #0]
 8042c58:	f003 0301 	and.w	r3, r3, #1
 8042c5c:	2b00      	cmp	r3, #0
 8042c5e:	d07e      	beq.n	8042d5e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8042c60:	687b      	ldr	r3, [r7, #4]
 8042c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042c64:	2b28      	cmp	r3, #40	; 0x28
 8042c66:	d867      	bhi.n	8042d38 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8042c68:	a201      	add	r2, pc, #4	; (adr r2, 8042c70 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8042c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042c6e:	bf00      	nop
 8042c70:	08042d3f 	.word	0x08042d3f
 8042c74:	08042d39 	.word	0x08042d39
 8042c78:	08042d39 	.word	0x08042d39
 8042c7c:	08042d39 	.word	0x08042d39
 8042c80:	08042d39 	.word	0x08042d39
 8042c84:	08042d39 	.word	0x08042d39
 8042c88:	08042d39 	.word	0x08042d39
 8042c8c:	08042d39 	.word	0x08042d39
 8042c90:	08042d15 	.word	0x08042d15
 8042c94:	08042d39 	.word	0x08042d39
 8042c98:	08042d39 	.word	0x08042d39
 8042c9c:	08042d39 	.word	0x08042d39
 8042ca0:	08042d39 	.word	0x08042d39
 8042ca4:	08042d39 	.word	0x08042d39
 8042ca8:	08042d39 	.word	0x08042d39
 8042cac:	08042d39 	.word	0x08042d39
 8042cb0:	08042d27 	.word	0x08042d27
 8042cb4:	08042d39 	.word	0x08042d39
 8042cb8:	08042d39 	.word	0x08042d39
 8042cbc:	08042d39 	.word	0x08042d39
 8042cc0:	08042d39 	.word	0x08042d39
 8042cc4:	08042d39 	.word	0x08042d39
 8042cc8:	08042d39 	.word	0x08042d39
 8042ccc:	08042d39 	.word	0x08042d39
 8042cd0:	08042d3f 	.word	0x08042d3f
 8042cd4:	08042d39 	.word	0x08042d39
 8042cd8:	08042d39 	.word	0x08042d39
 8042cdc:	08042d39 	.word	0x08042d39
 8042ce0:	08042d39 	.word	0x08042d39
 8042ce4:	08042d39 	.word	0x08042d39
 8042ce8:	08042d39 	.word	0x08042d39
 8042cec:	08042d39 	.word	0x08042d39
 8042cf0:	08042d3f 	.word	0x08042d3f
 8042cf4:	08042d39 	.word	0x08042d39
 8042cf8:	08042d39 	.word	0x08042d39
 8042cfc:	08042d39 	.word	0x08042d39
 8042d00:	08042d39 	.word	0x08042d39
 8042d04:	08042d39 	.word	0x08042d39
 8042d08:	08042d39 	.word	0x08042d39
 8042d0c:	08042d39 	.word	0x08042d39
 8042d10:	08042d3f 	.word	0x08042d3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8042d14:	687b      	ldr	r3, [r7, #4]
 8042d16:	3304      	adds	r3, #4
 8042d18:	2101      	movs	r1, #1
 8042d1a:	4618      	mov	r0, r3
 8042d1c:	f000 fdfa 	bl	8043914 <RCCEx_PLL2_Config>
 8042d20:	4603      	mov	r3, r0
 8042d22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8042d24:	e00c      	b.n	8042d40 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8042d26:	687b      	ldr	r3, [r7, #4]
 8042d28:	3324      	adds	r3, #36	; 0x24
 8042d2a:	2101      	movs	r1, #1
 8042d2c:	4618      	mov	r0, r3
 8042d2e:	f000 fea3 	bl	8043a78 <RCCEx_PLL3_Config>
 8042d32:	4603      	mov	r3, r0
 8042d34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8042d36:	e003      	b.n	8042d40 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042d38:	2301      	movs	r3, #1
 8042d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8042d3c:	e000      	b.n	8042d40 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8042d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042d40:	7dfb      	ldrb	r3, [r7, #23]
 8042d42:	2b00      	cmp	r3, #0
 8042d44:	d109      	bne.n	8042d5a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8042d46:	4b17      	ldr	r3, [pc, #92]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8042d4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8042d4e:	687b      	ldr	r3, [r7, #4]
 8042d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042d52:	4914      	ldr	r1, [pc, #80]	; (8042da4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8042d54:	4313      	orrs	r3, r2
 8042d56:	654b      	str	r3, [r1, #84]	; 0x54
 8042d58:	e001      	b.n	8042d5e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042d5a:	7dfb      	ldrb	r3, [r7, #23]
 8042d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8042d5e:	687b      	ldr	r3, [r7, #4]
 8042d60:	681b      	ldr	r3, [r3, #0]
 8042d62:	f003 0302 	and.w	r3, r3, #2
 8042d66:	2b00      	cmp	r3, #0
 8042d68:	d03e      	beq.n	8042de8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8042d6a:	687b      	ldr	r3, [r7, #4]
 8042d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042d6e:	2b05      	cmp	r3, #5
 8042d70:	d827      	bhi.n	8042dc2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8042d72:	a201      	add	r2, pc, #4	; (adr r2, 8042d78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8042d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042d78:	08042dc9 	.word	0x08042dc9
 8042d7c:	08042d91 	.word	0x08042d91
 8042d80:	08042db1 	.word	0x08042db1
 8042d84:	08042dc9 	.word	0x08042dc9
 8042d88:	08042dc9 	.word	0x08042dc9
 8042d8c:	08042dc9 	.word	0x08042dc9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8042d90:	687b      	ldr	r3, [r7, #4]
 8042d92:	3304      	adds	r3, #4
 8042d94:	2101      	movs	r1, #1
 8042d96:	4618      	mov	r0, r3
 8042d98:	f000 fdbc 	bl	8043914 <RCCEx_PLL2_Config>
 8042d9c:	4603      	mov	r3, r0
 8042d9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8042da0:	e013      	b.n	8042dca <HAL_RCCEx_PeriphCLKConfig+0x912>
 8042da2:	bf00      	nop
 8042da4:	58024400 	.word	0x58024400
 8042da8:	58024800 	.word	0x58024800
 8042dac:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8042db0:	687b      	ldr	r3, [r7, #4]
 8042db2:	3324      	adds	r3, #36	; 0x24
 8042db4:	2101      	movs	r1, #1
 8042db6:	4618      	mov	r0, r3
 8042db8:	f000 fe5e 	bl	8043a78 <RCCEx_PLL3_Config>
 8042dbc:	4603      	mov	r3, r0
 8042dbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8042dc0:	e003      	b.n	8042dca <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042dc2:	2301      	movs	r3, #1
 8042dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8042dc6:	e000      	b.n	8042dca <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8042dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042dca:	7dfb      	ldrb	r3, [r7, #23]
 8042dcc:	2b00      	cmp	r3, #0
 8042dce:	d109      	bne.n	8042de4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8042dd0:	4b9f      	ldr	r3, [pc, #636]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8042dd4:	f023 0207 	bic.w	r2, r3, #7
 8042dd8:	687b      	ldr	r3, [r7, #4]
 8042dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042ddc:	499c      	ldr	r1, [pc, #624]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042dde:	4313      	orrs	r3, r2
 8042de0:	654b      	str	r3, [r1, #84]	; 0x54
 8042de2:	e001      	b.n	8042de8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042de4:	7dfb      	ldrb	r3, [r7, #23]
 8042de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8042de8:	687b      	ldr	r3, [r7, #4]
 8042dea:	681b      	ldr	r3, [r3, #0]
 8042dec:	f003 0304 	and.w	r3, r3, #4
 8042df0:	2b00      	cmp	r3, #0
 8042df2:	d039      	beq.n	8042e68 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8042df4:	687b      	ldr	r3, [r7, #4]
 8042df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8042dfa:	2b05      	cmp	r3, #5
 8042dfc:	d820      	bhi.n	8042e40 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8042dfe:	a201      	add	r2, pc, #4	; (adr r2, 8042e04 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8042e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042e04:	08042e47 	.word	0x08042e47
 8042e08:	08042e1d 	.word	0x08042e1d
 8042e0c:	08042e2f 	.word	0x08042e2f
 8042e10:	08042e47 	.word	0x08042e47
 8042e14:	08042e47 	.word	0x08042e47
 8042e18:	08042e47 	.word	0x08042e47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8042e1c:	687b      	ldr	r3, [r7, #4]
 8042e1e:	3304      	adds	r3, #4
 8042e20:	2101      	movs	r1, #1
 8042e22:	4618      	mov	r0, r3
 8042e24:	f000 fd76 	bl	8043914 <RCCEx_PLL2_Config>
 8042e28:	4603      	mov	r3, r0
 8042e2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8042e2c:	e00c      	b.n	8042e48 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8042e2e:	687b      	ldr	r3, [r7, #4]
 8042e30:	3324      	adds	r3, #36	; 0x24
 8042e32:	2101      	movs	r1, #1
 8042e34:	4618      	mov	r0, r3
 8042e36:	f000 fe1f 	bl	8043a78 <RCCEx_PLL3_Config>
 8042e3a:	4603      	mov	r3, r0
 8042e3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8042e3e:	e003      	b.n	8042e48 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042e40:	2301      	movs	r3, #1
 8042e42:	75fb      	strb	r3, [r7, #23]
      break;
 8042e44:	e000      	b.n	8042e48 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8042e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042e48:	7dfb      	ldrb	r3, [r7, #23]
 8042e4a:	2b00      	cmp	r3, #0
 8042e4c:	d10a      	bne.n	8042e64 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8042e4e:	4b80      	ldr	r3, [pc, #512]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042e52:	f023 0207 	bic.w	r2, r3, #7
 8042e56:	687b      	ldr	r3, [r7, #4]
 8042e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8042e5c:	497c      	ldr	r1, [pc, #496]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042e5e:	4313      	orrs	r3, r2
 8042e60:	658b      	str	r3, [r1, #88]	; 0x58
 8042e62:	e001      	b.n	8042e68 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042e64:	7dfb      	ldrb	r3, [r7, #23]
 8042e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8042e68:	687b      	ldr	r3, [r7, #4]
 8042e6a:	681b      	ldr	r3, [r3, #0]
 8042e6c:	f003 0320 	and.w	r3, r3, #32
 8042e70:	2b00      	cmp	r3, #0
 8042e72:	d04b      	beq.n	8042f0c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8042e74:	687b      	ldr	r3, [r7, #4]
 8042e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042e7e:	d02e      	beq.n	8042ede <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8042e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042e84:	d828      	bhi.n	8042ed8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8042e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042e8a:	d02a      	beq.n	8042ee2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8042e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042e90:	d822      	bhi.n	8042ed8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8042e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042e96:	d026      	beq.n	8042ee6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8042e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042e9c:	d81c      	bhi.n	8042ed8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8042e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042ea2:	d010      	beq.n	8042ec6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8042ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042ea8:	d816      	bhi.n	8042ed8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8042eaa:	2b00      	cmp	r3, #0
 8042eac:	d01d      	beq.n	8042eea <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8042eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042eb2:	d111      	bne.n	8042ed8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8042eb4:	687b      	ldr	r3, [r7, #4]
 8042eb6:	3304      	adds	r3, #4
 8042eb8:	2100      	movs	r1, #0
 8042eba:	4618      	mov	r0, r3
 8042ebc:	f000 fd2a 	bl	8043914 <RCCEx_PLL2_Config>
 8042ec0:	4603      	mov	r3, r0
 8042ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8042ec4:	e012      	b.n	8042eec <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8042ec6:	687b      	ldr	r3, [r7, #4]
 8042ec8:	3324      	adds	r3, #36	; 0x24
 8042eca:	2102      	movs	r1, #2
 8042ecc:	4618      	mov	r0, r3
 8042ece:	f000 fdd3 	bl	8043a78 <RCCEx_PLL3_Config>
 8042ed2:	4603      	mov	r3, r0
 8042ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8042ed6:	e009      	b.n	8042eec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042ed8:	2301      	movs	r3, #1
 8042eda:	75fb      	strb	r3, [r7, #23]
      break;
 8042edc:	e006      	b.n	8042eec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8042ede:	bf00      	nop
 8042ee0:	e004      	b.n	8042eec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8042ee2:	bf00      	nop
 8042ee4:	e002      	b.n	8042eec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8042ee6:	bf00      	nop
 8042ee8:	e000      	b.n	8042eec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8042eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042eec:	7dfb      	ldrb	r3, [r7, #23]
 8042eee:	2b00      	cmp	r3, #0
 8042ef0:	d10a      	bne.n	8042f08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8042ef2:	4b57      	ldr	r3, [pc, #348]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8042ef6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8042efa:	687b      	ldr	r3, [r7, #4]
 8042efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042f00:	4953      	ldr	r1, [pc, #332]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042f02:	4313      	orrs	r3, r2
 8042f04:	654b      	str	r3, [r1, #84]	; 0x54
 8042f06:	e001      	b.n	8042f0c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042f08:	7dfb      	ldrb	r3, [r7, #23]
 8042f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8042f0c:	687b      	ldr	r3, [r7, #4]
 8042f0e:	681b      	ldr	r3, [r3, #0]
 8042f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042f14:	2b00      	cmp	r3, #0
 8042f16:	d04b      	beq.n	8042fb0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8042f18:	687b      	ldr	r3, [r7, #4]
 8042f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042f1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8042f22:	d02e      	beq.n	8042f82 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8042f24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8042f28:	d828      	bhi.n	8042f7c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8042f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042f2e:	d02a      	beq.n	8042f86 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8042f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042f34:	d822      	bhi.n	8042f7c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8042f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042f3a:	d026      	beq.n	8042f8a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8042f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042f40:	d81c      	bhi.n	8042f7c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8042f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042f46:	d010      	beq.n	8042f6a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8042f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042f4c:	d816      	bhi.n	8042f7c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8042f4e:	2b00      	cmp	r3, #0
 8042f50:	d01d      	beq.n	8042f8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8042f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042f56:	d111      	bne.n	8042f7c <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8042f58:	687b      	ldr	r3, [r7, #4]
 8042f5a:	3304      	adds	r3, #4
 8042f5c:	2100      	movs	r1, #0
 8042f5e:	4618      	mov	r0, r3
 8042f60:	f000 fcd8 	bl	8043914 <RCCEx_PLL2_Config>
 8042f64:	4603      	mov	r3, r0
 8042f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8042f68:	e012      	b.n	8042f90 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8042f6a:	687b      	ldr	r3, [r7, #4]
 8042f6c:	3324      	adds	r3, #36	; 0x24
 8042f6e:	2102      	movs	r1, #2
 8042f70:	4618      	mov	r0, r3
 8042f72:	f000 fd81 	bl	8043a78 <RCCEx_PLL3_Config>
 8042f76:	4603      	mov	r3, r0
 8042f78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8042f7a:	e009      	b.n	8042f90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8042f7c:	2301      	movs	r3, #1
 8042f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8042f80:	e006      	b.n	8042f90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8042f82:	bf00      	nop
 8042f84:	e004      	b.n	8042f90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8042f86:	bf00      	nop
 8042f88:	e002      	b.n	8042f90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8042f8a:	bf00      	nop
 8042f8c:	e000      	b.n	8042f90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8042f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8042f90:	7dfb      	ldrb	r3, [r7, #23]
 8042f92:	2b00      	cmp	r3, #0
 8042f94:	d10a      	bne.n	8042fac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8042f96:	4b2e      	ldr	r3, [pc, #184]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8042f9e:	687b      	ldr	r3, [r7, #4]
 8042fa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042fa4:	492a      	ldr	r1, [pc, #168]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8042fa6:	4313      	orrs	r3, r2
 8042fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8042faa:	e001      	b.n	8042fb0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042fac:	7dfb      	ldrb	r3, [r7, #23]
 8042fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8042fb0:	687b      	ldr	r3, [r7, #4]
 8042fb2:	681b      	ldr	r3, [r3, #0]
 8042fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042fb8:	2b00      	cmp	r3, #0
 8042fba:	d04d      	beq.n	8043058 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8042fbc:	687b      	ldr	r3, [r7, #4]
 8042fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8042fc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8042fc6:	d02e      	beq.n	8043026 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8042fc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8042fcc:	d828      	bhi.n	8043020 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8042fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042fd2:	d02a      	beq.n	804302a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8042fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042fd8:	d822      	bhi.n	8043020 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8042fda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8042fde:	d026      	beq.n	804302e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8042fe0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8042fe4:	d81c      	bhi.n	8043020 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8042fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042fea:	d010      	beq.n	804300e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8042fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042ff0:	d816      	bhi.n	8043020 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8042ff2:	2b00      	cmp	r3, #0
 8042ff4:	d01d      	beq.n	8043032 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8042ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042ffa:	d111      	bne.n	8043020 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8042ffc:	687b      	ldr	r3, [r7, #4]
 8042ffe:	3304      	adds	r3, #4
 8043000:	2100      	movs	r1, #0
 8043002:	4618      	mov	r0, r3
 8043004:	f000 fc86 	bl	8043914 <RCCEx_PLL2_Config>
 8043008:	4603      	mov	r3, r0
 804300a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 804300c:	e012      	b.n	8043034 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 804300e:	687b      	ldr	r3, [r7, #4]
 8043010:	3324      	adds	r3, #36	; 0x24
 8043012:	2102      	movs	r1, #2
 8043014:	4618      	mov	r0, r3
 8043016:	f000 fd2f 	bl	8043a78 <RCCEx_PLL3_Config>
 804301a:	4603      	mov	r3, r0
 804301c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 804301e:	e009      	b.n	8043034 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8043020:	2301      	movs	r3, #1
 8043022:	75fb      	strb	r3, [r7, #23]
      break;
 8043024:	e006      	b.n	8043034 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8043026:	bf00      	nop
 8043028:	e004      	b.n	8043034 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 804302a:	bf00      	nop
 804302c:	e002      	b.n	8043034 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 804302e:	bf00      	nop
 8043030:	e000      	b.n	8043034 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8043032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8043034:	7dfb      	ldrb	r3, [r7, #23]
 8043036:	2b00      	cmp	r3, #0
 8043038:	d10c      	bne.n	8043054 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 804303a:	4b05      	ldr	r3, [pc, #20]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 804303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804303e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8043042:	687b      	ldr	r3, [r7, #4]
 8043044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8043048:	4901      	ldr	r1, [pc, #4]	; (8043050 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 804304a:	4313      	orrs	r3, r2
 804304c:	658b      	str	r3, [r1, #88]	; 0x58
 804304e:	e003      	b.n	8043058 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8043050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043054:	7dfb      	ldrb	r3, [r7, #23]
 8043056:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8043058:	687b      	ldr	r3, [r7, #4]
 804305a:	681b      	ldr	r3, [r3, #0]
 804305c:	f003 0308 	and.w	r3, r3, #8
 8043060:	2b00      	cmp	r3, #0
 8043062:	d01a      	beq.n	804309a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8043064:	687b      	ldr	r3, [r7, #4]
 8043066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804306e:	d10a      	bne.n	8043086 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8043070:	687b      	ldr	r3, [r7, #4]
 8043072:	3324      	adds	r3, #36	; 0x24
 8043074:	2102      	movs	r1, #2
 8043076:	4618      	mov	r0, r3
 8043078:	f000 fcfe 	bl	8043a78 <RCCEx_PLL3_Config>
 804307c:	4603      	mov	r3, r0
 804307e:	2b00      	cmp	r3, #0
 8043080:	d001      	beq.n	8043086 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8043082:	2301      	movs	r3, #1
 8043084:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8043086:	4b8c      	ldr	r3, [pc, #560]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804308a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 804308e:	687b      	ldr	r3, [r7, #4]
 8043090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043094:	4988      	ldr	r1, [pc, #544]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043096:	4313      	orrs	r3, r2
 8043098:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804309a:	687b      	ldr	r3, [r7, #4]
 804309c:	681b      	ldr	r3, [r3, #0]
 804309e:	f003 0310 	and.w	r3, r3, #16
 80430a2:	2b00      	cmp	r3, #0
 80430a4:	d01a      	beq.n	80430dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80430ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80430b0:	d10a      	bne.n	80430c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80430b2:	687b      	ldr	r3, [r7, #4]
 80430b4:	3324      	adds	r3, #36	; 0x24
 80430b6:	2102      	movs	r1, #2
 80430b8:	4618      	mov	r0, r3
 80430ba:	f000 fcdd 	bl	8043a78 <RCCEx_PLL3_Config>
 80430be:	4603      	mov	r3, r0
 80430c0:	2b00      	cmp	r3, #0
 80430c2:	d001      	beq.n	80430c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80430c4:	2301      	movs	r3, #1
 80430c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80430c8:	4b7b      	ldr	r3, [pc, #492]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80430ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80430cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80430d6:	4978      	ldr	r1, [pc, #480]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80430d8:	4313      	orrs	r3, r2
 80430da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80430dc:	687b      	ldr	r3, [r7, #4]
 80430de:	681b      	ldr	r3, [r3, #0]
 80430e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80430e4:	2b00      	cmp	r3, #0
 80430e6:	d034      	beq.n	8043152 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80430e8:	687b      	ldr	r3, [r7, #4]
 80430ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80430ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80430f2:	d01d      	beq.n	8043130 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80430f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80430f8:	d817      	bhi.n	804312a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80430fa:	2b00      	cmp	r3, #0
 80430fc:	d003      	beq.n	8043106 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80430fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043102:	d009      	beq.n	8043118 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8043104:	e011      	b.n	804312a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8043106:	687b      	ldr	r3, [r7, #4]
 8043108:	3304      	adds	r3, #4
 804310a:	2100      	movs	r1, #0
 804310c:	4618      	mov	r0, r3
 804310e:	f000 fc01 	bl	8043914 <RCCEx_PLL2_Config>
 8043112:	4603      	mov	r3, r0
 8043114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8043116:	e00c      	b.n	8043132 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8043118:	687b      	ldr	r3, [r7, #4]
 804311a:	3324      	adds	r3, #36	; 0x24
 804311c:	2102      	movs	r1, #2
 804311e:	4618      	mov	r0, r3
 8043120:	f000 fcaa 	bl	8043a78 <RCCEx_PLL3_Config>
 8043124:	4603      	mov	r3, r0
 8043126:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8043128:	e003      	b.n	8043132 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 804312a:	2301      	movs	r3, #1
 804312c:	75fb      	strb	r3, [r7, #23]
      break;
 804312e:	e000      	b.n	8043132 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8043130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8043132:	7dfb      	ldrb	r3, [r7, #23]
 8043134:	2b00      	cmp	r3, #0
 8043136:	d10a      	bne.n	804314e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8043138:	4b5f      	ldr	r3, [pc, #380]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 804313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804313c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8043140:	687b      	ldr	r3, [r7, #4]
 8043142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8043146:	495c      	ldr	r1, [pc, #368]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043148:	4313      	orrs	r3, r2
 804314a:	658b      	str	r3, [r1, #88]	; 0x58
 804314c:	e001      	b.n	8043152 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804314e:	7dfb      	ldrb	r3, [r7, #23]
 8043150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8043152:	687b      	ldr	r3, [r7, #4]
 8043154:	681b      	ldr	r3, [r3, #0]
 8043156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804315a:	2b00      	cmp	r3, #0
 804315c:	d033      	beq.n	80431c6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 804315e:	687b      	ldr	r3, [r7, #4]
 8043160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8043168:	d01c      	beq.n	80431a4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 804316a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 804316e:	d816      	bhi.n	804319e <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8043170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043174:	d003      	beq.n	804317e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8043176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804317a:	d007      	beq.n	804318c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 804317c:	e00f      	b.n	804319e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804317e:	4b4e      	ldr	r3, [pc, #312]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043182:	4a4d      	ldr	r2, [pc, #308]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 804318a:	e00c      	b.n	80431a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 804318c:	687b      	ldr	r3, [r7, #4]
 804318e:	3324      	adds	r3, #36	; 0x24
 8043190:	2101      	movs	r1, #1
 8043192:	4618      	mov	r0, r3
 8043194:	f000 fc70 	bl	8043a78 <RCCEx_PLL3_Config>
 8043198:	4603      	mov	r3, r0
 804319a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 804319c:	e003      	b.n	80431a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 804319e:	2301      	movs	r3, #1
 80431a0:	75fb      	strb	r3, [r7, #23]
      break;
 80431a2:	e000      	b.n	80431a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80431a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80431a6:	7dfb      	ldrb	r3, [r7, #23]
 80431a8:	2b00      	cmp	r3, #0
 80431aa:	d10a      	bne.n	80431c2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80431ac:	4b42      	ldr	r3, [pc, #264]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80431ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80431b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80431b4:	687b      	ldr	r3, [r7, #4]
 80431b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80431ba:	493f      	ldr	r1, [pc, #252]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80431bc:	4313      	orrs	r3, r2
 80431be:	654b      	str	r3, [r1, #84]	; 0x54
 80431c0:	e001      	b.n	80431c6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80431c2:	7dfb      	ldrb	r3, [r7, #23]
 80431c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80431c6:	687b      	ldr	r3, [r7, #4]
 80431c8:	681b      	ldr	r3, [r3, #0]
 80431ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80431ce:	2b00      	cmp	r3, #0
 80431d0:	d029      	beq.n	8043226 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80431d2:	687b      	ldr	r3, [r7, #4]
 80431d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80431d6:	2b00      	cmp	r3, #0
 80431d8:	d003      	beq.n	80431e2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80431da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80431de:	d007      	beq.n	80431f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80431e0:	e00f      	b.n	8043202 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80431e2:	4b35      	ldr	r3, [pc, #212]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80431e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80431e6:	4a34      	ldr	r2, [pc, #208]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80431e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80431ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80431ee:	e00b      	b.n	8043208 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80431f0:	687b      	ldr	r3, [r7, #4]
 80431f2:	3304      	adds	r3, #4
 80431f4:	2102      	movs	r1, #2
 80431f6:	4618      	mov	r0, r3
 80431f8:	f000 fb8c 	bl	8043914 <RCCEx_PLL2_Config>
 80431fc:	4603      	mov	r3, r0
 80431fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8043200:	e002      	b.n	8043208 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8043202:	2301      	movs	r3, #1
 8043204:	75fb      	strb	r3, [r7, #23]
      break;
 8043206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8043208:	7dfb      	ldrb	r3, [r7, #23]
 804320a:	2b00      	cmp	r3, #0
 804320c:	d109      	bne.n	8043222 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 804320e:	4b2a      	ldr	r3, [pc, #168]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8043216:	687b      	ldr	r3, [r7, #4]
 8043218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804321a:	4927      	ldr	r1, [pc, #156]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 804321c:	4313      	orrs	r3, r2
 804321e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8043220:	e001      	b.n	8043226 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043222:	7dfb      	ldrb	r3, [r7, #23]
 8043224:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8043226:	687b      	ldr	r3, [r7, #4]
 8043228:	681b      	ldr	r3, [r3, #0]
 804322a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804322e:	2b00      	cmp	r3, #0
 8043230:	d00a      	beq.n	8043248 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8043232:	687b      	ldr	r3, [r7, #4]
 8043234:	3324      	adds	r3, #36	; 0x24
 8043236:	2102      	movs	r1, #2
 8043238:	4618      	mov	r0, r3
 804323a:	f000 fc1d 	bl	8043a78 <RCCEx_PLL3_Config>
 804323e:	4603      	mov	r3, r0
 8043240:	2b00      	cmp	r3, #0
 8043242:	d001      	beq.n	8043248 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8043244:	2301      	movs	r3, #1
 8043246:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8043248:	687b      	ldr	r3, [r7, #4]
 804324a:	681b      	ldr	r3, [r3, #0]
 804324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043250:	2b00      	cmp	r3, #0
 8043252:	d035      	beq.n	80432c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8043254:	687b      	ldr	r3, [r7, #4]
 8043256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804325a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804325e:	d017      	beq.n	8043290 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8043260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043264:	d811      	bhi.n	804328a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8043266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804326a:	d013      	beq.n	8043294 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 804326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043270:	d80b      	bhi.n	804328a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8043272:	2b00      	cmp	r3, #0
 8043274:	d010      	beq.n	8043298 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8043276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804327a:	d106      	bne.n	804328a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804327c:	4b0e      	ldr	r3, [pc, #56]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 804327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043280:	4a0d      	ldr	r2, [pc, #52]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8043282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8043288:	e007      	b.n	804329a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 804328a:	2301      	movs	r3, #1
 804328c:	75fb      	strb	r3, [r7, #23]
      break;
 804328e:	e004      	b.n	804329a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8043290:	bf00      	nop
 8043292:	e002      	b.n	804329a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8043294:	bf00      	nop
 8043296:	e000      	b.n	804329a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8043298:	bf00      	nop
    }

    if(ret == HAL_OK)
 804329a:	7dfb      	ldrb	r3, [r7, #23]
 804329c:	2b00      	cmp	r3, #0
 804329e:	d10d      	bne.n	80432bc <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80432a0:	4b05      	ldr	r3, [pc, #20]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80432a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80432a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80432a8:	687b      	ldr	r3, [r7, #4]
 80432aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80432ae:	4902      	ldr	r1, [pc, #8]	; (80432b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80432b0:	4313      	orrs	r3, r2
 80432b2:	654b      	str	r3, [r1, #84]	; 0x54
 80432b4:	e004      	b.n	80432c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80432b6:	bf00      	nop
 80432b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80432bc:	7dfb      	ldrb	r3, [r7, #23]
 80432be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80432c0:	687b      	ldr	r3, [r7, #4]
 80432c2:	681b      	ldr	r3, [r3, #0]
 80432c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80432c8:	2b00      	cmp	r3, #0
 80432ca:	d008      	beq.n	80432de <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80432cc:	4b31      	ldr	r3, [pc, #196]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80432ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80432d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80432d4:	687b      	ldr	r3, [r7, #4]
 80432d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80432d8:	492e      	ldr	r1, [pc, #184]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80432da:	4313      	orrs	r3, r2
 80432dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80432de:	687b      	ldr	r3, [r7, #4]
 80432e0:	681b      	ldr	r3, [r3, #0]
 80432e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80432e6:	2b00      	cmp	r3, #0
 80432e8:	d009      	beq.n	80432fe <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80432ea:	4b2a      	ldr	r3, [pc, #168]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80432ec:	691b      	ldr	r3, [r3, #16]
 80432ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80432f2:	687b      	ldr	r3, [r7, #4]
 80432f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80432f8:	4926      	ldr	r1, [pc, #152]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80432fa:	4313      	orrs	r3, r2
 80432fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80432fe:	687b      	ldr	r3, [r7, #4]
 8043300:	681b      	ldr	r3, [r3, #0]
 8043302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043306:	2b00      	cmp	r3, #0
 8043308:	d008      	beq.n	804331c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804330a:	4b22      	ldr	r3, [pc, #136]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804330e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8043312:	687b      	ldr	r3, [r7, #4]
 8043314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043316:	491f      	ldr	r1, [pc, #124]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8043318:	4313      	orrs	r3, r2
 804331a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804331c:	687b      	ldr	r3, [r7, #4]
 804331e:	681b      	ldr	r3, [r3, #0]
 8043320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8043324:	2b00      	cmp	r3, #0
 8043326:	d00d      	beq.n	8043344 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8043328:	4b1a      	ldr	r3, [pc, #104]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804332a:	691b      	ldr	r3, [r3, #16]
 804332c:	4a19      	ldr	r2, [pc, #100]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804332e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8043332:	6113      	str	r3, [r2, #16]
 8043334:	4b17      	ldr	r3, [pc, #92]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8043336:	691a      	ldr	r2, [r3, #16]
 8043338:	687b      	ldr	r3, [r7, #4]
 804333a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 804333e:	4915      	ldr	r1, [pc, #84]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8043340:	4313      	orrs	r3, r2
 8043342:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8043344:	687b      	ldr	r3, [r7, #4]
 8043346:	681b      	ldr	r3, [r3, #0]
 8043348:	2b00      	cmp	r3, #0
 804334a:	da08      	bge.n	804335e <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 804334c:	4b11      	ldr	r3, [pc, #68]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043350:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8043354:	687b      	ldr	r3, [r7, #4]
 8043356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043358:	490e      	ldr	r1, [pc, #56]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804335a:	4313      	orrs	r3, r2
 804335c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 804335e:	687b      	ldr	r3, [r7, #4]
 8043360:	681b      	ldr	r3, [r3, #0]
 8043362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043366:	2b00      	cmp	r3, #0
 8043368:	d009      	beq.n	804337e <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 804336a:	4b0a      	ldr	r3, [pc, #40]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804336e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8043372:	687b      	ldr	r3, [r7, #4]
 8043374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043378:	4906      	ldr	r1, [pc, #24]	; (8043394 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 804337a:	4313      	orrs	r3, r2
 804337c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 804337e:	7dbb      	ldrb	r3, [r7, #22]
 8043380:	2b00      	cmp	r3, #0
 8043382:	d101      	bne.n	8043388 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8043384:	2300      	movs	r3, #0
 8043386:	e000      	b.n	804338a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8043388:	2301      	movs	r3, #1
}
 804338a:	4618      	mov	r0, r3
 804338c:	3718      	adds	r7, #24
 804338e:	46bd      	mov	sp, r7
 8043390:	bd80      	pop	{r7, pc}
 8043392:	bf00      	nop
 8043394:	58024400 	.word	0x58024400

08043398 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8043398:	b580      	push	{r7, lr}
 804339a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 804339c:	f7ff f830 	bl	8042400 <HAL_RCC_GetHCLKFreq>
 80433a0:	4602      	mov	r2, r0
 80433a2:	4b06      	ldr	r3, [pc, #24]	; (80433bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80433a4:	6a1b      	ldr	r3, [r3, #32]
 80433a6:	091b      	lsrs	r3, r3, #4
 80433a8:	f003 0307 	and.w	r3, r3, #7
 80433ac:	4904      	ldr	r1, [pc, #16]	; (80433c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80433ae:	5ccb      	ldrb	r3, [r1, r3]
 80433b0:	f003 031f 	and.w	r3, r3, #31
 80433b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80433b8:	4618      	mov	r0, r3
 80433ba:	bd80      	pop	{r7, pc}
 80433bc:	58024400 	.word	0x58024400
 80433c0:	08044e58 	.word	0x08044e58

080433c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80433c4:	b480      	push	{r7}
 80433c6:	b089      	sub	sp, #36	; 0x24
 80433c8:	af00      	add	r7, sp, #0
 80433ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80433cc:	4ba1      	ldr	r3, [pc, #644]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80433ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80433d0:	f003 0303 	and.w	r3, r3, #3
 80433d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80433d6:	4b9f      	ldr	r3, [pc, #636]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80433d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80433da:	0b1b      	lsrs	r3, r3, #12
 80433dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80433e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80433e2:	4b9c      	ldr	r3, [pc, #624]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80433e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80433e6:	091b      	lsrs	r3, r3, #4
 80433e8:	f003 0301 	and.w	r3, r3, #1
 80433ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80433ee:	4b99      	ldr	r3, [pc, #612]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80433f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80433f2:	08db      	lsrs	r3, r3, #3
 80433f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80433f8:	693a      	ldr	r2, [r7, #16]
 80433fa:	fb02 f303 	mul.w	r3, r2, r3
 80433fe:	ee07 3a90 	vmov	s15, r3
 8043402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 804340a:	697b      	ldr	r3, [r7, #20]
 804340c:	2b00      	cmp	r3, #0
 804340e:	f000 8111 	beq.w	8043634 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8043412:	69bb      	ldr	r3, [r7, #24]
 8043414:	2b02      	cmp	r3, #2
 8043416:	f000 8083 	beq.w	8043520 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 804341a:	69bb      	ldr	r3, [r7, #24]
 804341c:	2b02      	cmp	r3, #2
 804341e:	f200 80a1 	bhi.w	8043564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8043422:	69bb      	ldr	r3, [r7, #24]
 8043424:	2b00      	cmp	r3, #0
 8043426:	d003      	beq.n	8043430 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8043428:	69bb      	ldr	r3, [r7, #24]
 804342a:	2b01      	cmp	r3, #1
 804342c:	d056      	beq.n	80434dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 804342e:	e099      	b.n	8043564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043430:	4b88      	ldr	r3, [pc, #544]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043432:	681b      	ldr	r3, [r3, #0]
 8043434:	f003 0320 	and.w	r3, r3, #32
 8043438:	2b00      	cmp	r3, #0
 804343a:	d02d      	beq.n	8043498 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 804343c:	4b85      	ldr	r3, [pc, #532]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804343e:	681b      	ldr	r3, [r3, #0]
 8043440:	08db      	lsrs	r3, r3, #3
 8043442:	f003 0303 	and.w	r3, r3, #3
 8043446:	4a84      	ldr	r2, [pc, #528]	; (8043658 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8043448:	fa22 f303 	lsr.w	r3, r2, r3
 804344c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 804344e:	68bb      	ldr	r3, [r7, #8]
 8043450:	ee07 3a90 	vmov	s15, r3
 8043454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043458:	697b      	ldr	r3, [r7, #20]
 804345a:	ee07 3a90 	vmov	s15, r3
 804345e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043466:	4b7b      	ldr	r3, [pc, #492]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804346e:	ee07 3a90 	vmov	s15, r3
 8043472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043476:	ed97 6a03 	vldr	s12, [r7, #12]
 804347a:	eddf 5a78 	vldr	s11, [pc, #480]	; 804365c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 804347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043492:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8043496:	e087      	b.n	80435a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8043498:	697b      	ldr	r3, [r7, #20]
 804349a:	ee07 3a90 	vmov	s15, r3
 804349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80434a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8043660 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80434a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80434aa:	4b6a      	ldr	r3, [pc, #424]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80434ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80434ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80434b2:	ee07 3a90 	vmov	s15, r3
 80434b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80434ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80434be:	eddf 5a67 	vldr	s11, [pc, #412]	; 804365c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80434c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80434c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80434ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80434ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80434d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80434d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80434da:	e065      	b.n	80435a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80434dc:	697b      	ldr	r3, [r7, #20]
 80434de:	ee07 3a90 	vmov	s15, r3
 80434e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80434e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8043664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80434ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80434ee:	4b59      	ldr	r3, [pc, #356]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80434f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80434f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80434f6:	ee07 3a90 	vmov	s15, r3
 80434fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80434fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8043502:	eddf 5a56 	vldr	s11, [pc, #344]	; 804365c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804350e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043516:	ee67 7a27 	vmul.f32	s15, s14, s15
 804351a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 804351e:	e043      	b.n	80435a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8043520:	697b      	ldr	r3, [r7, #20]
 8043522:	ee07 3a90 	vmov	s15, r3
 8043526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804352a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8043668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 804352e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043532:	4b48      	ldr	r3, [pc, #288]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804353a:	ee07 3a90 	vmov	s15, r3
 804353e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043542:	ed97 6a03 	vldr	s12, [r7, #12]
 8043546:	eddf 5a45 	vldr	s11, [pc, #276]	; 804365c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 804354a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804354e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804355e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8043562:	e021      	b.n	80435a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8043564:	697b      	ldr	r3, [r7, #20]
 8043566:	ee07 3a90 	vmov	s15, r3
 804356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804356e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8043664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8043572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043576:	4b37      	ldr	r3, [pc, #220]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804357a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804357e:	ee07 3a90 	vmov	s15, r3
 8043582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043586:	ed97 6a03 	vldr	s12, [r7, #12]
 804358a:	eddf 5a34 	vldr	s11, [pc, #208]	; 804365c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 804358e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804359a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804359e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80435a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80435a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80435a8:	4b2a      	ldr	r3, [pc, #168]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80435aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80435ac:	0a5b      	lsrs	r3, r3, #9
 80435ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80435b2:	ee07 3a90 	vmov	s15, r3
 80435b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80435ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80435be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80435c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80435c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80435ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80435ce:	ee17 2a90 	vmov	r2, s15
 80435d2:	687b      	ldr	r3, [r7, #4]
 80435d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80435d6:	4b1f      	ldr	r3, [pc, #124]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80435d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80435da:	0c1b      	lsrs	r3, r3, #16
 80435dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80435e0:	ee07 3a90 	vmov	s15, r3
 80435e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80435e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80435ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80435f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80435f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80435f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80435fc:	ee17 2a90 	vmov	r2, s15
 8043600:	687b      	ldr	r3, [r7, #4]
 8043602:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8043604:	4b13      	ldr	r3, [pc, #76]	; (8043654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043608:	0e1b      	lsrs	r3, r3, #24
 804360a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804360e:	ee07 3a90 	vmov	s15, r3
 8043612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804361a:	ee37 7a87 	vadd.f32	s14, s15, s14
 804361e:	edd7 6a07 	vldr	s13, [r7, #28]
 8043622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804362a:	ee17 2a90 	vmov	r2, s15
 804362e:	687b      	ldr	r3, [r7, #4]
 8043630:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8043632:	e008      	b.n	8043646 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8043634:	687b      	ldr	r3, [r7, #4]
 8043636:	2200      	movs	r2, #0
 8043638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 804363a:	687b      	ldr	r3, [r7, #4]
 804363c:	2200      	movs	r2, #0
 804363e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8043640:	687b      	ldr	r3, [r7, #4]
 8043642:	2200      	movs	r2, #0
 8043644:	609a      	str	r2, [r3, #8]
}
 8043646:	bf00      	nop
 8043648:	3724      	adds	r7, #36	; 0x24
 804364a:	46bd      	mov	sp, r7
 804364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043650:	4770      	bx	lr
 8043652:	bf00      	nop
 8043654:	58024400 	.word	0x58024400
 8043658:	03d09000 	.word	0x03d09000
 804365c:	46000000 	.word	0x46000000
 8043660:	4c742400 	.word	0x4c742400
 8043664:	4a742400 	.word	0x4a742400
 8043668:	4bbebc20 	.word	0x4bbebc20

0804366c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 804366c:	b480      	push	{r7}
 804366e:	b089      	sub	sp, #36	; 0x24
 8043670:	af00      	add	r7, sp, #0
 8043672:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043674:	4ba1      	ldr	r3, [pc, #644]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043678:	f003 0303 	and.w	r3, r3, #3
 804367c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 804367e:	4b9f      	ldr	r3, [pc, #636]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043682:	0d1b      	lsrs	r3, r3, #20
 8043684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043688:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 804368a:	4b9c      	ldr	r3, [pc, #624]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804368e:	0a1b      	lsrs	r3, r3, #8
 8043690:	f003 0301 	and.w	r3, r3, #1
 8043694:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8043696:	4b99      	ldr	r3, [pc, #612]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804369a:	08db      	lsrs	r3, r3, #3
 804369c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80436a0:	693a      	ldr	r2, [r7, #16]
 80436a2:	fb02 f303 	mul.w	r3, r2, r3
 80436a6:	ee07 3a90 	vmov	s15, r3
 80436aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80436ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80436b2:	697b      	ldr	r3, [r7, #20]
 80436b4:	2b00      	cmp	r3, #0
 80436b6:	f000 8111 	beq.w	80438dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80436ba:	69bb      	ldr	r3, [r7, #24]
 80436bc:	2b02      	cmp	r3, #2
 80436be:	f000 8083 	beq.w	80437c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80436c2:	69bb      	ldr	r3, [r7, #24]
 80436c4:	2b02      	cmp	r3, #2
 80436c6:	f200 80a1 	bhi.w	804380c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80436ca:	69bb      	ldr	r3, [r7, #24]
 80436cc:	2b00      	cmp	r3, #0
 80436ce:	d003      	beq.n	80436d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80436d0:	69bb      	ldr	r3, [r7, #24]
 80436d2:	2b01      	cmp	r3, #1
 80436d4:	d056      	beq.n	8043784 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80436d6:	e099      	b.n	804380c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80436d8:	4b88      	ldr	r3, [pc, #544]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80436da:	681b      	ldr	r3, [r3, #0]
 80436dc:	f003 0320 	and.w	r3, r3, #32
 80436e0:	2b00      	cmp	r3, #0
 80436e2:	d02d      	beq.n	8043740 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80436e4:	4b85      	ldr	r3, [pc, #532]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80436e6:	681b      	ldr	r3, [r3, #0]
 80436e8:	08db      	lsrs	r3, r3, #3
 80436ea:	f003 0303 	and.w	r3, r3, #3
 80436ee:	4a84      	ldr	r2, [pc, #528]	; (8043900 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80436f0:	fa22 f303 	lsr.w	r3, r2, r3
 80436f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80436f6:	68bb      	ldr	r3, [r7, #8]
 80436f8:	ee07 3a90 	vmov	s15, r3
 80436fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043700:	697b      	ldr	r3, [r7, #20]
 8043702:	ee07 3a90 	vmov	s15, r3
 8043706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804370e:	4b7b      	ldr	r3, [pc, #492]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043716:	ee07 3a90 	vmov	s15, r3
 804371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804371e:	ed97 6a03 	vldr	s12, [r7, #12]
 8043722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8043904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804372e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043736:	ee67 7a27 	vmul.f32	s15, s14, s15
 804373a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 804373e:	e087      	b.n	8043850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8043740:	697b      	ldr	r3, [r7, #20]
 8043742:	ee07 3a90 	vmov	s15, r3
 8043746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804374a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8043908 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 804374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043752:	4b6a      	ldr	r3, [pc, #424]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804375a:	ee07 3a90 	vmov	s15, r3
 804375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043762:	ed97 6a03 	vldr	s12, [r7, #12]
 8043766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8043904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 804376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804377e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8043782:	e065      	b.n	8043850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8043784:	697b      	ldr	r3, [r7, #20]
 8043786:	ee07 3a90 	vmov	s15, r3
 804378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804378e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 804390c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8043792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043796:	4b59      	ldr	r3, [pc, #356]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804379e:	ee07 3a90 	vmov	s15, r3
 80437a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80437a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80437aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8043904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80437ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80437b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80437b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80437ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80437be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80437c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80437c6:	e043      	b.n	8043850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80437c8:	697b      	ldr	r3, [r7, #20]
 80437ca:	ee07 3a90 	vmov	s15, r3
 80437ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80437d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8043910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80437d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80437da:	4b48      	ldr	r3, [pc, #288]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80437dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80437de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80437e2:	ee07 3a90 	vmov	s15, r3
 80437e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80437ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80437ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8043904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80437f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80437f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80437fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80437fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 804380a:	e021      	b.n	8043850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 804380c:	697b      	ldr	r3, [r7, #20]
 804380e:	ee07 3a90 	vmov	s15, r3
 8043812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 804390c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 804381a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804381e:	4b37      	ldr	r3, [pc, #220]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043826:	ee07 3a90 	vmov	s15, r3
 804382a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804382e:	ed97 6a03 	vldr	s12, [r7, #12]
 8043832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8043904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804383a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804383e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043846:	ee67 7a27 	vmul.f32	s15, s14, s15
 804384a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 804384e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8043850:	4b2a      	ldr	r3, [pc, #168]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043854:	0a5b      	lsrs	r3, r3, #9
 8043856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804385a:	ee07 3a90 	vmov	s15, r3
 804385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043866:	ee37 7a87 	vadd.f32	s14, s15, s14
 804386a:	edd7 6a07 	vldr	s13, [r7, #28]
 804386e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043876:	ee17 2a90 	vmov	r2, s15
 804387a:	687b      	ldr	r3, [r7, #4]
 804387c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 804387e:	4b1f      	ldr	r3, [pc, #124]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043882:	0c1b      	lsrs	r3, r3, #16
 8043884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043888:	ee07 3a90 	vmov	s15, r3
 804388c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043898:	edd7 6a07 	vldr	s13, [r7, #28]
 804389c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80438a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80438a4:	ee17 2a90 	vmov	r2, s15
 80438a8:	687b      	ldr	r3, [r7, #4]
 80438aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80438ac:	4b13      	ldr	r3, [pc, #76]	; (80438fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80438ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80438b0:	0e1b      	lsrs	r3, r3, #24
 80438b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80438b6:	ee07 3a90 	vmov	s15, r3
 80438ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80438be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80438c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80438c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80438ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80438ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80438d2:	ee17 2a90 	vmov	r2, s15
 80438d6:	687b      	ldr	r3, [r7, #4]
 80438d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80438da:	e008      	b.n	80438ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80438dc:	687b      	ldr	r3, [r7, #4]
 80438de:	2200      	movs	r2, #0
 80438e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80438e2:	687b      	ldr	r3, [r7, #4]
 80438e4:	2200      	movs	r2, #0
 80438e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80438e8:	687b      	ldr	r3, [r7, #4]
 80438ea:	2200      	movs	r2, #0
 80438ec:	609a      	str	r2, [r3, #8]
}
 80438ee:	bf00      	nop
 80438f0:	3724      	adds	r7, #36	; 0x24
 80438f2:	46bd      	mov	sp, r7
 80438f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438f8:	4770      	bx	lr
 80438fa:	bf00      	nop
 80438fc:	58024400 	.word	0x58024400
 8043900:	03d09000 	.word	0x03d09000
 8043904:	46000000 	.word	0x46000000
 8043908:	4c742400 	.word	0x4c742400
 804390c:	4a742400 	.word	0x4a742400
 8043910:	4bbebc20 	.word	0x4bbebc20

08043914 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8043914:	b580      	push	{r7, lr}
 8043916:	b084      	sub	sp, #16
 8043918:	af00      	add	r7, sp, #0
 804391a:	6078      	str	r0, [r7, #4]
 804391c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804391e:	2300      	movs	r3, #0
 8043920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8043922:	4b53      	ldr	r3, [pc, #332]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043926:	f003 0303 	and.w	r3, r3, #3
 804392a:	2b03      	cmp	r3, #3
 804392c:	d101      	bne.n	8043932 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 804392e:	2301      	movs	r3, #1
 8043930:	e099      	b.n	8043a66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8043932:	4b4f      	ldr	r3, [pc, #316]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043934:	681b      	ldr	r3, [r3, #0]
 8043936:	4a4e      	ldr	r2, [pc, #312]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804393c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804393e:	f7fd fa27 	bl	8040d90 <HAL_GetTick>
 8043942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8043944:	e008      	b.n	8043958 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8043946:	f7fd fa23 	bl	8040d90 <HAL_GetTick>
 804394a:	4602      	mov	r2, r0
 804394c:	68bb      	ldr	r3, [r7, #8]
 804394e:	1ad3      	subs	r3, r2, r3
 8043950:	2b02      	cmp	r3, #2
 8043952:	d901      	bls.n	8043958 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8043954:	2303      	movs	r3, #3
 8043956:	e086      	b.n	8043a66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8043958:	4b45      	ldr	r3, [pc, #276]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 804395a:	681b      	ldr	r3, [r3, #0]
 804395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043960:	2b00      	cmp	r3, #0
 8043962:	d1f0      	bne.n	8043946 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8043964:	4b42      	ldr	r3, [pc, #264]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043968:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 804396c:	687b      	ldr	r3, [r7, #4]
 804396e:	681b      	ldr	r3, [r3, #0]
 8043970:	031b      	lsls	r3, r3, #12
 8043972:	493f      	ldr	r1, [pc, #252]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043974:	4313      	orrs	r3, r2
 8043976:	628b      	str	r3, [r1, #40]	; 0x28
 8043978:	687b      	ldr	r3, [r7, #4]
 804397a:	685b      	ldr	r3, [r3, #4]
 804397c:	3b01      	subs	r3, #1
 804397e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043982:	687b      	ldr	r3, [r7, #4]
 8043984:	689b      	ldr	r3, [r3, #8]
 8043986:	3b01      	subs	r3, #1
 8043988:	025b      	lsls	r3, r3, #9
 804398a:	b29b      	uxth	r3, r3
 804398c:	431a      	orrs	r2, r3
 804398e:	687b      	ldr	r3, [r7, #4]
 8043990:	68db      	ldr	r3, [r3, #12]
 8043992:	3b01      	subs	r3, #1
 8043994:	041b      	lsls	r3, r3, #16
 8043996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 804399a:	431a      	orrs	r2, r3
 804399c:	687b      	ldr	r3, [r7, #4]
 804399e:	691b      	ldr	r3, [r3, #16]
 80439a0:	3b01      	subs	r3, #1
 80439a2:	061b      	lsls	r3, r3, #24
 80439a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80439a8:	4931      	ldr	r1, [pc, #196]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439aa:	4313      	orrs	r3, r2
 80439ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80439ae:	4b30      	ldr	r3, [pc, #192]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80439b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80439b6:	687b      	ldr	r3, [r7, #4]
 80439b8:	695b      	ldr	r3, [r3, #20]
 80439ba:	492d      	ldr	r1, [pc, #180]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439bc:	4313      	orrs	r3, r2
 80439be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80439c0:	4b2b      	ldr	r3, [pc, #172]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80439c4:	f023 0220 	bic.w	r2, r3, #32
 80439c8:	687b      	ldr	r3, [r7, #4]
 80439ca:	699b      	ldr	r3, [r3, #24]
 80439cc:	4928      	ldr	r1, [pc, #160]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439ce:	4313      	orrs	r3, r2
 80439d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80439d2:	4b27      	ldr	r3, [pc, #156]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80439d6:	4a26      	ldr	r2, [pc, #152]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439d8:	f023 0310 	bic.w	r3, r3, #16
 80439dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80439de:	4b24      	ldr	r3, [pc, #144]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80439e2:	4b24      	ldr	r3, [pc, #144]	; (8043a74 <RCCEx_PLL2_Config+0x160>)
 80439e4:	4013      	ands	r3, r2
 80439e6:	687a      	ldr	r2, [r7, #4]
 80439e8:	69d2      	ldr	r2, [r2, #28]
 80439ea:	00d2      	lsls	r2, r2, #3
 80439ec:	4920      	ldr	r1, [pc, #128]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439ee:	4313      	orrs	r3, r2
 80439f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80439f2:	4b1f      	ldr	r3, [pc, #124]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80439f6:	4a1e      	ldr	r2, [pc, #120]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 80439f8:	f043 0310 	orr.w	r3, r3, #16
 80439fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80439fe:	683b      	ldr	r3, [r7, #0]
 8043a00:	2b00      	cmp	r3, #0
 8043a02:	d106      	bne.n	8043a12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8043a04:	4b1a      	ldr	r3, [pc, #104]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a08:	4a19      	ldr	r2, [pc, #100]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8043a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8043a10:	e00f      	b.n	8043a32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8043a12:	683b      	ldr	r3, [r7, #0]
 8043a14:	2b01      	cmp	r3, #1
 8043a16:	d106      	bne.n	8043a26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8043a18:	4b15      	ldr	r3, [pc, #84]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a1c:	4a14      	ldr	r2, [pc, #80]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8043a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8043a24:	e005      	b.n	8043a32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8043a26:	4b12      	ldr	r3, [pc, #72]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a2a:	4a11      	ldr	r2, [pc, #68]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8043a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8043a32:	4b0f      	ldr	r3, [pc, #60]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a34:	681b      	ldr	r3, [r3, #0]
 8043a36:	4a0e      	ldr	r2, [pc, #56]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8043a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043a3e:	f7fd f9a7 	bl	8040d90 <HAL_GetTick>
 8043a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8043a44:	e008      	b.n	8043a58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8043a46:	f7fd f9a3 	bl	8040d90 <HAL_GetTick>
 8043a4a:	4602      	mov	r2, r0
 8043a4c:	68bb      	ldr	r3, [r7, #8]
 8043a4e:	1ad3      	subs	r3, r2, r3
 8043a50:	2b02      	cmp	r3, #2
 8043a52:	d901      	bls.n	8043a58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8043a54:	2303      	movs	r3, #3
 8043a56:	e006      	b.n	8043a66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8043a58:	4b05      	ldr	r3, [pc, #20]	; (8043a70 <RCCEx_PLL2_Config+0x15c>)
 8043a5a:	681b      	ldr	r3, [r3, #0]
 8043a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043a60:	2b00      	cmp	r3, #0
 8043a62:	d0f0      	beq.n	8043a46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8043a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8043a66:	4618      	mov	r0, r3
 8043a68:	3710      	adds	r7, #16
 8043a6a:	46bd      	mov	sp, r7
 8043a6c:	bd80      	pop	{r7, pc}
 8043a6e:	bf00      	nop
 8043a70:	58024400 	.word	0x58024400
 8043a74:	ffff0007 	.word	0xffff0007

08043a78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8043a78:	b580      	push	{r7, lr}
 8043a7a:	b084      	sub	sp, #16
 8043a7c:	af00      	add	r7, sp, #0
 8043a7e:	6078      	str	r0, [r7, #4]
 8043a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8043a82:	2300      	movs	r3, #0
 8043a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8043a86:	4b53      	ldr	r3, [pc, #332]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043a8a:	f003 0303 	and.w	r3, r3, #3
 8043a8e:	2b03      	cmp	r3, #3
 8043a90:	d101      	bne.n	8043a96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8043a92:	2301      	movs	r3, #1
 8043a94:	e099      	b.n	8043bca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8043a96:	4b4f      	ldr	r3, [pc, #316]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043a98:	681b      	ldr	r3, [r3, #0]
 8043a9a:	4a4e      	ldr	r2, [pc, #312]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043aa2:	f7fd f975 	bl	8040d90 <HAL_GetTick>
 8043aa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8043aa8:	e008      	b.n	8043abc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8043aaa:	f7fd f971 	bl	8040d90 <HAL_GetTick>
 8043aae:	4602      	mov	r2, r0
 8043ab0:	68bb      	ldr	r3, [r7, #8]
 8043ab2:	1ad3      	subs	r3, r2, r3
 8043ab4:	2b02      	cmp	r3, #2
 8043ab6:	d901      	bls.n	8043abc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8043ab8:	2303      	movs	r3, #3
 8043aba:	e086      	b.n	8043bca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8043abc:	4b45      	ldr	r3, [pc, #276]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043abe:	681b      	ldr	r3, [r3, #0]
 8043ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8043ac4:	2b00      	cmp	r3, #0
 8043ac6:	d1f0      	bne.n	8043aaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8043ac8:	4b42      	ldr	r3, [pc, #264]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043acc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8043ad0:	687b      	ldr	r3, [r7, #4]
 8043ad2:	681b      	ldr	r3, [r3, #0]
 8043ad4:	051b      	lsls	r3, r3, #20
 8043ad6:	493f      	ldr	r1, [pc, #252]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043ad8:	4313      	orrs	r3, r2
 8043ada:	628b      	str	r3, [r1, #40]	; 0x28
 8043adc:	687b      	ldr	r3, [r7, #4]
 8043ade:	685b      	ldr	r3, [r3, #4]
 8043ae0:	3b01      	subs	r3, #1
 8043ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043ae6:	687b      	ldr	r3, [r7, #4]
 8043ae8:	689b      	ldr	r3, [r3, #8]
 8043aea:	3b01      	subs	r3, #1
 8043aec:	025b      	lsls	r3, r3, #9
 8043aee:	b29b      	uxth	r3, r3
 8043af0:	431a      	orrs	r2, r3
 8043af2:	687b      	ldr	r3, [r7, #4]
 8043af4:	68db      	ldr	r3, [r3, #12]
 8043af6:	3b01      	subs	r3, #1
 8043af8:	041b      	lsls	r3, r3, #16
 8043afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8043afe:	431a      	orrs	r2, r3
 8043b00:	687b      	ldr	r3, [r7, #4]
 8043b02:	691b      	ldr	r3, [r3, #16]
 8043b04:	3b01      	subs	r3, #1
 8043b06:	061b      	lsls	r3, r3, #24
 8043b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8043b0c:	4931      	ldr	r1, [pc, #196]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b0e:	4313      	orrs	r3, r2
 8043b10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8043b12:	4b30      	ldr	r3, [pc, #192]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8043b1a:	687b      	ldr	r3, [r7, #4]
 8043b1c:	695b      	ldr	r3, [r3, #20]
 8043b1e:	492d      	ldr	r1, [pc, #180]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b20:	4313      	orrs	r3, r2
 8043b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8043b24:	4b2b      	ldr	r3, [pc, #172]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8043b2c:	687b      	ldr	r3, [r7, #4]
 8043b2e:	699b      	ldr	r3, [r3, #24]
 8043b30:	4928      	ldr	r1, [pc, #160]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b32:	4313      	orrs	r3, r2
 8043b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8043b36:	4b27      	ldr	r3, [pc, #156]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b3a:	4a26      	ldr	r2, [pc, #152]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8043b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8043b42:	4b24      	ldr	r3, [pc, #144]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8043b46:	4b24      	ldr	r3, [pc, #144]	; (8043bd8 <RCCEx_PLL3_Config+0x160>)
 8043b48:	4013      	ands	r3, r2
 8043b4a:	687a      	ldr	r2, [r7, #4]
 8043b4c:	69d2      	ldr	r2, [r2, #28]
 8043b4e:	00d2      	lsls	r2, r2, #3
 8043b50:	4920      	ldr	r1, [pc, #128]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b52:	4313      	orrs	r3, r2
 8043b54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8043b56:	4b1f      	ldr	r3, [pc, #124]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b5a:	4a1e      	ldr	r2, [pc, #120]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8043b62:	683b      	ldr	r3, [r7, #0]
 8043b64:	2b00      	cmp	r3, #0
 8043b66:	d106      	bne.n	8043b76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8043b68:	4b1a      	ldr	r3, [pc, #104]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b6c:	4a19      	ldr	r2, [pc, #100]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8043b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8043b74:	e00f      	b.n	8043b96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8043b76:	683b      	ldr	r3, [r7, #0]
 8043b78:	2b01      	cmp	r3, #1
 8043b7a:	d106      	bne.n	8043b8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8043b7c:	4b15      	ldr	r3, [pc, #84]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b80:	4a14      	ldr	r2, [pc, #80]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8043b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8043b88:	e005      	b.n	8043b96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8043b8a:	4b12      	ldr	r3, [pc, #72]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b8e:	4a11      	ldr	r2, [pc, #68]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8043b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8043b96:	4b0f      	ldr	r3, [pc, #60]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b98:	681b      	ldr	r3, [r3, #0]
 8043b9a:	4a0e      	ldr	r2, [pc, #56]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043ba2:	f7fd f8f5 	bl	8040d90 <HAL_GetTick>
 8043ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8043ba8:	e008      	b.n	8043bbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8043baa:	f7fd f8f1 	bl	8040d90 <HAL_GetTick>
 8043bae:	4602      	mov	r2, r0
 8043bb0:	68bb      	ldr	r3, [r7, #8]
 8043bb2:	1ad3      	subs	r3, r2, r3
 8043bb4:	2b02      	cmp	r3, #2
 8043bb6:	d901      	bls.n	8043bbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8043bb8:	2303      	movs	r3, #3
 8043bba:	e006      	b.n	8043bca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8043bbc:	4b05      	ldr	r3, [pc, #20]	; (8043bd4 <RCCEx_PLL3_Config+0x15c>)
 8043bbe:	681b      	ldr	r3, [r3, #0]
 8043bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8043bc4:	2b00      	cmp	r3, #0
 8043bc6:	d0f0      	beq.n	8043baa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8043bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8043bca:	4618      	mov	r0, r3
 8043bcc:	3710      	adds	r7, #16
 8043bce:	46bd      	mov	sp, r7
 8043bd0:	bd80      	pop	{r7, pc}
 8043bd2:	bf00      	nop
 8043bd4:	58024400 	.word	0x58024400
 8043bd8:	ffff0007 	.word	0xffff0007

08043bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8043bdc:	b580      	push	{r7, lr}
 8043bde:	b082      	sub	sp, #8
 8043be0:	af00      	add	r7, sp, #0
 8043be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8043be4:	687b      	ldr	r3, [r7, #4]
 8043be6:	2b00      	cmp	r3, #0
 8043be8:	d101      	bne.n	8043bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8043bea:	2301      	movs	r3, #1
 8043bec:	e042      	b.n	8043c74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8043bee:	687b      	ldr	r3, [r7, #4]
 8043bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043bf4:	2b00      	cmp	r3, #0
 8043bf6:	d106      	bne.n	8043c06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8043bf8:	687b      	ldr	r3, [r7, #4]
 8043bfa:	2200      	movs	r2, #0
 8043bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8043c00:	6878      	ldr	r0, [r7, #4]
 8043c02:	f7fc ff85 	bl	8040b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8043c06:	687b      	ldr	r3, [r7, #4]
 8043c08:	2224      	movs	r2, #36	; 0x24
 8043c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8043c0e:	687b      	ldr	r3, [r7, #4]
 8043c10:	681b      	ldr	r3, [r3, #0]
 8043c12:	681a      	ldr	r2, [r3, #0]
 8043c14:	687b      	ldr	r3, [r7, #4]
 8043c16:	681b      	ldr	r3, [r3, #0]
 8043c18:	f022 0201 	bic.w	r2, r2, #1
 8043c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8043c1e:	6878      	ldr	r0, [r7, #4]
 8043c20:	f000 f8c2 	bl	8043da8 <UART_SetConfig>
 8043c24:	4603      	mov	r3, r0
 8043c26:	2b01      	cmp	r3, #1
 8043c28:	d101      	bne.n	8043c2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8043c2a:	2301      	movs	r3, #1
 8043c2c:	e022      	b.n	8043c74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8043c2e:	687b      	ldr	r3, [r7, #4]
 8043c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043c32:	2b00      	cmp	r3, #0
 8043c34:	d002      	beq.n	8043c3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8043c36:	6878      	ldr	r0, [r7, #4]
 8043c38:	f000 fe16 	bl	8044868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8043c3c:	687b      	ldr	r3, [r7, #4]
 8043c3e:	681b      	ldr	r3, [r3, #0]
 8043c40:	685a      	ldr	r2, [r3, #4]
 8043c42:	687b      	ldr	r3, [r7, #4]
 8043c44:	681b      	ldr	r3, [r3, #0]
 8043c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8043c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8043c4c:	687b      	ldr	r3, [r7, #4]
 8043c4e:	681b      	ldr	r3, [r3, #0]
 8043c50:	689a      	ldr	r2, [r3, #8]
 8043c52:	687b      	ldr	r3, [r7, #4]
 8043c54:	681b      	ldr	r3, [r3, #0]
 8043c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8043c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8043c5c:	687b      	ldr	r3, [r7, #4]
 8043c5e:	681b      	ldr	r3, [r3, #0]
 8043c60:	681a      	ldr	r2, [r3, #0]
 8043c62:	687b      	ldr	r3, [r7, #4]
 8043c64:	681b      	ldr	r3, [r3, #0]
 8043c66:	f042 0201 	orr.w	r2, r2, #1
 8043c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8043c6c:	6878      	ldr	r0, [r7, #4]
 8043c6e:	f000 fe9d 	bl	80449ac <UART_CheckIdleState>
 8043c72:	4603      	mov	r3, r0
}
 8043c74:	4618      	mov	r0, r3
 8043c76:	3708      	adds	r7, #8
 8043c78:	46bd      	mov	sp, r7
 8043c7a:	bd80      	pop	{r7, pc}

08043c7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8043c7c:	b580      	push	{r7, lr}
 8043c7e:	b08a      	sub	sp, #40	; 0x28
 8043c80:	af02      	add	r7, sp, #8
 8043c82:	60f8      	str	r0, [r7, #12]
 8043c84:	60b9      	str	r1, [r7, #8]
 8043c86:	603b      	str	r3, [r7, #0]
 8043c88:	4613      	mov	r3, r2
 8043c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8043c8c:	68fb      	ldr	r3, [r7, #12]
 8043c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043c92:	2b20      	cmp	r3, #32
 8043c94:	f040 8083 	bne.w	8043d9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8043c98:	68bb      	ldr	r3, [r7, #8]
 8043c9a:	2b00      	cmp	r3, #0
 8043c9c:	d002      	beq.n	8043ca4 <HAL_UART_Transmit+0x28>
 8043c9e:	88fb      	ldrh	r3, [r7, #6]
 8043ca0:	2b00      	cmp	r3, #0
 8043ca2:	d101      	bne.n	8043ca8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8043ca4:	2301      	movs	r3, #1
 8043ca6:	e07b      	b.n	8043da0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8043ca8:	68fb      	ldr	r3, [r7, #12]
 8043caa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043cae:	2b01      	cmp	r3, #1
 8043cb0:	d101      	bne.n	8043cb6 <HAL_UART_Transmit+0x3a>
 8043cb2:	2302      	movs	r3, #2
 8043cb4:	e074      	b.n	8043da0 <HAL_UART_Transmit+0x124>
 8043cb6:	68fb      	ldr	r3, [r7, #12]
 8043cb8:	2201      	movs	r2, #1
 8043cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043cbe:	68fb      	ldr	r3, [r7, #12]
 8043cc0:	2200      	movs	r2, #0
 8043cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8043cc6:	68fb      	ldr	r3, [r7, #12]
 8043cc8:	2221      	movs	r2, #33	; 0x21
 8043cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8043cce:	f7fd f85f 	bl	8040d90 <HAL_GetTick>
 8043cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8043cd4:	68fb      	ldr	r3, [r7, #12]
 8043cd6:	88fa      	ldrh	r2, [r7, #6]
 8043cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8043cdc:	68fb      	ldr	r3, [r7, #12]
 8043cde:	88fa      	ldrh	r2, [r7, #6]
 8043ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8043ce4:	68fb      	ldr	r3, [r7, #12]
 8043ce6:	689b      	ldr	r3, [r3, #8]
 8043ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043cec:	d108      	bne.n	8043d00 <HAL_UART_Transmit+0x84>
 8043cee:	68fb      	ldr	r3, [r7, #12]
 8043cf0:	691b      	ldr	r3, [r3, #16]
 8043cf2:	2b00      	cmp	r3, #0
 8043cf4:	d104      	bne.n	8043d00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8043cf6:	2300      	movs	r3, #0
 8043cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8043cfa:	68bb      	ldr	r3, [r7, #8]
 8043cfc:	61bb      	str	r3, [r7, #24]
 8043cfe:	e003      	b.n	8043d08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8043d00:	68bb      	ldr	r3, [r7, #8]
 8043d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8043d04:	2300      	movs	r3, #0
 8043d06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8043d08:	68fb      	ldr	r3, [r7, #12]
 8043d0a:	2200      	movs	r2, #0
 8043d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8043d10:	e02c      	b.n	8043d6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8043d12:	683b      	ldr	r3, [r7, #0]
 8043d14:	9300      	str	r3, [sp, #0]
 8043d16:	697b      	ldr	r3, [r7, #20]
 8043d18:	2200      	movs	r2, #0
 8043d1a:	2180      	movs	r1, #128	; 0x80
 8043d1c:	68f8      	ldr	r0, [r7, #12]
 8043d1e:	f000 fe90 	bl	8044a42 <UART_WaitOnFlagUntilTimeout>
 8043d22:	4603      	mov	r3, r0
 8043d24:	2b00      	cmp	r3, #0
 8043d26:	d001      	beq.n	8043d2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8043d28:	2303      	movs	r3, #3
 8043d2a:	e039      	b.n	8043da0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8043d2c:	69fb      	ldr	r3, [r7, #28]
 8043d2e:	2b00      	cmp	r3, #0
 8043d30:	d10b      	bne.n	8043d4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8043d32:	69bb      	ldr	r3, [r7, #24]
 8043d34:	881b      	ldrh	r3, [r3, #0]
 8043d36:	461a      	mov	r2, r3
 8043d38:	68fb      	ldr	r3, [r7, #12]
 8043d3a:	681b      	ldr	r3, [r3, #0]
 8043d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8043d40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8043d42:	69bb      	ldr	r3, [r7, #24]
 8043d44:	3302      	adds	r3, #2
 8043d46:	61bb      	str	r3, [r7, #24]
 8043d48:	e007      	b.n	8043d5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8043d4a:	69fb      	ldr	r3, [r7, #28]
 8043d4c:	781a      	ldrb	r2, [r3, #0]
 8043d4e:	68fb      	ldr	r3, [r7, #12]
 8043d50:	681b      	ldr	r3, [r3, #0]
 8043d52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8043d54:	69fb      	ldr	r3, [r7, #28]
 8043d56:	3301      	adds	r3, #1
 8043d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8043d5a:	68fb      	ldr	r3, [r7, #12]
 8043d5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043d60:	b29b      	uxth	r3, r3
 8043d62:	3b01      	subs	r3, #1
 8043d64:	b29a      	uxth	r2, r3
 8043d66:	68fb      	ldr	r3, [r7, #12]
 8043d68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8043d6c:	68fb      	ldr	r3, [r7, #12]
 8043d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043d72:	b29b      	uxth	r3, r3
 8043d74:	2b00      	cmp	r3, #0
 8043d76:	d1cc      	bne.n	8043d12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8043d78:	683b      	ldr	r3, [r7, #0]
 8043d7a:	9300      	str	r3, [sp, #0]
 8043d7c:	697b      	ldr	r3, [r7, #20]
 8043d7e:	2200      	movs	r2, #0
 8043d80:	2140      	movs	r1, #64	; 0x40
 8043d82:	68f8      	ldr	r0, [r7, #12]
 8043d84:	f000 fe5d 	bl	8044a42 <UART_WaitOnFlagUntilTimeout>
 8043d88:	4603      	mov	r3, r0
 8043d8a:	2b00      	cmp	r3, #0
 8043d8c:	d001      	beq.n	8043d92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8043d8e:	2303      	movs	r3, #3
 8043d90:	e006      	b.n	8043da0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8043d92:	68fb      	ldr	r3, [r7, #12]
 8043d94:	2220      	movs	r2, #32
 8043d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8043d9a:	2300      	movs	r3, #0
 8043d9c:	e000      	b.n	8043da0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8043d9e:	2302      	movs	r3, #2
  }
}
 8043da0:	4618      	mov	r0, r3
 8043da2:	3720      	adds	r7, #32
 8043da4:	46bd      	mov	sp, r7
 8043da6:	bd80      	pop	{r7, pc}

08043da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8043da8:	b5b0      	push	{r4, r5, r7, lr}
 8043daa:	b08e      	sub	sp, #56	; 0x38
 8043dac:	af00      	add	r7, sp, #0
 8043dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8043db0:	2300      	movs	r3, #0
 8043db2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8043db6:	687b      	ldr	r3, [r7, #4]
 8043db8:	689a      	ldr	r2, [r3, #8]
 8043dba:	687b      	ldr	r3, [r7, #4]
 8043dbc:	691b      	ldr	r3, [r3, #16]
 8043dbe:	431a      	orrs	r2, r3
 8043dc0:	687b      	ldr	r3, [r7, #4]
 8043dc2:	695b      	ldr	r3, [r3, #20]
 8043dc4:	431a      	orrs	r2, r3
 8043dc6:	687b      	ldr	r3, [r7, #4]
 8043dc8:	69db      	ldr	r3, [r3, #28]
 8043dca:	4313      	orrs	r3, r2
 8043dcc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8043dce:	687b      	ldr	r3, [r7, #4]
 8043dd0:	681b      	ldr	r3, [r3, #0]
 8043dd2:	681a      	ldr	r2, [r3, #0]
 8043dd4:	4bbf      	ldr	r3, [pc, #764]	; (80440d4 <UART_SetConfig+0x32c>)
 8043dd6:	4013      	ands	r3, r2
 8043dd8:	687a      	ldr	r2, [r7, #4]
 8043dda:	6812      	ldr	r2, [r2, #0]
 8043ddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8043dde:	430b      	orrs	r3, r1
 8043de0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8043de2:	687b      	ldr	r3, [r7, #4]
 8043de4:	681b      	ldr	r3, [r3, #0]
 8043de6:	685b      	ldr	r3, [r3, #4]
 8043de8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043dec:	687b      	ldr	r3, [r7, #4]
 8043dee:	68da      	ldr	r2, [r3, #12]
 8043df0:	687b      	ldr	r3, [r7, #4]
 8043df2:	681b      	ldr	r3, [r3, #0]
 8043df4:	430a      	orrs	r2, r1
 8043df6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043df8:	687b      	ldr	r3, [r7, #4]
 8043dfa:	699b      	ldr	r3, [r3, #24]
 8043dfc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8043dfe:	687b      	ldr	r3, [r7, #4]
 8043e00:	681b      	ldr	r3, [r3, #0]
 8043e02:	4ab5      	ldr	r2, [pc, #724]	; (80440d8 <UART_SetConfig+0x330>)
 8043e04:	4293      	cmp	r3, r2
 8043e06:	d004      	beq.n	8043e12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8043e08:	687b      	ldr	r3, [r7, #4]
 8043e0a:	6a1b      	ldr	r3, [r3, #32]
 8043e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8043e0e:	4313      	orrs	r3, r2
 8043e10:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8043e12:	687b      	ldr	r3, [r7, #4]
 8043e14:	681b      	ldr	r3, [r3, #0]
 8043e16:	689a      	ldr	r2, [r3, #8]
 8043e18:	4bb0      	ldr	r3, [pc, #704]	; (80440dc <UART_SetConfig+0x334>)
 8043e1a:	4013      	ands	r3, r2
 8043e1c:	687a      	ldr	r2, [r7, #4]
 8043e1e:	6812      	ldr	r2, [r2, #0]
 8043e20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8043e22:	430b      	orrs	r3, r1
 8043e24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8043e26:	687b      	ldr	r3, [r7, #4]
 8043e28:	681b      	ldr	r3, [r3, #0]
 8043e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043e2c:	f023 010f 	bic.w	r1, r3, #15
 8043e30:	687b      	ldr	r3, [r7, #4]
 8043e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043e34:	687b      	ldr	r3, [r7, #4]
 8043e36:	681b      	ldr	r3, [r3, #0]
 8043e38:	430a      	orrs	r2, r1
 8043e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8043e3c:	687b      	ldr	r3, [r7, #4]
 8043e3e:	681b      	ldr	r3, [r3, #0]
 8043e40:	4aa7      	ldr	r2, [pc, #668]	; (80440e0 <UART_SetConfig+0x338>)
 8043e42:	4293      	cmp	r3, r2
 8043e44:	d176      	bne.n	8043f34 <UART_SetConfig+0x18c>
 8043e46:	4ba7      	ldr	r3, [pc, #668]	; (80440e4 <UART_SetConfig+0x33c>)
 8043e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8043e4e:	2b28      	cmp	r3, #40	; 0x28
 8043e50:	d86c      	bhi.n	8043f2c <UART_SetConfig+0x184>
 8043e52:	a201      	add	r2, pc, #4	; (adr r2, 8043e58 <UART_SetConfig+0xb0>)
 8043e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043e58:	08043efd 	.word	0x08043efd
 8043e5c:	08043f2d 	.word	0x08043f2d
 8043e60:	08043f2d 	.word	0x08043f2d
 8043e64:	08043f2d 	.word	0x08043f2d
 8043e68:	08043f2d 	.word	0x08043f2d
 8043e6c:	08043f2d 	.word	0x08043f2d
 8043e70:	08043f2d 	.word	0x08043f2d
 8043e74:	08043f2d 	.word	0x08043f2d
 8043e78:	08043f05 	.word	0x08043f05
 8043e7c:	08043f2d 	.word	0x08043f2d
 8043e80:	08043f2d 	.word	0x08043f2d
 8043e84:	08043f2d 	.word	0x08043f2d
 8043e88:	08043f2d 	.word	0x08043f2d
 8043e8c:	08043f2d 	.word	0x08043f2d
 8043e90:	08043f2d 	.word	0x08043f2d
 8043e94:	08043f2d 	.word	0x08043f2d
 8043e98:	08043f0d 	.word	0x08043f0d
 8043e9c:	08043f2d 	.word	0x08043f2d
 8043ea0:	08043f2d 	.word	0x08043f2d
 8043ea4:	08043f2d 	.word	0x08043f2d
 8043ea8:	08043f2d 	.word	0x08043f2d
 8043eac:	08043f2d 	.word	0x08043f2d
 8043eb0:	08043f2d 	.word	0x08043f2d
 8043eb4:	08043f2d 	.word	0x08043f2d
 8043eb8:	08043f15 	.word	0x08043f15
 8043ebc:	08043f2d 	.word	0x08043f2d
 8043ec0:	08043f2d 	.word	0x08043f2d
 8043ec4:	08043f2d 	.word	0x08043f2d
 8043ec8:	08043f2d 	.word	0x08043f2d
 8043ecc:	08043f2d 	.word	0x08043f2d
 8043ed0:	08043f2d 	.word	0x08043f2d
 8043ed4:	08043f2d 	.word	0x08043f2d
 8043ed8:	08043f1d 	.word	0x08043f1d
 8043edc:	08043f2d 	.word	0x08043f2d
 8043ee0:	08043f2d 	.word	0x08043f2d
 8043ee4:	08043f2d 	.word	0x08043f2d
 8043ee8:	08043f2d 	.word	0x08043f2d
 8043eec:	08043f2d 	.word	0x08043f2d
 8043ef0:	08043f2d 	.word	0x08043f2d
 8043ef4:	08043f2d 	.word	0x08043f2d
 8043ef8:	08043f25 	.word	0x08043f25
 8043efc:	2301      	movs	r3, #1
 8043efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f02:	e222      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f04:	2304      	movs	r3, #4
 8043f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f0a:	e21e      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f0c:	2308      	movs	r3, #8
 8043f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f12:	e21a      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f14:	2310      	movs	r3, #16
 8043f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f1a:	e216      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f1c:	2320      	movs	r3, #32
 8043f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f22:	e212      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f24:	2340      	movs	r3, #64	; 0x40
 8043f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f2a:	e20e      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f2c:	2380      	movs	r3, #128	; 0x80
 8043f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f32:	e20a      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f34:	687b      	ldr	r3, [r7, #4]
 8043f36:	681b      	ldr	r3, [r3, #0]
 8043f38:	4a6b      	ldr	r2, [pc, #428]	; (80440e8 <UART_SetConfig+0x340>)
 8043f3a:	4293      	cmp	r3, r2
 8043f3c:	d130      	bne.n	8043fa0 <UART_SetConfig+0x1f8>
 8043f3e:	4b69      	ldr	r3, [pc, #420]	; (80440e4 <UART_SetConfig+0x33c>)
 8043f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043f42:	f003 0307 	and.w	r3, r3, #7
 8043f46:	2b05      	cmp	r3, #5
 8043f48:	d826      	bhi.n	8043f98 <UART_SetConfig+0x1f0>
 8043f4a:	a201      	add	r2, pc, #4	; (adr r2, 8043f50 <UART_SetConfig+0x1a8>)
 8043f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043f50:	08043f69 	.word	0x08043f69
 8043f54:	08043f71 	.word	0x08043f71
 8043f58:	08043f79 	.word	0x08043f79
 8043f5c:	08043f81 	.word	0x08043f81
 8043f60:	08043f89 	.word	0x08043f89
 8043f64:	08043f91 	.word	0x08043f91
 8043f68:	2300      	movs	r3, #0
 8043f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f6e:	e1ec      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f70:	2304      	movs	r3, #4
 8043f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f76:	e1e8      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f78:	2308      	movs	r3, #8
 8043f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f7e:	e1e4      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f80:	2310      	movs	r3, #16
 8043f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f86:	e1e0      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f88:	2320      	movs	r3, #32
 8043f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f8e:	e1dc      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f90:	2340      	movs	r3, #64	; 0x40
 8043f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f96:	e1d8      	b.n	804434a <UART_SetConfig+0x5a2>
 8043f98:	2380      	movs	r3, #128	; 0x80
 8043f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043f9e:	e1d4      	b.n	804434a <UART_SetConfig+0x5a2>
 8043fa0:	687b      	ldr	r3, [r7, #4]
 8043fa2:	681b      	ldr	r3, [r3, #0]
 8043fa4:	4a51      	ldr	r2, [pc, #324]	; (80440ec <UART_SetConfig+0x344>)
 8043fa6:	4293      	cmp	r3, r2
 8043fa8:	d130      	bne.n	804400c <UART_SetConfig+0x264>
 8043faa:	4b4e      	ldr	r3, [pc, #312]	; (80440e4 <UART_SetConfig+0x33c>)
 8043fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043fae:	f003 0307 	and.w	r3, r3, #7
 8043fb2:	2b05      	cmp	r3, #5
 8043fb4:	d826      	bhi.n	8044004 <UART_SetConfig+0x25c>
 8043fb6:	a201      	add	r2, pc, #4	; (adr r2, 8043fbc <UART_SetConfig+0x214>)
 8043fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043fbc:	08043fd5 	.word	0x08043fd5
 8043fc0:	08043fdd 	.word	0x08043fdd
 8043fc4:	08043fe5 	.word	0x08043fe5
 8043fc8:	08043fed 	.word	0x08043fed
 8043fcc:	08043ff5 	.word	0x08043ff5
 8043fd0:	08043ffd 	.word	0x08043ffd
 8043fd4:	2300      	movs	r3, #0
 8043fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043fda:	e1b6      	b.n	804434a <UART_SetConfig+0x5a2>
 8043fdc:	2304      	movs	r3, #4
 8043fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043fe2:	e1b2      	b.n	804434a <UART_SetConfig+0x5a2>
 8043fe4:	2308      	movs	r3, #8
 8043fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043fea:	e1ae      	b.n	804434a <UART_SetConfig+0x5a2>
 8043fec:	2310      	movs	r3, #16
 8043fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043ff2:	e1aa      	b.n	804434a <UART_SetConfig+0x5a2>
 8043ff4:	2320      	movs	r3, #32
 8043ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8043ffa:	e1a6      	b.n	804434a <UART_SetConfig+0x5a2>
 8043ffc:	2340      	movs	r3, #64	; 0x40
 8043ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044002:	e1a2      	b.n	804434a <UART_SetConfig+0x5a2>
 8044004:	2380      	movs	r3, #128	; 0x80
 8044006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804400a:	e19e      	b.n	804434a <UART_SetConfig+0x5a2>
 804400c:	687b      	ldr	r3, [r7, #4]
 804400e:	681b      	ldr	r3, [r3, #0]
 8044010:	4a37      	ldr	r2, [pc, #220]	; (80440f0 <UART_SetConfig+0x348>)
 8044012:	4293      	cmp	r3, r2
 8044014:	d130      	bne.n	8044078 <UART_SetConfig+0x2d0>
 8044016:	4b33      	ldr	r3, [pc, #204]	; (80440e4 <UART_SetConfig+0x33c>)
 8044018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804401a:	f003 0307 	and.w	r3, r3, #7
 804401e:	2b05      	cmp	r3, #5
 8044020:	d826      	bhi.n	8044070 <UART_SetConfig+0x2c8>
 8044022:	a201      	add	r2, pc, #4	; (adr r2, 8044028 <UART_SetConfig+0x280>)
 8044024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044028:	08044041 	.word	0x08044041
 804402c:	08044049 	.word	0x08044049
 8044030:	08044051 	.word	0x08044051
 8044034:	08044059 	.word	0x08044059
 8044038:	08044061 	.word	0x08044061
 804403c:	08044069 	.word	0x08044069
 8044040:	2300      	movs	r3, #0
 8044042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044046:	e180      	b.n	804434a <UART_SetConfig+0x5a2>
 8044048:	2304      	movs	r3, #4
 804404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804404e:	e17c      	b.n	804434a <UART_SetConfig+0x5a2>
 8044050:	2308      	movs	r3, #8
 8044052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044056:	e178      	b.n	804434a <UART_SetConfig+0x5a2>
 8044058:	2310      	movs	r3, #16
 804405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804405e:	e174      	b.n	804434a <UART_SetConfig+0x5a2>
 8044060:	2320      	movs	r3, #32
 8044062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044066:	e170      	b.n	804434a <UART_SetConfig+0x5a2>
 8044068:	2340      	movs	r3, #64	; 0x40
 804406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804406e:	e16c      	b.n	804434a <UART_SetConfig+0x5a2>
 8044070:	2380      	movs	r3, #128	; 0x80
 8044072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044076:	e168      	b.n	804434a <UART_SetConfig+0x5a2>
 8044078:	687b      	ldr	r3, [r7, #4]
 804407a:	681b      	ldr	r3, [r3, #0]
 804407c:	4a1d      	ldr	r2, [pc, #116]	; (80440f4 <UART_SetConfig+0x34c>)
 804407e:	4293      	cmp	r3, r2
 8044080:	d142      	bne.n	8044108 <UART_SetConfig+0x360>
 8044082:	4b18      	ldr	r3, [pc, #96]	; (80440e4 <UART_SetConfig+0x33c>)
 8044084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044086:	f003 0307 	and.w	r3, r3, #7
 804408a:	2b05      	cmp	r3, #5
 804408c:	d838      	bhi.n	8044100 <UART_SetConfig+0x358>
 804408e:	a201      	add	r2, pc, #4	; (adr r2, 8044094 <UART_SetConfig+0x2ec>)
 8044090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044094:	080440ad 	.word	0x080440ad
 8044098:	080440b5 	.word	0x080440b5
 804409c:	080440bd 	.word	0x080440bd
 80440a0:	080440c5 	.word	0x080440c5
 80440a4:	080440cd 	.word	0x080440cd
 80440a8:	080440f9 	.word	0x080440f9
 80440ac:	2300      	movs	r3, #0
 80440ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80440b2:	e14a      	b.n	804434a <UART_SetConfig+0x5a2>
 80440b4:	2304      	movs	r3, #4
 80440b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80440ba:	e146      	b.n	804434a <UART_SetConfig+0x5a2>
 80440bc:	2308      	movs	r3, #8
 80440be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80440c2:	e142      	b.n	804434a <UART_SetConfig+0x5a2>
 80440c4:	2310      	movs	r3, #16
 80440c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80440ca:	e13e      	b.n	804434a <UART_SetConfig+0x5a2>
 80440cc:	2320      	movs	r3, #32
 80440ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80440d2:	e13a      	b.n	804434a <UART_SetConfig+0x5a2>
 80440d4:	cfff69f3 	.word	0xcfff69f3
 80440d8:	58000c00 	.word	0x58000c00
 80440dc:	11fff4ff 	.word	0x11fff4ff
 80440e0:	40011000 	.word	0x40011000
 80440e4:	58024400 	.word	0x58024400
 80440e8:	40004400 	.word	0x40004400
 80440ec:	40004800 	.word	0x40004800
 80440f0:	40004c00 	.word	0x40004c00
 80440f4:	40005000 	.word	0x40005000
 80440f8:	2340      	movs	r3, #64	; 0x40
 80440fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80440fe:	e124      	b.n	804434a <UART_SetConfig+0x5a2>
 8044100:	2380      	movs	r3, #128	; 0x80
 8044102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044106:	e120      	b.n	804434a <UART_SetConfig+0x5a2>
 8044108:	687b      	ldr	r3, [r7, #4]
 804410a:	681b      	ldr	r3, [r3, #0]
 804410c:	4acc      	ldr	r2, [pc, #816]	; (8044440 <UART_SetConfig+0x698>)
 804410e:	4293      	cmp	r3, r2
 8044110:	d176      	bne.n	8044200 <UART_SetConfig+0x458>
 8044112:	4bcc      	ldr	r3, [pc, #816]	; (8044444 <UART_SetConfig+0x69c>)
 8044114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804411a:	2b28      	cmp	r3, #40	; 0x28
 804411c:	d86c      	bhi.n	80441f8 <UART_SetConfig+0x450>
 804411e:	a201      	add	r2, pc, #4	; (adr r2, 8044124 <UART_SetConfig+0x37c>)
 8044120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044124:	080441c9 	.word	0x080441c9
 8044128:	080441f9 	.word	0x080441f9
 804412c:	080441f9 	.word	0x080441f9
 8044130:	080441f9 	.word	0x080441f9
 8044134:	080441f9 	.word	0x080441f9
 8044138:	080441f9 	.word	0x080441f9
 804413c:	080441f9 	.word	0x080441f9
 8044140:	080441f9 	.word	0x080441f9
 8044144:	080441d1 	.word	0x080441d1
 8044148:	080441f9 	.word	0x080441f9
 804414c:	080441f9 	.word	0x080441f9
 8044150:	080441f9 	.word	0x080441f9
 8044154:	080441f9 	.word	0x080441f9
 8044158:	080441f9 	.word	0x080441f9
 804415c:	080441f9 	.word	0x080441f9
 8044160:	080441f9 	.word	0x080441f9
 8044164:	080441d9 	.word	0x080441d9
 8044168:	080441f9 	.word	0x080441f9
 804416c:	080441f9 	.word	0x080441f9
 8044170:	080441f9 	.word	0x080441f9
 8044174:	080441f9 	.word	0x080441f9
 8044178:	080441f9 	.word	0x080441f9
 804417c:	080441f9 	.word	0x080441f9
 8044180:	080441f9 	.word	0x080441f9
 8044184:	080441e1 	.word	0x080441e1
 8044188:	080441f9 	.word	0x080441f9
 804418c:	080441f9 	.word	0x080441f9
 8044190:	080441f9 	.word	0x080441f9
 8044194:	080441f9 	.word	0x080441f9
 8044198:	080441f9 	.word	0x080441f9
 804419c:	080441f9 	.word	0x080441f9
 80441a0:	080441f9 	.word	0x080441f9
 80441a4:	080441e9 	.word	0x080441e9
 80441a8:	080441f9 	.word	0x080441f9
 80441ac:	080441f9 	.word	0x080441f9
 80441b0:	080441f9 	.word	0x080441f9
 80441b4:	080441f9 	.word	0x080441f9
 80441b8:	080441f9 	.word	0x080441f9
 80441bc:	080441f9 	.word	0x080441f9
 80441c0:	080441f9 	.word	0x080441f9
 80441c4:	080441f1 	.word	0x080441f1
 80441c8:	2301      	movs	r3, #1
 80441ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441ce:	e0bc      	b.n	804434a <UART_SetConfig+0x5a2>
 80441d0:	2304      	movs	r3, #4
 80441d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441d6:	e0b8      	b.n	804434a <UART_SetConfig+0x5a2>
 80441d8:	2308      	movs	r3, #8
 80441da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441de:	e0b4      	b.n	804434a <UART_SetConfig+0x5a2>
 80441e0:	2310      	movs	r3, #16
 80441e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441e6:	e0b0      	b.n	804434a <UART_SetConfig+0x5a2>
 80441e8:	2320      	movs	r3, #32
 80441ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441ee:	e0ac      	b.n	804434a <UART_SetConfig+0x5a2>
 80441f0:	2340      	movs	r3, #64	; 0x40
 80441f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441f6:	e0a8      	b.n	804434a <UART_SetConfig+0x5a2>
 80441f8:	2380      	movs	r3, #128	; 0x80
 80441fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80441fe:	e0a4      	b.n	804434a <UART_SetConfig+0x5a2>
 8044200:	687b      	ldr	r3, [r7, #4]
 8044202:	681b      	ldr	r3, [r3, #0]
 8044204:	4a90      	ldr	r2, [pc, #576]	; (8044448 <UART_SetConfig+0x6a0>)
 8044206:	4293      	cmp	r3, r2
 8044208:	d130      	bne.n	804426c <UART_SetConfig+0x4c4>
 804420a:	4b8e      	ldr	r3, [pc, #568]	; (8044444 <UART_SetConfig+0x69c>)
 804420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804420e:	f003 0307 	and.w	r3, r3, #7
 8044212:	2b05      	cmp	r3, #5
 8044214:	d826      	bhi.n	8044264 <UART_SetConfig+0x4bc>
 8044216:	a201      	add	r2, pc, #4	; (adr r2, 804421c <UART_SetConfig+0x474>)
 8044218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804421c:	08044235 	.word	0x08044235
 8044220:	0804423d 	.word	0x0804423d
 8044224:	08044245 	.word	0x08044245
 8044228:	0804424d 	.word	0x0804424d
 804422c:	08044255 	.word	0x08044255
 8044230:	0804425d 	.word	0x0804425d
 8044234:	2300      	movs	r3, #0
 8044236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804423a:	e086      	b.n	804434a <UART_SetConfig+0x5a2>
 804423c:	2304      	movs	r3, #4
 804423e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044242:	e082      	b.n	804434a <UART_SetConfig+0x5a2>
 8044244:	2308      	movs	r3, #8
 8044246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804424a:	e07e      	b.n	804434a <UART_SetConfig+0x5a2>
 804424c:	2310      	movs	r3, #16
 804424e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044252:	e07a      	b.n	804434a <UART_SetConfig+0x5a2>
 8044254:	2320      	movs	r3, #32
 8044256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804425a:	e076      	b.n	804434a <UART_SetConfig+0x5a2>
 804425c:	2340      	movs	r3, #64	; 0x40
 804425e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044262:	e072      	b.n	804434a <UART_SetConfig+0x5a2>
 8044264:	2380      	movs	r3, #128	; 0x80
 8044266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804426a:	e06e      	b.n	804434a <UART_SetConfig+0x5a2>
 804426c:	687b      	ldr	r3, [r7, #4]
 804426e:	681b      	ldr	r3, [r3, #0]
 8044270:	4a76      	ldr	r2, [pc, #472]	; (804444c <UART_SetConfig+0x6a4>)
 8044272:	4293      	cmp	r3, r2
 8044274:	d130      	bne.n	80442d8 <UART_SetConfig+0x530>
 8044276:	4b73      	ldr	r3, [pc, #460]	; (8044444 <UART_SetConfig+0x69c>)
 8044278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804427a:	f003 0307 	and.w	r3, r3, #7
 804427e:	2b05      	cmp	r3, #5
 8044280:	d826      	bhi.n	80442d0 <UART_SetConfig+0x528>
 8044282:	a201      	add	r2, pc, #4	; (adr r2, 8044288 <UART_SetConfig+0x4e0>)
 8044284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044288:	080442a1 	.word	0x080442a1
 804428c:	080442a9 	.word	0x080442a9
 8044290:	080442b1 	.word	0x080442b1
 8044294:	080442b9 	.word	0x080442b9
 8044298:	080442c1 	.word	0x080442c1
 804429c:	080442c9 	.word	0x080442c9
 80442a0:	2300      	movs	r3, #0
 80442a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442a6:	e050      	b.n	804434a <UART_SetConfig+0x5a2>
 80442a8:	2304      	movs	r3, #4
 80442aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442ae:	e04c      	b.n	804434a <UART_SetConfig+0x5a2>
 80442b0:	2308      	movs	r3, #8
 80442b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442b6:	e048      	b.n	804434a <UART_SetConfig+0x5a2>
 80442b8:	2310      	movs	r3, #16
 80442ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442be:	e044      	b.n	804434a <UART_SetConfig+0x5a2>
 80442c0:	2320      	movs	r3, #32
 80442c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442c6:	e040      	b.n	804434a <UART_SetConfig+0x5a2>
 80442c8:	2340      	movs	r3, #64	; 0x40
 80442ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442ce:	e03c      	b.n	804434a <UART_SetConfig+0x5a2>
 80442d0:	2380      	movs	r3, #128	; 0x80
 80442d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80442d6:	e038      	b.n	804434a <UART_SetConfig+0x5a2>
 80442d8:	687b      	ldr	r3, [r7, #4]
 80442da:	681b      	ldr	r3, [r3, #0]
 80442dc:	4a5c      	ldr	r2, [pc, #368]	; (8044450 <UART_SetConfig+0x6a8>)
 80442de:	4293      	cmp	r3, r2
 80442e0:	d130      	bne.n	8044344 <UART_SetConfig+0x59c>
 80442e2:	4b58      	ldr	r3, [pc, #352]	; (8044444 <UART_SetConfig+0x69c>)
 80442e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80442e6:	f003 0307 	and.w	r3, r3, #7
 80442ea:	2b05      	cmp	r3, #5
 80442ec:	d826      	bhi.n	804433c <UART_SetConfig+0x594>
 80442ee:	a201      	add	r2, pc, #4	; (adr r2, 80442f4 <UART_SetConfig+0x54c>)
 80442f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80442f4:	0804430d 	.word	0x0804430d
 80442f8:	08044315 	.word	0x08044315
 80442fc:	0804431d 	.word	0x0804431d
 8044300:	08044325 	.word	0x08044325
 8044304:	0804432d 	.word	0x0804432d
 8044308:	08044335 	.word	0x08044335
 804430c:	2302      	movs	r3, #2
 804430e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044312:	e01a      	b.n	804434a <UART_SetConfig+0x5a2>
 8044314:	2304      	movs	r3, #4
 8044316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804431a:	e016      	b.n	804434a <UART_SetConfig+0x5a2>
 804431c:	2308      	movs	r3, #8
 804431e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044322:	e012      	b.n	804434a <UART_SetConfig+0x5a2>
 8044324:	2310      	movs	r3, #16
 8044326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804432a:	e00e      	b.n	804434a <UART_SetConfig+0x5a2>
 804432c:	2320      	movs	r3, #32
 804432e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044332:	e00a      	b.n	804434a <UART_SetConfig+0x5a2>
 8044334:	2340      	movs	r3, #64	; 0x40
 8044336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 804433a:	e006      	b.n	804434a <UART_SetConfig+0x5a2>
 804433c:	2380      	movs	r3, #128	; 0x80
 804433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8044342:	e002      	b.n	804434a <UART_SetConfig+0x5a2>
 8044344:	2380      	movs	r3, #128	; 0x80
 8044346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804434a:	687b      	ldr	r3, [r7, #4]
 804434c:	681b      	ldr	r3, [r3, #0]
 804434e:	4a40      	ldr	r2, [pc, #256]	; (8044450 <UART_SetConfig+0x6a8>)
 8044350:	4293      	cmp	r3, r2
 8044352:	f040 80ef 	bne.w	8044534 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8044356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 804435a:	2b20      	cmp	r3, #32
 804435c:	dc46      	bgt.n	80443ec <UART_SetConfig+0x644>
 804435e:	2b02      	cmp	r3, #2
 8044360:	f2c0 8081 	blt.w	8044466 <UART_SetConfig+0x6be>
 8044364:	3b02      	subs	r3, #2
 8044366:	2b1e      	cmp	r3, #30
 8044368:	d87d      	bhi.n	8044466 <UART_SetConfig+0x6be>
 804436a:	a201      	add	r2, pc, #4	; (adr r2, 8044370 <UART_SetConfig+0x5c8>)
 804436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044370:	080443f3 	.word	0x080443f3
 8044374:	08044467 	.word	0x08044467
 8044378:	080443fb 	.word	0x080443fb
 804437c:	08044467 	.word	0x08044467
 8044380:	08044467 	.word	0x08044467
 8044384:	08044467 	.word	0x08044467
 8044388:	0804440b 	.word	0x0804440b
 804438c:	08044467 	.word	0x08044467
 8044390:	08044467 	.word	0x08044467
 8044394:	08044467 	.word	0x08044467
 8044398:	08044467 	.word	0x08044467
 804439c:	08044467 	.word	0x08044467
 80443a0:	08044467 	.word	0x08044467
 80443a4:	08044467 	.word	0x08044467
 80443a8:	0804441b 	.word	0x0804441b
 80443ac:	08044467 	.word	0x08044467
 80443b0:	08044467 	.word	0x08044467
 80443b4:	08044467 	.word	0x08044467
 80443b8:	08044467 	.word	0x08044467
 80443bc:	08044467 	.word	0x08044467
 80443c0:	08044467 	.word	0x08044467
 80443c4:	08044467 	.word	0x08044467
 80443c8:	08044467 	.word	0x08044467
 80443cc:	08044467 	.word	0x08044467
 80443d0:	08044467 	.word	0x08044467
 80443d4:	08044467 	.word	0x08044467
 80443d8:	08044467 	.word	0x08044467
 80443dc:	08044467 	.word	0x08044467
 80443e0:	08044467 	.word	0x08044467
 80443e4:	08044467 	.word	0x08044467
 80443e8:	08044459 	.word	0x08044459
 80443ec:	2b40      	cmp	r3, #64	; 0x40
 80443ee:	d036      	beq.n	804445e <UART_SetConfig+0x6b6>
 80443f0:	e039      	b.n	8044466 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80443f2:	f7fe ffd1 	bl	8043398 <HAL_RCCEx_GetD3PCLK1Freq>
 80443f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80443f8:	e03b      	b.n	8044472 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80443fa:	f107 0314 	add.w	r3, r7, #20
 80443fe:	4618      	mov	r0, r3
 8044400:	f7fe ffe0 	bl	80433c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044404:	69bb      	ldr	r3, [r7, #24]
 8044406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044408:	e033      	b.n	8044472 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804440a:	f107 0308 	add.w	r3, r7, #8
 804440e:	4618      	mov	r0, r3
 8044410:	f7ff f92c 	bl	804366c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044414:	68fb      	ldr	r3, [r7, #12]
 8044416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044418:	e02b      	b.n	8044472 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804441a:	4b0a      	ldr	r3, [pc, #40]	; (8044444 <UART_SetConfig+0x69c>)
 804441c:	681b      	ldr	r3, [r3, #0]
 804441e:	f003 0320 	and.w	r3, r3, #32
 8044422:	2b00      	cmp	r3, #0
 8044424:	d009      	beq.n	804443a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044426:	4b07      	ldr	r3, [pc, #28]	; (8044444 <UART_SetConfig+0x69c>)
 8044428:	681b      	ldr	r3, [r3, #0]
 804442a:	08db      	lsrs	r3, r3, #3
 804442c:	f003 0303 	and.w	r3, r3, #3
 8044430:	4a08      	ldr	r2, [pc, #32]	; (8044454 <UART_SetConfig+0x6ac>)
 8044432:	fa22 f303 	lsr.w	r3, r2, r3
 8044436:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044438:	e01b      	b.n	8044472 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 804443a:	4b06      	ldr	r3, [pc, #24]	; (8044454 <UART_SetConfig+0x6ac>)
 804443c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 804443e:	e018      	b.n	8044472 <UART_SetConfig+0x6ca>
 8044440:	40011400 	.word	0x40011400
 8044444:	58024400 	.word	0x58024400
 8044448:	40007800 	.word	0x40007800
 804444c:	40007c00 	.word	0x40007c00
 8044450:	58000c00 	.word	0x58000c00
 8044454:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044458:	4bc4      	ldr	r3, [pc, #784]	; (804476c <UART_SetConfig+0x9c4>)
 804445a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 804445c:	e009      	b.n	8044472 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044464:	e005      	b.n	8044472 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8044466:	2300      	movs	r3, #0
 8044468:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 804446a:	2301      	movs	r3, #1
 804446c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8044470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8044472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044474:	2b00      	cmp	r3, #0
 8044476:	f000 81da 	beq.w	804482e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804447a:	687b      	ldr	r3, [r7, #4]
 804447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804447e:	4abc      	ldr	r2, [pc, #752]	; (8044770 <UART_SetConfig+0x9c8>)
 8044480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044484:	461a      	mov	r2, r3
 8044486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044488:	fbb3 f3f2 	udiv	r3, r3, r2
 804448c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804448e:	687b      	ldr	r3, [r7, #4]
 8044490:	685a      	ldr	r2, [r3, #4]
 8044492:	4613      	mov	r3, r2
 8044494:	005b      	lsls	r3, r3, #1
 8044496:	4413      	add	r3, r2
 8044498:	6a3a      	ldr	r2, [r7, #32]
 804449a:	429a      	cmp	r2, r3
 804449c:	d305      	bcc.n	80444aa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804449e:	687b      	ldr	r3, [r7, #4]
 80444a0:	685b      	ldr	r3, [r3, #4]
 80444a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80444a4:	6a3a      	ldr	r2, [r7, #32]
 80444a6:	429a      	cmp	r2, r3
 80444a8:	d903      	bls.n	80444b2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80444aa:	2301      	movs	r3, #1
 80444ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80444b0:	e1bd      	b.n	804482e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80444b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80444b4:	4618      	mov	r0, r3
 80444b6:	f04f 0100 	mov.w	r1, #0
 80444ba:	687b      	ldr	r3, [r7, #4]
 80444bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80444be:	4aac      	ldr	r2, [pc, #688]	; (8044770 <UART_SetConfig+0x9c8>)
 80444c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80444c4:	b29a      	uxth	r2, r3
 80444c6:	f04f 0300 	mov.w	r3, #0
 80444ca:	f7fb ff05 	bl	80402d8 <__aeabi_uldivmod>
 80444ce:	4602      	mov	r2, r0
 80444d0:	460b      	mov	r3, r1
 80444d2:	4610      	mov	r0, r2
 80444d4:	4619      	mov	r1, r3
 80444d6:	f04f 0200 	mov.w	r2, #0
 80444da:	f04f 0300 	mov.w	r3, #0
 80444de:	020b      	lsls	r3, r1, #8
 80444e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80444e4:	0202      	lsls	r2, r0, #8
 80444e6:	6879      	ldr	r1, [r7, #4]
 80444e8:	6849      	ldr	r1, [r1, #4]
 80444ea:	0849      	lsrs	r1, r1, #1
 80444ec:	4608      	mov	r0, r1
 80444ee:	f04f 0100 	mov.w	r1, #0
 80444f2:	1814      	adds	r4, r2, r0
 80444f4:	eb43 0501 	adc.w	r5, r3, r1
 80444f8:	687b      	ldr	r3, [r7, #4]
 80444fa:	685b      	ldr	r3, [r3, #4]
 80444fc:	461a      	mov	r2, r3
 80444fe:	f04f 0300 	mov.w	r3, #0
 8044502:	4620      	mov	r0, r4
 8044504:	4629      	mov	r1, r5
 8044506:	f7fb fee7 	bl	80402d8 <__aeabi_uldivmod>
 804450a:	4602      	mov	r2, r0
 804450c:	460b      	mov	r3, r1
 804450e:	4613      	mov	r3, r2
 8044510:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8044512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044518:	d308      	bcc.n	804452c <UART_SetConfig+0x784>
 804451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804451c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044520:	d204      	bcs.n	804452c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8044522:	687b      	ldr	r3, [r7, #4]
 8044524:	681b      	ldr	r3, [r3, #0]
 8044526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8044528:	60da      	str	r2, [r3, #12]
 804452a:	e180      	b.n	804482e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 804452c:	2301      	movs	r3, #1
 804452e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8044532:	e17c      	b.n	804482e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8044534:	687b      	ldr	r3, [r7, #4]
 8044536:	69db      	ldr	r3, [r3, #28]
 8044538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804453c:	f040 80be 	bne.w	80446bc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8044540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8044544:	2b20      	cmp	r3, #32
 8044546:	dc49      	bgt.n	80445dc <UART_SetConfig+0x834>
 8044548:	2b00      	cmp	r3, #0
 804454a:	db7c      	blt.n	8044646 <UART_SetConfig+0x89e>
 804454c:	2b20      	cmp	r3, #32
 804454e:	d87a      	bhi.n	8044646 <UART_SetConfig+0x89e>
 8044550:	a201      	add	r2, pc, #4	; (adr r2, 8044558 <UART_SetConfig+0x7b0>)
 8044552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044556:	bf00      	nop
 8044558:	080445e3 	.word	0x080445e3
 804455c:	080445eb 	.word	0x080445eb
 8044560:	08044647 	.word	0x08044647
 8044564:	08044647 	.word	0x08044647
 8044568:	080445f3 	.word	0x080445f3
 804456c:	08044647 	.word	0x08044647
 8044570:	08044647 	.word	0x08044647
 8044574:	08044647 	.word	0x08044647
 8044578:	08044603 	.word	0x08044603
 804457c:	08044647 	.word	0x08044647
 8044580:	08044647 	.word	0x08044647
 8044584:	08044647 	.word	0x08044647
 8044588:	08044647 	.word	0x08044647
 804458c:	08044647 	.word	0x08044647
 8044590:	08044647 	.word	0x08044647
 8044594:	08044647 	.word	0x08044647
 8044598:	08044613 	.word	0x08044613
 804459c:	08044647 	.word	0x08044647
 80445a0:	08044647 	.word	0x08044647
 80445a4:	08044647 	.word	0x08044647
 80445a8:	08044647 	.word	0x08044647
 80445ac:	08044647 	.word	0x08044647
 80445b0:	08044647 	.word	0x08044647
 80445b4:	08044647 	.word	0x08044647
 80445b8:	08044647 	.word	0x08044647
 80445bc:	08044647 	.word	0x08044647
 80445c0:	08044647 	.word	0x08044647
 80445c4:	08044647 	.word	0x08044647
 80445c8:	08044647 	.word	0x08044647
 80445cc:	08044647 	.word	0x08044647
 80445d0:	08044647 	.word	0x08044647
 80445d4:	08044647 	.word	0x08044647
 80445d8:	08044639 	.word	0x08044639
 80445dc:	2b40      	cmp	r3, #64	; 0x40
 80445de:	d02e      	beq.n	804463e <UART_SetConfig+0x896>
 80445e0:	e031      	b.n	8044646 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80445e2:	f7fd ff3d 	bl	8042460 <HAL_RCC_GetPCLK1Freq>
 80445e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80445e8:	e033      	b.n	8044652 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80445ea:	f7fd ff4f 	bl	804248c <HAL_RCC_GetPCLK2Freq>
 80445ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80445f0:	e02f      	b.n	8044652 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80445f2:	f107 0314 	add.w	r3, r7, #20
 80445f6:	4618      	mov	r0, r3
 80445f8:	f7fe fee4 	bl	80433c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80445fc:	69bb      	ldr	r3, [r7, #24]
 80445fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044600:	e027      	b.n	8044652 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044602:	f107 0308 	add.w	r3, r7, #8
 8044606:	4618      	mov	r0, r3
 8044608:	f7ff f830 	bl	804366c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 804460c:	68fb      	ldr	r3, [r7, #12]
 804460e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044610:	e01f      	b.n	8044652 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044612:	4b58      	ldr	r3, [pc, #352]	; (8044774 <UART_SetConfig+0x9cc>)
 8044614:	681b      	ldr	r3, [r3, #0]
 8044616:	f003 0320 	and.w	r3, r3, #32
 804461a:	2b00      	cmp	r3, #0
 804461c:	d009      	beq.n	8044632 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804461e:	4b55      	ldr	r3, [pc, #340]	; (8044774 <UART_SetConfig+0x9cc>)
 8044620:	681b      	ldr	r3, [r3, #0]
 8044622:	08db      	lsrs	r3, r3, #3
 8044624:	f003 0303 	and.w	r3, r3, #3
 8044628:	4a53      	ldr	r2, [pc, #332]	; (8044778 <UART_SetConfig+0x9d0>)
 804462a:	fa22 f303 	lsr.w	r3, r2, r3
 804462e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044630:	e00f      	b.n	8044652 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8044632:	4b51      	ldr	r3, [pc, #324]	; (8044778 <UART_SetConfig+0x9d0>)
 8044634:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044636:	e00c      	b.n	8044652 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044638:	4b4c      	ldr	r3, [pc, #304]	; (804476c <UART_SetConfig+0x9c4>)
 804463a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 804463c:	e009      	b.n	8044652 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804463e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044644:	e005      	b.n	8044652 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8044646:	2300      	movs	r3, #0
 8044648:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 804464a:	2301      	movs	r3, #1
 804464c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8044650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8044652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044654:	2b00      	cmp	r3, #0
 8044656:	f000 80ea 	beq.w	804482e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804465a:	687b      	ldr	r3, [r7, #4]
 804465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804465e:	4a44      	ldr	r2, [pc, #272]	; (8044770 <UART_SetConfig+0x9c8>)
 8044660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044664:	461a      	mov	r2, r3
 8044666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044668:	fbb3 f3f2 	udiv	r3, r3, r2
 804466c:	005a      	lsls	r2, r3, #1
 804466e:	687b      	ldr	r3, [r7, #4]
 8044670:	685b      	ldr	r3, [r3, #4]
 8044672:	085b      	lsrs	r3, r3, #1
 8044674:	441a      	add	r2, r3
 8044676:	687b      	ldr	r3, [r7, #4]
 8044678:	685b      	ldr	r3, [r3, #4]
 804467a:	fbb2 f3f3 	udiv	r3, r2, r3
 804467e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8044680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044682:	2b0f      	cmp	r3, #15
 8044684:	d916      	bls.n	80446b4 <UART_SetConfig+0x90c>
 8044686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804468c:	d212      	bcs.n	80446b4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044690:	b29b      	uxth	r3, r3
 8044692:	f023 030f 	bic.w	r3, r3, #15
 8044696:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8044698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804469a:	085b      	lsrs	r3, r3, #1
 804469c:	b29b      	uxth	r3, r3
 804469e:	f003 0307 	and.w	r3, r3, #7
 80446a2:	b29a      	uxth	r2, r3
 80446a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80446a6:	4313      	orrs	r3, r2
 80446a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80446aa:	687b      	ldr	r3, [r7, #4]
 80446ac:	681b      	ldr	r3, [r3, #0]
 80446ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80446b0:	60da      	str	r2, [r3, #12]
 80446b2:	e0bc      	b.n	804482e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80446b4:	2301      	movs	r3, #1
 80446b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80446ba:	e0b8      	b.n	804482e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80446bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80446c0:	2b20      	cmp	r3, #32
 80446c2:	dc4b      	bgt.n	804475c <UART_SetConfig+0x9b4>
 80446c4:	2b00      	cmp	r3, #0
 80446c6:	f2c0 8087 	blt.w	80447d8 <UART_SetConfig+0xa30>
 80446ca:	2b20      	cmp	r3, #32
 80446cc:	f200 8084 	bhi.w	80447d8 <UART_SetConfig+0xa30>
 80446d0:	a201      	add	r2, pc, #4	; (adr r2, 80446d8 <UART_SetConfig+0x930>)
 80446d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80446d6:	bf00      	nop
 80446d8:	08044763 	.word	0x08044763
 80446dc:	0804477d 	.word	0x0804477d
 80446e0:	080447d9 	.word	0x080447d9
 80446e4:	080447d9 	.word	0x080447d9
 80446e8:	08044785 	.word	0x08044785
 80446ec:	080447d9 	.word	0x080447d9
 80446f0:	080447d9 	.word	0x080447d9
 80446f4:	080447d9 	.word	0x080447d9
 80446f8:	08044795 	.word	0x08044795
 80446fc:	080447d9 	.word	0x080447d9
 8044700:	080447d9 	.word	0x080447d9
 8044704:	080447d9 	.word	0x080447d9
 8044708:	080447d9 	.word	0x080447d9
 804470c:	080447d9 	.word	0x080447d9
 8044710:	080447d9 	.word	0x080447d9
 8044714:	080447d9 	.word	0x080447d9
 8044718:	080447a5 	.word	0x080447a5
 804471c:	080447d9 	.word	0x080447d9
 8044720:	080447d9 	.word	0x080447d9
 8044724:	080447d9 	.word	0x080447d9
 8044728:	080447d9 	.word	0x080447d9
 804472c:	080447d9 	.word	0x080447d9
 8044730:	080447d9 	.word	0x080447d9
 8044734:	080447d9 	.word	0x080447d9
 8044738:	080447d9 	.word	0x080447d9
 804473c:	080447d9 	.word	0x080447d9
 8044740:	080447d9 	.word	0x080447d9
 8044744:	080447d9 	.word	0x080447d9
 8044748:	080447d9 	.word	0x080447d9
 804474c:	080447d9 	.word	0x080447d9
 8044750:	080447d9 	.word	0x080447d9
 8044754:	080447d9 	.word	0x080447d9
 8044758:	080447cb 	.word	0x080447cb
 804475c:	2b40      	cmp	r3, #64	; 0x40
 804475e:	d037      	beq.n	80447d0 <UART_SetConfig+0xa28>
 8044760:	e03a      	b.n	80447d8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044762:	f7fd fe7d 	bl	8042460 <HAL_RCC_GetPCLK1Freq>
 8044766:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8044768:	e03c      	b.n	80447e4 <UART_SetConfig+0xa3c>
 804476a:	bf00      	nop
 804476c:	003d0900 	.word	0x003d0900
 8044770:	08044e68 	.word	0x08044e68
 8044774:	58024400 	.word	0x58024400
 8044778:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804477c:	f7fd fe86 	bl	804248c <HAL_RCC_GetPCLK2Freq>
 8044780:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8044782:	e02f      	b.n	80447e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044784:	f107 0314 	add.w	r3, r7, #20
 8044788:	4618      	mov	r0, r3
 804478a:	f7fe fe1b 	bl	80433c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804478e:	69bb      	ldr	r3, [r7, #24]
 8044790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8044792:	e027      	b.n	80447e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044794:	f107 0308 	add.w	r3, r7, #8
 8044798:	4618      	mov	r0, r3
 804479a:	f7fe ff67 	bl	804366c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 804479e:	68fb      	ldr	r3, [r7, #12]
 80447a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80447a2:	e01f      	b.n	80447e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80447a4:	4b2c      	ldr	r3, [pc, #176]	; (8044858 <UART_SetConfig+0xab0>)
 80447a6:	681b      	ldr	r3, [r3, #0]
 80447a8:	f003 0320 	and.w	r3, r3, #32
 80447ac:	2b00      	cmp	r3, #0
 80447ae:	d009      	beq.n	80447c4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80447b0:	4b29      	ldr	r3, [pc, #164]	; (8044858 <UART_SetConfig+0xab0>)
 80447b2:	681b      	ldr	r3, [r3, #0]
 80447b4:	08db      	lsrs	r3, r3, #3
 80447b6:	f003 0303 	and.w	r3, r3, #3
 80447ba:	4a28      	ldr	r2, [pc, #160]	; (804485c <UART_SetConfig+0xab4>)
 80447bc:	fa22 f303 	lsr.w	r3, r2, r3
 80447c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80447c2:	e00f      	b.n	80447e4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80447c4:	4b25      	ldr	r3, [pc, #148]	; (804485c <UART_SetConfig+0xab4>)
 80447c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80447c8:	e00c      	b.n	80447e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80447ca:	4b25      	ldr	r3, [pc, #148]	; (8044860 <UART_SetConfig+0xab8>)
 80447cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80447ce:	e009      	b.n	80447e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80447d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80447d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80447d6:	e005      	b.n	80447e4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80447d8:	2300      	movs	r3, #0
 80447da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80447dc:	2301      	movs	r3, #1
 80447de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80447e2:	bf00      	nop
    }

    if (pclk != 0U)
 80447e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80447e6:	2b00      	cmp	r3, #0
 80447e8:	d021      	beq.n	804482e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80447ea:	687b      	ldr	r3, [r7, #4]
 80447ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80447ee:	4a1d      	ldr	r2, [pc, #116]	; (8044864 <UART_SetConfig+0xabc>)
 80447f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80447f4:	461a      	mov	r2, r3
 80447f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80447f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80447fc:	687b      	ldr	r3, [r7, #4]
 80447fe:	685b      	ldr	r3, [r3, #4]
 8044800:	085b      	lsrs	r3, r3, #1
 8044802:	441a      	add	r2, r3
 8044804:	687b      	ldr	r3, [r7, #4]
 8044806:	685b      	ldr	r3, [r3, #4]
 8044808:	fbb2 f3f3 	udiv	r3, r2, r3
 804480c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044810:	2b0f      	cmp	r3, #15
 8044812:	d909      	bls.n	8044828 <UART_SetConfig+0xa80>
 8044814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804481a:	d205      	bcs.n	8044828 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 804481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804481e:	b29a      	uxth	r2, r3
 8044820:	687b      	ldr	r3, [r7, #4]
 8044822:	681b      	ldr	r3, [r3, #0]
 8044824:	60da      	str	r2, [r3, #12]
 8044826:	e002      	b.n	804482e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8044828:	2301      	movs	r3, #1
 804482a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804482e:	687b      	ldr	r3, [r7, #4]
 8044830:	2201      	movs	r2, #1
 8044832:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8044836:	687b      	ldr	r3, [r7, #4]
 8044838:	2201      	movs	r2, #1
 804483a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804483e:	687b      	ldr	r3, [r7, #4]
 8044840:	2200      	movs	r2, #0
 8044842:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8044844:	687b      	ldr	r3, [r7, #4]
 8044846:	2200      	movs	r2, #0
 8044848:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804484a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 804484e:	4618      	mov	r0, r3
 8044850:	3738      	adds	r7, #56	; 0x38
 8044852:	46bd      	mov	sp, r7
 8044854:	bdb0      	pop	{r4, r5, r7, pc}
 8044856:	bf00      	nop
 8044858:	58024400 	.word	0x58024400
 804485c:	03d09000 	.word	0x03d09000
 8044860:	003d0900 	.word	0x003d0900
 8044864:	08044e68 	.word	0x08044e68

08044868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8044868:	b480      	push	{r7}
 804486a:	b083      	sub	sp, #12
 804486c:	af00      	add	r7, sp, #0
 804486e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8044870:	687b      	ldr	r3, [r7, #4]
 8044872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044874:	f003 0301 	and.w	r3, r3, #1
 8044878:	2b00      	cmp	r3, #0
 804487a:	d00a      	beq.n	8044892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804487c:	687b      	ldr	r3, [r7, #4]
 804487e:	681b      	ldr	r3, [r3, #0]
 8044880:	685b      	ldr	r3, [r3, #4]
 8044882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8044886:	687b      	ldr	r3, [r7, #4]
 8044888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804488a:	687b      	ldr	r3, [r7, #4]
 804488c:	681b      	ldr	r3, [r3, #0]
 804488e:	430a      	orrs	r2, r1
 8044890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8044892:	687b      	ldr	r3, [r7, #4]
 8044894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044896:	f003 0302 	and.w	r3, r3, #2
 804489a:	2b00      	cmp	r3, #0
 804489c:	d00a      	beq.n	80448b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804489e:	687b      	ldr	r3, [r7, #4]
 80448a0:	681b      	ldr	r3, [r3, #0]
 80448a2:	685b      	ldr	r3, [r3, #4]
 80448a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80448a8:	687b      	ldr	r3, [r7, #4]
 80448aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80448ac:	687b      	ldr	r3, [r7, #4]
 80448ae:	681b      	ldr	r3, [r3, #0]
 80448b0:	430a      	orrs	r2, r1
 80448b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80448b4:	687b      	ldr	r3, [r7, #4]
 80448b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80448b8:	f003 0304 	and.w	r3, r3, #4
 80448bc:	2b00      	cmp	r3, #0
 80448be:	d00a      	beq.n	80448d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80448c0:	687b      	ldr	r3, [r7, #4]
 80448c2:	681b      	ldr	r3, [r3, #0]
 80448c4:	685b      	ldr	r3, [r3, #4]
 80448c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80448ca:	687b      	ldr	r3, [r7, #4]
 80448cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80448ce:	687b      	ldr	r3, [r7, #4]
 80448d0:	681b      	ldr	r3, [r3, #0]
 80448d2:	430a      	orrs	r2, r1
 80448d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80448d6:	687b      	ldr	r3, [r7, #4]
 80448d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80448da:	f003 0308 	and.w	r3, r3, #8
 80448de:	2b00      	cmp	r3, #0
 80448e0:	d00a      	beq.n	80448f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80448e2:	687b      	ldr	r3, [r7, #4]
 80448e4:	681b      	ldr	r3, [r3, #0]
 80448e6:	685b      	ldr	r3, [r3, #4]
 80448e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80448ec:	687b      	ldr	r3, [r7, #4]
 80448ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80448f0:	687b      	ldr	r3, [r7, #4]
 80448f2:	681b      	ldr	r3, [r3, #0]
 80448f4:	430a      	orrs	r2, r1
 80448f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80448f8:	687b      	ldr	r3, [r7, #4]
 80448fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80448fc:	f003 0310 	and.w	r3, r3, #16
 8044900:	2b00      	cmp	r3, #0
 8044902:	d00a      	beq.n	804491a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8044904:	687b      	ldr	r3, [r7, #4]
 8044906:	681b      	ldr	r3, [r3, #0]
 8044908:	689b      	ldr	r3, [r3, #8]
 804490a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804490e:	687b      	ldr	r3, [r7, #4]
 8044910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8044912:	687b      	ldr	r3, [r7, #4]
 8044914:	681b      	ldr	r3, [r3, #0]
 8044916:	430a      	orrs	r2, r1
 8044918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804491a:	687b      	ldr	r3, [r7, #4]
 804491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804491e:	f003 0320 	and.w	r3, r3, #32
 8044922:	2b00      	cmp	r3, #0
 8044924:	d00a      	beq.n	804493c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8044926:	687b      	ldr	r3, [r7, #4]
 8044928:	681b      	ldr	r3, [r3, #0]
 804492a:	689b      	ldr	r3, [r3, #8]
 804492c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8044930:	687b      	ldr	r3, [r7, #4]
 8044932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044934:	687b      	ldr	r3, [r7, #4]
 8044936:	681b      	ldr	r3, [r3, #0]
 8044938:	430a      	orrs	r2, r1
 804493a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804493c:	687b      	ldr	r3, [r7, #4]
 804493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044944:	2b00      	cmp	r3, #0
 8044946:	d01a      	beq.n	804497e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8044948:	687b      	ldr	r3, [r7, #4]
 804494a:	681b      	ldr	r3, [r3, #0]
 804494c:	685b      	ldr	r3, [r3, #4]
 804494e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8044952:	687b      	ldr	r3, [r7, #4]
 8044954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8044956:	687b      	ldr	r3, [r7, #4]
 8044958:	681b      	ldr	r3, [r3, #0]
 804495a:	430a      	orrs	r2, r1
 804495c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804495e:	687b      	ldr	r3, [r7, #4]
 8044960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044966:	d10a      	bne.n	804497e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8044968:	687b      	ldr	r3, [r7, #4]
 804496a:	681b      	ldr	r3, [r3, #0]
 804496c:	685b      	ldr	r3, [r3, #4]
 804496e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8044972:	687b      	ldr	r3, [r7, #4]
 8044974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8044976:	687b      	ldr	r3, [r7, #4]
 8044978:	681b      	ldr	r3, [r3, #0]
 804497a:	430a      	orrs	r2, r1
 804497c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804497e:	687b      	ldr	r3, [r7, #4]
 8044980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044986:	2b00      	cmp	r3, #0
 8044988:	d00a      	beq.n	80449a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804498a:	687b      	ldr	r3, [r7, #4]
 804498c:	681b      	ldr	r3, [r3, #0]
 804498e:	685b      	ldr	r3, [r3, #4]
 8044990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8044994:	687b      	ldr	r3, [r7, #4]
 8044996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8044998:	687b      	ldr	r3, [r7, #4]
 804499a:	681b      	ldr	r3, [r3, #0]
 804499c:	430a      	orrs	r2, r1
 804499e:	605a      	str	r2, [r3, #4]
  }
}
 80449a0:	bf00      	nop
 80449a2:	370c      	adds	r7, #12
 80449a4:	46bd      	mov	sp, r7
 80449a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449aa:	4770      	bx	lr

080449ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80449ac:	b580      	push	{r7, lr}
 80449ae:	b086      	sub	sp, #24
 80449b0:	af02      	add	r7, sp, #8
 80449b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80449b4:	687b      	ldr	r3, [r7, #4]
 80449b6:	2200      	movs	r2, #0
 80449b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80449bc:	f7fc f9e8 	bl	8040d90 <HAL_GetTick>
 80449c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80449c2:	687b      	ldr	r3, [r7, #4]
 80449c4:	681b      	ldr	r3, [r3, #0]
 80449c6:	681b      	ldr	r3, [r3, #0]
 80449c8:	f003 0308 	and.w	r3, r3, #8
 80449cc:	2b08      	cmp	r3, #8
 80449ce:	d10e      	bne.n	80449ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80449d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80449d4:	9300      	str	r3, [sp, #0]
 80449d6:	68fb      	ldr	r3, [r7, #12]
 80449d8:	2200      	movs	r2, #0
 80449da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80449de:	6878      	ldr	r0, [r7, #4]
 80449e0:	f000 f82f 	bl	8044a42 <UART_WaitOnFlagUntilTimeout>
 80449e4:	4603      	mov	r3, r0
 80449e6:	2b00      	cmp	r3, #0
 80449e8:	d001      	beq.n	80449ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80449ea:	2303      	movs	r3, #3
 80449ec:	e025      	b.n	8044a3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80449ee:	687b      	ldr	r3, [r7, #4]
 80449f0:	681b      	ldr	r3, [r3, #0]
 80449f2:	681b      	ldr	r3, [r3, #0]
 80449f4:	f003 0304 	and.w	r3, r3, #4
 80449f8:	2b04      	cmp	r3, #4
 80449fa:	d10e      	bne.n	8044a1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80449fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8044a00:	9300      	str	r3, [sp, #0]
 8044a02:	68fb      	ldr	r3, [r7, #12]
 8044a04:	2200      	movs	r2, #0
 8044a06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8044a0a:	6878      	ldr	r0, [r7, #4]
 8044a0c:	f000 f819 	bl	8044a42 <UART_WaitOnFlagUntilTimeout>
 8044a10:	4603      	mov	r3, r0
 8044a12:	2b00      	cmp	r3, #0
 8044a14:	d001      	beq.n	8044a1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8044a16:	2303      	movs	r3, #3
 8044a18:	e00f      	b.n	8044a3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8044a1a:	687b      	ldr	r3, [r7, #4]
 8044a1c:	2220      	movs	r2, #32
 8044a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8044a22:	687b      	ldr	r3, [r7, #4]
 8044a24:	2220      	movs	r2, #32
 8044a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8044a2a:	687b      	ldr	r3, [r7, #4]
 8044a2c:	2200      	movs	r2, #0
 8044a2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8044a30:	687b      	ldr	r3, [r7, #4]
 8044a32:	2200      	movs	r2, #0
 8044a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8044a38:	2300      	movs	r3, #0
}
 8044a3a:	4618      	mov	r0, r3
 8044a3c:	3710      	adds	r7, #16
 8044a3e:	46bd      	mov	sp, r7
 8044a40:	bd80      	pop	{r7, pc}

08044a42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8044a42:	b580      	push	{r7, lr}
 8044a44:	b09c      	sub	sp, #112	; 0x70
 8044a46:	af00      	add	r7, sp, #0
 8044a48:	60f8      	str	r0, [r7, #12]
 8044a4a:	60b9      	str	r1, [r7, #8]
 8044a4c:	603b      	str	r3, [r7, #0]
 8044a4e:	4613      	mov	r3, r2
 8044a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044a52:	e0a9      	b.n	8044ba8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8044a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8044a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044a5a:	f000 80a5 	beq.w	8044ba8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044a5e:	f7fc f997 	bl	8040d90 <HAL_GetTick>
 8044a62:	4602      	mov	r2, r0
 8044a64:	683b      	ldr	r3, [r7, #0]
 8044a66:	1ad3      	subs	r3, r2, r3
 8044a68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8044a6a:	429a      	cmp	r2, r3
 8044a6c:	d302      	bcc.n	8044a74 <UART_WaitOnFlagUntilTimeout+0x32>
 8044a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8044a70:	2b00      	cmp	r3, #0
 8044a72:	d140      	bne.n	8044af6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8044a74:	68fb      	ldr	r3, [r7, #12]
 8044a76:	681b      	ldr	r3, [r3, #0]
 8044a78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8044a7c:	e853 3f00 	ldrex	r3, [r3]
 8044a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8044a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8044a84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8044a88:	667b      	str	r3, [r7, #100]	; 0x64
 8044a8a:	68fb      	ldr	r3, [r7, #12]
 8044a8c:	681b      	ldr	r3, [r3, #0]
 8044a8e:	461a      	mov	r2, r3
 8044a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8044a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8044a94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8044a98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8044a9a:	e841 2300 	strex	r3, r2, [r1]
 8044a9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8044aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8044aa2:	2b00      	cmp	r3, #0
 8044aa4:	d1e6      	bne.n	8044a74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8044aa6:	68fb      	ldr	r3, [r7, #12]
 8044aa8:	681b      	ldr	r3, [r3, #0]
 8044aaa:	3308      	adds	r3, #8
 8044aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044ab0:	e853 3f00 	ldrex	r3, [r3]
 8044ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8044ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044ab8:	f023 0301 	bic.w	r3, r3, #1
 8044abc:	663b      	str	r3, [r7, #96]	; 0x60
 8044abe:	68fb      	ldr	r3, [r7, #12]
 8044ac0:	681b      	ldr	r3, [r3, #0]
 8044ac2:	3308      	adds	r3, #8
 8044ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8044ac6:	64ba      	str	r2, [r7, #72]	; 0x48
 8044ac8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044aca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8044acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8044ace:	e841 2300 	strex	r3, r2, [r1]
 8044ad2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8044ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8044ad6:	2b00      	cmp	r3, #0
 8044ad8:	d1e5      	bne.n	8044aa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8044ada:	68fb      	ldr	r3, [r7, #12]
 8044adc:	2220      	movs	r2, #32
 8044ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8044ae2:	68fb      	ldr	r3, [r7, #12]
 8044ae4:	2220      	movs	r2, #32
 8044ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8044aea:	68fb      	ldr	r3, [r7, #12]
 8044aec:	2200      	movs	r2, #0
 8044aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8044af2:	2303      	movs	r3, #3
 8044af4:	e069      	b.n	8044bca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8044af6:	68fb      	ldr	r3, [r7, #12]
 8044af8:	681b      	ldr	r3, [r3, #0]
 8044afa:	681b      	ldr	r3, [r3, #0]
 8044afc:	f003 0304 	and.w	r3, r3, #4
 8044b00:	2b00      	cmp	r3, #0
 8044b02:	d051      	beq.n	8044ba8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8044b04:	68fb      	ldr	r3, [r7, #12]
 8044b06:	681b      	ldr	r3, [r3, #0]
 8044b08:	69db      	ldr	r3, [r3, #28]
 8044b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8044b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8044b12:	d149      	bne.n	8044ba8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8044b14:	68fb      	ldr	r3, [r7, #12]
 8044b16:	681b      	ldr	r3, [r3, #0]
 8044b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8044b1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8044b1e:	68fb      	ldr	r3, [r7, #12]
 8044b20:	681b      	ldr	r3, [r3, #0]
 8044b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044b26:	e853 3f00 	ldrex	r3, [r3]
 8044b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8044b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044b2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8044b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8044b34:	68fb      	ldr	r3, [r7, #12]
 8044b36:	681b      	ldr	r3, [r3, #0]
 8044b38:	461a      	mov	r2, r3
 8044b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8044b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8044b3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8044b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8044b44:	e841 2300 	strex	r3, r2, [r1]
 8044b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8044b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044b4c:	2b00      	cmp	r3, #0
 8044b4e:	d1e6      	bne.n	8044b1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8044b50:	68fb      	ldr	r3, [r7, #12]
 8044b52:	681b      	ldr	r3, [r3, #0]
 8044b54:	3308      	adds	r3, #8
 8044b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044b58:	697b      	ldr	r3, [r7, #20]
 8044b5a:	e853 3f00 	ldrex	r3, [r3]
 8044b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8044b60:	693b      	ldr	r3, [r7, #16]
 8044b62:	f023 0301 	bic.w	r3, r3, #1
 8044b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8044b68:	68fb      	ldr	r3, [r7, #12]
 8044b6a:	681b      	ldr	r3, [r3, #0]
 8044b6c:	3308      	adds	r3, #8
 8044b6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8044b70:	623a      	str	r2, [r7, #32]
 8044b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044b74:	69f9      	ldr	r1, [r7, #28]
 8044b76:	6a3a      	ldr	r2, [r7, #32]
 8044b78:	e841 2300 	strex	r3, r2, [r1]
 8044b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8044b7e:	69bb      	ldr	r3, [r7, #24]
 8044b80:	2b00      	cmp	r3, #0
 8044b82:	d1e5      	bne.n	8044b50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8044b84:	68fb      	ldr	r3, [r7, #12]
 8044b86:	2220      	movs	r2, #32
 8044b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8044b8c:	68fb      	ldr	r3, [r7, #12]
 8044b8e:	2220      	movs	r2, #32
 8044b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8044b94:	68fb      	ldr	r3, [r7, #12]
 8044b96:	2220      	movs	r2, #32
 8044b98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8044b9c:	68fb      	ldr	r3, [r7, #12]
 8044b9e:	2200      	movs	r2, #0
 8044ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8044ba4:	2303      	movs	r3, #3
 8044ba6:	e010      	b.n	8044bca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044ba8:	68fb      	ldr	r3, [r7, #12]
 8044baa:	681b      	ldr	r3, [r3, #0]
 8044bac:	69da      	ldr	r2, [r3, #28]
 8044bae:	68bb      	ldr	r3, [r7, #8]
 8044bb0:	4013      	ands	r3, r2
 8044bb2:	68ba      	ldr	r2, [r7, #8]
 8044bb4:	429a      	cmp	r2, r3
 8044bb6:	bf0c      	ite	eq
 8044bb8:	2301      	moveq	r3, #1
 8044bba:	2300      	movne	r3, #0
 8044bbc:	b2db      	uxtb	r3, r3
 8044bbe:	461a      	mov	r2, r3
 8044bc0:	79fb      	ldrb	r3, [r7, #7]
 8044bc2:	429a      	cmp	r2, r3
 8044bc4:	f43f af46 	beq.w	8044a54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8044bc8:	2300      	movs	r3, #0
}
 8044bca:	4618      	mov	r0, r3
 8044bcc:	3770      	adds	r7, #112	; 0x70
 8044bce:	46bd      	mov	sp, r7
 8044bd0:	bd80      	pop	{r7, pc}

08044bd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8044bd2:	b480      	push	{r7}
 8044bd4:	b085      	sub	sp, #20
 8044bd6:	af00      	add	r7, sp, #0
 8044bd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8044bda:	687b      	ldr	r3, [r7, #4]
 8044bdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8044be0:	2b01      	cmp	r3, #1
 8044be2:	d101      	bne.n	8044be8 <HAL_UARTEx_DisableFifoMode+0x16>
 8044be4:	2302      	movs	r3, #2
 8044be6:	e027      	b.n	8044c38 <HAL_UARTEx_DisableFifoMode+0x66>
 8044be8:	687b      	ldr	r3, [r7, #4]
 8044bea:	2201      	movs	r2, #1
 8044bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8044bf0:	687b      	ldr	r3, [r7, #4]
 8044bf2:	2224      	movs	r2, #36	; 0x24
 8044bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8044bf8:	687b      	ldr	r3, [r7, #4]
 8044bfa:	681b      	ldr	r3, [r3, #0]
 8044bfc:	681b      	ldr	r3, [r3, #0]
 8044bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8044c00:	687b      	ldr	r3, [r7, #4]
 8044c02:	681b      	ldr	r3, [r3, #0]
 8044c04:	681a      	ldr	r2, [r3, #0]
 8044c06:	687b      	ldr	r3, [r7, #4]
 8044c08:	681b      	ldr	r3, [r3, #0]
 8044c0a:	f022 0201 	bic.w	r2, r2, #1
 8044c0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8044c10:	68fb      	ldr	r3, [r7, #12]
 8044c12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8044c16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8044c18:	687b      	ldr	r3, [r7, #4]
 8044c1a:	2200      	movs	r2, #0
 8044c1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044c1e:	687b      	ldr	r3, [r7, #4]
 8044c20:	681b      	ldr	r3, [r3, #0]
 8044c22:	68fa      	ldr	r2, [r7, #12]
 8044c24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8044c26:	687b      	ldr	r3, [r7, #4]
 8044c28:	2220      	movs	r2, #32
 8044c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044c2e:	687b      	ldr	r3, [r7, #4]
 8044c30:	2200      	movs	r2, #0
 8044c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8044c36:	2300      	movs	r3, #0
}
 8044c38:	4618      	mov	r0, r3
 8044c3a:	3714      	adds	r7, #20
 8044c3c:	46bd      	mov	sp, r7
 8044c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c42:	4770      	bx	lr

08044c44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8044c44:	b580      	push	{r7, lr}
 8044c46:	b084      	sub	sp, #16
 8044c48:	af00      	add	r7, sp, #0
 8044c4a:	6078      	str	r0, [r7, #4]
 8044c4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8044c4e:	687b      	ldr	r3, [r7, #4]
 8044c50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8044c54:	2b01      	cmp	r3, #1
 8044c56:	d101      	bne.n	8044c5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8044c58:	2302      	movs	r3, #2
 8044c5a:	e02d      	b.n	8044cb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8044c5c:	687b      	ldr	r3, [r7, #4]
 8044c5e:	2201      	movs	r2, #1
 8044c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8044c64:	687b      	ldr	r3, [r7, #4]
 8044c66:	2224      	movs	r2, #36	; 0x24
 8044c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8044c6c:	687b      	ldr	r3, [r7, #4]
 8044c6e:	681b      	ldr	r3, [r3, #0]
 8044c70:	681b      	ldr	r3, [r3, #0]
 8044c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8044c74:	687b      	ldr	r3, [r7, #4]
 8044c76:	681b      	ldr	r3, [r3, #0]
 8044c78:	681a      	ldr	r2, [r3, #0]
 8044c7a:	687b      	ldr	r3, [r7, #4]
 8044c7c:	681b      	ldr	r3, [r3, #0]
 8044c7e:	f022 0201 	bic.w	r2, r2, #1
 8044c82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8044c84:	687b      	ldr	r3, [r7, #4]
 8044c86:	681b      	ldr	r3, [r3, #0]
 8044c88:	689b      	ldr	r3, [r3, #8]
 8044c8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8044c8e:	687b      	ldr	r3, [r7, #4]
 8044c90:	681b      	ldr	r3, [r3, #0]
 8044c92:	683a      	ldr	r2, [r7, #0]
 8044c94:	430a      	orrs	r2, r1
 8044c96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8044c98:	6878      	ldr	r0, [r7, #4]
 8044c9a:	f000 f84f 	bl	8044d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044c9e:	687b      	ldr	r3, [r7, #4]
 8044ca0:	681b      	ldr	r3, [r3, #0]
 8044ca2:	68fa      	ldr	r2, [r7, #12]
 8044ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8044ca6:	687b      	ldr	r3, [r7, #4]
 8044ca8:	2220      	movs	r2, #32
 8044caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044cae:	687b      	ldr	r3, [r7, #4]
 8044cb0:	2200      	movs	r2, #0
 8044cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8044cb6:	2300      	movs	r3, #0
}
 8044cb8:	4618      	mov	r0, r3
 8044cba:	3710      	adds	r7, #16
 8044cbc:	46bd      	mov	sp, r7
 8044cbe:	bd80      	pop	{r7, pc}

08044cc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8044cc0:	b580      	push	{r7, lr}
 8044cc2:	b084      	sub	sp, #16
 8044cc4:	af00      	add	r7, sp, #0
 8044cc6:	6078      	str	r0, [r7, #4]
 8044cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8044cca:	687b      	ldr	r3, [r7, #4]
 8044ccc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8044cd0:	2b01      	cmp	r3, #1
 8044cd2:	d101      	bne.n	8044cd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8044cd4:	2302      	movs	r3, #2
 8044cd6:	e02d      	b.n	8044d34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8044cd8:	687b      	ldr	r3, [r7, #4]
 8044cda:	2201      	movs	r2, #1
 8044cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8044ce0:	687b      	ldr	r3, [r7, #4]
 8044ce2:	2224      	movs	r2, #36	; 0x24
 8044ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8044ce8:	687b      	ldr	r3, [r7, #4]
 8044cea:	681b      	ldr	r3, [r3, #0]
 8044cec:	681b      	ldr	r3, [r3, #0]
 8044cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8044cf0:	687b      	ldr	r3, [r7, #4]
 8044cf2:	681b      	ldr	r3, [r3, #0]
 8044cf4:	681a      	ldr	r2, [r3, #0]
 8044cf6:	687b      	ldr	r3, [r7, #4]
 8044cf8:	681b      	ldr	r3, [r3, #0]
 8044cfa:	f022 0201 	bic.w	r2, r2, #1
 8044cfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8044d00:	687b      	ldr	r3, [r7, #4]
 8044d02:	681b      	ldr	r3, [r3, #0]
 8044d04:	689b      	ldr	r3, [r3, #8]
 8044d06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8044d0a:	687b      	ldr	r3, [r7, #4]
 8044d0c:	681b      	ldr	r3, [r3, #0]
 8044d0e:	683a      	ldr	r2, [r7, #0]
 8044d10:	430a      	orrs	r2, r1
 8044d12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8044d14:	6878      	ldr	r0, [r7, #4]
 8044d16:	f000 f811 	bl	8044d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044d1a:	687b      	ldr	r3, [r7, #4]
 8044d1c:	681b      	ldr	r3, [r3, #0]
 8044d1e:	68fa      	ldr	r2, [r7, #12]
 8044d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8044d22:	687b      	ldr	r3, [r7, #4]
 8044d24:	2220      	movs	r2, #32
 8044d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044d2a:	687b      	ldr	r3, [r7, #4]
 8044d2c:	2200      	movs	r2, #0
 8044d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8044d32:	2300      	movs	r3, #0
}
 8044d34:	4618      	mov	r0, r3
 8044d36:	3710      	adds	r7, #16
 8044d38:	46bd      	mov	sp, r7
 8044d3a:	bd80      	pop	{r7, pc}

08044d3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8044d3c:	b480      	push	{r7}
 8044d3e:	b085      	sub	sp, #20
 8044d40:	af00      	add	r7, sp, #0
 8044d42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8044d44:	687b      	ldr	r3, [r7, #4]
 8044d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8044d48:	2b00      	cmp	r3, #0
 8044d4a:	d108      	bne.n	8044d5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8044d4c:	687b      	ldr	r3, [r7, #4]
 8044d4e:	2201      	movs	r2, #1
 8044d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8044d54:	687b      	ldr	r3, [r7, #4]
 8044d56:	2201      	movs	r2, #1
 8044d58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8044d5c:	e031      	b.n	8044dc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8044d5e:	2310      	movs	r3, #16
 8044d60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8044d62:	2310      	movs	r3, #16
 8044d64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8044d66:	687b      	ldr	r3, [r7, #4]
 8044d68:	681b      	ldr	r3, [r3, #0]
 8044d6a:	689b      	ldr	r3, [r3, #8]
 8044d6c:	0e5b      	lsrs	r3, r3, #25
 8044d6e:	b2db      	uxtb	r3, r3
 8044d70:	f003 0307 	and.w	r3, r3, #7
 8044d74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8044d76:	687b      	ldr	r3, [r7, #4]
 8044d78:	681b      	ldr	r3, [r3, #0]
 8044d7a:	689b      	ldr	r3, [r3, #8]
 8044d7c:	0f5b      	lsrs	r3, r3, #29
 8044d7e:	b2db      	uxtb	r3, r3
 8044d80:	f003 0307 	and.w	r3, r3, #7
 8044d84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8044d86:	7bbb      	ldrb	r3, [r7, #14]
 8044d88:	7b3a      	ldrb	r2, [r7, #12]
 8044d8a:	4911      	ldr	r1, [pc, #68]	; (8044dd0 <UARTEx_SetNbDataToProcess+0x94>)
 8044d8c:	5c8a      	ldrb	r2, [r1, r2]
 8044d8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8044d92:	7b3a      	ldrb	r2, [r7, #12]
 8044d94:	490f      	ldr	r1, [pc, #60]	; (8044dd4 <UARTEx_SetNbDataToProcess+0x98>)
 8044d96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8044d98:	fb93 f3f2 	sdiv	r3, r3, r2
 8044d9c:	b29a      	uxth	r2, r3
 8044d9e:	687b      	ldr	r3, [r7, #4]
 8044da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8044da4:	7bfb      	ldrb	r3, [r7, #15]
 8044da6:	7b7a      	ldrb	r2, [r7, #13]
 8044da8:	4909      	ldr	r1, [pc, #36]	; (8044dd0 <UARTEx_SetNbDataToProcess+0x94>)
 8044daa:	5c8a      	ldrb	r2, [r1, r2]
 8044dac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8044db0:	7b7a      	ldrb	r2, [r7, #13]
 8044db2:	4908      	ldr	r1, [pc, #32]	; (8044dd4 <UARTEx_SetNbDataToProcess+0x98>)
 8044db4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8044db6:	fb93 f3f2 	sdiv	r3, r3, r2
 8044dba:	b29a      	uxth	r2, r3
 8044dbc:	687b      	ldr	r3, [r7, #4]
 8044dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8044dc2:	bf00      	nop
 8044dc4:	3714      	adds	r7, #20
 8044dc6:	46bd      	mov	sp, r7
 8044dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044dcc:	4770      	bx	lr
 8044dce:	bf00      	nop
 8044dd0:	08044e80 	.word	0x08044e80
 8044dd4:	08044e88 	.word	0x08044e88

08044dd8 <__libc_init_array>:
 8044dd8:	b570      	push	{r4, r5, r6, lr}
 8044dda:	4d0d      	ldr	r5, [pc, #52]	; (8044e10 <__libc_init_array+0x38>)
 8044ddc:	4c0d      	ldr	r4, [pc, #52]	; (8044e14 <__libc_init_array+0x3c>)
 8044dde:	1b64      	subs	r4, r4, r5
 8044de0:	10a4      	asrs	r4, r4, #2
 8044de2:	2600      	movs	r6, #0
 8044de4:	42a6      	cmp	r6, r4
 8044de6:	d109      	bne.n	8044dfc <__libc_init_array+0x24>
 8044de8:	4d0b      	ldr	r5, [pc, #44]	; (8044e18 <__libc_init_array+0x40>)
 8044dea:	4c0c      	ldr	r4, [pc, #48]	; (8044e1c <__libc_init_array+0x44>)
 8044dec:	f000 f820 	bl	8044e30 <_init>
 8044df0:	1b64      	subs	r4, r4, r5
 8044df2:	10a4      	asrs	r4, r4, #2
 8044df4:	2600      	movs	r6, #0
 8044df6:	42a6      	cmp	r6, r4
 8044df8:	d105      	bne.n	8044e06 <__libc_init_array+0x2e>
 8044dfa:	bd70      	pop	{r4, r5, r6, pc}
 8044dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8044e00:	4798      	blx	r3
 8044e02:	3601      	adds	r6, #1
 8044e04:	e7ee      	b.n	8044de4 <__libc_init_array+0xc>
 8044e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8044e0a:	4798      	blx	r3
 8044e0c:	3601      	adds	r6, #1
 8044e0e:	e7f2      	b.n	8044df6 <__libc_init_array+0x1e>
 8044e10:	08044e98 	.word	0x08044e98
 8044e14:	08044e98 	.word	0x08044e98
 8044e18:	08044e98 	.word	0x08044e98
 8044e1c:	08044e9c 	.word	0x08044e9c

08044e20 <memset>:
 8044e20:	4402      	add	r2, r0
 8044e22:	4603      	mov	r3, r0
 8044e24:	4293      	cmp	r3, r2
 8044e26:	d100      	bne.n	8044e2a <memset+0xa>
 8044e28:	4770      	bx	lr
 8044e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8044e2e:	e7f9      	b.n	8044e24 <memset+0x4>

08044e30 <_init>:
 8044e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044e32:	bf00      	nop
 8044e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044e36:	bc08      	pop	{r3}
 8044e38:	469e      	mov	lr, r3
 8044e3a:	4770      	bx	lr

08044e3c <_fini>:
 8044e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044e3e:	bf00      	nop
 8044e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044e42:	bc08      	pop	{r3}
 8044e44:	469e      	mov	lr, r3
 8044e46:	4770      	bx	lr
